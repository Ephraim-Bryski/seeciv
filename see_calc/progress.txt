
big black region to the right of the library


create 404 page (have something see_calc.html but not implemented fully)

visual keyword

firebase commands
	change sheet order in folder


make undo and redo work again
	i think i got rid of it cause getting caught in tracking changes got annoying

	<script src="https://kit.fontawesome.com/9e1305c2e0.js" crossorigin="anonymous"></script>

in showing solve stops, evaluating just jumps to the value simplified instead of showing the initial substitution

visuals to create
	hydrualics
		pipes (network)
		open channel
		water waves (probably sine/cnoidal/whatever profile would be built into visual)
		weirs (discharge of different shapes?)
	mechanics
		basically all the stuff from old seeciv 
		mohr's circle <-- could be very useful
		3d stress strain (you could fix things like strain in one direction)
		torsion (and with multiple rods)
		beam moment shear (distributions would be built into the visual)
		bending (honestly not that interesting a visual)
	3bar linkage, already have 
		could do other mechanisms even 3D
	planetary gears, maybe even auto transmission
	statics
		might need vector primitive to be very useful
		could have forces on something balanced out
	geotech/foundations
		soil properties, could have soil layers visual made of cylinders
		soil layers stresses
			would want to have functions, but could use trapezoids
		soil stress over area from loads
			would need color plot (more generally subbing an expresion instead of a value)
		foundations
			issue is a lot of them are piecewise
	
	structural
		section properties

		beam loading??
			again would need function
	
	physics

		springs and forces and stuff (probably not dynamic)

		projectile motion (would just need sphere primitive)

	water treatment

		size of things like the spinny things
	
	numerical analysis??? need to think about that

solve lines shouldn't have arrows
the solve line in a block shouldn't have any effect when referencing it

i honestly might just put a single solve line on the bottom instead
reasons for doing it
	not meaningful to have it in a line, since solve output not used (or shouldn't be used, rn still is), when referencing
	line gets in the way when you're looking at the visual and want to update the values
	i basically only ever do one solve at one point, where the block is just that one solve line
	wouldn't require someone knowing the solve keyword, would be immediately obvious how to solve a system of equations
reasons for not
	work......... not too much though
	more panels --> maybe leads to more confusion??


stuff that would be useful for it
	visual color as another input
	input expressions instead of just values!!!!!!!! allow for plotting curves and surfaces (defined parametrically)
	sliders, or even play <-- would allow for a lot of dynamics stuff to actually make sense
	if statements
		ideally symbolic
	max and min and/or inequalities <-- need to think about this




doesn't show steps if there's an error when solving

stuff to work on before releasing

	solve error should stay open
		not sure if i should keep the arrow to toggle
		may depend on if i have errors for subbing, so will come back to this

		
	get rid of extra parentheses for subbing
		need to think about whether im simplifying when subbing
		probably do NOT want to simply on just eqn input cause i want to remove output for them


	bugs


	accounts/library
		Option to either add blocks to sheet or replace


	solver

		tests with remove vars too?
		i might want to do contradiction checks on individual equations after removing variables with a subtable (been going back and forth on it though D: )
		show more specific error in solve steps?

	UI
		block and/or sheet info

		make sure it looks good for different window sizes!!!!!!!!!!!!!!!!!!!




plotting would be really nice :D



Solver Real stuff

	y=x^2 complexity is taken as 3 since *-1 adds to the complexity --> too much

	haven't handled this: combine_solve_term(eqn_to_tree("a*(a+a*b)+d"),"a")


Efficiency
	could be even faster by only simplifying where it's subbed in for sub_in function
	could save the tree from block to block so it doesn't have to parse repeatedly




Solving Superficial stuff to add/change

	making pi a numeric constant


Future not very important stuff

	slider which dynamically updates visual



	make visuals classes that could inherit from one another

	Draggable blocks


	loading a sheet has to have a callback to update the variable tracker

	
