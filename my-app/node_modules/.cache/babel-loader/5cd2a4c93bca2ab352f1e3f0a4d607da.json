{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\brisk\\\\OneDrive\\\\Documents\\\\GitHub\\\\seeciv\\\\my-app\\\\src\\\\App.js\";\nimport React, { useState } from \"react\";\nimport { addStyles, EditableMathField, StaticMathField } from \"react-mathquill\";\nimport nerdamer from 'nerdamer/nerdamer.core.js';\nimport 'nerdamer/Algebra.js';\nimport 'nerdamer/Calculus.js';\nimport 'nerdamer/Solve.js';\nimport MathQuill from \"react-mathquill\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\naddStyles();\n\nconst TestDiv = /*#__PURE__*/_jsxDEV(StaticMathField, {\n  children: \"\\\\MathQuillMathField{a}\"\n}, void 0, false, {\n  fileName: _jsxFileName,\n  lineNumber: 11,\n  columnNumber: 15\n}, this);\n\nfunction solveEqns(eqnsIn, solveFor, inTermsOf) {\n  /* additioinal stuff:\n  parse equations (check for one equality, operations, and variables and that's it)\n  check if no contradiction in equations\n  check if infinite solutions (a==a shouldn't return 0)\n  check if solveVars are in equations\n  if solveFor is empty, just use solveEquations\n  deal with multiple solutions when substituting (like quadratics)\n    systems([\"x=4*a+b\",\"b=2*a\"],\"b\",[\"a\",\"x\"]) returns \"b=-4*a+x\" (ignores the next equation)\n  instead it should keep on going and throw error if there's ever too few variables\n  */\n  if (solveFor.length == 0) {\n    if (eqnsIn.length == 1) {\n      eqnsIn = eqnsIn[0];\n    } // if single equation, nerdamer requires string, not array\n\n\n    console.log(eqnsIn);\n    var sol = nerdamer.solveEquations(eqnsIn).toString(); // need to have it access all equations instead!\n    // variable name is not included in array if there's only one variable ):\n\n    if (!sol.includes(\",\")) {\n      console.log(nerdamer(eqnsIn));\n      sol = nerdamer(eqnsIn).variables()[0].concat(\",\").concat(sol);\n    }\n\n    var splitSol = sol.split(\",\");\n    console.log(splitSol);\n    var eqnSol = \"\";\n\n    for (let i = 0; i < splitSol.length / 2; i++) {\n      eqnSol = eqnSol.concat(splitSol[2 * i].concat(\"=\").concat(splitSol[2 * i + 1]).concat(\",\"));\n    }\n\n    console.log(eqnSol);\n    return eqnSol;\n  }\n\n  var eqns = [[]];\n\n  for (let i = 0; i < eqnsIn.length; i++) {\n    eqns[0][i] = nerdamer(eqnsIn[i]);\n  } //var solveFor=\"a\" // for now you must specify what to solve in terms of\n  //var inTermsOf=[\"b\"]\n\n\n  var solveVars = [solveFor, inTermsOf].flat(); // function will return the single equation which will then be solved for\n\n  var nEqns = eqns[0].length;\n\n  for (var i = 0; i < nEqns - 1; i++) {\n    var eqn = eqns[i][i];\n    var eqnVars = eqn.variables();\n    var subVars = excess(eqnVars, solveVars);\n\n    if (subVars === undefined) {\n      // this means there's no additional variables in the equation\n      if (excess(solveVars, eqnVars) === undefined) {\n        // solveVars and eqnVars are equivalent\n        console.log('solved early');\n        var solution = eqn;\n        break;\n      } else {\n        console.log('error: too many variables to solve in terms of');\n        var solution = [];\n        break;\n      }\n    }\n\n    var subVar = subVars[0];\n    var solvedEqn = eqn.solveFor(subVar);\n    eqns[i + 1] = [];\n\n    for (var j = 0; j < nEqns - i - 1; j++) {\n      eqns[i + 1][i + 1 + j] = eqns[i][i + 1 + j].sub(subVar, solvedEqn);\n    }\n  }\n\n  if (solution === undefined) {\n    // solution hasn't already been found\n    console.log('solving in the end');\n    var finalEqn = eqns[nEqns - 1][nEqns - 1];\n    var solutionVars = finalEqn.variables();\n\n    if (excess(solveVars, solutionVars) !== undefined) {\n      console.log('error: end too many variables to solve in terms of');\n    } else if (excess(solutionVars, solveVars) !== undefined) {\n      console.log('error: end too few variables to solve in terms of');\n    } else {\n      var solution = finalEqn;\n      console.log('solved in the end');\n    }\n  }\n\n  function excess(A, B) {\n    // if it's one variable, nerdamer doesn't use an array, so this puts it in an array:\n    if (typeof A === \"string\") {\n      A = [A];\n    }\n\n    if (typeof B === \"string\") {\n      B = [B];\n    }\n\n    return A.find(itemTestExtra => B.every(itemCompare => {\n      return itemTestExtra != itemCompare;\n    }));\n  }\n\n  return solveFor.concat(\"=\").concat(solution.solveFor(solveFor).toString());\n}\n\nfunction computeSheet(sheetData) {\n  // do a check for duplicate names\n  // for now system names must be in order ):\n  var newSheetData = sheetData;\n  var hitError = false;\n  var usedNames = [];\n\n  for (let i = 0; i < sheetData.length; i++) {\n    var SoE = sheetData[i];\n    var eqns = SoE.eqns;\n\n    for (let j = 0; j < eqns.length; j++) {\n      var eqn = eqns[j].eqn;\n      console.log(eqn); // check if reference:\n\n      if (!eqn.includes(\"=\")) {\n        // check if a name on sheet:\n        if (!usedNames.includes(eqn)) {\n          var result = \"error: \".concat(eqn).concat(\" has not defined\");\n          var hitError = true;\n        } else if (usedNames.includes(eqn) && eqns[j].operation == \"solve\") {\n          var names = [];\n\n          for (let i = 0; i < sheetData.length; i++) {\n            names.push(sheetData[i].name);\n          }\n\n          var iRef = names.findIndex(name => name == eqn);\n          var system = [];\n\n          for (let i = 0; i < sheetData[iRef].eqns.length; i++) {\n            system.push(sheetData[iRef].eqns[i].result);\n          }\n\n          console.log(system);\n          var result = solveEqns(system, [], []);\n        }\n      } else if (eqns[j].operation == \"solve\") {\n        var result = solveEqns([eqn], [], []);\n      } else {\n        console.log('hi');\n        var result = eqn;\n      }\n\n      newSheetData[i].eqns[j].result = result;\n\n      if (hitError) {\n        return newSheetData;\n      }\n\n      usedNames.push(SoE.name);\n    }\n  }\n\n  return newSheetData;\n}\n\nvar answer = computeSheet([{\n  name: \"SoE 1\",\n  eqns: [{\n    eqn: \"x+y=4\",\n    operation: \"\",\n    solvefor: \"x\",\n    result: \"\" // this would be computed: x=1\n\n  }, {\n    eqn: \"x=y\",\n    operation: \"substitute\",\n    substitutefor: {\n      b: \"x\"\n    },\n    result: \"\" // this would be computed: a+3=x\n\n  }]\n}, {\n  name: \"SoE 2\",\n  eqns: [{\n    eqn: \"SoE 1\",\n    operation: \"solve\",\n    solvefor: \"a\",\n    result: \"cool result!\" // this would be computed: a=x-3=1-3=-2 (not sure how many steps to show)\n\n  }]\n}]);\nconsole.log(answer);\n\nclass Sheet extends React.Component {\n  // constructor has states with sheet info?\n  constructor(props) {\n    super(props);\n    this.state = {\n      SoEs: [{\n        name: \"SoE 1\",\n        eqns: [{\n          eqn: \"x+4=5\",\n          operation: \"\",\n          solvefor: \"\",\n          result: \"\" // this would be computed: x=1\n\n        }, {\n          eqn: \"\",\n          operation: \"\",\n          substitutefor: {\n            b: \"x\"\n          },\n          result: \"\" // this would be computed: a+3=x\n\n        }]\n      }, {\n        name: \"SoE 2\",\n        eqns: [{\n          eqn: \"SoE 1\",\n          operation: \"\",\n          solvefor: \"\",\n          result: \"cool result!\" // this would be computed: a=x-3=1-3=-2 (not sure how many steps to show)\n\n        }]\n      }]\n    };\n  }\n\n  render() {\n    var sheetElements = [];\n\n    for (let i = 0; i < this.state.SoEs.length; i++) {\n      var SoE = this.state.SoEs[i]; //this.SoEs[i].name=newName\n\n      sheetElements.push( /*#__PURE__*/_jsxDEV(Name, {\n        onEdit: newName => {\n          // updating one part of SoEs state (likely better approach):\n          this.state.SoEs[i].name = newName;\n          this.setState({\n            SoEs: [...this.state.SoEs]\n          });\n        },\n        text: SoE\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 270,\n        columnNumber: 29\n      }, this));\n\n      for (let j = 0; j < SoE.eqns.length; j++) {\n        sheetElements.push( /*#__PURE__*/_jsxDEV(Line, {\n          onEdit: (newEqn, newOperation = \"\", newSolveFor = \"\") => {\n            var newEqn = {\n              eqn: newEqn,\n              operation: newOperation,\n              solveFor: newSolveFor\n            };\n            this.state.SoEs[i].eqns[j] = newEqn;\n            this.setState({\n              SoEs: computeSheet(this.state.SoEs)\n            });\n            console.log(this.state.SoEs[i]);\n          },\n          eqnStruct: SoE.eqns[j]\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 288,\n          columnNumber: 32\n        }, this));\n      }\n    }\n\n    return sheetElements;\n  }\n\n}\n\nclass Test extends React.Component {\n  render() {\n    //const a=<MathQuillMathField>{'hi'}</MathQuillMathField>\n    //const a=<EditableMathField latex={\"hi\"}></EditableMathField>\n    var a = [/*#__PURE__*/_jsxDEV(\"div\", {\n      children: \"hi\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 323,\n      columnNumber: 12\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: \"hello\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 323,\n      columnNumber: 26\n    }, this)];\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: a\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 325,\n      columnNumber: 6\n    }, this);\n  }\n\n}\n\nclass Name extends React.Component {\n  render() {\n    //const name=<tr><td></td></tr>\n    const editField = /*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"text\",\n      value: this.props.text.name,\n      onChange: e => {\n        this.props.onEdit(e.target.value);\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 333,\n      columnNumber: 22\n    }, this);\n\n    return /*#__PURE__*/_jsxDEV(\"tr\", {\n      children: /*#__PURE__*/_jsxDEV(\"td\", {\n        children: editField\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 343,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 343,\n      columnNumber: 13\n    }, this);\n  }\n\n}\n\nclass Line extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      input: /*#__PURE__*/_jsxDEV(EditableMathField, {\n        latex: \"\",\n        onChange: mathField => {\n          if (mathField.latex().includes(\"solve\")) {\n            this.addSolve(mathField);\n          }\n\n          try {\n            var text = nerdamer.convertFromLaTeX(mathField.latex()).toString();\n          } catch (e) {\n            // cannot convert from latex if invalid expression (e.g \"a+\")\n            var text = \"InvalidExpression\";\n          }\n\n          this.props.onEdit(text);\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 351,\n        columnNumber: 14\n      }, this)\n    };\n  }\n\n  addSolve(oldMathField) {\n    var text = oldMathField.latex().replace(\"solve\", \"\");\n    this.setState(state => {\n      return {\n        input: [/*#__PURE__*/_jsxDEV(StaticMathField, {\n          children: \"\\\\text{solve }\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 373,\n          columnNumber: 14\n        }, this), /*#__PURE__*/_jsxDEV(EditableMathField, {\n          latex: text,\n          onChange: mathField => {\n            if (mathField.latex().includes(\"for\")) {\n              this.addSolveFor(mathField);\n            }\n\n            this.props.onEdit(mathField.latex(), \"solve\");\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 373,\n          columnNumber: 68\n        }, this)]\n      };\n    });\n  }\n\n  addSolveFor(oldMathField) {\n    // needs work!\n    var text = oldMathField.latex();\n    this.setState(state => {\n      return {\n        input: [/*#__PURE__*/_jsxDEV(StaticMathField, {\n          children: \"\\\\text{solve }\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 386,\n          columnNumber: 14\n        }, this), /*#__PURE__*/_jsxDEV(EditableMathField, {\n          latex: text,\n          onChange: mathField => {\n            if (mathField.latex().includes(\"for\")) {\n              this.addSolveFor(mathField);\n            }\n\n            this.props.onEdit(mathField.latex(), \"solve\");\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 387,\n          columnNumber: 9\n        }, this)]\n      };\n    });\n  }\n\n  render() {\n    const eqnStruct = this.props.eqnStruct;\n    console.log(eqnStruct);\n\n    const line = /*#__PURE__*/_jsxDEV(\"tr\", {\n      children: [/*#__PURE__*/_jsxDEV(\"td\", {\n        children: this.state.input\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 402,\n        columnNumber: 10\n      }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n        children: /*#__PURE__*/_jsxDEV(StaticMathField, {\n          children: \"\\\\text{\".concat(nerdamer.convertToLaTeX(eqnStruct.result)).concat(\"}\")\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 408,\n          columnNumber: 14\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 407,\n        columnNumber: 10\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 401,\n      columnNumber: 17\n    }, this);\n\n    return line;\n  }\n\n}\n\nexport default Sheet;","map":{"version":3,"sources":["C:/Users/brisk/OneDrive/Documents/GitHub/seeciv/my-app/src/App.js"],"names":["React","useState","addStyles","EditableMathField","StaticMathField","nerdamer","MathQuill","TestDiv","solveEqns","eqnsIn","solveFor","inTermsOf","length","console","log","sol","solveEquations","toString","includes","variables","concat","splitSol","split","eqnSol","i","eqns","solveVars","flat","nEqns","eqn","eqnVars","subVars","excess","undefined","solution","subVar","solvedEqn","j","sub","finalEqn","solutionVars","A","B","find","itemTestExtra","every","itemCompare","computeSheet","sheetData","newSheetData","hitError","usedNames","SoE","result","operation","names","push","name","iRef","findIndex","system","answer","solvefor","substitutefor","b","Sheet","Component","constructor","props","state","SoEs","render","sheetElements","newName","setState","newEqn","newOperation","newSolveFor","Test","a","Name","editField","text","e","onEdit","target","value","Line","input","mathField","latex","addSolve","convertFromLaTeX","oldMathField","replace","addSolveFor","eqnStruct","line","convertToLaTeX"],"mappings":"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","sourcesContent":["import React, { useState } from \"react\";\nimport { addStyles, EditableMathField, StaticMathField } from \"react-mathquill\";\nimport nerdamer from 'nerdamer/nerdamer.core.js'\nimport 'nerdamer/Algebra.js'\nimport 'nerdamer/Calculus.js'\nimport 'nerdamer/Solve.js'\nimport MathQuill from \"react-mathquill\";\n\naddStyles();\n\nconst TestDiv=<StaticMathField>{\"\\\\MathQuillMathField{a}\"}</StaticMathField>\n\nfunction solveEqns(eqnsIn,solveFor,inTermsOf){\n  /* additioinal stuff:\n  parse equations (check for one equality, operations, and variables and that's it)\n  check if no contradiction in equations\n  check if infinite solutions (a==a shouldn't return 0)\n  check if solveVars are in equations\n  if solveFor is empty, just use solveEquations\n  deal with multiple solutions when substituting (like quadratics)\n\n\n  systems([\"x=4*a+b\",\"b=2*a\"],\"b\",[\"a\",\"x\"]) returns \"b=-4*a+x\" (ignores the next equation)\n  instead it should keep on going and throw error if there's ever too few variables\n  */\n\n\n  \n  if (solveFor.length==0){\n    if (eqnsIn.length==1){eqnsIn=eqnsIn[0]} // if single equation, nerdamer requires string, not array\n\n    console.log(eqnsIn)\n    var sol=nerdamer.solveEquations(eqnsIn).toString() // need to have it access all equations instead!\n\n    \n\n    // variable name is not included in array if there's only one variable ):\n    if (!sol.includes(\",\")){\n      console.log(nerdamer(eqnsIn))\n      sol=nerdamer(eqnsIn).variables()[0].concat(\",\").concat(sol)\n    }\n   \n    var splitSol=sol.split(\",\")\n    console.log(splitSol)\n    var eqnSol=\"\"\n    for (let i=0;i<splitSol.length/2;i++){\n      eqnSol=eqnSol.concat(splitSol[2*i]\n        .concat(\"=\")\n        .concat(splitSol[2*i+1])\n        .concat(\",\"))\n    }\n    console.log(eqnSol)\n    return eqnSol\n  }\n\n \n  \n  var eqns=[[]]\n  for (let i=0;i<eqnsIn.length;i++){\n      eqns[0][i]=nerdamer(eqnsIn[i])\n  }\n\n  //var solveFor=\"a\" // for now you must specify what to solve in terms of\n  //var inTermsOf=[\"b\"]\n  var solveVars=[solveFor,inTermsOf].flat()\n\n\n  // function will return the single equation which will then be solved for\n  var nEqns=eqns[0].length\n\n\n\n\n\n  for (var i=0;i<nEqns-1;i++){\n      var eqn=eqns[i][i]\n      var eqnVars=eqn.variables()\n\n\n\n\n      var subVars=excess(eqnVars,solveVars)\n      if (subVars===undefined){\n          // this means there's no additional variables in the equation\n          if (excess(solveVars,eqnVars)===undefined){\n              // solveVars and eqnVars are equivalent\n              console.log('solved early')\n              var solution=eqn\n              break\n          }else{\n              console.log('error: too many variables to solve in terms of')\n              var solution=[]\n              break\n          }\n\n      }\n\n      var subVar=subVars[0]\n      var solvedEqn=eqn.solveFor(subVar)\n\n      eqns[i+1]=[]\n      for (var j=0;j<nEqns-i-1;j++){\n          eqns[i+1][i+1+j]=eqns[i][i+1+j].sub(subVar,solvedEqn)\n      } \n  \n  }\n\n  if (solution===undefined){  // solution hasn't already been found\n      console.log('solving in the end')\n      var finalEqn=eqns[nEqns-1][nEqns-1]\n      var solutionVars=finalEqn.variables()\n      if (excess(solveVars,solutionVars)!==undefined){\n          console.log('error: end too many variables to solve in terms of')\n      }else if (excess(solutionVars,solveVars)!==undefined){\n          console.log('error: end too few variables to solve in terms of')\n      }else{\n          var solution=finalEqn\n          console.log('solved in the end')\n      }\n\n  }\n\n  \n\n  function excess(A,B){\n      // if it's one variable, nerdamer doesn't use an array, so this puts it in an array:\n      if (typeof(A)===\"string\"){A=[A]}\n      if (typeof(B)===\"string\"){B=[B]}\n  \n      return A.find(\n          itemTestExtra=>B.every(\n          (itemCompare)=>{return itemTestExtra!=itemCompare}\n          )\n      )\n  }\n\n\n  return solveFor.concat(\"=\").concat(solution.solveFor(solveFor).toString())\n}\n\n\nfunction computeSheet(sheetData){\n  // do a check for duplicate names\n\n  // for now system names must be in order ):\n\n  var newSheetData=sheetData\n  var hitError=false\n  var usedNames=[]\n  for (let i=0;i<sheetData.length;i++){\n    var SoE=sheetData[i]\n    var eqns=SoE.eqns\n    for (let j=0;j<eqns.length;j++){\n      var eqn=eqns[j].eqn\n\n      console.log(eqn)\n      // check if reference:\n      if (!eqn.includes(\"=\")){\n        // check if a name on sheet:\n        if (!usedNames.includes(eqn)){\n            var result=(\"error: \").concat(eqn).concat(\" has not defined\")\n            var hitError=true\n        }else if (usedNames.includes(eqn) && eqns[j].operation==\"solve\"){\n\n            var names=[]\n            for (let i=0;i<sheetData.length;i++){names.push(sheetData[i].name)}\n            var iRef=names.findIndex((name)=>name==eqn)\n\n            var system=[]\n            for (let i=0;i<sheetData[iRef].eqns.length;i++){system.push(sheetData[iRef].eqns[i].result)}\n            console.log(system)\n            var result=solveEqns(system,[],[])\n\n        }\n      }else if(eqns[j].operation==\"solve\"){\n        var result=solveEqns([eqn],[],[])\n      }else{\n        console.log('hi')\n        var result=eqn\n      }\n      newSheetData[i].eqns[j].result=result\n      if (hitError){\n        return newSheetData\n      }\n      usedNames.push(SoE.name)\n    }\n  }\n\n  return newSheetData\n}\n\nvar answer=computeSheet([\n  {\n      name:\"SoE 1\",\n      eqns: [\n          {\n              eqn:\"x+y=4\",\n              operation: \"\",\n              solvefor: \"x\",\n              result:\"\", // this would be computed: x=1\n          },\n          {\n              eqn:\"x=y\",\n              operation: \"substitute\",\n              substitutefor: {b: \"x\"},\n              result: \"\" // this would be computed: a+3=x\n          }\n      ]\n  },\n  {\n      name:\"SoE 2\",\n      eqns: [\n          {\n              eqn:\"SoE 1\",\n              operation: \"solve\",\n              solvefor: \"a\",\n              result: \"cool result!\", // this would be computed: a=x-3=1-3=-2 (not sure how many steps to show)\n          },\n      ]\n  }\n])\n\nconsole.log(answer)\n\nclass Sheet extends React.Component {\n  // constructor has states with sheet info?\n constructor(props){\n     super(props)\n     this.state= {\n         SoEs:[\n         {\n             name:\"SoE 1\",\n             eqns: [\n                 {\n                     eqn:\"x+4=5\",\n                     operation: \"\",\n                     solvefor: \"\",\n                     result:\"\", // this would be computed: x=1\n                 },\n                 {\n                     eqn:\"\",\n                     operation: \"\",\n                     substitutefor: {b: \"x\"},\n                     result: \"\" // this would be computed: a+3=x\n                 }\n             ]\n         },\n         {\n             name:\"SoE 2\",\n             eqns: [\n                 {\n                     eqn:\"SoE 1\",\n                     operation: \"\",\n                     solvefor: \"\",\n                     result: \"cool result!\", // this would be computed: a=x-3=1-3=-2 (not sure how many steps to show)\n                 },\n             ]\n         }\n     ]\n     }\n }\n\n\n render(){\n     var sheetElements=[]\n     for (let i=0;i<this.state.SoEs.length;i++){\n         var SoE=this.state.SoEs[i]\n         //this.SoEs[i].name=newName\n\n         sheetElements.push(<Name \n         \n             onEdit={(newName)=>\n                 {\n                    // updating one part of SoEs state (likely better approach):\n                    this.state.SoEs[i].name=newName\n\n\n                    this.setState({SoEs:[...this.state.SoEs]})\n                    \n                 }\n             } \n             text={SoE}\n         />)\n\n         \n\n         for (let j=0;j<SoE.eqns.length;j++){\n            sheetElements.push(<Line \n              onEdit={(newEqn,newOperation=\"\",newSolveFor=\"\")=>\n                {\n\n                  var newEqn={\n                    eqn: newEqn,\n                    operation: newOperation,\n                    solveFor: newSolveFor\n                  }\n\n                  this.state.SoEs[i].eqns[j]=newEqn\n\n                  this.setState({\n                    SoEs: computeSheet(this.state.SoEs)\n                  })\n\n                  console.log(this.state.SoEs[i])\n                }\n              }\n              eqnStruct={SoE.eqns[j]}\n              \n            />)\n         }\n     }\n     return(\n      sheetElements\n     )\n \n }\n}\n\nclass Test extends React.Component {\n  render(){\n    //const a=<MathQuillMathField>{'hi'}</MathQuillMathField>\n    //const a=<EditableMathField latex={\"hi\"}></EditableMathField>\n    var a=[<div>hi</div>,<div>hello</div>]\n   return(\n     <div>{a}</div>\n   )\n  }\n}\n\nclass Name extends React.Component {\n render(){\n     //const name=<tr><td></td></tr>\n     const editField=<input \n         type=\"text\" \n         value={this.props.text.name} \n         onChange={(e)=>{this.props.onEdit(e.target.value)\n         }\n         \n     }\n     >\n     </input>\n\n     return <tr><td>{editField}</td></tr>\n } \n}\n\nclass Line extends React.Component {\n  constructor(props){\n    super(props)\n    this.state={\n      input: <EditableMathField \n        latex=\"\"  \n        onChange={(mathField)=>{\n          if (mathField.latex().includes(\"solve\")){this.addSolve(mathField)}\n\n          try{\n            var text=nerdamer.convertFromLaTeX(mathField.latex()).toString()\n          }catch(e){  // cannot convert from latex if invalid expression (e.g \"a+\")\n            var text=\"InvalidExpression\"\n          }\n\n          this.props.onEdit(text)\n          }       \n        }\n      />\n    }\n\n  }\n\n  addSolve(oldMathField){\n    var text=oldMathField.latex().replace(\"solve\",\"\")\n    this.setState((state)=>{return{\n      input:[<StaticMathField>{\"\\\\text{solve }\"}</StaticMathField>,<EditableMathField\n        latex={text}\n        onChange={(mathField)=>{\n          if (mathField.latex().includes(\"for\")){this.addSolveFor(mathField)}\n          this.props.onEdit(mathField.latex(),\"solve\")}}\n        />]\n    }})\n  }\n\n  addSolveFor(oldMathField){\n    // needs work!\n    var text=oldMathField.latex()\n    this.setState((state)=>{return{\n      input:[<StaticMathField>{\"\\\\text{solve }\"}</StaticMathField>,\n        <EditableMathField\n        latex={text}\n        onChange={(mathField)=>{\n          if (mathField.latex().includes(\"for\")){this.addSolveFor(mathField)}\n          this.props.onEdit(mathField.latex(),\"solve\")}}\n        />]\n    }})\n  }\n\n\n\n  render() {\n     const eqnStruct=this.props.eqnStruct\n     console.log(eqnStruct)\n     const line=<tr> \n         <td>\n         \n            {this.state.input}\n\n         </td>\n         <td>\n             <StaticMathField>{\"\\\\text{\".concat(nerdamer.convertToLaTeX(eqnStruct.result)).concat(\"}\")}</StaticMathField>\n         </td>\n     </tr>\n\n\n      return line\n }\n}\n\nexport default Sheet\n\n"]},"metadata":{},"sourceType":"module"}