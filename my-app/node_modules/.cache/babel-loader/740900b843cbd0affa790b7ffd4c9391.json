{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\brisk\\\\OneDrive\\\\Documents\\\\GitHub\\\\seeciv\\\\my-app\\\\src\\\\App.js\";\nimport React, { useState } from \"react\";\nimport { addStyles, EditableMathField, StaticMathField } from \"react-mathquill\";\nimport nerdamer from 'nerdamer/nerdamer.core.js';\nimport 'nerdamer/Algebra.js';\nimport 'nerdamer/Calculus.js';\nimport 'nerdamer/Solve.js';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\naddStyles();\n\nfunction splitSolveFor(text) {\n  console.log('hi');\n  var splitEnd = text.split(\")\");\n\n  if (splitEnd.length === 2) {\n    var main = splitEnd[0];\n    var end = splitEnd[1];\n  }\n\n  var splitMain = main.split(\"(\");\n\n  if (splitMain.length === 2) {\n    var solveFor = splitMain[0];\n    var inTermsOfText = splitMain[1];\n  }\n\n  var inTermsOf = inTermsOfText.split(\",\");\n  console.log(inTermsOf);\n  return [solveFor, inTermsOf];\n}\n\nfunction solveEqns(eqnsIn, solveFor, inTermsOf) {\n  console.log(eqnsIn);\n  console.log(solveFor);\n  /* additional stuff:\n  parse equations (check for one equality, operations, and variables and that's it)\n  check if no contradiction in equations\n  check if infinite solutions (a==a shouldn't return 0)\n  check if solveVars are in equations\n  if solveFor is empty, just use solveEquations\n  deal with multiple solutions when substituting (like quadratics)\n    systems([\"x=4*a+b\",\"b=2*a\"],\"b\",[\"a\",\"x\"]) returns \"b=-4*a+x\" (ignores the next equation)\n  instead it should keep on going and throw error if there's ever too few variables\n  */\n\n  if (solveFor.length === 0) {\n    if (eqnsIn.length === 1) {\n      eqnsIn = eqnsIn[0];\n    } // if single equation, nerdamer requires string, not array\n\n\n    try {\n      var sol = nerdamer.solveEquations(eqnsIn).toString(); // need to have it access all equations instead!\n\n      if (sol === \"\") {\n        return \"Blank Line (or it cant solve)\";\n      }\n    } catch {\n      return \"Cannot Solve\";\n    } // variable name is not included in array if there's only one variable ):\n\n\n    if (!sol.includes(\",\")) {\n      sol = nerdamer(eqnsIn).variables()[0].concat(\",\").concat(sol);\n    }\n\n    var splitSol = sol.split(\",\");\n    var eqnSol = [];\n\n    for (let i = 0; i < splitSol.length / 2; i++) {\n      eqnSol.push(splitSol[2 * i].concat(\"=\").concat(splitSol[2 * i + 1]));\n    }\n\n    return eqnSol;\n  }\n\n  var eqns = [[]];\n\n  for (let i = 0; i < eqnsIn.length; i++) {\n    eqns[0][i] = nerdamer(eqnsIn[i]);\n  } //var solveFor=\"a\" // for now you must specify what to solve in terms of\n  //var inTermsOf=[\"b\"]\n\n\n  var solveVars = [solveFor, inTermsOf].flat(); // function will return the single equation which will then be solved for\n\n  var nEqns = eqns[0].length;\n\n  for (var i = 0; i < nEqns - 1; i++) {\n    var eqn = eqns[i][i];\n    var eqnVars = eqn.variables();\n    var solution;\n    var subVars = excess(eqnVars, solveVars);\n\n    if (subVars === undefined) {\n      // this means there's no additional variables in the equation\n      if (excess(solveVars, eqnVars) === undefined) {\n        // solveVars and eqnVars are equivalent\n        solution = eqn;\n        break;\n      } else {\n        return 'error: too many variables to solve in terms of';\n        break;\n      }\n    }\n\n    var subVar = subVars[0];\n    var solvedEqn = eqn.solveFor(subVar);\n    eqns[i + 1] = [];\n\n    for (var j = 0; j < nEqns - i - 1; j++) {\n      eqns[i + 1][i + 1 + j] = eqns[i][i + 1 + j].sub(subVar, solvedEqn);\n    }\n  }\n\n  if (solution === undefined) {\n    // solution hasn't already been found OR only one eqn\n    var finalEqn = eqns[nEqns - 1][nEqns - 1];\n    var solutionVars = finalEqn.variables();\n\n    if (excess(solveVars, solutionVars) !== undefined) {\n      return 'error: end too many variables to solve in terms of';\n    } else if (excess(solutionVars, solveVars) !== undefined) {\n      return 'error: end too few variables to solve in terms of';\n    } else {\n      solution = finalEqn;\n    }\n  }\n\n  function excess(A, B) {\n    // if it's one variable, nerdamer doesn't use an array, so this puts it in an array:\n    if (typeof A === \"string\") {\n      A = [A];\n    }\n\n    if (typeof B === \"string\") {\n      B = [B];\n    }\n\n    return A.find(itemTestExtra => B.every(itemCompare => {\n      return itemTestExtra !== itemCompare;\n    }));\n  }\n\n  return solveFor.concat(\"=\").concat(solution.solveFor(solveFor).toString());\n}\n\nfunction computeSheet(sheetData) {\n  // do a check for duplicate names\n  // for now system names must be in order ):\n  var newSheetData = sheetData; // clear all of the previous results:\n\n  for (let i = 0; i < sheetData.length; i++) {\n    var system = sheetData[i];\n\n    for (let j = 0; j < system.eqns.length; j++) {\n      newSheetData[i].eqns[j].result = \"\";\n    }\n  }\n\n  var hitError = false;\n  var usedNames = [];\n\n  for (let i = 0; i < sheetData.length; i++) {\n    var SoE = sheetData[i];\n    var eqns = SoE.eqns;\n\n    for (let j = 0; j < eqns.length; j++) {\n      try {\n        var eqn = nerdamer.convertFromLaTeX(eqns[j].eqn).toString();\n      } catch {\n        var eqn = \"NOPE\";\n      }\n\n      var result;\n\n      if (eqn === \"\") {\n        continue;\n      }\n\n      var solveFor;\n      var inTermsOf;\n\n      if (eqns[j].solveText === null) {\n        var solveText = \"\";\n      } else {\n        var solveText = eqns[j].solveText;\n      }\n\n      var [solveFor, inTermsOf] = splitSolveFor(solveText); // check if reference:\n\n      if (!eqn.includes(\"=\")) {\n        // check if a name on sheet:\n        if (!usedNames.includes(eqn)) {\n          result = \"TEXTerror: \".concat(eqn).concat(\" has not been defined\");\n          hitError = true;\n        } else if (usedNames.includes(eqn)) {\n          var names = [];\n\n          for (let i = 0; i < sheetData.length; i++) {\n            names.push(sheetData[i].name);\n          }\n\n          var iRef = names.findIndex(name => name === eqn);\n          var system = [];\n\n          for (let i = 0; i < sheetData[iRef].eqns.length; i++) {\n            system.push(sheetData[iRef].eqns[i].result);\n          }\n\n          if (eqns[j].operation === \"solve\") {\n            console.log(eqns[j].solveFor);\n            result = solveEqns(system, solveFor, inTermsOf);\n          } else {\n            result = system;\n          }\n        }\n      } else if (eqns[j].operation === \"solve\") {\n        result = solveEqns([eqn], solveFor, inTermsOf);\n      } else {\n        result = eqn;\n      }\n\n      newSheetData[i].eqns[j].result = result;\n\n      if (hitError) {\n        return newSheetData;\n      }\n\n      usedNames.push(SoE.name);\n    }\n  }\n\n  return newSheetData;\n}\n\nclass Sheet extends React.Component {\n  // constructor has states with sheet info?\n  constructor(props) {\n    super(props);\n    this.state = {\n      SoEs: [{\n        name: \"s\",\n        eqns: [{\n          eqn: \"\",\n          operation: \"\",\n          solveText: null,\n          result: \"\" // this would be computed: x=1\n\n        }, {\n          eqn: \"\",\n          operation: \"\",\n          solveText: null,\n          substitutefor: \"\",\n          result: \"\" // this would be computed: a+3=x\n\n        }]\n      }, {\n        name: \"SoE 2\",\n        eqns: [{\n          eqn: \"\",\n          operation: \"\",\n          solveText: null,\n          result: \"cool result!\" // this would be computed: a=x-3=1-3=-2 (not sure how many steps to show)\n\n        }]\n      }]\n    };\n  }\n\n  render() {\n    var sheetElements = [];\n\n    for (let i = 0; i < this.state.SoEs.length; i++) {\n      var SoE = this.state.SoEs[i]; //this.SoEs[i].name=newName\n\n      sheetElements.push( /*#__PURE__*/_jsxDEV(Name, {\n        onEdit: newName => {\n          // should just appl\n          this.state.SoEs[i].name = newName;\n          this.setState({\n            SoEs: computeSheet(this.state.SoEs)\n          });\n        },\n        text: SoE\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 292,\n        columnNumber: 29\n      }, this));\n\n      for (let j = 0; j < SoE.eqns.length; j++) {\n        sheetElements.push( /*#__PURE__*/_jsxDEV(Line, {\n          onEdit: newEqn => {\n            this.state.SoEs[i].eqns[j] = newEqn;\n            this.setState({\n              SoEs: computeSheet(this.state.SoEs)\n            });\n          },\n          addLine: () => {\n            var blankLine = {\n              eqn: \"\",\n              operation: \"\",\n              solveText: null,\n              result: \"\"\n            };\n            this.state.SoEs[i].eqns.splice(j + 1, 0, blankLine);\n            this.setState({\n              SoEs: this.state.SoEs\n            });\n          },\n          removeLine: () => {\n            var blankLine = {\n              eqn: \"\",\n              result: \"\"\n            };\n            this.state.SoEs[i].eqns.splice(j, 1);\n            this.setState({\n              SoEs: this.state.SoEs\n            });\n          },\n          eqnData: SoE.eqns[j]\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 310,\n          columnNumber: 32\n        }, this));\n      }\n    }\n\n    console.log(this.state.SoEs);\n    return sheetElements;\n  }\n\n}\n\nclass Name extends React.Component {\n  render() {\n    //const name=<tr><td></td></tr>\n    const editField = /*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"text\",\n      value: this.props.text.name,\n      onChange: e => {\n        this.props.onEdit(e.target.value);\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 353,\n      columnNumber: 22\n    }, this);\n\n    return /*#__PURE__*/_jsxDEV(\"tr\", {\n      children: /*#__PURE__*/_jsxDEV(\"td\", {\n        children: editField\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 363,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 363,\n      columnNumber: 13\n    }, this);\n  }\n\n}\n\nclass Line extends React.Component {\n  constructor(props) {\n    super(props);\n  }\n\n  breakUp(newText) {\n    var newEqnData = this.props.eqnData;\n    newEqnData.eqn = newText;\n\n    if (newText.includes(\"solve\")) {\n      newEqnData.operation = \"solve\";\n      newEqnData.eqn = newText.replace(\"solve\", \"\");\n    }\n\n    if (newText.includes(\"for\")) {\n      newEqnData.eqn = newText.replace(\"for\", \"\");\n      newEqnData.solveText = \"\";\n    }\n\n    return newEqnData;\n  }\n\n  render() {\n    var eqnData = this.props.eqnData;\n\n    if (eqnData.result.includes(\"TEXT\")) {\n      var resultDisplay = \"\\\\text{\".concat(eqnData.result.replace(\"TEXT\", \"\")).concat(\"}\");\n    } else {\n      if (typeof eqnData.result === \"string\") {\n        eqnData.result = [eqnData.result];\n      }\n\n      var resultDisplay = [];\n\n      for (let i = 0; i < eqnData.result.length; i++) {\n        resultDisplay.push( /*#__PURE__*/_jsxDEV(StaticMathField, {\n          children: nerdamer.convertToLaTeX(eqnData.result[i])\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 406,\n          columnNumber: 11\n        }, this));\n        resultDisplay.push( /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 410,\n          columnNumber: 29\n        }, this));\n      }\n    }\n\n    var inputField = [];\n\n    var eqnField = /*#__PURE__*/_jsxDEV(EditableMathField, {\n      latex: this.props.eqnData.eqn,\n      onChange: newField => {\n        this.props.onEdit(this.breakUp(newField.latex()));\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 419,\n      columnNumber: 18\n    }, this);\n\n    var solveForField = /*#__PURE__*/_jsxDEV(EditableMathField, {\n      latex: this.props.eqnData.solveText,\n      onChange: newField => {\n        var newEqnData = this.props.eqnData;\n        newEqnData.solveText = newField.latex();\n        this.props.onEdit(newEqnData);\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 424,\n      columnNumber: 23\n    }, this);\n\n    if (this.props.eqnData.operation === \"solve\") {\n      inputField.push( /*#__PURE__*/_jsxDEV(StaticMathField, {\n        children: \"\\\\text{solve }\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 437,\n        columnNumber: 23\n      }, this));\n    }\n\n    inputField.push(eqnField);\n\n    if (!(this.props.eqnData.solveText === null)) {\n      inputField.push( /*#__PURE__*/_jsxDEV(StaticMathField, {\n        children: \"\\\\text{for }\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 441,\n        columnNumber: 23\n      }, this));\n      inputField.push(solveForField);\n    }\n\n    const line = /*#__PURE__*/_jsxDEV(\"tr\", {\n      children: [/*#__PURE__*/_jsxDEV(\"td\", {\n        children: [/*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: () => {\n            this.props.addLine();\n          },\n          children: \"+\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 451,\n          columnNumber: 12\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: () => {\n            this.props.removeLine();\n          },\n          children: \"-\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 454,\n          columnNumber: 14\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 450,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n        children: inputField\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 458,\n        columnNumber: 10\n      }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n        children: resultDisplay\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 461,\n        columnNumber: 10\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 449,\n      columnNumber: 17\n    }, this);\n\n    return line;\n  }\n\n}\n\nexport default Sheet;","map":{"version":3,"sources":["C:/Users/brisk/OneDrive/Documents/GitHub/seeciv/my-app/src/App.js"],"names":["React","useState","addStyles","EditableMathField","StaticMathField","nerdamer","splitSolveFor","text","console","log","splitEnd","split","length","main","end","splitMain","solveFor","inTermsOfText","inTermsOf","solveEqns","eqnsIn","sol","solveEquations","toString","includes","variables","concat","splitSol","eqnSol","i","push","eqns","solveVars","flat","nEqns","eqn","eqnVars","solution","subVars","excess","undefined","subVar","solvedEqn","j","sub","finalEqn","solutionVars","A","B","find","itemTestExtra","every","itemCompare","computeSheet","sheetData","newSheetData","system","result","hitError","usedNames","SoE","convertFromLaTeX","solveText","names","name","iRef","findIndex","operation","Sheet","Component","constructor","props","state","SoEs","substitutefor","render","sheetElements","newName","setState","newEqn","blankLine","splice","Name","editField","e","onEdit","target","value","Line","breakUp","newText","newEqnData","eqnData","replace","resultDisplay","convertToLaTeX","inputField","eqnField","newField","latex","solveForField","line","addLine","removeLine"],"mappings":"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","sourcesContent":["import React, { useState } from \"react\";\nimport { addStyles, EditableMathField, StaticMathField } from \"react-mathquill\";\nimport nerdamer from 'nerdamer/nerdamer.core.js'\nimport 'nerdamer/Algebra.js'\nimport 'nerdamer/Calculus.js'\nimport 'nerdamer/Solve.js'\n\naddStyles();\n\nfunction splitSolveFor(text){\n  console.log('hi')\n  var splitEnd=text.split(\")\")\n\n  if(splitEnd.length===2){\n    var main=splitEnd[0]\n    var end=splitEnd[1]\n  }\n\n  \n  var splitMain=main.split(\"(\")\n  \n if(splitMain.length===2){\n    var solveFor=splitMain[0]\n    var inTermsOfText=splitMain[1]\n  }\n  \n  var inTermsOf=inTermsOfText.split(\",\")\n  console.log(inTermsOf)\n\n  return [solveFor,inTermsOf]\n}\n\n\n\nfunction solveEqns(eqnsIn,solveFor,inTermsOf){\n  console.log(eqnsIn)\n  console.log(solveFor)\n  \n  /* additional stuff:\n  parse equations (check for one equality, operations, and variables and that's it)\n  check if no contradiction in equations\n  check if infinite solutions (a==a shouldn't return 0)\n  check if solveVars are in equations\n  if solveFor is empty, just use solveEquations\n  deal with multiple solutions when substituting (like quadratics)\n\n\n  systems([\"x=4*a+b\",\"b=2*a\"],\"b\",[\"a\",\"x\"]) returns \"b=-4*a+x\" (ignores the next equation)\n  instead it should keep on going and throw error if there's ever too few variables\n  */\n\n\n  \n  if (solveFor.length===0){\n    if (eqnsIn.length===1){eqnsIn=eqnsIn[0]} // if single equation, nerdamer requires string, not array\n\n    try {\n      var sol=nerdamer.solveEquations(eqnsIn).toString() // need to have it access all equations instead!\n      if (sol===\"\"){\n        return \"Blank Line (or it cant solve)\"\n      }\n    } catch {\n      return \"Cannot Solve\"\n    }\n    \n\n    \n\n    // variable name is not included in array if there's only one variable ):\n    if (!sol.includes(\",\")){\n      sol=nerdamer(eqnsIn).variables()[0].concat(\",\").concat(sol)\n    }\n   \n    var splitSol=sol.split(\",\")\n    var eqnSol=[]\n    for (let i=0;i<splitSol.length/2;i++){\n      eqnSol.push(\n        splitSol[2*i]\n        .concat(\"=\")\n        .concat(splitSol[2*i+1])\n      )\n\n\n    }\n    return eqnSol\n  }\n\n \n  \n  var eqns=[[]]\n  for (let i=0;i<eqnsIn.length;i++){\n      eqns[0][i]=nerdamer(eqnsIn[i])\n  }\n\n  //var solveFor=\"a\" // for now you must specify what to solve in terms of\n  //var inTermsOf=[\"b\"]\n  var solveVars=[solveFor,inTermsOf].flat()\n\n\n  // function will return the single equation which will then be solved for\n  var nEqns=eqns[0].length\n\n\n  for (var i=0;i<nEqns-1;i++){\n    var eqn=eqns[i][i]\n    var eqnVars=eqn.variables()\n\n    var solution\n\n\n    var subVars=excess(eqnVars,solveVars)\n    if (subVars===undefined){\n        // this means there's no additional variables in the equation\n        if (excess(solveVars,eqnVars)===undefined){\n          // solveVars and eqnVars are equivalent\n          solution=eqn\n          break\n        }else{\n          return 'error: too many variables to solve in terms of'\n          break\n        }\n\n    }\n\n    var subVar=subVars[0]\n    var solvedEqn=eqn.solveFor(subVar)\n\n    eqns[i+1]=[]\n    for (var j=0;j<nEqns-i-1;j++){\n        eqns[i+1][i+1+j]=eqns[i][i+1+j].sub(subVar,solvedEqn)\n    } \n  \n  }\n\n  if (solution===undefined){  // solution hasn't already been found OR only one eqn\n    var finalEqn=eqns[nEqns-1][nEqns-1]\n    var solutionVars=finalEqn.variables()\n    if (excess(solveVars,solutionVars)!==undefined){\n      return 'error: end too many variables to solve in terms of'\n    }else if (excess(solutionVars,solveVars)!==undefined){\n      return 'error: end too few variables to solve in terms of'\n    }else{\n      solution=finalEqn\n    }\n  }\n\n  \n\n  function excess(A,B){\n      // if it's one variable, nerdamer doesn't use an array, so this puts it in an array:\n      if (typeof(A)===\"string\"){A=[A]}\n      if (typeof(B)===\"string\"){B=[B]}\n  \n      return A.find(\n          itemTestExtra=>B.every(\n          (itemCompare)=>{return itemTestExtra!==itemCompare}\n          )\n      )\n  }\n\n\n  return solveFor.concat(\"=\").concat(solution.solveFor(solveFor).toString())\n}\n\n\n\nfunction computeSheet(sheetData){\n\n  // do a check for duplicate names\n\n  // for now system names must be in order ):\n\n  var newSheetData=sheetData\n\n  // clear all of the previous results:\n  for (let i=0;i<sheetData.length;i++){\n    var system=sheetData[i]\n    for (let j=0;j<system.eqns.length;j++){\n      newSheetData[i].eqns[j].result=\"\"  \n    }\n  }\n  \n  var hitError=false\n  var usedNames=[]\n  for (let i=0;i<sheetData.length;i++){\n    var SoE=sheetData[i]\n    var eqns=SoE.eqns\n    for (let j=0;j<eqns.length;j++){\n      try {\n        var eqn=nerdamer.convertFromLaTeX(eqns[j].eqn).toString()\n      } catch  {\n        var eqn=\"NOPE\"\n      }\n      \n      var result\n\n      if(eqn===\"\"){\n        continue\n      }\n\n      var solveFor\n      var inTermsOf\n      if (eqns[j].solveText===null){var solveText=\"\"}\n      else {var solveText=eqns[j].solveText}\n      var [solveFor,inTermsOf]=splitSolveFor(solveText)\n\n      // check if reference:\n      if (!eqn.includes(\"=\")){\n        // check if a name on sheet:\n        if (!usedNames.includes(eqn)){\n            result=(\"TEXTerror: \").concat(eqn).concat(\" has not been defined\")\n            hitError=true\n        }else if (usedNames.includes(eqn)){\n\n          var names=[]\n          for (let i=0;i<sheetData.length;i++){names.push(sheetData[i].name)}\n          var iRef=names.findIndex((name)=>name===eqn)\n\n          var system=[]\n          for (let i=0;i<sheetData[iRef].eqns.length;i++){system.push(sheetData[iRef].eqns[i].result)}\n          if (eqns[j].operation===\"solve\"){\n            console.log(eqns[j].solveFor)\n            result=solveEqns(system,solveFor,inTermsOf)\n          }else{\n            result=system\n          }\n        }\n      }else if(eqns[j].operation===\"solve\"){\n        result=solveEqns([eqn],solveFor,inTermsOf)\n      }else{\n        result=eqn\n      }\n      newSheetData[i].eqns[j].result=result\n      if (hitError){\n        return newSheetData\n      }\n      usedNames.push(SoE.name)\n    }\n  }\n\n  return newSheetData\n}\n\n\nclass Sheet extends React.Component {\n  // constructor has states with sheet info?\n  constructor(props){\n    super(props)\n\n    this.state= {\n        SoEs:[\n         {\n             name:\"s\",\n             eqns: [\n                 {\n                     eqn:\"\",\n                     operation: \"\",\n                     solveText: null,\n                     result:\"\", // this would be computed: x=1\n                 },\n                 {\n                     eqn:\"\",\n                     operation: \"\",\n                     solveText: null,\n                     substitutefor: \"\",\n                     result: \"\" // this would be computed: a+3=x\n                 }\n             ]\n         },\n         {\n             name:\"SoE 2\",\n             eqns: [\n                 {\n                     eqn:\"\",\n                     operation: \"\",\n                     solveText: null,\n                     result: \"cool result!\", // this would be computed: a=x-3=1-3=-2 (not sure how many steps to show)\n                 },\n             ]\n         }\n     ]\n    }\n  }\n\n\n  render(){\n     var sheetElements=[]\n     for (let i=0;i<this.state.SoEs.length;i++){\n         var SoE=this.state.SoEs[i]\n         //this.SoEs[i].name=newName\n\n         sheetElements.push(<Name \n         \n             onEdit={(newName)=>\n                 {\n                    // should just appl\n                    this.state.SoEs[i].name=newName\n\n\n                    this.setState({SoEs: computeSheet(this.state.SoEs)})\n                    \n                 }\n             } \n             text={SoE}\n         />)\n\n        \n\n         for (let j=0;j<SoE.eqns.length;j++){\n            sheetElements.push(<Line \n              onEdit={\n                (newEqn)=>\n                {this.state.SoEs[i].eqns[j]=newEqn\n                  this.setState({SoEs: computeSheet(this.state.SoEs)})\n                }\n              }\n              addLine={()=>\n                {\n                  var blankLine={eqn:\"\",operation:\"\",solveText: null,result:\"\"}\n                  this.state.SoEs[i].eqns.splice(j+1, 0, blankLine)\n\n                  this.setState({SoEs: this.state.SoEs})\n                }\n              }\n              removeLine={()=>\n                {\n                  var blankLine={eqn:\"\",result:\"\"}\n                  this.state.SoEs[i].eqns.splice(j, 1)\n\n                  this.setState({SoEs: this.state.SoEs})\n                }\n              }\n              \n              \n              \n               \n              eqnData={SoE.eqns[j]}             \n            />)\n         }\n     }\n     console.log(this.state.SoEs)\n     return(\n      sheetElements\n     )\n \n  }\n}\n\n\nclass Name extends React.Component {\n render(){\n     //const name=<tr><td></td></tr>\n     const editField=<input \n         type=\"text\" \n         value={this.props.text.name} \n         onChange={(e)=>{this.props.onEdit(e.target.value)\n         }\n         \n     }\n     >\n     </input>\n\n     return <tr><td>{editField}</td></tr>\n } \n}\n\nclass Line extends React.Component {\n  constructor(props){\n    super(props)\n    \n  }\n\n  breakUp(newText){\n    var newEqnData=this.props.eqnData\n    newEqnData.eqn=newText\n    if(newText.includes(\"solve\")){\n      newEqnData.operation=\"solve\"\n      newEqnData.eqn=newText.replace(\"solve\",\"\")  \n    }\n    if(newText.includes(\"for\")){\n      newEqnData.eqn=newText.replace(\"for\",\"\")\n      newEqnData.solveText=\"\"\n    }\n\n\n    return newEqnData\n  }\n\n  render() {\n\n\n    var eqnData=this.props.eqnData\n\n     if (eqnData.result.includes(\"TEXT\")){\n       var resultDisplay=\"\\\\text{\".concat(eqnData.result.replace(\"TEXT\",\"\")).concat(\"}\")\n     }else{\n\n       if (typeof eqnData.result===\"string\"){\n         eqnData.result=[eqnData.result]\n       }\n       var resultDisplay=[]\n\n       for (let i=0;i<eqnData.result.length;i++){\n         \n         resultDisplay.push(\n          <StaticMathField>\n            {nerdamer.convertToLaTeX(eqnData.result[i])}\n          </StaticMathField>,\n         )\n         resultDisplay.push(<br/>)\n       }\n\n     }\n\n\n    var inputField=[]\n    \n\n    var eqnField=<EditableMathField\n      latex={this.props.eqnData.eqn}\n      onChange={(newField)=>{this.props.onEdit(this.breakUp(newField.latex()))}}\n    />\n\n    var solveForField=<EditableMathField\n      latex={this.props.eqnData.solveText}\n      onChange={(newField)=>{\n        var newEqnData=this.props.eqnData\n        newEqnData.solveText=newField.latex()\n        this.props.onEdit(newEqnData)\n      }}\n    />\n\n\n\n\n    if (this.props.eqnData.operation===\"solve\"){\n      inputField.push(<StaticMathField>{\"\\\\text{solve }\"}</StaticMathField>)\n    }\n    inputField.push(eqnField)\n    if (!(this.props.eqnData.solveText===null)){\n      inputField.push(<StaticMathField>{\"\\\\text{for }\"}</StaticMathField>)\n      inputField.push(solveForField)\n    }\n    \n\n\n\n\n     const line=<tr> \n        <td>\n           <button onClick={\n              ()=>{this.props.addLine()}\n             }>+</button>\n             <button onClick={\n               ()=>{this.props.removeLine()}\n             }>-</button>\n         </td>\n         <td>\n         {inputField}\n         </td>\n         <td>\n            {resultDisplay}\n         </td>\n         \n     </tr>\n\n\n      return line\n }\n}\n\nexport default Sheet\n\n"]},"metadata":{},"sourceType":"module"}