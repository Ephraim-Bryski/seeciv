{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\brisk\\\\OneDrive\\\\Documents\\\\GitHub\\\\seeciv\\\\my-app\\\\src\\\\App.js\";\nimport React, { useState } from \"react\";\nimport { addStyles, EditableMathField, StaticMathField } from \"react-mathquill\";\nimport nerdamer from 'nerdamer/nerdamer.core.js';\nimport 'nerdamer/Algebra.js';\nimport 'nerdamer/Calculus.js';\nimport 'nerdamer/Solve.js';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\naddStyles();\n\nfunction solveEqns(eqnsIn, solveFor, inTermsOf) {\n  /* additioinal stuff:\n  parse equations (check for one equality, operations, and variables and that's it)\n  check if no contradiction in equations\n  check if infinite solutions (a==a shouldn't return 0)\n  check if solveVars are in equations\n  if solveFor is empty, just use solveEquations\n  deal with multiple solutions when substituting (like quadratics)\n    systems([\"x=4*a+b\",\"b=2*a\"],\"b\",[\"a\",\"x\"]) returns \"b=-4*a+x\" (ignores the next equation)\n  instead it should keep on going and throw error if there's ever too few variables\n  */\n  if (solveFor.length === 0) {\n    if (eqnsIn.length === 1) {\n      eqnsIn = eqnsIn[0];\n    } // if single equation, nerdamer requires string, not array\n\n\n    try {\n      var sol = nerdamer.solveEquations(eqnsIn).toString(); // need to have it access all equations instead!\n\n      if (sol === \"\") {\n        return \"Blank Line (or it can't solve)\";\n      }\n    } catch {\n      return \"Cannot Solve\";\n    } // variable name is not included in array if there's only one variable ):\n\n\n    if (!sol.includes(\",\")) {\n      sol = nerdamer(eqnsIn).variables()[0].concat(\",\").concat(sol);\n    }\n\n    var splitSol = sol.split(\",\");\n    var eqnSol = [];\n\n    for (let i = 0; i < splitSol.length / 2; i++) {\n      eqnSol.push(splitSol[2 * i].concat(\"=\").concat(splitSol[2 * i + 1]));\n      /*\n            eqnSol=eqnSol.concat(splitSol[2*i]\n              .concat(\"=\")\n              .concat(splitSol[2*i+1])\n              .concat(\",\"))\n              */\n    }\n\n    return eqnSol;\n  }\n\n  var eqns = [[]];\n\n  for (let i = 0; i < eqnsIn.length; i++) {\n    eqns[0][i] = nerdamer(eqnsIn[i]);\n  } //var solveFor=\"a\" // for now you must specify what to solve in terms of\n  //var inTermsOf=[\"b\"]\n\n\n  var solveVars = [solveFor, inTermsOf].flat(); // function will return the single equation which will then be solved for\n\n  var nEqns = eqns[0].length;\n\n  for (var i = 0; i < nEqns - 1; i++) {\n    var eqn = eqns[i][i];\n    var eqnVars = eqn.variables();\n    var solution = 'If you see this, the solution was never defined (something went wrong)';\n    var subVars = excess(eqnVars, solveVars);\n\n    if (subVars === undefined) {\n      // this means there's no additional variables in the equation\n      if (excess(solveVars, eqnVars) === undefined) {\n        // solveVars and eqnVars are equivalent\n        solution = eqn;\n        break;\n      } else {\n        solution = 'error: too many variables to solve in terms of';\n        break;\n      }\n    }\n\n    var subVar = subVars[0];\n    var solvedEqn = eqn.solveFor(subVar);\n    eqns[i + 1] = [];\n\n    for (var j = 0; j < nEqns - i - 1; j++) {\n      eqns[i + 1][i + 1 + j] = eqns[i][i + 1 + j].sub(subVar, solvedEqn);\n    }\n  }\n\n  if (solution === undefined) {\n    // solution hasn't already been found\n    var finalEqn = eqns[nEqns - 1][nEqns - 1];\n    var solutionVars = finalEqn.variables();\n\n    if (excess(solveVars, solutionVars) !== undefined) {\n      solution = 'error: end too many variables to solve in terms of';\n    } else if (excess(solutionVars, solveVars) !== undefined) {\n      solution = 'error: end too few variables to solve in terms of';\n    } else {\n      solution = finalEqn;\n    }\n  }\n\n  function excess(A, B) {\n    // if it's one variable, nerdamer doesn't use an array, so this puts it in an array:\n    if (typeof A === \"string\") {\n      A = [A];\n    }\n\n    if (typeof B === \"string\") {\n      B = [B];\n    }\n\n    return A.find(itemTestExtra => B.every(itemCompare => {\n      return itemTestExtra !== itemCompare;\n    }));\n  }\n\n  return solveFor.concat(\"=\").concat(solution.solveFor(solveFor).toString());\n}\n\nfunction computeSheet(sheetData) {\n  // do a check for duplicate names\n  // for now system names must be in order ):\n  var newSheetData = sheetData; // clear all of the previous results:\n\n  for (let i = 0; i < sheetData.length; i++) {\n    var system = sheetData[i];\n\n    for (let j = 0; j < system.eqns.length; j++) {\n      newSheetData[i].eqns[j].result = \"\";\n    }\n  }\n\n  var hitError = false;\n  var usedNames = [];\n\n  for (let i = 0; i < sheetData.length; i++) {\n    var SoE = sheetData[i];\n    var eqns = SoE.eqns;\n\n    for (let j = 0; j < eqns.length; j++) {\n      var eqn = eqns[j].eqn;\n      var result;\n\n      if (eqn === \"\") {\n        continue;\n      } // check if reference:\n\n\n      if (!eqn.includes(\"=\")) {\n        // check if a name on sheet:\n        if (!usedNames.includes(eqn)) {\n          result = \"TEXTerror: \".concat(eqn).concat(\" has not been defined\");\n          hitError = true;\n        } else if (usedNames.includes(eqn)) {\n          var names = [];\n\n          for (let i = 0; i < sheetData.length; i++) {\n            names.push(sheetData[i].name);\n          }\n\n          var iRef = names.findIndex(name => name === eqn);\n          var system = [];\n\n          for (let i = 0; i < sheetData[iRef].eqns.length; i++) {\n            system.push(sheetData[iRef].eqns[i].result);\n          }\n\n          if (eqns[j].operation === \"solve\") {\n            result = solveEqns(system, [], []);\n          } else {\n            result = system;\n          }\n        }\n      } else if (eqns[j].operation === \"solve\") {\n        result = solveEqns([eqn], [], []);\n      } else {\n        result = eqn;\n      }\n\n      newSheetData[i].eqns[j].result = result;\n\n      if (hitError) {\n        return newSheetData;\n      }\n\n      usedNames.push(SoE.name);\n    }\n  }\n\n  return newSheetData;\n}\n\nclass Sheet extends React.Component {\n  // constructor has states with sheet info?\n  constructor(props) {\n    super(props);\n    this.state = {\n      SoEs: [{\n        name: \"s\",\n        eqns: [{\n          eqn: \"\",\n          operation: \"\",\n          solvefor: \"\",\n          result: \"\" // this would be computed: x=1\n\n        }, {\n          eqn: \"\",\n          operation: \"\",\n          substitutefor: \"\",\n          result: \"\" // this would be computed: a+3=x\n\n        }]\n      }, {\n        name: \"SoE 2\",\n        eqns: [{\n          eqn: \"\",\n          operation: \"\",\n          solvefor: \"\",\n          result: \"cool result!\" // this would be computed: a=x-3=1-3=-2 (not sure how many steps to show)\n\n        }]\n      }]\n    };\n  }\n\n  render() {\n    var sheetElements = [];\n\n    for (let i = 0; i < this.state.SoEs.length; i++) {\n      var SoE = this.state.SoEs[i]; //this.SoEs[i].name=newName\n\n      sheetElements.push( /*#__PURE__*/_jsxDEV(Name, {\n        onEdit: newName => {\n          // should just appl\n          this.state.SoEs[i].name = newName;\n          this.setState({\n            SoEs: computeSheet(this.state.SoEs)\n          });\n        },\n        text: SoE\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 265,\n        columnNumber: 29\n      }, this));\n\n      for (let j = 0; j < SoE.eqns.length; j++) {\n        sheetElements.push( /*#__PURE__*/_jsxDEV(Line, {\n          onEdit: (newEqn, newOperation = \"\", newSolveFor = \"\") => {\n            var newEqn = {\n              eqn: newEqn,\n              operation: newOperation,\n              solveFor: newSolveFor,\n              result: \"\"\n            };\n            this.state.SoEs[i].eqns[j] = newEqn;\n            this.setState({\n              SoEs: computeSheet(this.state.SoEs)\n            });\n          },\n          addLine: () => {\n            var blankLine = {\n              eqn: \"\",\n              result: \"\"\n            };\n            this.state.SoEs[i].eqns.splice(j + 1, 0, blankLine);\n            this.setState({\n              SoEs: this.state.SoEs\n            });\n            console.log(this.state.SoEs[i]);\n          },\n          removeLine: () => {\n            var blankLine = {\n              eqn: \"\",\n              result: \"\"\n            };\n            this.state.SoEs[i].eqns.splice(j, 1);\n            this.setState({\n              SoEs: this.state.SoEs\n            });\n            console.log(this.state.SoEs[i]);\n          },\n          result: SoE.eqns[j].result,\n          eqn: SoE.eqns[j].eqn\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 283,\n          columnNumber: 32\n        }, this));\n      }\n    }\n\n    return sheetElements;\n  }\n\n}\n\nclass Name extends React.Component {\n  render() {\n    //const name=<tr><td></td></tr>\n    const editField = /*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"text\",\n      value: this.props.text.name,\n      onChange: e => {\n        this.props.onEdit(e.target.value);\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 337,\n      columnNumber: 22\n    }, this);\n\n    return /*#__PURE__*/_jsxDEV(\"tr\", {\n      children: /*#__PURE__*/_jsxDEV(\"td\", {\n        children: editField\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 347,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 347,\n      columnNumber: 13\n    }, this);\n  }\n\n}\n\nclass Line extends React.Component {\n  constructor(props) {\n    super(props);\n  }\n\n  addSolve(oldMathField) {\n    var text = oldMathField.latex().replace(\"solve\", \"\");\n    this.setState(state => {\n      return {\n        input: [/*#__PURE__*/_jsxDEV(StaticMathField, {\n          children: \"\\\\text{solve }\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 362,\n          columnNumber: 14\n        }, this), /*#__PURE__*/_jsxDEV(EditableMathField, {\n          latex: text,\n          onChange: mathField => {\n            if (mathField.latex().includes(\"for\")) {\n              this.addSolveFor(mathField);\n            }\n\n            this.props.onEdit(mathField.latex(), \"solve\");\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 362,\n          columnNumber: 68\n        }, this)]\n      };\n    });\n  }\n\n  addSolveFor(oldMathField) {\n    // needs work!\n    var text = oldMathField.latex();\n    this.setState(state => {\n      return {\n        input: [/*#__PURE__*/_jsxDEV(StaticMathField, {\n          children: \"\\\\text{solve }\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 375,\n          columnNumber: 14\n        }, this), /*#__PURE__*/_jsxDEV(EditableMathField, {\n          latex: text,\n          onChange: mathField => {\n            if (mathField.latex().includes(\"for\")) {\n              this.addSolveFor(mathField);\n            }\n\n            this.props.onEdit(mathField.latex(), \"solve\");\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 376,\n          columnNumber: 9\n        }, this)]\n      };\n    });\n  }\n\n  render() {\n    var result = this.props.result;\n\n    if (result.includes(\"TEXT\")) {\n      var resultDisplay = \"\\\\text{\".concat(result.replace(\"TEXT\", \"\")).concat(\"}\");\n    } else {\n      if (typeof result === \"string\") {\n        result = [result];\n      }\n\n      var resultDisplay = [];\n\n      for (let i = 0; i < result.length; i++) {\n        resultDisplay.push( /*#__PURE__*/_jsxDEV(StaticMathField, {\n          children: nerdamer.convertToLaTeX(result[i])\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 401,\n          columnNumber: 11\n        }, this));\n        resultDisplay.push( /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 405,\n          columnNumber: 29\n        }, this));\n      }\n    }\n\n    var inputField = [];\n\n    if (this.props.eqn.includes(\"solve\")) {\n      inputField.push( /*#__PURE__*/_jsxDEV(StaticMathField, {\n        children: \"\\\\text{solve }\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 414,\n        columnNumber: 23\n      }, this));\n      var text = this.props.eqn.replace(\"solve\", \"\");\n    } else {\n      var text = this.props.eqn;\n      console.log(this.props.eqn);\n    }\n\n    inputField.push( /*#__PURE__*/_jsxDEV(EditableMathField, {\n      latex: this.props.eqn,\n      onChange: newField => {\n        console.log(newField);\n        this.props.onEdit(newField.latex());\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 422,\n      columnNumber: 21\n    }, this));\n    /*\n    var inputField=<EditableMathField\n    latex={this.props.eqn}  \n    onChange={(mathField)=>{\n      var text=mathField.latex()\n      if (mathField.latex().includes(\"solve\")){\n        this.addSolve(mathField)\n        \n      }\n       this.props.onEdit(text)\n      \n      }       \n    }\n    />\n    */\n\n    const line = /*#__PURE__*/_jsxDEV(\"tr\", {\n      children: [/*#__PURE__*/_jsxDEV(\"td\", {\n        children: [/*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: () => {\n            this.props.addLine();\n          },\n          children: \"+\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 452,\n          columnNumber: 12\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: () => {\n            this.props.removeLine();\n          },\n          children: \"-\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 455,\n          columnNumber: 14\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 451,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n        children: inputField\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 459,\n        columnNumber: 10\n      }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n        children: resultDisplay\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 463,\n        columnNumber: 10\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 450,\n      columnNumber: 17\n    }, this);\n\n    return line;\n  }\n\n}\n\nexport default Sheet;","map":{"version":3,"sources":["C:/Users/brisk/OneDrive/Documents/GitHub/seeciv/my-app/src/App.js"],"names":["React","useState","addStyles","EditableMathField","StaticMathField","nerdamer","solveEqns","eqnsIn","solveFor","inTermsOf","length","sol","solveEquations","toString","includes","variables","concat","splitSol","split","eqnSol","i","push","eqns","solveVars","flat","nEqns","eqn","eqnVars","solution","subVars","excess","undefined","subVar","solvedEqn","j","sub","finalEqn","solutionVars","A","B","find","itemTestExtra","every","itemCompare","computeSheet","sheetData","newSheetData","system","result","hitError","usedNames","SoE","names","name","iRef","findIndex","operation","Sheet","Component","constructor","props","state","SoEs","solvefor","substitutefor","render","sheetElements","newName","setState","newEqn","newOperation","newSolveFor","blankLine","splice","console","log","Name","editField","text","e","onEdit","target","value","Line","addSolve","oldMathField","latex","replace","input","mathField","addSolveFor","resultDisplay","convertToLaTeX","inputField","newField","line","addLine","removeLine"],"mappings":"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","sourcesContent":["import React, { useState } from \"react\";\nimport { addStyles, EditableMathField, StaticMathField } from \"react-mathquill\";\nimport nerdamer from 'nerdamer/nerdamer.core.js'\nimport 'nerdamer/Algebra.js'\nimport 'nerdamer/Calculus.js'\nimport 'nerdamer/Solve.js'\n\naddStyles();\n\n\nfunction solveEqns(eqnsIn,solveFor,inTermsOf){\n  /* additioinal stuff:\n  parse equations (check for one equality, operations, and variables and that's it)\n  check if no contradiction in equations\n  check if infinite solutions (a==a shouldn't return 0)\n  check if solveVars are in equations\n  if solveFor is empty, just use solveEquations\n  deal with multiple solutions when substituting (like quadratics)\n\n\n  systems([\"x=4*a+b\",\"b=2*a\"],\"b\",[\"a\",\"x\"]) returns \"b=-4*a+x\" (ignores the next equation)\n  instead it should keep on going and throw error if there's ever too few variables\n  */\n\n\n  \n  if (solveFor.length===0){\n    if (eqnsIn.length===1){eqnsIn=eqnsIn[0]} // if single equation, nerdamer requires string, not array\n\n    try {\n      var sol=nerdamer.solveEquations(eqnsIn).toString() // need to have it access all equations instead!\n      if (sol===\"\"){\n        return \"Blank Line (or it can't solve)\"\n      }\n    } catch {\n      return \"Cannot Solve\"\n    }\n    \n\n    \n\n    // variable name is not included in array if there's only one variable ):\n    if (!sol.includes(\",\")){\n      sol=nerdamer(eqnsIn).variables()[0].concat(\",\").concat(sol)\n    }\n   \n    var splitSol=sol.split(\",\")\n    var eqnSol=[]\n    for (let i=0;i<splitSol.length/2;i++){\n      eqnSol.push(\n        splitSol[2*i]\n        .concat(\"=\")\n        .concat(splitSol[2*i+1])\n      )\n\n\n/*\n      eqnSol=eqnSol.concat(splitSol[2*i]\n        .concat(\"=\")\n        .concat(splitSol[2*i+1])\n        .concat(\",\"))\n        */\n    }\n    return eqnSol\n  }\n\n \n  \n  var eqns=[[]]\n  for (let i=0;i<eqnsIn.length;i++){\n      eqns[0][i]=nerdamer(eqnsIn[i])\n  }\n\n  //var solveFor=\"a\" // for now you must specify what to solve in terms of\n  //var inTermsOf=[\"b\"]\n  var solveVars=[solveFor,inTermsOf].flat()\n\n\n  // function will return the single equation which will then be solved for\n  var nEqns=eqns[0].length\n\n\n\n\n\n  for (var i=0;i<nEqns-1;i++){\n      var eqn=eqns[i][i]\n      var eqnVars=eqn.variables()\n\n      var solution='If you see this, the solution was never defined (something went wrong)'\n\n\n      var subVars=excess(eqnVars,solveVars)\n      if (subVars===undefined){\n          // this means there's no additional variables in the equation\n          if (excess(solveVars,eqnVars)===undefined){\n              // solveVars and eqnVars are equivalent\n              solution=eqn\n              break\n          }else{\n              solution='error: too many variables to solve in terms of'\n              break\n          }\n\n      }\n\n      var subVar=subVars[0]\n      var solvedEqn=eqn.solveFor(subVar)\n\n      eqns[i+1]=[]\n      for (var j=0;j<nEqns-i-1;j++){\n          eqns[i+1][i+1+j]=eqns[i][i+1+j].sub(subVar,solvedEqn)\n      } \n  \n  }\n\n  if (solution===undefined){  // solution hasn't already been found\n      var finalEqn=eqns[nEqns-1][nEqns-1]\n      var solutionVars=finalEqn.variables()\n      if (excess(solveVars,solutionVars)!==undefined){\n          solution='error: end too many variables to solve in terms of'\n      }else if (excess(solutionVars,solveVars)!==undefined){\n          solution='error: end too few variables to solve in terms of'\n      }else{\n          solution=finalEqn\n      }\n\n  }\n\n  \n\n  function excess(A,B){\n      // if it's one variable, nerdamer doesn't use an array, so this puts it in an array:\n      if (typeof(A)===\"string\"){A=[A]}\n      if (typeof(B)===\"string\"){B=[B]}\n  \n      return A.find(\n          itemTestExtra=>B.every(\n          (itemCompare)=>{return itemTestExtra!==itemCompare}\n          )\n      )\n  }\n\n\n  return solveFor.concat(\"=\").concat(solution.solveFor(solveFor).toString())\n}\n\n\nfunction computeSheet(sheetData){\n\n  // do a check for duplicate names\n\n  // for now system names must be in order ):\n\n  var newSheetData=sheetData\n\n  // clear all of the previous results:\n  for (let i=0;i<sheetData.length;i++){\n    var system=sheetData[i]\n    for (let j=0;j<system.eqns.length;j++){\n      newSheetData[i].eqns[j].result=\"\"  \n    }\n  }\n  \n  var hitError=false\n  var usedNames=[]\n  for (let i=0;i<sheetData.length;i++){\n    var SoE=sheetData[i]\n    var eqns=SoE.eqns\n    for (let j=0;j<eqns.length;j++){\n      var eqn=eqns[j].eqn\n\n      var result\n\n      if(eqn===\"\"){\n        continue\n      }\n\n      // check if reference:\n      if (!eqn.includes(\"=\")){\n        // check if a name on sheet:\n        if (!usedNames.includes(eqn)){\n            result=(\"TEXTerror: \").concat(eqn).concat(\" has not been defined\")\n            hitError=true\n        }else if (usedNames.includes(eqn)){\n\n            var names=[]\n            for (let i=0;i<sheetData.length;i++){names.push(sheetData[i].name)}\n            var iRef=names.findIndex((name)=>name===eqn)\n\n            var system=[]\n            for (let i=0;i<sheetData[iRef].eqns.length;i++){system.push(sheetData[iRef].eqns[i].result)}\n          if (eqns[j].operation===\"solve\"){\n            result=solveEqns(system,[],[])\n          }else{\n            result=system\n          }\n        }\n      }else if(eqns[j].operation===\"solve\"){\n        result=solveEqns([eqn],[],[])\n      }else{\n        result=eqn\n      }\n      newSheetData[i].eqns[j].result=result\n      if (hitError){\n        return newSheetData\n      }\n      usedNames.push(SoE.name)\n    }\n  }\n\n  return newSheetData\n}\n\n\n\n\n\nclass Sheet extends React.Component {\n  // constructor has states with sheet info?\n  constructor(props){\n    super(props)\n\n    this.state= {\n        SoEs:[\n         {\n             name:\"s\",\n             eqns: [\n                 {\n                     eqn:\"\",\n                     operation: \"\",\n                     solvefor: \"\",\n                     result:\"\", // this would be computed: x=1\n                 },\n                 {\n                     eqn:\"\",\n                     operation: \"\",\n                     substitutefor: \"\",\n                     result: \"\" // this would be computed: a+3=x\n                 }\n             ]\n         },\n         {\n             name:\"SoE 2\",\n             eqns: [\n                 {\n                     eqn:\"\",\n                     operation: \"\",\n                     solvefor: \"\",\n                     result: \"cool result!\", // this would be computed: a=x-3=1-3=-2 (not sure how many steps to show)\n                 },\n             ]\n         }\n     ]\n    }\n  }\n\n\n  render(){\n     var sheetElements=[]\n     for (let i=0;i<this.state.SoEs.length;i++){\n         var SoE=this.state.SoEs[i]\n         //this.SoEs[i].name=newName\n\n         sheetElements.push(<Name \n         \n             onEdit={(newName)=>\n                 {\n                    // should just appl\n                    this.state.SoEs[i].name=newName\n\n\n                    this.setState({SoEs: computeSheet(this.state.SoEs)})\n                    \n                 }\n             } \n             text={SoE}\n         />)\n\n        \n\n         for (let j=0;j<SoE.eqns.length;j++){\n            sheetElements.push(<Line \n              onEdit={(newEqn,newOperation=\"\",newSolveFor=\"\")=>\n                {\n                  var newEqn={\n                    eqn: newEqn,\n                    operation: newOperation,\n                    solveFor: newSolveFor,\n                    result: \"\"\n                  }\n\n                  this.state.SoEs[i].eqns[j]=newEqn\n\n                  this.setState({\n                    SoEs: computeSheet(this.state.SoEs)\n                  })\n                }\n              }\n              addLine={()=>\n                {\n                  var blankLine={eqn:\"\",result:\"\"}\n                  this.state.SoEs[i].eqns.splice(j+1, 0, blankLine)\n\n                  this.setState({SoEs: this.state.SoEs})\n                  console.log(this.state.SoEs[i])\n                }\n              }\n              removeLine={()=>\n                {\n                  var blankLine={eqn:\"\",result:\"\"}\n                  this.state.SoEs[i].eqns.splice(j, 1)\n\n                  this.setState({SoEs: this.state.SoEs})\n                  console.log(this.state.SoEs[i])\n                }\n              }\n              \n              \n              \n              result={SoE.eqns[j].result} \n              eqn={SoE.eqns[j].eqn}             \n            />)\n         }\n     }\n     return(\n      sheetElements\n     )\n \n  }\n}\n\n\nclass Name extends React.Component {\n render(){\n     //const name=<tr><td></td></tr>\n     const editField=<input \n         type=\"text\" \n         value={this.props.text.name} \n         onChange={(e)=>{this.props.onEdit(e.target.value)\n         }\n         \n     }\n     >\n     </input>\n\n     return <tr><td>{editField}</td></tr>\n } \n}\n\nclass Line extends React.Component {\n  constructor(props){\n    super(props)\n    \n  }\n\n\n\n  addSolve(oldMathField){\n    var text=oldMathField.latex().replace(\"solve\",\"\")\n    this.setState((state)=>{return{\n      input:[<StaticMathField>{\"\\\\text{solve }\"}</StaticMathField>,<EditableMathField\n        latex={text}\n        onChange={(mathField)=>{\n          if (mathField.latex().includes(\"for\")){this.addSolveFor(mathField)}\n          this.props.onEdit(mathField.latex(),\"solve\")}}\n        />]\n    }})\n  }\n\n  addSolveFor(oldMathField){\n    // needs work!\n    var text=oldMathField.latex()\n    this.setState((state)=>{return{\n      input:[<StaticMathField>{\"\\\\text{solve }\"}</StaticMathField>,\n        <EditableMathField\n        latex={text}\n        onChange={(mathField)=>{\n          if (mathField.latex().includes(\"for\")){this.addSolveFor(mathField)}\n          this.props.onEdit(mathField.latex(),\"solve\")}}\n        />]\n    }})\n  }\n\n\n\n  render() {\n     var result=this.props.result\n\n     if (result.includes(\"TEXT\")){\n       var resultDisplay=\"\\\\text{\".concat(result.replace(\"TEXT\",\"\")).concat(\"}\")\n     }else{\n\n       if (typeof result===\"string\"){\n         result=[result]\n       }\n       var resultDisplay=[]\n\n       for (let i=0;i<result.length;i++){\n         resultDisplay.push(\n          <StaticMathField>\n            {nerdamer.convertToLaTeX(result[i])}\n          </StaticMathField>,\n         )\n         resultDisplay.push(<br/>)\n       }\n\n     }\n\n\n    var inputField=[]\n\n    if(this.props.eqn.includes(\"solve\")){\n      inputField.push(<StaticMathField>{\"\\\\text{solve }\"}</StaticMathField>)\n      var text=this.props.eqn.replace(\"solve\",\"\")\n    }else{\n      var text=this.props.eqn\n      console.log(this.props.eqn)\n    }\n    \n\n    inputField.push(<EditableMathField\n      latex={this.props.eqn}\n      onChange={(newField)=>{\n        console.log(newField)\n        this.props.onEdit(newField.latex())\n        }\n        }/>)\n\n      /*\n    var inputField=<EditableMathField\n      latex={this.props.eqn}  \n      onChange={(mathField)=>{\n        var text=mathField.latex()\n        if (mathField.latex().includes(\"solve\")){\n          this.addSolve(mathField)\n          \n        }\n\n        this.props.onEdit(text)\n        \n        }       \n      }\n    />\n    */\n\n    \n\n\n     const line=<tr> \n        <td>\n           <button onClick={\n              ()=>{this.props.addLine()}\n             }>+</button>\n             <button onClick={\n               ()=>{this.props.removeLine()}\n             }>-</button>\n         </td>\n         <td>\n         {inputField}\n\n         </td>\n         <td>\n            {resultDisplay}\n         </td>\n         \n     </tr>\n\n\n      return line\n }\n}\n\n\nexport default Sheet\n\n"]},"metadata":{},"sourceType":"module"}