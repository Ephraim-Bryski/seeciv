{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\brisk\\\\OneDrive\\\\Documents\\\\GitHub\\\\seeciv\\\\my-app\\\\src\\\\App.js\";\nimport React, { useState } from \"react\";\nimport { addStyles, EditableMathField, StaticMathField } from \"react-mathquill\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\naddStyles();\n\nfunction solveEqns() {}\n\nfunction computeSheet(sheetData) {\n  // do a check for duplicate names\n  // for now system names must be in order ):\n  var newSheetData = sheetData;\n  var hitError = false;\n  var usedNames = [];\n\n  for (let i = 0; i < sheetData.length; i++) {\n    var SoE = sheetData[i];\n    var eqns = SoE.eqns;\n\n    for (let j = 0; j < eqns.length; j++) {\n      var eqn = eqns[j].eqn; // check if reference:\n\n      if (!eqn.includes(\"=\")) {\n        // check if a name on sheet:\n        if (!usedNames.includes(eqn)) {\n          var result = \"error: \".concat(eqn).concat(\" has not defined\");\n          var hitError = true;\n        } else if (usedNames.includes(eqn) && eqns[j].operation == \"solve\") {\n          var names = [];\n\n          for (let i = 0; i < sheetData.length; i++) {\n            names.push(sheetData[i].name);\n          }\n\n          var iRef = names.findIndex(name => name == eqn);\n          var system = [];\n\n          for (let i = 0; i < sheetData[iRef].eqns.length; i++) {\n            system.push(sheetData[iRef].eqns[i].result);\n          }\n\n          var result = solveEqns(system[iRef], [], []);\n        }\n      } else if (eqns[j].operation == \"solve\") {\n        var result = solveEqns(eqns[j], [], []);\n      } else {\n        var result = eqns[j];\n      }\n\n      newSheetData[i].eqns[j].result = result;\n\n      if (hitError) {\n        return newSheetData;\n      }\n\n      usedNames.push(SoE.name);\n    }\n  }\n\n  return newSheetData;\n}\n\nclass Sheet extends React.Component {\n  // constructor has states with sheet info?\n  constructor(props) {\n    super(props);\n    this.state = {\n      SoEs: [{\n        name: \"SoE 1\",\n        eqns: [{\n          eqn: \"x+4=5\",\n          operation: \"solve\",\n          solvefor: \"x\",\n          result: \"\" // this would be computed: x=1\n\n        }, {\n          eqn: \"a+3=b\",\n          operation: \"substitute\",\n          substitutefor: {\n            b: \"x\"\n          },\n          result: \"\" // this would be computed: a+3=x\n\n        }]\n      }, {\n        name: \"SoE 2\",\n        eqns: [{\n          eqn: \"SoE 1\",\n          operation: \"solve\",\n          solvefor: \"a\",\n          result: \"cool result!\" // this would be computed: a=x-3=1-3=-2 (not sure how many steps to show)\n\n        }]\n      }]\n    };\n  }\n\n  inputEqnUpdate(i, j, eqnStruct) {\n    this.state.SoEs[i].eqns[j] = eqnStruct;\n  }\n\n  updateSheet() {// no inputs\n    // access this.state.SoEs\n    // \n  }\n\n  render() {\n    var sheetElements = [];\n\n    for (let i = 0; i < this.state.SoEs.length; i++) {\n      var SoE = this.state.SoEs[i]; //this.SoEs[i].name=newName\n\n      sheetElements.push( /*#__PURE__*/_jsxDEV(Name, {\n        onEdit: newName => {\n          // updating one part of SoEs state (likely better approach):\n          this.state.SoEs[i].name = newName;\n          this.setState({\n            SoEs: [...this.state.SoEs]\n          });\n        },\n        text: SoE\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 112,\n        columnNumber: 29\n      }, this));\n\n      for (let j = 0; j < SoE.eqns.length; j++) {\n        sheetElements.push( /*#__PURE__*/_jsxDEV(Line, {\n          onEdit: newEqn => {\n            console.log(this.state.SoEs);\n            this.state.SoEs[i].eqns[j].eqn = newEqn;\n            this.setState({\n              SoEs: [...this.state.SoEs]\n            });\n          },\n          eqnStruct: SoE.eqns[j]\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 127,\n          columnNumber: 32\n        }, this));\n      }\n    }\n\n    return sheetElements;\n  }\n\n}\n\nclass Name extends React.Component {\n  render() {\n    //const name=<tr><td></td></tr>\n    const editField = /*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"text\",\n      value: this.props.text.name,\n      onChange: e => {\n        this.props.onEdit(e.target.value);\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 152,\n      columnNumber: 22\n    }, this);\n\n    return /*#__PURE__*/_jsxDEV(\"tr\", {\n      children: /*#__PURE__*/_jsxDEV(\"td\", {\n        children: editField\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 162,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 162,\n      columnNumber: 13\n    }, this);\n  }\n\n}\n\nclass Line extends React.Component {\n  render() {\n    const eqnStruct = this.props.eqnStruct;\n    console.log(eqnStruct.result);\n\n    const line = /*#__PURE__*/_jsxDEV(\"tr\", {\n      children: [/*#__PURE__*/_jsxDEV(\"td\", {\n        children: /*#__PURE__*/_jsxDEV(EditableMathField, {\n          latex: \"\",\n          onChange: mathField => {\n            this.props.onEdit(mathField.latex());\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 172,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 171,\n        columnNumber: 10\n      }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n        children: /*#__PURE__*/_jsxDEV(StaticMathField, {\n          children: \"\\\\text{\".concat(eqnStruct.result).concat(\"}\")\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 182,\n          columnNumber: 14\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 181,\n        columnNumber: 10\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 170,\n      columnNumber: 17\n    }, this);\n\n    return line;\n  }\n\n}\n\nexport default Sheet;","map":{"version":3,"sources":["C:/Users/brisk/OneDrive/Documents/GitHub/seeciv/my-app/src/App.js"],"names":["React","useState","addStyles","EditableMathField","StaticMathField","solveEqns","computeSheet","sheetData","newSheetData","hitError","usedNames","i","length","SoE","eqns","j","eqn","includes","result","concat","operation","names","push","name","iRef","findIndex","system","Sheet","Component","constructor","props","state","SoEs","solvefor","substitutefor","b","inputEqnUpdate","eqnStruct","updateSheet","render","sheetElements","newName","setState","newEqn","console","log","Name","editField","text","e","onEdit","target","value","Line","line","mathField","latex"],"mappings":"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","sourcesContent":["import React, { useState } from \"react\";\nimport { addStyles, EditableMathField, StaticMathField } from \"react-mathquill\";\naddStyles();\n\nfunction solveEqns(){\n  \n}\n\n\nfunction computeSheet(sheetData){\n  // do a check for duplicate names\n\n  // for now system names must be in order ):\n\n  var newSheetData=sheetData\n  var hitError=false\n  var usedNames=[]\n  for (let i=0;i<sheetData.length;i++){\n    var SoE=sheetData[i]\n    var eqns=SoE.eqns\n    for (let j=0;j<eqns.length;j++){\n      var eqn=eqns[j].eqn\n\n      // check if reference:\n      if (!eqn.includes(\"=\")){\n        // check if a name on sheet:\n        if (!usedNames.includes(eqn)){\n            var result=(\"error: \").concat(eqn).concat(\" has not defined\")\n            var hitError=true\n        }else if (usedNames.includes(eqn) && eqns[j].operation==\"solve\"){\n\n            var names=[]\n            for (let i=0;i<sheetData.length;i++){names.push(sheetData[i].name)}\n            var iRef=names.findIndex((name)=>name==eqn)\n\n            var system=[]\n            for (let i=0;i<sheetData[iRef].eqns.length;i++){system.push(sheetData[iRef].eqns[i].result)}\n            var result=solveEqns(system[iRef],[],[])\n\n        }\n      }else if(eqns[j].operation==\"solve\"){\n        var result=solveEqns(eqns[j],[],[])\n      }else{\n        var result=eqns[j]\n      }\n      newSheetData[i].eqns[j].result=result\n      if (hitError){\n        return newSheetData\n      }\n      usedNames.push(SoE.name)\n    }\n  }\n\n  return newSheetData\n}\n\n\n\nclass Sheet extends React.Component {\n  // constructor has states with sheet info?\n constructor(props){\n     super(props)\n     this.state= {\n         SoEs:[\n         {\n             name:\"SoE 1\",\n             eqns: [\n                 {\n                     eqn:\"x+4=5\",\n                     operation: \"solve\",\n                     solvefor: \"x\",\n                     result:\"\", // this would be computed: x=1\n                 },\n                 {\n                     eqn:\"a+3=b\",\n                     operation: \"substitute\",\n                     substitutefor: {b: \"x\"},\n                     result: \"\" // this would be computed: a+3=x\n                 }\n             ]\n         },\n         {\n             name:\"SoE 2\",\n             eqns: [\n                 {\n                     eqn:\"SoE 1\",\n                     operation: \"solve\",\n                     solvefor: \"a\",\n                     result: \"cool result!\", // this would be computed: a=x-3=1-3=-2 (not sure how many steps to show)\n                 },\n             ]\n         }\n     ]\n     }\n }\n\n\n inputEqnUpdate(i,j,eqnStruct){this.state.SoEs[i].eqns[j]=eqnStruct}\n\n updateSheet(){\n   // no inputs\n   // access this.state.SoEs\n   // \n }\n\n render(){\n     var sheetElements=[]\n     for (let i=0;i<this.state.SoEs.length;i++){\n         var SoE=this.state.SoEs[i]\n         //this.SoEs[i].name=newName\n\n         sheetElements.push(<Name \n         \n             onEdit={(newName)=>\n                 {\n                    // updating one part of SoEs state (likely better approach):\n                    this.state.SoEs[i].name=newName\n                    this.setState({SoEs:[...this.state.SoEs]})\n                 }\n             } \n             text={SoE}\n         />)\n\n         \n\n         for (let j=0;j<SoE.eqns.length;j++){\n            sheetElements.push(<Line \n              onEdit={(newEqn)=>\n                {\n                  console.log(this.state.SoEs)\n                  this.state.SoEs[i].eqns[j].eqn=newEqn\n                  this.setState({SoEs:[...this.state.SoEs]})\n\n\n                }\n              }\n              eqnStruct={SoE.eqns[j]}\n              \n            />)\n         }\n     }\n     return(\n         sheetElements\n     )\n \n }\n}\n\nclass Name extends React.Component {\n render(){\n     //const name=<tr><td></td></tr>\n     const editField=<input \n         type=\"text\" \n         value={this.props.text.name} \n         onChange={(e)=>{this.props.onEdit(e.target.value)\n         }\n         \n     }\n     >\n     </input>\n\n     return <tr><td>{editField}</td></tr>\n } \n}\n\nclass Line extends React.Component { \n  render() {\n     const eqnStruct=this.props.eqnStruct\n     console.log(eqnStruct.result)\n     const line=<tr> \n         <td>\n            <EditableMathField \n              latex=\"\"  \n              onChange={(mathField)=>{this.props.onEdit(mathField.latex())\n              }       \n              }\n          \n            />\n\n         </td>\n         <td>\n             <StaticMathField>{\"\\\\text{\".concat(eqnStruct.result).concat(\"}\")}</StaticMathField>\n         </td>\n     </tr>\n\n\n      return line\n }\n}\n\nexport default Sheet\n\n"]},"metadata":{},"sourceType":"module"}