{"ast":null,"code":"/*\r\n * Author : Martin Donk\r\n * Website : http://www.nerdamer.com\r\n * Email : martin.r.donk@gmail.com\r\n * Source : https://github.com/jiggzson/nerdamer\r\n */\n\n/* global trig, trigh, Infinity, define, arguments2Array, NaN */\n//externals ====================================================================\n\n/* BigInterger.js v1.6.40 https://github.com/peterolson/BigInteger.js/blob/master/LICENSE */\n//var nerdamerBigInt = typeof nerdamerBigInt !== 'undefined' ? nerdamerBigInt : require(\"big-integer\");\n\n/* big.js v5.2.2 https://github.com/MikeMcl/big.js/LICENCE */\n//var nerdamerBigDecimal = typeof nerdamerBigDecimal !== 'undefined' ? nerdamerBigDecimal : require('big.js');\nvar nerdamer = function (imports) {\n  \"use strict\"; //version ======================================================================\n\n  var version = '1.1.11'; //inits ========================================================================\n\n  var _ = new Parser(); //nerdamer's parser\n  //import bigInt\n\n\n  var bigInt = imports.bigInt;\n  var bigDec = imports.bigDec; //set the precision to js precision\n\n  bigDec.set({\n    precision: 250\n  });\n  var Groups = {}; //container of pregenerated primes\n\n  var PRIMES = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97, 101, 103, 107, 109, 113, 127, 131, 137, 139, 149, 151, 157, 163, 167, 173, 179, 181, 191, 193, 197, 199, 211, 223, 227, 229, 233, 239, 241, 251, 257, 263, 269, 271, 277, 281, 283, 293, 307, 311, 313, 317, 331, 337, 347, 349, 353, 359, 367, 373, 379, 383, 389, 397, 401, 409, 419, 421, 431, 433, 439, 443, 449, 457, 461, 463, 467, 479, 487, 491, 499, 503, 509, 521, 523, 541, 547, 557, 563, 569, 571, 577, 587, 593, 599, 601, 607, 613, 617, 619, 631, 641, 643, 647, 653, 659, 661, 673, 677, 683, 691, 701, 709, 719, 727, 733, 739, 743, 751, 757, 761, 769, 773, 787, 797, 809, 811, 821, 823, 827, 829, 839, 853, 857, 859, 863, 877, 881, 883, 887, 907, 911, 919, 929, 937, 941, 947, 953, 967, 971, 977, 983, 991, 997, 1009, 1013, 1019, 1021, 1031, 1033, 1039, 1049, 1051, 1061, 1063, 1069, 1087, 1091, 1093, 1097, 1103, 1109, 1117, 1123, 1129, 1151, 1153, 1163, 1171, 1181, 1187, 1193, 1201, 1213, 1217, 1223, 1229, 1231, 1237, 1249, 1259, 1277, 1279, 1283, 1289, 1291, 1297, 1301, 1303, 1307, 1319, 1321, 1327, 1361, 1367, 1373, 1381, 1399, 1409, 1423, 1427, 1429, 1433, 1439, 1447, 1451, 1453, 1459, 1471, 1481, 1483, 1487, 1489, 1493, 1499, 1511, 1523, 1531, 1543, 1549, 1553, 1559, 1567, 1571, 1579, 1583, 1597, 1601, 1607, 1609, 1613, 1619, 1621, 1627, 1637, 1657, 1663, 1667, 1669, 1693, 1697, 1699, 1709, 1721, 1723, 1733, 1741, 1747, 1753, 1759, 1777, 1783, 1787, 1789, 1801, 1811, 1823, 1831, 1847, 1861, 1867, 1871, 1873, 1877, 1879, 1889, 1901, 1907, 1913, 1931, 1933, 1949, 1951, 1973, 1979, 1987, 1993, 1997, 1999, 2003, 2011, 2017, 2027, 2029, 2039, 2053, 2063, 2069, 2081, 2083]; //Settings =====================================================================\n\n  var CUSTOM_OPERATORS = {};\n  var Settings = {\n    //Enables/Disables call peekers. False means callPeekers are disabled and true means callPeekers are enabled.\n    callPeekers: false,\n    //the max number up to which to cache primes. Making this too high causes performance issues\n    init_primes: 1000,\n    exclude: [],\n    //If you don't care about division by zero for example then this can be set to true.\n    //Has some nasty side effects so choose carefully.\n    suppress_errors: false,\n    //the global used to invoke the libary to parse to a number. Normally cos(9) for example returns\n    //cos(9) for convenience but parse to number will always try to return a number if set to true.\n    PARSE2NUMBER: false,\n    //this flag forces the a clone to be returned when add, subtract, etc... is called\n    SAFE: false,\n    //the symbol to use for imaginary symbols\n    IMAGINARY: 'i',\n    //the modules used to link numeric function holders\n    FUNCTION_MODULES: [Math],\n    //Allow certain characters\n    ALLOW_CHARS: ['π'],\n    //Allow nerdamer to convert multi-character variables\n    USE_MULTICHARACTER_VARS: true,\n    //Allow changing of power operator\n    POWER_OPERATOR: '^',\n    //The variable validation regex\n    //VALIDATION_REGEX: /^[a-z_][a-z\\d\\_]*$/i\n    VALIDATION_REGEX: /^[a-z_αAβBγΓδΔϵEζZηHθΘιIκKλΛμMνNξΞoOπΠρPσΣτTυϒϕΦχXψΨωΩ∞][0-9a-z_αAβBγΓδΔϵEζZηHθΘιIκKλΛμMνNξΞoOπΠρPσΣτTυϒϕΦχXψΨωΩ]*$/i,\n    // The regex used to determine which characters should be included in implied multiplication\n    IMPLIED_MULTIPLICATION_REGEX: /([\\+\\-\\/\\*]*[0-9]+)([a-z_αAβBγΓδΔϵEζZηHθΘιIκKλΛμMνNξΞoOπΠρPσΣτTυϒϕΦχXψΨωΩ]+[\\+\\-\\/\\*]*)/gi,\n    //Aliases\n    ALIASES: {\n      'π': 'pi',\n      '∞': 'Infinity'\n    },\n    POSITIVE_MULTIPLIERS: false,\n    //Cached items\n    CACHE: {},\n    //Print out warnings or not\n    SILENCE_WARNINGS: false,\n    //Precision\n    PRECISION: 21,\n    //function mappings\n    VECTOR: 'vector',\n    PARENTHESIS: 'parens',\n    SQRT: 'sqrt',\n    ABS: 'abs',\n    FACTORIAL: 'factorial',\n    DOUBLEFACTORIAL: 'dfactorial',\n    //reference pi and e\n    LONG_PI: '3.14159265358979323846264338327950288419716939937510582097494459230781640628620899862803482534211706798214' + '808651328230664709384460955058223172535940812848111745028410270193852110555964462294895493038196',\n    LONG_E: '2.718281828459045235360287471352662497757247093699959574966967627724076630353547594571382178525166427427466' + '39193200305992181741359662904357290033429526059563073813232862794349076323382988075319525101901',\n    PI: Math.PI,\n    E: Math.E,\n    LOG: 'log',\n    LOG10: 'log10',\n    LOG10_LATEX: 'log_{10}',\n    MAX_EXP: 200000,\n    //The number of scientific place to round to\n    SCIENTIFIC_MAX_DECIMAL_PLACES: 14,\n    //True if ints should not be converted to\n    SCIENTIFIC_IGNORE_ZERO_EXPONENTS: true\n  };\n\n  (function () {\n    Settings.CACHE.roots = {};\n    var x = 40,\n        y = 40;\n\n    for (var i = 2; i <= x; i++) {\n      for (var j = 2; j <= y; j++) {\n        var nthpow = bigInt(i).pow(j);\n        Settings.CACHE.roots[nthpow + '-' + j] = i;\n      }\n    }\n  })(); //Add the groups. These have been reorganized as of v0.5.1 to make CP the highest group\n  //The groups that help with organizing during parsing. Note that for FN is still a function even\n  //when it's raised to a symbol, which typically results in an EX\n\n\n  var N = Groups.N = 1,\n      // A number\n  P = Groups.P = 2,\n      // A number with a rational power e.g. 2^(3/5).\n  S = Groups.S = 3,\n      // A single variable e.g. x.\n  EX = Groups.EX = 4,\n      // An exponential\n  FN = Groups.FN = 5,\n      // A function\n  PL = Groups.PL = 6,\n      // A symbol/expression having same name with different powers e.g. 1/x + x^2\n  CB = Groups.CB = 7,\n      // A symbol/expression composed of one or more variables through multiplication e.g. x*y\n  CP = Groups.CP = 8; // A symbol/expression composed of one variable and any other symbol or number x+1 or x+y\n\n  var CONST_HASH = Settings.CONST_HASH = '#';\n  var PARENTHESIS = Settings.PARENTHESIS;\n  var SQRT = Settings.SQRT;\n  var ABS = Settings.ABS;\n  var FACTORIAL = Settings.FACTORIAL;\n  var DOUBLEFACTORIAL = Settings.DOUBLEFACTORIAL; //the storage container \"memory\" for parsed expressions\n\n  var EXPRESSIONS = []; //variables\n\n  var VARS = {}; //the container used to store all the reserved functions\n\n  var RESERVED = [];\n  var WARNINGS = [];\n  /**\r\n   * Use this when errors are suppressible\r\n   * @param {String} msg\r\n   * @param {object} ErrorObj\r\n   */\n\n  var err = function (msg, ErrorObj) {\n    if (!Settings.suppress_errors) {\n      if (ErrorObj) throw new ErrorObj(msg);else throw new Error(msg);\n    }\n  }; //Utils ========================================================================\n\n\n  var customError = function (name) {\n    var E = function (message) {\n      this.name = name;\n      this.message = message !== undefined ? message : '';\n      var error = new Error(this.message);\n      error.name = this.name;\n      this.stack = error.stack;\n    }; //create an empty error\n\n\n    E.prototype = Object.create(Error.prototype);\n    return E;\n  };\n  /**\r\n   * Checks to see if value is one of nerdamer's reserved names\r\n   * @param {String} value\r\n   * @return boolean\r\n   */\n\n\n  var isReserved = function (value) {\n    return RESERVED.indexOf(value) !== -1;\n  };\n  /**\r\n   * Checks to see that all symbols in array are the same\r\n   * @param {Symbol[]} arr\r\n   * @returns {bool}\r\n   */\n\n\n  var allSame = function (arr) {\n    var last = arr[0];\n\n    for (var i = 1, l = arr.length; i < l; i++) if (!arr[i].equals(last)) return false;\n\n    return true;\n  };\n  /**\r\n   * Used to pass warnings or low severity errors about the library\r\n   * @param msg\r\n   */\n\n\n  var warn = function (msg) {\n    WARNINGS.push(msg);\n\n    if (Settings.SHOW_WARNINGS && console && console.warn) {\n      console.warn(msg);\n    }\n  };\n  /**\r\n   * Enforces rule: \"must start with a letter or underscore and\r\n   * can have any number of underscores, letters, and numbers thereafter.\"\r\n   * @param name The name of the symbol being checked\r\n   * @param {String} typ - The type of symbols that's being validated\r\n   * @throws {Exception}  - Throws an exception on fail\r\n   */\n\n\n  var validateName = function (name, typ) {\n    typ = typ || 'variable';\n    if (Settings.ALLOW_CHARS.indexOf(name) !== -1) return;\n    var regex = Settings.VALIDATION_REGEX;\n\n    if (!regex.test(name)) {\n      throw new InvalidVariableNameError(name + ' is not a valid ' + typ + ' name');\n    }\n  };\n  /**\r\n   * Convert number from scientific format to decimal format\r\n   * @param {Number} num\r\n   */\n\n\n  var scientificToDecimal = function (num) {\n    var nsign = Math.sign(num); //remove the sign\n\n    num = Math.abs(num); //if the number is in scientific notation remove it\n\n    if (/\\d+\\.?\\d*e[\\+\\-]*\\d+/i.test(num)) {\n      var zero = '0',\n          parts = String(num).toLowerCase().split('e'),\n          //split into coeff and exponent\n      e = parts.pop(),\n          //store the exponential part\n      l = Math.abs(e),\n          //get the number of zeros\n      sign = e / l,\n          coeff_array = parts[0].split('.');\n\n      if (sign === -1) {\n        l = l - coeff_array[0].length;\n\n        if (l < 0) {\n          num = coeff_array[0].slice(0, l) + '.' + coeff_array[0].slice(l) + (coeff_array.length === 2 ? coeff_array[1] : '');\n        } else {\n          num = zero + '.' + new Array(l + 1).join(zero) + coeff_array.join('');\n        }\n      } else {\n        var dec = coeff_array[1];\n        if (dec) l = l - dec.length;\n\n        if (l < 0) {\n          num = coeff_array[0] + dec.slice(0, l) + '.' + dec.slice(l);\n        } else {\n          num = coeff_array.join('') + new Array(l + 1).join(zero);\n        }\n      }\n    }\n\n    return nsign < 0 ? '-' + num : num;\n  };\n  /**\r\n   * Checks if number is a prime number\r\n   * @param {Number} n - the number to be checked\r\n   */\n\n\n  var isPrime = function (n) {\n    var q = Math.floor(Math.sqrt(n));\n\n    for (var i = 2; i <= q; i++) {\n      if (n % i === 0) return false;\n    }\n\n    return true;\n  };\n  /**\r\n   * Generates an object with known variable value for evaluation\r\n   * @param {String} variable\r\n   * @param {any} value Any stringifyable object\r\n   * @returns {Object} \r\n   */\n\n\n  var knownVariable = function (variable, value) {\n    var o = {};\n    o[variable] = value;\n    return o;\n  };\n  /**\r\n   * Checks if n is a number\r\n   * @param {any} n\r\n   */\n\n\n  var isNumber = function (n) {\n    return /^\\d+\\.?\\d*$/.test(n);\n  };\n  /**\r\n   * Checks to see if an array contains only numeric values\r\n   * @param {Array} arr\r\n   */\n\n\n  var allNumeric = function (arr) {\n    for (var i = 0; i < arr.length; i++) if (!isNumber(arr[i])) return false;\n\n    return true;\n  };\n  /**\r\n   * Checks to see if a number or Symbol is a fraction\r\n   * @param {Number|Symbol} num\r\n   * @returns {boolean}\r\n   */\n\n\n  var isFraction = function (num) {\n    if (isSymbol(num)) return isFraction(num.multiplier.toDecimal());\n    return num % 1 !== 0;\n  };\n  /**\r\n   * Checks to see if the object provided is a Symbol\r\n   * @param {Object} obj\r\n   */\n\n\n  var isSymbol = function (obj) {\n    return obj instanceof Symbol;\n  };\n  /**\r\n   * Checks to see if the object provided is an Expression\r\n   * @param {Object} obj\r\n   */\n\n\n  var isExpression = function (obj) {\n    return obj instanceof Expression;\n  };\n  /**\r\n   * This method traverses the symbol structure and grabs all the variables in a symbol. The variable\r\n   * names are then returned in alphabetical order.\r\n   * @param {Symbol} obj\r\n   * @param {Boolean} poly\r\n   * @param {Object} vars - An object containing the variables. Do not pass this in as it generated\r\n   * automatically. In the future this will be a Collector object.\r\n   * @returns {String[]} - An array containing variable names\r\n   */\n\n\n  var variables = function (obj, poly, vars) {\n    vars = vars || {\n      c: [],\n      add: function (value) {\n        if (this.c.indexOf(value) === -1 && isNaN(value)) this.c.push(value);\n      }\n    };\n\n    if (isSymbol(obj)) {\n      var group = obj.group,\n          prevgroup = obj.previousGroup;\n      if (group === EX) variables(obj.power, poly, vars);\n\n      if (group === CP || group === CB || prevgroup === CP || prevgroup === CB) {\n        for (var x in obj.symbols) {\n          variables(obj.symbols[x], poly, vars);\n        }\n      } else if (group === S || prevgroup === S) {\n        //very crude needs fixing. TODO\n        if (!(obj.value === 'e' || obj.value === 'pi' || obj.value === Settings.IMAGINARY)) vars.add(obj.value);\n      } else if (group === PL || prevgroup === PL) {\n        variables(firstObject(obj.symbols), poly, vars);\n      } else if (group === EX) {\n        if (!isNaN(obj.value)) vars.add(obj.value);\n        variables(obj.power, poly, vars);\n      } else if (group === FN && !poly) {\n        for (var i = 0; i < obj.args.length; i++) {\n          variables(obj.args[i], poly, vars);\n        }\n      }\n    }\n\n    return vars.c.sort();\n  };\n  /**\r\n   * Returns the sum of an array\r\n   * @param {Array} arr\r\n   * @param {boolean} toNumber\r\n   * @returns {Symbol}\r\n   */\n\n\n  var arraySum = function (arr, toNumber) {\n    var sum = new Symbol(0);\n\n    for (var i = 0; i < arr.length; i++) {\n      var x = arr[i]; // Convert to symbol if not\n\n      sum = _.add(sum, !isSymbol(x) ? _.parse(x) : x);\n    }\n\n    return toNumber ? Number(sum) : sum;\n  };\n  /**\r\n   * Separates out the variables into terms of variabls.\r\n   * e.g. x+y+x*y+sqrt(2)+pi returns\r\n   * {x: x, y: y, x y: x*y, constants: sqrt(2)+pi\r\n   * @param {type} symbol\r\n   * @param {type} o\r\n   * @returns {undefined}\r\n   * @throws {Error} for expontentials\r\n   */\n\n\n  var separate = function (symbol, o) {\n    symbol = _.expand(symbol);\n    o = o || {};\n\n    var insert = function (key, sym) {\n      if (!o[key]) o[key] = new Symbol(0);\n      o[key] = _.add(o[key], sym.clone());\n    };\n\n    symbol.each(function (x) {\n      if (x.isConstant('all')) {\n        insert('constants', x);\n      } else if (x.group === S) {\n        insert(x.value, x);\n      } else if (x.group === FN && (x.fname === ABS || x.fname === '')) {\n        separate(x.args[0]);\n      } else if (x.group === EX || x.group === FN) {\n        throw new Error('Unable to separate. Term cannot be a function!');\n      } else {\n        insert(variables(x).join(' '), x);\n      }\n    });\n    return o;\n  };\n  /**\r\n   * Fills holes in an array with zero symbol or generates one with n zeroes\r\n   * @param {Array} arr\r\n   * @param {Number} n\r\n   */\n\n\n  var fillHoles = function (arr, n) {\n    n = n || arr.length;\n\n    for (var i = 0; i < n; i++) {\n      var sym = arr[i];\n      if (!sym) arr[i] = new Symbol(0);\n    }\n\n    return arr;\n  };\n  /**\r\n   *\r\n   * Checks to see if the object provided is a Vector\r\n   * @param {Object} obj\r\n   */\n\n\n  var isVector = function (obj) {\n    return obj instanceof Vector;\n  };\n  /**\r\n   * Checks to see if the object provided is a Matrix\r\n   * @param {Object} obj\r\n   */\n\n\n  var isMatrix = function (obj) {\n    return obj instanceof Matrix;\n  };\n\n  var isSet = function (obj) {\n    return obj instanceof Set;\n  };\n  /**\r\n   * Checks to see if a symbol is in group N\r\n   * @param {Symbol} symbol\r\n   */\n\n\n  var isNumericSymbol = function (symbol) {\n    return symbol.group === N || symbol.group === P;\n  };\n  /**\r\n   * Checks to see if a symbol is a variable with no multiplier nor power\r\n   * @param {Symbol} symbol\r\n   */\n\n\n  var isVariableSymbol = function (symbol) {\n    return symbol.group === S && symbol.multiplier.equals(1) && symbol.power.equals(1);\n  };\n  /**\r\n   * Checks to see if the object provided is an Array\r\n   * @param {Object} arr\r\n   */\n\n\n  var isArray = function (arr) {\n    return Array.isArray(arr);\n  };\n  /**\r\n   * Checks to see if a number is an integer\r\n   * @param {Number} num\r\n   */\n\n\n  var isInt = function (num) {\n    return /^[-+]?\\d+e?\\+?\\d*$/gim.test(num.toString());\n  };\n  /**\r\n   * @param {Number|Symbol} obj\r\n   * @returns {boolean}\r\n   */\n\n\n  var isNegative = function (obj) {\n    if (isSymbol(obj)) {\n      obj = obj.multiplier;\n    }\n\n    return obj.lessThan(0);\n  };\n  /**\r\n   * Safely stringify object\r\n   * @param o\r\n   */\n\n\n  var stringify = function (o) {\n    if (!o) return o;\n    return String(o);\n  };\n  /**\r\n   * @param {String} str\r\n   * @returns {String} - returns a formatted string surrounded by brackets\r\n   */\n\n\n  var inBrackets = function (str) {\n    return '(' + str + ')';\n  };\n  /**\r\n   * A helper function to replace parts of string\r\n   * @param {String} str - The original string\r\n   * @param {Integer} from - The starting index\r\n   * @param {Integer} to - The ending index\r\n   * @param {String} with_str - The replacement string\r\n   * @returns {String} - A formatted string\r\n   */\n\n\n  var stringReplace = function (str, from, to, with_str) {\n    return str.substr(0, from) + with_str + str.substr(to, str.length);\n  };\n  /**\r\n   * the Parser uses this to check if it's allowed to convert the obj to type Symbol\r\n   * @param {Object} obj\r\n   * @returns {boolean}\r\n   */\n\n\n  var customType = function (obj) {\n    return obj !== undefined && obj.custom;\n  };\n  /**\r\n   * Checks to see if numbers are both negative or are both positive\r\n   * @param {Number} a\r\n   * @param {Number} b\r\n   * @returns {boolean}\r\n   */\n\n\n  var sameSign = function (a, b) {\n    return a < 0 === b < 0;\n  };\n  /**\r\n   * A helper function to replace multiple occurences in a string. Takes multiple arguments\r\n   * @example format('{0} nice, {0} sweet', 'something')\r\n   * //returns 'something nice, something sweet'\r\n   */\n\n\n  var format = function () {\n    var args = [].slice.call(arguments),\n        str = args.shift();\n    var new_str = str.replace(/{(\\d+)}/g, function (match, index) {\n      var arg = args[index];\n      return typeof arg === 'function' ? arg() : arg;\n    });\n    return new_str;\n  };\n  /**\r\n   * Generates an array with values within a range. Multiplies by a step if provided\r\n   * @param {Number} start\r\n   * @param {Number} end\r\n   * @param {Number} step\r\n   */\n\n\n  var range = function (start, end, step) {\n    var arr = [];\n    step = step || 1;\n\n    for (var i = start; i <= end; i++) arr.push(i * step);\n\n    return arr;\n  };\n  /**\r\n   * Returns an array of all the keys in an array\r\n   * @param {Object} obj\r\n   * @returns {Array}\r\n   */\n\n\n  var keys = Object.keys;\n  /**\r\n   * Returns the first encountered item in an object. Items do not have a fixed order in objects\r\n   * so only use if you need any first random or if there's only one item in the object\r\n   * @param {Object} obj\r\n   * @param {String} key Return this key as first object\r\n   * @param {Boolean} both\r\n   * @returns {*}\r\n   */\n\n  var firstObject = function (obj, key, both) {\n    for (var x in obj) break;\n\n    if (key) return x;\n    if (both) return {\n      key: x,\n      obj: obj[x]\n    };\n    return obj[x];\n  };\n  /**\r\n   * Substitutes out variables for two symbols, parses them to a number and them compares them numerically\r\n   * @param {Symbol} sym1\r\n   * @param {Symbol} sym2\r\n   * @param {String[]} vars - an optional array of variables to use\r\n   * @returns {bool}\r\n   */\n\n\n  var compare = function (sym1, sym2, vars) {\n    var n = 5; //a random number between 1 and 5 is good enough\n\n    var scope = {}; // scope object with random numbers generated using vars\n\n    var comparison;\n\n    for (var i = 0; i < vars.length; i++) scope[vars[i]] = new Symbol(Math.floor(Math.random() * n) + 1);\n\n    block('PARSE2NUMBER', function () {\n      comparison = _.parse(sym1, scope).equals(_.parse(sym2, scope));\n    });\n    return comparison;\n  };\n  /**\r\n   * Is used to set a user defined function using the function assign operator\r\n   * @param {String} name\r\n   * @param {String[]} params_array\r\n   * @param {String} body\r\n   * @returns {Boolean}\r\n   */\n\n\n  var setFunction = function (name, params_array, body) {\n    validateName(name);\n\n    if (!isReserved(name)) {\n      params_array = params_array || variables(_.parse(body)); // The function gets set to PARSER.mapped function which is just\n      // a generic function call.\n\n      _.functions[name] = [_.mapped_function, params_array.length, {\n        name: name,\n        params: params_array,\n        body: body\n      }];\n      return body;\n    }\n\n    return null;\n  };\n  /**\r\n   * Returns the minimum number in an array\r\n   * @param {Array} arr\r\n   * @returns {Number}\r\n   */\n\n\n  var arrayMax = function (arr) {\n    return Math.max.apply(undefined, arr);\n  };\n  /**\r\n   * Returns the maximum number in an array\r\n   * @param {Array} arr\r\n   * @returns {Number}\r\n   */\n\n\n  var arrayMin = function (arr) {\n    return Math.min.apply(undefined, arr);\n  };\n  /**\r\n   * Checks to see if two arrays are equal\r\n   * @param {Array} arr1 \r\n   * @param {Array} arr2 \r\n   */\n\n\n  var arrayEqual = function (arr1, arr2) {\n    arr1.sort();\n    arr2.sort(); // The must be of the same length\n\n    if (arr1.length === arr2.length) {\n      for (var i = 0; i < arr1.length; i++) {\n        // If any two items don't match we're done\n        if (arr1[i] !== arr2[i]) {\n          return false;\n        }\n      } // Otherwise they're equal\n\n\n      return true;\n    }\n\n    return false;\n  };\n  /**\r\n   * Clones array with clonable items\r\n   * @param {Array} arr\r\n   * @returns {Array}\r\n   */\n\n\n  var arrayClone = function (arr) {\n    var new_array = [],\n        l = arr.length;\n\n    for (var i = 0; i < l; i++) new_array[i] = arr[i].clone();\n\n    return new_array;\n  };\n  /**\r\n   * Fills numbers between array values\r\n   * @param {Numbers[]} arr\r\n   * @param {Integer} slices\r\n   */\n\n\n  var arrayAddSlices = function (arr, slices) {\n    slices = slices || 20;\n    var retval = [];\n    var c, delta, e;\n    retval.push(arr[0]); //push the beginning\n\n    for (var i = 0; i < arr.length - 1; i++) {\n      c = arr[i];\n      delta = arr[i + 1] - c; //get the difference\n\n      e = delta / slices; //chop it up in the desired number of slices\n\n      for (var j = 0; j < slices; j++) {\n        c += e; //add the mesh to the last slice\n\n        retval.push(c);\n      }\n    }\n\n    return retval;\n  };\n  /**\r\n   * Gets nth roots of a number\r\n   * @param {Symbol} symbol\r\n   * @returns {Vector}\r\n   */\n\n\n  var nroots = function (symbol) {\n    var a, b;\n\n    if (symbol.group === FN && symbol.fname === '') {\n      a = Symbol.unwrapPARENS(_.parse(symbol).toLinear());\n      b = _.parse(symbol.power);\n    } else if (symbol.group === P) {\n      a = _.parse(symbol.value);\n      b = _.parse(symbol.power);\n    }\n\n    if (a && b && a.group === N && b.group === N && a.multiplier.isNegative()) {\n      var _roots = [];\n      var parts = Symbol.toPolarFormArray(evaluate(symbol));\n      var r = parts[0]; //var r = _.parse(a).abs().toString();\n      //https://en.wikipedia.org/wiki/De_Moivre%27s_formula\n\n      var x = _.arg(a);\n\n      var n = b.multiplier.den.toString();\n      var p = b.multiplier.num.toString();\n      var formula = '(({0})^({1})*(cos({3})+({2})*sin({3})))^({4})';\n\n      for (var i = 0; i < n; i++) {\n        var t = evaluate(_.parse(format(\"(({0})+2*pi*({1}))/({2})\", x, i, n))).multiplier.toDecimal();\n\n        _roots.push(evaluate(_.parse(format(formula, r, n, Settings.IMAGINARY, t, p))));\n      }\n\n      return Vector.fromArray(_roots);\n    } else if (symbol.isConstant(true, true)) {\n      var sign = symbol.sign();\n      var x = evaluate(symbol.abs());\n\n      var root = _.sqrt(x);\n\n      var _roots = [root.clone(), root.negate()];\n      if (sign < 0) _roots = _roots.map(function (x) {\n        return _.multiply(x, Symbol.imaginary());\n      });\n    } else {\n      _roots = [_.parse(symbol)];\n    }\n\n    return Vector.fromArray(_roots);\n  };\n  /**\r\n   * Sorts and array given 2 parameters\r\n   * @param {String} a\r\n   * @param {String} b\r\n   */\n\n\n  var comboSort = function (a, b) {\n    var l = a.length,\n        combined = []; //the linker\n\n    for (var i = 0; i < a.length; i++) {\n      combined.push([a[i], b[i]]); //create the map\n    }\n\n    combined.sort(function (x, y) {\n      return x[0] - y[0];\n    });\n    var na = [],\n        nb = [];\n\n    for (i = 0; i < l; i++) {\n      na.push(combined[i][0]);\n      nb.push(combined[i][1]);\n    }\n\n    return [na, nb];\n  };\n  /**\r\n   * TODO: Pick a more descriptive name and better description\r\n   * Breaks a function down into it's parts wrt to a variable, mainly coefficients\r\n   * Example a*x^2+b wrt x\r\n   * @param {Symbol} fn\r\n   * @param {String} wrt\r\n   * @param {bool} as_obj\r\n   */\n\n\n  var decompose_fn = function (fn, wrt, as_obj) {\n    wrt = String(wrt); //convert to string\n\n    var ax, a, x, b;\n\n    if (fn.group === CP) {\n      var t = _.expand(fn.clone()).stripVar(wrt);\n\n      ax = _.subtract(fn.clone(), t.clone());\n      b = t;\n    } else ax = fn.clone();\n\n    a = ax.stripVar(wrt);\n    x = _.divide(ax.clone(), a.clone());\n    b = b || new Symbol(0);\n    if (as_obj) return {\n      a: a,\n      x: x,\n      ax: ax,\n      b: b\n    };\n    return [a, x, ax, b];\n  };\n  /**\r\n   * Rounds a number up to x decimal places\r\n   * @param {Number} x\r\n   * @param {Number} s\r\n   */\n\n\n  var nround = function (x, s) {\n    if (isInt(x)) {\n      if (x >= Number.MAX_VALUE) return x.toString();\n      return Number(x);\n    }\n\n    s = typeof s === 'undefined' ? 14 : s;\n    return Math.round(x * Math.pow(10, s)) / Math.pow(10, s);\n  };\n  /**\r\n   * Is used for u-substitution. Gets a suitable u for substitution. If for\r\n   * instance a is used in the symbol then it keeps going down the line until\r\n   * one is found that's not in use. If all letters are taken then it\r\n   * starts appending numbers.\r\n   * IMPORTANT! It assumes that the substitution will be undone\r\n   * beore the user gets to interact with the object again.\r\n   * @param {Symbol} symbol\r\n   */\n\n\n  var getU = function (symbol) {\n    //start with u\n    var u = 'u',\n        //start with u\n    v = u,\n        //init with u\n    c = 0,\n        //postfix number\n    vars = variables(symbol); //make sure this variable isn't reserved and isn't in the variable list\n\n    while (!(RESERVED.indexOf(v) === -1 && vars.indexOf(v) === -1)) v = u + c++; //get an empty slot. It seems easier to just push but the\n    //problem is that we may have some which are created by clearU\n\n\n    for (var i = 0, l = RESERVED.length; i <= l; i++) //reserved cannot equals false or 0 so we can safely check for a falsy type\n    if (!RESERVED[i]) {\n      RESERVED[i] = v; //reserve the variable\n\n      break;\n    }\n\n    return v;\n  };\n  /**\r\n   * Clears the u variable so it's no longer reserved\r\n   * @param {String} u\r\n   */\n\n\n  var clearU = function (u) {\n    var indx = RESERVED.indexOf(u);\n    if (indx !== -1) RESERVED[indx] = undefined;\n  };\n  /**\r\n   * Loops through each item in object and calls function with item as param\r\n   * @param {Object|Array} obj\r\n   * @param {Function} fn\r\n   */\n\n\n  var each = function (obj, fn) {\n    if (isArray(obj)) {\n      var l = obj.length;\n\n      for (var i = 0; i < l; i++) fn.call(obj, i);\n    } else {\n      for (var x in obj) if (obj.hasOwnProperty(x)) fn.call(obj, x);\n    }\n  };\n  /**\r\n   * Checks to see if a number is an even number\r\n   * @param {Number} num\r\n   * @returns {boolean}\r\n   */\n\n\n  var even = function (num) {\n    return num % 2 === 0;\n  };\n  /**\r\n   * Checks to see if a fraction is divisible by 2\r\n   * @param {Number} num\r\n   * @returns {boolean}\r\n   */\n\n\n  var evenFraction = function (num) {\n    return 1 / (num % 1) % 2 === 0;\n  };\n  /**\r\n   * Strips duplicates out of an array\r\n   * @param {Array} arr\r\n   */\n\n\n  var arrayUnique = function (arr) {\n    var l = arr.length,\n        a = [];\n\n    for (var i = 0; i < l; i++) {\n      var item = arr[i];\n      if (a.indexOf(item) === -1) a.push(item);\n    }\n\n    return a;\n  };\n  /**\r\n   * Gets all the variables in an array of Symbols\r\n   * @param {Symbol[]} arr \r\n   */\n\n\n  var arrayGetVariables = function (arr) {\n    var vars = variables(arr[0], null, null, true); //get all variables\n\n    for (var i = 1, l = arr.length; i < l; i++) vars = vars.concat(variables(arr[i])); //remove duplicates\n\n\n    vars = arrayUnique(vars).sort(); //done\n\n    return vars;\n  };\n  /**\r\n   * Removes duplicates from an array. Returns a new array\r\n   * @param {Array} arr\r\n   * @param {Function} condition\r\n   */\n\n\n  var removeDuplicates = function (arr, condition) {\n    var conditionType = typeof condition;\n\n    if (conditionType !== 'function' || conditionType === 'undefined') {\n      condition = function (a, b) {\n        return a === b;\n      };\n    }\n\n    var seen = [];\n\n    while (arr.length) {\n      var a = arr[0]; //only one element left so we're done\n\n      if (arr.length === 1) {\n        seen.push(a);\n        break;\n      }\n\n      var temp = [];\n      seen.push(a); //we already scanned these\n\n      for (var i = 1; i < arr.length; i++) {\n        var b = arr[i]; //if the number is outside the specified tolerance\n\n        if (!condition(a, b)) temp.push(b);\n      } //start over with the remainder\n\n\n      arr = temp;\n    }\n\n    return seen;\n  };\n  /**\r\n   * Reserves the names in an object so they cannot be used as function names\r\n   * @param {Object} obj\r\n   */\n\n\n  var reserveNames = function (obj) {\n    var add = function (item) {\n      if (RESERVED.indexOf(item) === -1) RESERVED.push(item);\n    };\n\n    if (typeof obj === 'string') add(obj);else {\n      each(obj, function (x) {\n        add(x);\n      });\n    }\n  };\n  /**\r\n   * Removes an item from either an array or an object. If the object is an array, the index must be\r\n   * specified after the array. If it's an object then the key must be specified\r\n   * @param {Object|Array} obj\r\n   * @param {Integer} indexOrKey\r\n   */\n\n\n  var remove = function (obj, indexOrKey) {\n    var result;\n\n    if (isArray(obj)) {\n      result = obj.splice(indexOrKey, 1)[0];\n    } else {\n      result = obj[indexOrKey];\n      delete obj[indexOrKey];\n    }\n\n    return result;\n  };\n  /**\r\n   * Creates a temporary block in which one of the global settings is temporarily modified while\r\n   * the function is called. For instance if you want to parse directly to a number rather than have a symbolic\r\n   * answer for a period you would set PARSE2NUMBER to true in the block.\r\n   * @example block('PARSE2NUMBER', function(){//symbol being parsed to number}, true);\r\n   * @param {String} setting - The setting being accessed\r\n   * @param {Function} f\r\n   * @param {boolean} opt - The value of the setting in the block\r\n   * @param {String} obj - The obj of interest. Usually a Symbol but could be any object\r\n   */\n\n\n  var block = function (setting, f, opt, obj) {\n    var current_setting = Settings[setting];\n    Settings[setting] = opt === undefined ? true : !!opt;\n    var retval = f.call(obj);\n    Settings[setting] = current_setting;\n    return retval;\n  };\n  /**\r\n   * provide a mechanism for accessing functions directly. Not yet complete!!!\r\n   * Some functions will return undefined. This can maybe just remove the\r\n   * function object at some point when all functions are eventually\r\n   * housed in the global function object. Returns ALL parser available\r\n   * functions. Parser.functions may not contain all functions\r\n   */\n\n\n  var importFunctions = function () {\n    var o = {};\n\n    for (var x in _.functions) o[x] = _.functions[x][0];\n\n    return o;\n  };\n  /**\r\n   * Converts function arguments to an array. Now used by gcd and lcm in Algebra.js :)\r\n   * @param {Array|object} obj\r\n   */\n\n\n  var arguments2Array = function (obj) {\n    return [].slice.call(obj);\n  };\n  /**\r\n   * Returns the coefficients of a symbol given a variable. Given ax^2+b^x+c, it divides\r\n   * each nth term by x^n.\r\n   * @param {Symbol} symbol\r\n   * @param {Symbol} wrt\r\n   */\n\n\n  var getCoeffs = function (symbol, wrt, info) {\n    var coeffs = []; //we loop through the symbols and stick them in their respective\n    //containers e.g. y*x^2 goes to index 2\n\n    symbol.each(function (term) {\n      if (term.contains(wrt)) {\n        //we want only the coefficient which in this case will be everything but the variable\n        //e.g. a*b*x -> a*b if the variable to solve for is x\n        var coeff = term.stripVar(wrt),\n            x = _.divide(term.clone(), coeff.clone()),\n            p = x.power.toDecimal();\n      } else {\n        coeff = term;\n        p = 0;\n      }\n\n      var e = coeffs[p]; //if it exists just add it to it\n\n      coeffs[p] = e ? _.add(e, coeff) : coeff;\n    }, true);\n\n    for (var i = 0; i < coeffs.length; i++) if (!coeffs[i]) coeffs[i] = new Symbol(0); //fill the holes\n\n\n    return coeffs;\n  };\n  /**\r\n   * As the name states. It forces evaluation of the expression\r\n   * @param {Symbol} symbol\r\n   * @param {Symbol} o\r\n   */\n\n\n  var evaluate = function (symbol, o) {\n    return block('PARSE2NUMBER', function () {\n      return _.parse(symbol, o);\n    }, true);\n  };\n  /**\r\n   * Converts an array to a vector. Consider moving this to Vector.fromArray\r\n   * @param {String[]|String|Symbol|Number|Number[]} x\r\n   */\n\n\n  var convertToVector = function (x) {\n    if (isArray(x)) {\n      var vector = new Vector([]);\n\n      for (var i = 0; i < x.length; i++) vector.elements.push(convertToVector(x[i]));\n\n      return vector;\n    } //Ensure that a nerdamer ready object is returned\n\n\n    if (!isSymbol(x)) return _.parse(x);\n    return x;\n  };\n  /**\r\n   * Generates prime numbers up to a specified number\r\n   * @param {Number} upto\r\n   */\n\n\n  var generatePrimes = function (upto) {\n    //get the last prime in the array\n    var last_prime = PRIMES[PRIMES.length - 1] || 2; //no need to check if we've already encountered the number. Just check the cache.\n\n    for (var i = last_prime; i < upto; i++) {\n      if (isPrime(i)) PRIMES.push(i);\n    }\n  };\n  /**\r\n   * Checks to see if all arguments are numbers\r\n   * @param {object} args\r\n   */\n\n\n  var allNumbers = function (args) {\n    for (var i = 0; i < args.length; i++) if (args[i].group !== N) return false;\n\n    return true;\n  };\n  /*\r\n   * Checks if all arguments aren't just all number but if they\r\n   * are constants as well e.g. pi, e.\r\n   * @param {object} args\r\n   */\n\n\n  var allConstants = function (args) {\n    for (var i = 0; i < args.length; i++) {\n      if (args[i].isPi() || args[i].isE()) continue;\n      if (!args[i].isConstant(true)) return false;\n    }\n\n    return true;\n  };\n  /**\r\n   * Used to multiply two expression in expanded form\r\n   * @param {Symbol} a\r\n   * @param {Symbol} b\r\n   */\n\n\n  var mix = function (a, b, opt) {\n    // Flip them if b is a CP or PL and a is not\n    if (b.isComposite() && !a.isComposite() || b.isLinear() && !a.isLinear()) {\n      [a, b] = [b, a];\n    } // A temporary variable to hold the expanded terms\n\n\n    var t = new Symbol(0);\n\n    if (a.isLinear()) {\n      a.each(function (x) {\n        // If b is not a PL or a CP then simply multiply it\n        if (!b.isComposite()) {\n          var term = _.multiply(_.parse(x), _.parse(b));\n\n          t = _.add(t, _.expand(term, opt));\n        } // Otherwise multiply out each term.\n        else if (b.isLinear()) {\n            b.each(function (y) {\n              var term = _.multiply(_.parse(x), _.parse(y));\n\n              var expanded = _.expand(_.parse(term), opt);\n\n              t = _.add(t, expanded);\n            }, true);\n          } else {\n            t = _.add(t, _.multiply(x, _.parse(b)));\n          }\n      }, true);\n    } else {\n      // Just multiply them together\n      t = _.multiply(a, b);\n    } // The expanded function is now t\n\n\n    return t;\n  }; //Exceptions ===================================================================\n  //Is thrown for division by zero\n\n\n  var DivisionByZero = customError('DivisionByZero'); // Is throw if an error occured during parsing\n\n  var ParseError = customError('ParseError'); // Is thrown if the expression results in undefined\n\n  var UndefinedError = customError('UndefinedError'); // Is throw input is out of the function domain\n\n  var OutOfFunctionDomainError = customError('OutOfFunctionDomainError'); // Is throw if a function exceeds x amount of iterations\n\n  var MaximumIterationsReached = customError('MaximumIterationsReached'); // Is thrown if the parser receives an incorrect type\n\n  var NerdamerTypeError = customError('NerdamerTypeError'); // Is thrown if bracket parity is not correct\n\n  var ParityError = customError('ParityError'); // Is thrown if an unexpectd or incorrect operator is encountered\n\n  var OperatorError = customError('OperatorError'); // Is thrown if an index is out of range.\n\n  var OutOfRangeError = customError('OutOfRangeError'); // Is thrown if dimensions are incorrect. Mostly for matrices\n\n  var DimensionError = customError('DimensionError'); // Is thrown if variable name violates naming rule\n\n  var InvalidVariableNameError = customError('InvalidVariableNameError'); // Is thrown if the limits of the library are exceeded for a function\n  // This can be that the function become unstable passed a value\n\n  var ValueLimitExceededError = customError('ValueLimitExceededError'); // Is throw if the value is an incorrect LH or RH value\n\n  var NerdamerValueError = customError('NerdamerValueError'); // Is thrown if the value is an incorrect LH or RH value\n\n  var SolveError = customError('SolveError'); // Is thrown for an infinite loop\n\n  var InfiniteLoopError = customError('InfiniteLoopError'); // Is thrown if an operator is found when there shouldn't be one\n\n  var UnexpectedTokenError = customError('UnexpectedTokenError');\n  var exceptions = {\n    DivisionByZero: DivisionByZero,\n    ParseError: ParseError,\n    OutOfFunctionDomainError: OutOfFunctionDomainError,\n    UndefinedError: UndefinedError,\n    MaximumIterationsReached: MaximumIterationsReached,\n    NerdamerTypeError: NerdamerTypeError,\n    ParityError: ParityError,\n    OperatorError: OperatorError,\n    OutOfRangeError: OutOfRangeError,\n    DimensionError: DimensionError,\n    InvalidVariableNameError: InvalidVariableNameError,\n    ValueLimitExceededError: ValueLimitExceededError,\n    NerdamerValueError: NerdamerValueError,\n    SolveError: SolveError,\n    InfiniteLoopError: InfiniteLoopError,\n    UnexpectedTokenError: UnexpectedTokenError\n  }; //Math2 ========================================================================\n  //This object holds additional functions for nerdamer. Think of it as an extension of the Math object.\n  //I really don't like touching objects which aren't mine hence the reason for Math2. The names of the\n  //functions within are pretty self-explanatory.\n  //NOTE: DO NOT USE INLINE COMMENTS WITH THE MATH2 OBJECT! THIS BREAK DURING COMPILATION OF BUILDFUNCTION.\n\n  var Math2 = {\n    csc: function (x) {\n      return 1 / Math.sin(x);\n    },\n    sec: function (x) {\n      return 1 / Math.cos(x);\n    },\n    cot: function (x) {\n      return 1 / Math.tan(x);\n    },\n    acsc: function (x) {\n      return Math.asin(1 / x);\n    },\n    asec: function (x) {\n      return Math.acos(1 / x);\n    },\n    acot: function (x) {\n      return Math.PI / 2 - Math.atan(x);\n    },\n    // https://gist.github.com/jiggzson/df0e9ae8b3b06ff3d8dc2aa062853bd8\n    erf: function (x) {\n      var t = 1 / (1 + 0.5 * Math.abs(x));\n      var result = 1 - t * Math.exp(-x * x - 1.26551223 + t * (1.00002368 + t * (0.37409196 + t * (0.09678418 + t * (-0.18628806 + t * (0.27886807 + t * (-1.13520398 + t * (1.48851587 + t * (-0.82215223 + t * 0.17087277)))))))));\n      return x >= 0 ? result : -result;\n    },\n    diff: function (f) {\n      var h = 0.001;\n\n      var derivative = function (x) {\n        return (f(x + h) - f(x - h)) / (2 * h);\n      };\n\n      return derivative;\n    },\n    median: function (...values) {\n      values.sort(function (a, b) {\n        return a - b;\n      });\n      var half = Math.floor(values.length / 2);\n      if (values.length % 2) return values[half];\n      return (values[half - 1] + values[half]) / 2.0;\n    },\n\n    /*\r\n     * Reverses continued fraction calculation\r\n     * @param {obj} contd\r\n     * @returns {Number}\r\n     */\n    fromContinued: function (contd) {\n      var arr = contd.fractions.slice();\n      var e = 1 / arr.pop();\n\n      for (var i = 0, l = arr.length; i < l; i++) {\n        e = 1 / (arr.pop() + e);\n      }\n\n      return contd.sign * (contd.whole + e);\n    },\n\n    /*\r\n     * Calculates continued fractions\r\n     * @param {Number} n\r\n     * @param {Number} x The number of places\r\n     * @returns {Number}\r\n     */\n    continuedFraction: function (n, x) {\n      x = x || 20;\n      var sign = Math.sign(n);\n      /*store the sign*/\n\n      var absn = Math.abs(n);\n      /*get the absolute value of the number*/\n\n      var whole = Math.floor(absn);\n      /*get the whole*/\n\n      var ni = absn - whole;\n      /*subtract the whole*/\n\n      var c = 0;\n      /*the counter to keep track of iterations*/\n\n      var done = false;\n      var epsilon = 1e-14;\n      var max = 1e7;\n      var e, w;\n      var retval = {\n        whole: whole,\n        sign: sign,\n        fractions: []\n      };\n      /*start calculating*/\n\n      while (!done && ni !== 0) {\n        /*invert and get the whole*/\n        e = 1 / ni;\n        w = Math.floor(e);\n\n        if (w > max) {\n          /*this signals that we may have already gone too far*/\n          var d = Math2.fromContinued(retval) - n;\n          if (d <= Number.EPSILON) break;\n        }\n        /*add to result*/\n\n\n        retval.fractions.push(w);\n        /*move the ni to the decimal*/\n\n        ni = e - w;\n        /*ni should always be a decimal. If we have a whole number then we're in the rounding errors*/\n\n        if (ni <= epsilon || c >= x - 1) done = true;\n        c++;\n      }\n      /*cleanup 1/(n+1/1) = 1/(n+1) so just move the last digit one over if it's one*/\n\n\n      var idx = retval.fractions.length - 1;\n\n      if (retval.fractions[idx] === 1) {\n        retval.fractions.pop();\n        /*increase the last one by one*/\n\n        retval.fractions[--idx]++;\n      }\n\n      return retval;\n    },\n    bigpow: function (n, p) {\n      if (!(n instanceof Frac)) n = Frac.create(n);\n      if (!(p instanceof Frac)) p = Frac.create(p);\n      var retval = new Frac(0);\n\n      if (p.isInteger()) {\n        retval.num = n.num.pow(p.toString());\n        retval.den = n.den.pow(p.toString());\n      } else {\n        var num = Frac.create(Math.pow(n.num, p.num));\n        var den = Frac.create(Math.pow(n.den, p.num));\n        retval.num = Math2.nthroot(num, p.den.toString());\n        retval.den = Math2.nthroot(den, p.den);\n      }\n\n      return retval;\n    },\n    //http://stackoverflow.com/questions/15454183/how-to-make-a-function-that-computes-the-factorial-for-numbers-with-decimals\n    gamma: function (z) {\n      var g = 7;\n      var C = [0.99999999999980993, 676.5203681218851, -1259.1392167224028, 771.32342877765313, -176.61502916214059, 12.507343278686905, -0.13857109526572012, 9.9843695780195716e-6, 1.5056327351493116e-7];\n      if (z < 0.5) return Math.PI / (Math.sin(Math.PI * z) * Math2.gamma(1 - z));else {\n        z -= 1;\n        var x = C[0];\n\n        for (var i = 1; i < g + 2; i++) x += C[i] / (z + i);\n\n        var t = z + g + 0.5;\n        return Math.sqrt(2 * Math.PI) * Math.pow(t, z + 0.5) * Math.exp(-t) * x;\n      }\n    },\n    //factorial\n    bigfactorial: function (x) {\n      var retval = new bigInt(1);\n\n      for (var i = 2; i <= x; i++) retval = retval.times(i);\n\n      return new Frac(retval);\n    },\n    //https://en.wikipedia.org/wiki/Logarithm#Calculation\n    bigLog: function (x) {\n      varn\n      if (CACHE[x]) {\n        return Frac.quick.apply(null, CACHE[x].split('/'));\n      }\n\n      x = new Frac(x);\n      var n = 80;\n      var retval = new Frac(0);\n      var a = x.subtract(new Frac(1));\n      var b = x.add(new Frac(1));\n\n      for (var i = 0; i < n; i++) {\n        var t = new Frac(2 * i + 1);\n        var k = Math2.bigpow(a.divide(b), t);\n        var r = t.clone().invert().multiply(k);\n        retval = retval.add(r);\n      }\n\n      return retval.multiply(new Frac(2));\n    },\n    //the factorial function but using the big library instead\n    factorial: function (x) {\n      var is_int = x % 1 === 0;\n      /*factorial for negative integers is complex infinity according to Wolfram Alpha*/\n\n      if (is_int && x < 0) return NaN;\n      if (!is_int) return Math2.gamma(x + 1);\n      var retval = 1;\n\n      for (var i = 2; i <= x; i++) retval = retval * i;\n\n      return retval;\n    },\n    //double factorial\n    //http://mathworld.wolfram.com/DoubleFactorial.html\n    dfactorial: function (x) {\n      if (isInt(x)) {\n        var even = x % 2 === 0;\n        /* If x = even then n = x/2 else n = (x-1)/2*/\n\n        var n = even ? x / 2 : (x + 1) / 2;\n        /*the return value*/\n\n        var r = new Frac(1);\n        /*start the loop*/\n\n        if (even) for (var i = 1; i <= n; i++) r = r.multiply(new Frac(2).multiply(new Frac(i)));else for (var i = 1; i <= n; i++) r = r.multiply(new Frac(2).multiply(new Frac(i)).subtract(new Frac(1)));\n      } else {\n        /*Not yet extended to bigNum*/\n        r = Math.pow(2, (1 + 2 * x - Math.cos(Math.PI * x)) / 4) * Math.pow(Math.PI, (Math.cos(Math.PI * x) - 1) / 4) * Math2.gamma(1 + x / 2);\n      }\n      /*done*/\n\n\n      return r;\n    },\n    GCD: function () {\n      var args = arrayUnique([].slice.call(arguments).map(function (x) {\n        return Math.abs(x);\n      })).sort(),\n          a = Math.abs(args.shift()),\n          n = args.length;\n\n      while (n-- > 0) {\n        var b = Math.abs(args.shift());\n\n        while (true) {\n          a %= b;\n\n          if (a === 0) {\n            a = b;\n            break;\n          }\n\n          b %= a;\n          if (b === 0) break;\n          ;\n        }\n      }\n\n      return a;\n    },\n    QGCD: function () {\n      var args = [].slice.call(arguments);\n      var a = args[0];\n\n      for (var i = 1; i < args.length; i++) {\n        var b = args[i];\n        var sign = a.isNegative() && b.isNegative() ? -1 : 1;\n        a = b.gcd(a);\n        if (sign < 0) a.negate();\n      }\n\n      return a;\n    },\n    LCM: function (a, b) {\n      return a * b / Math2.GCD(a, b);\n    },\n    //pow but with the handling of negative numbers\n    //http://stackoverflow.com/questions/12810765/calculating-cubic-root-for-negative-number\n    pow: function (b, e) {\n      if (b < 0) {\n        if (Math.abs(e) < 1) {\n          /*nth root of a negative number is imaginary when n is even*/\n          if (1 / e % 2 === 0) return NaN;\n          return -Math.pow(Math.abs(b), e);\n        }\n      }\n\n      return Math.pow(b, e);\n    },\n    factor: function (n) {\n      n = Number(n);\n      var sign = Math.sign(n);\n      /*store the sign*/\n\n      /*move the number to absolute value*/\n\n      n = Math.abs(n);\n      var ifactors = Math2.ifactor(n);\n      var factors = new Symbol();\n      factors.symbols = {};\n      factors.group = CB;\n\n      for (var x in ifactors) {\n        var factor = new Symbol(1);\n        factor.group = P;\n        /*cheat a little*/\n\n        factor.value = x;\n        factor.power = new Symbol(ifactors[x]);\n        factors.symbols[x] = factor;\n      }\n\n      factors.updateHash();\n\n      if (n === 1) {\n        factors = new Symbol(n);\n      }\n      /*put back the sign*/\n\n\n      if (sign < 0) factors.negate();\n      return factors;\n    },\n\n    /**\r\n     * Uses trial division\r\n     * @param {Integer} n - the number being factored\r\n     * @param {object} factors -  the factors object\r\n     * @returns {object}\r\n     */\n    sfactor: function (n, factors) {\n      factors = factors || {};\n      var r = Math.floor(Math.sqrt(n));\n      var lcprime = PRIMES[PRIMES.length - 1];\n      /*a one-time cost... Hopefully ... And don't bother for more than a million*/\n\n      /*takes too long*/\n\n      if (r > lcprime && n < 1e6) generatePrimes(r);\n      var l = PRIMES.length;\n\n      for (var i = 0; i < l; i++) {\n        var prime = PRIMES[i];\n        /*trial division*/\n\n        while (n % prime === 0) {\n          n = n / prime;\n          factors[prime] = (factors[prime] || 0) + 1;\n        }\n      }\n\n      if (n > 1) factors[n] = 1;\n      return factors;\n    },\n\n    /**\r\n     * Pollard's rho\r\n     * @param {Integer} n\r\n     * @returns {object}\r\n     */\n    ifactor: function (n) {\n      var input = new bigInt(n);\n      n = String(n);\n      if (n === '0') return {\n        '0': 1\n      };\n      n = new bigInt(n);\n      /*convert to bigInt for safety*/\n\n      var sign = n.sign ? -1 : 1;\n      n = n.abs();\n      var factors = {};\n      /*factor object being returned.*/\n\n      if (n.lt('65536')) {\n        /*less than 2^16 just use trial division*/\n        factors = Math2.sfactor(n, factors);\n      } else {\n        var add = function (e) {\n          if (!e.isPrime()) {\n            factors = Math2.sfactor(e, factors);\n          } else factors[e] = (factors[e] || 0) + 1;\n        };\n\n        try {\n          //set a safety\n          var max = 1e3;\n          var safety = 0;\n\n          while (!n.abs().equals(1)) {\n            if (n.isPrime()) {\n              add(n);\n              break;\n            } else {\n              function rho(c) {\n                var xf = new bigInt(c),\n                    cz = 2,\n                    x = new bigInt(c),\n                    factor = new bigInt(1);\n\n                while (factor.equals(1)) {\n                  for (var i = 0; i <= cz && factor.equals(1); i++) {\n                    //trigger the safety\n                    if (safety++ > max) throw new Error('stopping');\n                    x = x.pow(2).add(1).mod(n);\n                    factor = bigInt.gcd(x.minus(xf).abs(), n);\n                  }\n\n                  cz = cz * 2;\n                  xf = x;\n                }\n\n                if (factor.equals(n)) {\n                  return rho(c + 1);\n                }\n\n                return factor;\n              }\n\n              var factor = rho(2);\n              add(factor);\n              /*divide out the factor*/\n\n              n = n.divide(factor);\n            }\n          }\n        } catch (e) {\n          //reset factors\n          factors = {};\n          add(input);\n        }\n      }\n      /*put the sign back*/\n\n\n      if (sign === -1) {\n        var sm = arrayMin(keys(factors));\n        /*/get the smallest number*/\n\n        factors['-' + sm] = factors[sm];\n        delete factors[sm];\n      }\n\n      return factors;\n    },\n    //factors a number into rectangular box. If sides are primes that this will be\n    //their prime factors. e.g. 21 -> (7)(3), 133 -> (7)(19)\n    boxfactor: function (n, max) {\n      max = max || 200; //stop after this number of iterations\n\n      var c,\n          r,\n          d = Math.floor(5 / 12 * n),\n          //the divisor\n      i = 0,\n          //number of iterations\n      safety = false;\n\n      while (true) {\n        c = Math.floor(n / d);\n        r = n % d;\n        if (r === 0) break; //we're done\n\n        if (safety) return [n, 1];\n        d = Math.max(r, d - r);\n        i++;\n        safety = i > max;\n      }\n\n      return [c, d, i];\n    },\n    fib: function (n) {\n      var sign = Math.sign(n);\n      n = Math.abs(n);\n      sign = even(n) ? sign : Math.abs(sign);\n      var a = 0,\n          b = 1,\n          f = 1;\n\n      for (var i = 2; i <= n; i++) {\n        f = a + b;\n        a = b;\n        b = f;\n      }\n\n      return f * sign;\n    },\n    mod: function (x, y) {\n      return x % y;\n    },\n    //http://mathworld.wolfram.com/IntegerPart.html\n    integer_part: function (x) {\n      var sign = Math.sign(x);\n      return sign * Math.floor(Math.abs(x));\n    },\n    simpson: function (f, a, b, step) {\n      var get_value = function (f, x, side) {\n        var v = f(x);\n        var d = 0.000000000001;\n\n        if (isNaN(v)) {\n          v = f(side === 1 ? x + d : x - d);\n        }\n\n        return v;\n      };\n\n      step = step || 0.0001; //calculate the number of intervals\n\n      var n = Math.abs(Math.floor((b - a) / step)); //simpson's rule requires an even number of intervals. If it's not then add 1\n\n      if (n % 2 !== 0) n++; //get the interval size\n\n      var dx = (b - a) / n; //get x0\n\n      var retval = get_value(f, a, 1); //get the middle part 4x1+2x2+4x3 ...\n      //but first set a flag to see if it's even or odd.\n      //The first one is odd so we start there\n\n      var even = false; //get x1\n\n      var xi = a + dx; //the coefficient\n\n      var c, k; //https://en.wikipedia.org/wiki/Simpson%27s_rule\n\n      for (var i = 1; i < n; i++) {\n        c = even ? 2 : 4;\n        k = c * get_value(f, xi, 1);\n        retval += k; //flip the even flag\n\n        even = !even; //increment xi\n\n        xi += dx;\n      } //add xn\n\n\n      return (retval + get_value(f, xi, 2)) * (dx / 3);\n    },\n\n    /**\r\n     * https://github.com/scijs/integrate-adaptive-simpson\r\n     * @param {Function} f - the function being integrated\r\n     * @param {Number} a - lower bound\r\n     * @param {Number} b - upper bound\r\n     * @param {Number} tol - step width\r\n     * @param {Number} maxdepth\r\n     * @returns {Number}\r\n     */\n    num_integrate: function (f, a, b, tol, maxdepth) {\n      if (maxdepth < 0) throw new Error('max depth cannot be negative');\n      /* This algorithm adapted from pseudocode in:*/\n\n      /* http://www.math.utk.edu/~ccollins/refs/Handouts/rich.pdf*/\n\n      function adsimp(f, a, b, fa, fm, fb, V0, tol, maxdepth, depth, state) {\n        if (state.nanEncountered) {\n          return NaN;\n        }\n\n        var h, f1, f2, sl, sr, s2, m, V1, V2, err;\n        h = b - a;\n        f1 = f(a + h * 0.25);\n        f2 = f(b - h * 0.25);\n        /* Simple check for NaN:*/\n\n        if (isNaN(f1)) {\n          state.nanEncountered = true;\n          return;\n        }\n        /* Simple check for NaN:*/\n\n\n        if (isNaN(f2)) {\n          state.nanEncountered = true;\n          return;\n        }\n\n        sl = h * (fa + 4 * f1 + fm) / 12;\n        sr = h * (fm + 4 * f2 + fb) / 12;\n        s2 = sl + sr;\n        err = (s2 - V0) / 15;\n\n        if (state.maxDepthCount > 1000 * maxdepth) {\n          return;\n        }\n\n        if (depth > maxdepth) {\n          state.maxDepthCount++;\n          return s2 + err;\n        } else if (Math.abs(err) < tol) {\n          return s2 + err;\n        } else {\n          m = a + h * 0.5;\n          V1 = adsimp(f, a, m, fa, f1, fm, sl, tol * 0.5, maxdepth, depth + 1, state);\n\n          if (isNaN(V1)) {\n            state.nanEncountered = true;\n            return NaN;\n          }\n\n          V2 = adsimp(f, m, b, fm, f2, fb, sr, tol * 0.5, maxdepth, depth + 1, state);\n\n          if (isNaN(V2)) {\n            state.nanEncountered = true;\n            return NaN;\n          }\n\n          return V1 + V2;\n        }\n      }\n\n      function integrate(f, a, b, tol, maxdepth) {\n        var state = {\n          maxDepthCount: 0,\n          nanEncountered: false\n        };\n\n        if (tol === undefined) {\n          tol = 1e-9;\n        }\n\n        if (maxdepth === undefined) {\n          /*Issue #458 - This was lowered because of performance issues. */\n\n          /*This was suspected from before but is now confirmed with this issue*/\n          maxdepth = 45;\n        }\n\n        var fa = f(a);\n        var fm = f(0.5 * (a + b));\n        var fb = f(b);\n        var V0 = (fa + 4 * fm + fb) * (b - a) / 6;\n        var result = adsimp(f, a, b, fa, fm, fb, V0, tol, maxdepth, 1, state);\n\n        if (state.maxDepthCount > 0) {\n          warn('integrate-adaptive-simpson: Warning: maximum recursion depth (' + maxdepth + ') reached ' + state.maxDepthCount + ' times');\n        }\n\n        if (state.nanEncountered) {\n          throw new Error('Function does not converge over interval!');\n        }\n\n        return result;\n      }\n\n      var retval;\n\n      try {\n        retval = integrate(f, a, b, tol, maxdepth);\n      } catch (e) {\n        /*fallback to non-adaptive*/\n        return Math2.simpson(f, a, b);\n      }\n\n      return nround(retval, 12);\n    },\n    //https://en.wikipedia.org/wiki/Trigonometric_integral\n    //CosineIntegral\n    Ci: function (x) {\n      var n = 20,\n\n      /*roughly Euler–Mascheroni*/\n      g = 0.5772156649015329,\n          sum = 0;\n\n      for (var i = 1; i < n; i++) {\n        /*cache 2n*/\n        var n2 = 2 * i;\n        sum += Math.pow(-1, i) * Math.pow(x, n2) / (n2 * Math2.factorial(n2));\n      }\n\n      return Math.log(x) + g + sum;\n    },\n\n    /*SineIntegral*/\n    Si: function (x) {\n      var n = 20,\n          sum = 0;\n\n      for (var i = 0; i < n; i++) {\n        var n2 = 2 * i;\n        sum += Math.pow(-1, i) * Math.pow(x, n2 + 1) / ((n2 + 1) * Math2.factorial(n2 + 1));\n      }\n\n      return sum;\n    },\n\n    /*ExponentialIntegral*/\n    Ei: function (x) {\n      if (Number(x) === 0) return -Infinity;\n      var n = 30,\n          g = 0.5772156649015328606,\n\n      /*roughly Euler–Mascheroni*/\n      sum = 0;\n\n      for (var i = 1; i < n; i++) {\n        sum += Math.pow(x, i) / (i * Math2.factorial(i));\n      }\n\n      return g + Math.abs(Math.log(x)) + sum;\n    },\n\n    /*Hyperbolic Sine Integral*/\n\n    /*http://mathworld.wolfram.com/Shi.html*/\n    Shi: function (x) {\n      var n = 30,\n          sum = 0,\n          k,\n          t;\n\n      for (var i = 0; i < n; i++) {\n        k = 2 * i;\n        t = k + 1;\n        sum += Math.pow(x, t) / (t * t * Math2.factorial(k));\n      }\n\n      return sum;\n    },\n\n    /*the cosine integral function*/\n    Chi: function (x) {\n      var dx, g, f;\n      dx = 0.001;\n      g = 0.5772156649015328606;\n\n      f = function (t) {\n        return (Math.cosh(t) - 1) / t;\n      };\n\n      return Math.log(x) + g + Math2.num_integrate(f, 0.002, x, dx);\n    },\n\n    /*the log integral*/\n    Li: function (x) {\n      return Math2.Ei(Math2.bigLog(x));\n    },\n\n    /*the gamma incomplete function*/\n    gamma_incomplete: function (n, x) {\n      var t = n - 1,\n          sum = 0,\n          x = x || 0;\n\n      for (var i = 0; i < t; i++) {\n        sum += Math.pow(x, i) / Math2.factorial(i);\n      }\n\n      return Math2.factorial(t) * Math.exp(-x) * sum;\n    },\n\n    /*\r\n     * Heaviside step function - Moved from Special.js (originally contributed by Brosnan Yuen)\r\n     * Specification : http://mathworld.wolfram.com/HeavisideStepFunction.html\r\n     * if x > 0 then 1\r\n     * if x == 0 then 1/2\r\n     * if x < 0 then 0\r\n     */\n    step: function (x) {\n      if (x > 0) return 1;\n      if (x < 0) return 0;\n      return 0.5;\n    },\n\n    /*\r\n     * Rectangle function - Moved from Special.js (originally contributed by Brosnan Yuen)\r\n     * Specification : http://mathworld.wolfram.com/RectangleFunction.html\r\n     * if |x| > 1/2 then 0\r\n     * if |x| == 1/2 then 1/2\r\n     * if |x| < 1/2 then 1\r\n     */\n    rect: function (x) {\n      var x = Math.abs(x);\n      if (x === 0.5) return x;\n      if (x > 0.5) return 0;\n      return 1;\n    },\n\n    /*\r\n     * Sinc function - Moved from Special.js (originally contributed by Brosnan Yuen)\r\n     * Specification : http://mathworld.wolfram.com/SincFunction.html\r\n     * if x == 0 then 1\r\n     * otherwise sin(x)/x\r\n     */\n    sinc: function (x) {\n      if (x.equals(0)) return 1;\n      return Math.sin(x) / x;\n    },\n\n    /*\r\n     * Triangle function - Moved from Special.js (originally contributed by Brosnan Yuen)\r\n     * Specification : http://mathworld.wolfram.com/TriangleFunction.html\r\n     * if |x| >= 1 then 0\r\n     * if |x| < then 1-|x|\r\n     */\n    tri: function (x) {\n      x = Math.abs(x);\n      if (x >= 1) return 0;\n      return 1 - x;\n    },\n    //https://en.wikipedia.org/wiki/Nth_root_algorithm\n    nthroot: function (A, n) {\n      /*make sure the input is of type Frac*/\n      if (!(A instanceof Frac)) A = new Frac(A.toString());\n      if (!(n instanceof Frac)) n = new Frac(n.toString());\n      if (n.equals(1)) return A;\n      /*begin algorithm*/\n\n      var xk = A.divide(new Frac(2));\n      /*x0*/\n\n      var e = new Frac(1e-15);\n      var dk, dk0, d0;\n      var a = n.clone().invert(),\n          b = n.subtract(new Frac(1));\n\n      do {\n        var powb = Math2.bigpow(xk, b);\n        var dk_dec = a.multiply(A.divide(powb).subtract(xk)).toDecimal(25);\n        dk = Frac.create(dk_dec);\n        if (d0) break;\n        xk = xk.add(dk);\n        /*check to see if there's no change from the last xk*/\n\n        var dk_dec = dk.toDecimal();\n        d0 = dk0 ? dk0 === dk_dec : false;\n        dk0 = dk_dec;\n      } while (dk.abs().gte(e));\n\n      return xk;\n    },\n\n    /*https://gist.github.com/jiggzson/0c5b33cbcd7b52b36132b1e96573285f*/\n\n    /*Just the square root function but big :)*/\n    sqrt: function (n) {\n      if (!(n instanceof Frac)) n = new Frac(n);\n      var xn, d, ld, same_delta;\n      var c = 0;\n      /*counter*/\n\n      var done = false;\n      var delta = new Frac(1e-20);\n      xn = n.divide(new Frac(2));\n      var safety = 1000;\n\n      do {\n        /*break if we're not converging*/\n        if (c > safety) throw new Error('Unable to calculate square root for ' + n);\n        xn = xn.add(n.divide(xn)).divide(new Frac(2));\n        xn = new Frac(xn.decimal(30));\n        /*get the difference from the true square*/\n\n        d = n.subtract(xn.multiply(xn));\n        /*if the square of the calculated number is close enough to the number*/\n\n        /*we're getting the square root or the last delta was the same as the new delta*/\n\n        /*then we're done*/\n\n        same_delta = ld ? ld.equals(d) : false;\n        if (d.clone().abs().lessThan(delta) || same_delta) done = true;\n        /*store the calculated delta*/\n\n        ld = d;\n        c++;\n        /*increase the counter*/\n      } while (!done);\n\n      return xn;\n    }\n  }; //link the Math2 object to Settings.FUNCTION_MODULES\n\n  Settings.FUNCTION_MODULES.push(Math2);\n  reserveNames(Math2); //reserve the names in Math2\n  //Polyfills ====================================================================\n  //https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/\n\n  Math.sign = Math.sign || function (x) {\n    x = +x; // convert to a number\n\n    if (x === 0 || isNaN(x)) {\n      return x;\n    }\n\n    return x > 0 ? 1 : -1;\n  };\n\n  Math.cosh = Math.cosh || function (x) {\n    var y = Math.exp(x);\n    return (y + 1 / y) / 2;\n  };\n\n  Math.sech = Math.sech || function (x) {\n    return 1 / Math.cosh(x);\n  };\n\n  Math.csch = Math.csch || function (x) {\n    return 1 / Math.sinh(x);\n  };\n\n  Math.coth = Math.coth || function (x) {\n    return 1 / Math.tanh(x);\n  };\n\n  Math.sinh = Math.sinh || function (x) {\n    var y = Math.exp(x);\n    return (y - 1 / y) / 2;\n  };\n\n  Math.tanh = Math.tanh || function (x) {\n    if (x === Infinity) {\n      return 1;\n    } else if (x === -Infinity) {\n      return -1;\n    } else {\n      var y = Math.exp(2 * x);\n      return (y - 1) / (y + 1);\n    }\n  };\n\n  Math.asinh = Math.asinh || function (x) {\n    if (x === -Infinity) {\n      return x;\n    } else {\n      return Math.log(x + Math.sqrt(x * x + 1));\n    }\n  };\n\n  Math.acosh = Math.acosh || function (x) {\n    return Math.log(x + Math.sqrt(x * x - 1));\n  };\n\n  Math.atanh = Math.atanh || function (x) {\n    return Math.log((1 + x) / (1 - x)) / 2;\n  };\n\n  Math.log10 = Math.log10 || function (x) {\n    return Math.log(x) * Math.LOG10E;\n  };\n\n  Math.trunc = Math.trunc || function (x) {\n    if (isNaN(x)) {\n      return NaN;\n    }\n\n    if (x > 0) {\n      return Math.floor(x);\n    }\n\n    return Math.ceil(x);\n  }; //Global functions =============================================================\n\n  /**\r\n   * This method will return a hash or a text representation of a Symbol, Matrix, or Vector.\r\n   * If all else fails it *assumes* the object has a toString method and will call that.\r\n   *\r\n   * @param {Object} obj\r\n   * @param {String} option get is as a hash\r\n   * @param {int} useGroup\r\n   * @returns {String}\r\n   */\n\n\n  function text(obj, option, useGroup, decp) {\n    var asHash = option === 'hash',\n        //whether to wrap numbers in brackets\n    wrapCondition = undefined,\n        opt = asHash ? undefined : option,\n        asDecimal = opt === 'decimal' || opt === 'decimals';\n    if (asDecimal && typeof decp === 'undefined') decp = 16;\n\n    function toString(obj) {\n      switch (option) {\n        case 'decimals':\n        case 'decimal':\n          wrapCondition = wrapCondition || function (str) {\n            return false;\n          };\n\n          return obj.valueOf();\n\n        case 'recurring':\n          wrapCondition = wrapCondition || function (str) {\n            return str.indexOf(\"'\") !== -1;\n          };\n\n          var str = obj.toString(); //verify that the string is actually a fraction\n\n          var frac = /^-?\\d+(?:\\/\\d+)?$/.exec(str);\n          if (frac.length === 0) return str; //split the fraction into the numerator and denominator\n\n          var parts = frac[0].split('/');\n          var negative = false;\n          var m = Number(parts[0]);\n\n          if (m < 0) {\n            m = -m;\n            negative = true;\n          }\n\n          var n = Number(parts[1]);\n          if (!n) n = 1; //https://softwareengineering.stackexchange.com/questions/192070/what-is-a-efficient-way-to-find-repeating-decimal#comment743574_192081\n\n          var quotient = Math.floor(m / n),\n              c = 10 * (m - quotient * n);\n          quotient = quotient.toString() + \".\";\n\n          while (c && c < n) {\n            c *= 10;\n            quotient += \"0\";\n          }\n\n          var digits = \"\",\n              passed = [],\n              i = 0;\n\n          while (true) {\n            if (typeof passed[c] !== 'undefined') {\n              var prefix = digits.slice(0, passed[c]),\n                  cycle = digits.slice(passed[c]),\n                  result = quotient + prefix + \"'\" + cycle + \"'\";\n              return (negative ? \"-\" : \"\") + result.replace(\"'0'\", \"\").replace(/\\.$/, \"\");\n            }\n\n            var q = Math.floor(c / n),\n                r = c - q * n;\n            passed[c] = i;\n            digits += q.toString();\n            i += 1;\n            c = 10 * r;\n          }\n\n        case 'mixed':\n          wrapCondition = wrapCondition || function (str) {\n            return str.indexOf('/') !== -1;\n          };\n\n          var str = obj.toString(); //verify that the string is actually a fraction\n\n          var frac = /^-?\\d+(?:\\/\\d+)?$/.exec(str);\n          if (frac.length === 0) return str; //split the fraction into the numerator and denominator\n\n          var parts = frac[0].split('/');\n          var numer = new bigInt(parts[0]);\n          var denom = new bigInt(parts[1]);\n          if (denom.equals(0)) denom = new bigInt(1); //return the quotient plus the remainder\n\n          var divmod = numer.divmod(denom);\n          var quotient = divmod.quotient;\n          var remainder = divmod.remainder;\n          var operator = parts[0][0] === '-' || quotient.equals(0) || remainder.equals(0) ? '' : '+';\n          return (quotient.equals(0) ? '' : quotient.toString()) + operator + (remainder.equals(0) ? '' : remainder.toString() + '/' + parts[1]);\n\n        case 'scientific':\n          wrapCondition = wrapCondition || function (str) {\n            return false;\n          };\n\n          return new Scientific(obj.valueOf()).toString(Settings.SCIENTIFIC_MAX_DECIMAL_PLACES);\n\n        default:\n          wrapCondition = wrapCondition || function (str) {\n            return str.indexOf('/') !== -1;\n          };\n\n          return obj.toString();\n      }\n    } //if the object is a symbol\n\n\n    if (isSymbol(obj)) {\n      var multiplier = '',\n          power = '',\n          sign = '',\n          group = obj.group || useGroup,\n          value = obj.value; //if the value is to be used as a hash then the power and multiplier need to be suppressed\n\n      if (!asHash) {\n        //use asDecimal to get the object back as a decimal\n        var om = toString(obj.multiplier);\n\n        if (om == '-1' && String(obj.multiplier) === '-1') {\n          sign = '-';\n          om = '1';\n        } //only add the multiplier if it's not 1\n\n\n        if (om != '1') multiplier = om; //use asDecimal to get the object back as a decimal\n\n        var p = obj.power ? toString(obj.power) : ''; //only add the multiplier\n\n        if (p != '1') {\n          //is it a symbol\n          if (isSymbol(p)) {\n            power = text(p, opt);\n          } else {\n            power = p;\n          }\n        }\n      }\n\n      switch (group) {\n        case N:\n          multiplier = ''; //round if requested\n\n          var m = decp && asDecimal ? obj.multiplier.toDecimal(decp) : toString(obj.multiplier); //if it's numerical then all we need is the multiplier\n\n          value = String(obj.multiplier) == '-1' ? '1' : m;\n          power = '';\n          break;\n\n        case PL:\n          value = obj.collectSymbols().map(function (x) {\n            var txt = text(x, opt, useGroup, decp);\n            if (txt == '0') txt = '';\n            return txt;\n          }).sort().join('+').replace(/\\+\\-/g, '-');\n          break;\n\n        case CP:\n          value = obj.collectSymbols().map(function (x) {\n            var txt = text(x, opt, useGroup, decp);\n            if (txt == '0') txt = '';\n            return txt;\n          }).sort().join('+').replace(/\\+\\-/g, '-');\n          break;\n\n        case CB:\n          value = obj.collectSymbols(function (symbol) {\n            var g = symbol.group; //both groups will already be in brackets if their power is greater than 1\n            //so skip it.\n\n            if ((g === PL || g === CP) && symbol.power.equals(1) && symbol.multiplier.equals(1)) {\n              return inBrackets(text(symbol, opt));\n            }\n\n            return text(symbol, opt);\n          }).join('*');\n          break;\n\n        case EX:\n          var pg = obj.previousGroup,\n              pwg = obj.power.group; //PL are the exception. It's simpler to just collect and set the value\n\n          if (pg === PL) value = obj.collectSymbols(text, opt).join('+').replace('+-', '-');\n\n          if (!(pg === N || pg === S || pg === FN) && !asHash) {\n            value = inBrackets(value);\n          }\n\n          if ((pwg === CP || pwg === CB || pwg === PL || obj.power.multiplier.toString() != '1') && power) {\n            power = inBrackets(power);\n          }\n\n          break;\n      }\n\n      if (group === FN) {\n        value = obj.fname + inBrackets(obj.args.map(function (symbol) {\n          return text(symbol, opt);\n        }).join(','));\n      } //TODO: Needs to be more efficient. Maybe.\n\n\n      if (group === FN && obj.fname in CUSTOM_OPERATORS) {\n        var a = text(obj.args[0]);\n        var b = text(obj.args[1]);\n        if (obj.args[0].isComposite()) //preserve the brackets\n          a = inBrackets(a);\n        if (obj.args[1].isComposite()) //preserve the brackets\n          b = inBrackets(b);\n        value = a + CUSTOM_OPERATORS[obj.fname] + b;\n      } //wrap the power since / is less than ^\n      //TODO: introduce method call isSimple\n\n\n      if (power && group !== EX && wrapCondition(power)) {\n        power = inBrackets(power);\n      } //the following groups are held together by plus or minus. They can be raised to a power or multiplied\n      //by a multiplier and have to be in brackets to preserve the order of precedence\n\n\n      if ((group === CP || group === PL) && (multiplier && multiplier != '1' || sign === '-') || (group === CB || group === CP || group === PL) && power && power != '1' || !asHash && group === P && value == -1 || obj.fname === PARENTHESIS) {\n        value = inBrackets(value);\n      }\n\n      if (decp && (option === 'decimal' || option === 'decimals' && multiplier)) {\n        multiplier = nround(multiplier, decp);\n      } //add the sign back\n\n\n      var c = sign + multiplier;\n      if (multiplier && wrapCondition(multiplier)) c = inBrackets(c);\n      if (power < 0) power = inBrackets(power); //add the multiplication back\n\n      if (multiplier) c = c + '*';\n\n      if (power) {\n        if (value === 'e' && Settings.E_TO_EXP) {\n          return c + 'exp' + inBrackets(power);\n        }\n\n        power = Settings.POWER_OPERATOR + power;\n      } //this needs serious rethinking. Must fix\n\n\n      if (group === EX && value.charAt(0) === '-') {\n        value = inBrackets(value);\n      }\n\n      var cv = c + value;\n\n      if (obj.parens) {\n        cv = inBrackets(cv);\n      }\n\n      return cv + power;\n    } else if (isVector(obj)) {\n      var l = obj.elements.length,\n          c = [];\n\n      for (var i = 0; i < l; i++) c.push(obj.elements[i].text(option));\n\n      return '[' + c.join(',') + ']';\n    } else {\n      try {\n        return obj.toString();\n      } catch (e) {\n        return '';\n      }\n    }\n  }\n  /**\r\n   * Calculates prime factors for a number. It first checks if the number\r\n   * is a prime number. If it's not then it will calculate all the primes \r\n   * for that number.\r\n   * @param {int} num\r\n   * @returns {Array}\r\n   */\n\n\n  function primeFactors(num) {\n    if (isPrime(num)) {\n      return [num];\n    }\n\n    var l = num,\n        i = 1,\n        factors = [],\n        epsilon = 2.2204460492503130808472633361816E-16;\n\n    while (i < l) {\n      var quotient = num / i;\n      var whole = Math.floor(quotient);\n      var remainder = quotient - whole;\n\n      if (remainder <= epsilon && i > 1) {\n        // If the prime wasn't found but calculated then save it and\n        // add it as a factor.\n        if (isPrime(i)) {\n          if (PRIMES.indexOf(i) === -1) {\n            PRIMES.push(i);\n          }\n\n          factors.push(i);\n        } // Check if the remainder is a prime\n\n\n        if (isPrime(whole)) {\n          factors.push(whole);\n          break;\n        }\n\n        l = whole;\n      }\n\n      i++;\n    }\n\n    return factors.sort(function (a, b) {\n      return a - b;\n    });\n  }\n\n  ;\n  primeFactors(314146179365); //Expression ===================================================================\n\n  /**\r\n   * This is what nerdamer returns. It's sort of a wrapper around the symbol class and\r\n   * provides the user with some useful functions. If you want to provide the user with extra\r\n   * library functions then add them to this class's prototype.\r\n   * @param {Symbol} symbol\r\n   * @returns {Expression} wraps around the Symbol class\r\n   */\n\n  function Expression(symbol) {\n    //we don't want arrays wrapped\n    this.symbol = symbol;\n  }\n  /**\r\n   * Returns stored expression at index. For first index use 1 not 0.\r\n   * @param {bool} asType\r\n   * @param {Integer} expression_number\r\n   */\n\n\n  Expression.getExpression = function (expression_number, asType) {\n    if (expression_number === 'last' || !expression_number) expression_number = EXPRESSIONS.length;\n    if (expression_number === 'first') expression_number = 1;\n    var index = expression_number - 1,\n        expression = EXPRESSIONS[index],\n        retval = expression ? new Expression(expression) : expression;\n    return retval;\n  };\n\n  Expression.prototype = {\n    /**\r\n     * Returns the text representation of the expression\r\n     * @param {String} opt - option of formatting numbers\r\n     * @param {Number} n The number of significant figures\r\n     * @returns {String}\r\n     */\n    text: function (opt, n) {\n      n = n || 19;\n      opt = opt || 'decimals';\n      if (this.symbol.text_) return this.symbol.text_(opt);\n      return text(this.symbol, opt, undefined, n);\n    },\n\n    /**\r\n     * Returns the latex representation of the expression\r\n     * @param {String} option - option for formatting numbers\r\n     * @returns {String}\r\n     */\n    latex: function (option) {\n      if (this.symbol.latex) return this.symbol.latex(option);\n      return LaTeX.latex(this.symbol, option);\n    },\n    valueOf: function () {\n      return this.symbol.valueOf();\n    },\n\n    /**\r\n     * Evaluates the expression and tries to reduce it to a number if possible.\r\n     * If an argument is given in the form of %{integer} it will evaluate that expression.\r\n     * Other than that it will just use it's own text and reparse\r\n     * @returns {Expression}\r\n     */\n    evaluate: function () {\n      // Don't evaluate an empty vector\n      if (isVector(this.symbol) && this.symbol.dimensions() === 0) {\n        return this;\n      }\n\n      var first_arg = arguments[0],\n          expression,\n          idx = 1; //Enable getting of expressions using the % so for example %1 should get the first expression\n\n      if (typeof first_arg === 'string') {\n        expression = first_arg.charAt(0) === '%' ? Expression.getExpression(first_arg.substr(1)).text() : first_arg;\n      } else if (first_arg instanceof Expression || isSymbol(first_arg)) {\n        expression = first_arg.text();\n      } else {\n        expression = this.symbol.text();\n        idx--;\n      }\n\n      var subs = arguments[idx] || {};\n      var retval = new Expression(block('PARSE2NUMBER', function () {\n        return _.parse(expression, subs);\n      }, true));\n      return retval;\n    },\n\n    /**\r\n     * Converts a symbol to a JS function. Pass in an array of variables to use that order instead of\r\n     * the default alphabetical order\r\n     * @param vars {Array}\r\n     */\n    buildFunction: function (vars) {\n      return Build.build(this.symbol, vars);\n    },\n\n    /**\r\n     * Checks to see if the expression is just a plain old number\r\n     * @returns {boolean}\r\n     */\n    isNumber: function () {\n      return isNumericSymbol(this.symbol);\n    },\n\n    /**\r\n     * Checks to see if the expression is infinity\r\n     * @returns {boolean}\r\n     */\n    isInfinity: function () {\n      return Math.abs(this.symbol.multiplier) === Infinity;\n    },\n\n    /**\r\n     * Checks to see if the expression contains imaginary numbers\r\n     * @returns {boolean}\r\n     */\n    isImaginary: function () {\n      return evaluate(_.parse(this.symbol)).isImaginary();\n    },\n\n    /**\r\n     * Returns all the variables in the expression\r\n     * @returns {Array}\r\n     */\n    variables: function () {\n      return variables(this.symbol);\n    },\n    toString: function () {\n      try {\n        if (isArray(this.symbol)) return '[' + this.symbol.toString() + ']';\n        return this.symbol.toString();\n      } catch (e) {\n        return '';\n      }\n    },\n    //forces the symbol to be returned as a decimal\n    toDecimal: function (prec) {\n      Settings.precision = prec;\n      var dec = text(this.symbol, 'decimals');\n      Settings.precision = undefined;\n      return dec;\n    },\n    //checks to see if the expression is a fraction\n    isFraction: function () {\n      return isFraction(this.symbol);\n    },\n    //checks to see if the symbol is a multivariate polynomial\n    isPolynomial: function () {\n      return this.symbol.isPoly();\n    },\n    //performs a substitution\n    sub: function (symbol, for_symbol) {\n      return new Expression(this.symbol.sub(_.parse(symbol), _.parse(for_symbol)));\n    },\n    operation: function (otype, symbol) {\n      if (isExpression(symbol)) symbol = symbol.symbol;else if (!isSymbol(symbol)) symbol = _.parse(symbol);\n      return new Expression(_[otype](this.symbol.clone(), symbol.clone()));\n    },\n    add: function (symbol) {\n      return this.operation('add', symbol);\n    },\n    subtract: function (symbol) {\n      return this.operation('subtract', symbol);\n    },\n    multiply: function (symbol) {\n      return this.operation('multiply', symbol);\n    },\n    divide: function (symbol) {\n      return this.operation('divide', symbol);\n    },\n    pow: function (symbol) {\n      return this.operation('pow', symbol);\n    },\n    expand: function () {\n      return new Expression(_.expand(this.symbol));\n    },\n    each: function (callback, i) {\n      if (this.symbol.each) this.symbol.each(callback, i);else if (isArray(this.symbol)) {\n        for (var i = 0; i < this.symbol.length; i++) callback.call(this.symbol, this.symbol[i], i);\n      } else callback.call(this.symbol);\n    },\n    eq: function (value) {\n      if (!isSymbol(value)) value = _.parse(value);\n\n      try {\n        var d = _.subtract(this.symbol.clone(), value);\n\n        return d.equals(0);\n      } catch (e) {\n        return false;\n      }\n\n      ;\n    },\n    lt: function (value) {\n      if (!isSymbol(value)) value = _.parse(value);\n\n      try {\n        var d = evaluate(_.subtract(this.symbol.clone(), value));\n        return d.lessThan(0);\n      } catch (e) {\n        return false;\n      }\n\n      ;\n    },\n    gt: function (value) {\n      if (!isSymbol(value)) value = _.parse(value);\n\n      try {\n        var d = evaluate(_.subtract(this.symbol.clone(), value));\n        return d.greaterThan(0);\n      } catch (e) {\n        return false;\n      }\n    },\n    gte: function (value) {\n      return this.gt(value) || this.eq(value);\n    },\n    lte: function (value) {\n      return this.lt(value) || this.eq(value);\n    },\n    numerator: function () {\n      return new Expression(this.symbol.getNum());\n    },\n    denominator: function () {\n      return new Expression(this.symbol.getDenom());\n    },\n    hasFunction: function (f) {\n      return this.symbol.containsFunction(f);\n    },\n    contains: function (variable) {\n      return this.symbol.contains(variable);\n    }\n  }; //Aliases\n\n  Expression.prototype.toTeX = Expression.prototype.latex; //Scientific ===================================================================\n\n  function Scientific(num) {\n    if (!(this instanceof Scientific)) return new Scientific(num);\n    num = String(typeof num === 'undefined' ? 0 : num); //convert to a string\n    //remove the sign\n\n    if (num.startsWith('-')) {\n      this.sign = -1; //remove the sign\n\n      num = num.substr(1, num.length);\n    } else {\n      this.sign = 1;\n    }\n\n    if (Scientific.isScientific(num)) {\n      this.fromScientific(num);\n    } else {\n      this.convert(num);\n    }\n\n    return this;\n  }\n\n  Scientific.prototype = {\n    fromScientific: function (num) {\n      var parts = String(num).toLowerCase().split('e');\n      this.coeff = parts[0];\n      this.exponent = parts[1];\n      return this;\n    },\n    convert: function (num) {\n      //get wholes and decimals\n      var parts = num.split('.'); //make zero go away\n\n      var w = parts[0] || '';\n      var d = parts[1] || ''; //convert zero to blank strings\n\n      w = Scientific.removeLeadingZeroes(w);\n      d = Scientific.removeTrailingZeroes(d); //find the location of the decimal place which is right after the wholes\n\n      var dot_location = w.length; //add them together so we can move the dot\n\n      var n = w + d; //find the next number\n\n      var zeroes = Scientific.leadingZeroes(n).length; //set the exponent\n\n      this.exponent = dot_location - (zeroes + 1); //set the coeff but first remove leading zeroes\n\n      var coeff = Scientific.removeLeadingZeroes(n);\n      this.coeff = coeff.charAt(0) + '.' + (coeff.substr(1, coeff.length) || '0');\n      return this;\n    },\n    round: function (num) {\n      var n = this.copy();\n      num = Number(num); //cast to number for safety\n      //since we know it guaranteed to be in the format {digit}{optional dot}{optional digits}\n      //we can round based on this\n\n      if (num === 0) n.coeff = n.coeff.charAt(0);else {\n        //get up to n-1 digits\n        var rounded = this.coeff.substring(0, num + 1); //get the next two\n\n        var next_two = this.coeff.substring(num + 1, num + 3); //the extra digit\n\n        var ed = next_two.charAt(0);\n        if (next_two.charAt(1) > 4) ed++;\n        n.coeff = rounded + ed;\n      }\n      return n;\n    },\n    copy: function () {\n      var n = new Scientific(0);\n      n.coeff = this.coeff;\n      n.exponent = this.exponent;\n      n.sign = this.sign;\n      return n;\n    },\n    toString: function (n) {\n      var coeff = typeof n === 'undefined' ? this.coeff : Scientific.round(this.coeff, n);\n      var c;\n\n      if (this.exponent === 0 && Settings.SCIENTIFIC_IGNORE_INTS) {\n        c = this.coeff;\n      } else {\n        c = coeff + 'e' + this.exponent;\n      }\n\n      return (this.sign === -1 ? '-' : '') + c;\n    }\n  };\n\n  Scientific.isScientific = function (num) {\n    return /\\d+\\.?\\d*e[\\+\\-]*\\d+/i.test(num);\n  };\n\n  Scientific.leadingZeroes = function (num) {\n    var match = num.match(/^(0*).*$/);\n    return match ? match[1] : '';\n  };\n\n  Scientific.removeLeadingZeroes = function (num) {\n    var match = num.match(/^0*(.*)$/);\n    return match ? match[1] : '';\n  };\n\n  Scientific.removeTrailingZeroes = function (num) {\n    var match = num.match(/0*$/);\n    return match ? num.substring(0, num.length - match[0].length) : '';\n  };\n\n  Scientific.round = function (c, n) {\n    var coeff = nround(c, n);\n    var m = String(coeff).split('.').pop();\n    var d = n - m.length; //if we're asking for more significant figures\n\n    if (d > 0) {\n      coeff = coeff + new Array(d + 1).join(0);\n    }\n\n    return coeff;\n  }; //Scientific ===================================================================\n\n  /*\r\n   * Javascript has the toExponential method but this allows you to work with string and therefore any number of digits of your choosing\r\n   * For example Scientific('464589498449496467924197545625247695464569568959124568489548454');\r\n   */\n\n\n  function Scientific(num) {\n    if (!(this instanceof Scientific)) return new Scientific(num);\n    num = String(typeof num === 'undefined' ? 0 : num); //convert to a string\n    //remove the sign\n\n    if (num.startsWith('-')) {\n      this.sign = -1; //remove the sign\n\n      num = num.substr(1, num.length);\n    } else {\n      this.sign = 1;\n    }\n\n    if (Scientific.isScientific(num)) {\n      this.fromScientific(num);\n    } else {\n      this.convert(num);\n    }\n\n    return this;\n  }\n\n  Scientific.prototype = {\n    fromScientific: function (num) {\n      var parts = String(num).toLowerCase().split('e');\n      this.coeff = parts[0];\n      this.exponent = parts[1];\n      return this;\n    },\n    convert: function (num) {\n      //get wholes and decimals\n      var parts = num.split('.'); //make zero go away\n\n      var w = parts[0] || '';\n      var d = parts[1] || ''; //convert zero to blank strings\n\n      w = Scientific.removeLeadingZeroes(w);\n      d = Scientific.removeTrailingZeroes(d); //find the location of the decimal place which is right after the wholes\n\n      var dot_location = w.length; //add them together so we can move the dot\n\n      var n = w + d; //find the next number\n\n      var zeroes = Scientific.leadingZeroes(n).length; //set the exponent\n\n      this.exponent = dot_location - (zeroes + 1); //set the coeff but first remove leading zeroes\n\n      var coeff = Scientific.removeLeadingZeroes(n);\n      this.coeff = coeff.charAt(0) + '.' + (coeff.substr(1, coeff.length) || '0'); //the coeff decimal places\n\n      var dec = this.coeff.split('.')[1] || ''; //if it's undefined or zero it's going to blank\n\n      this.decp = dec === '0' ? 0 : dec.length; //decimals\n\n      this.dec = d; //wholes\n\n      this.wholes = w;\n      return this;\n    },\n    round: function (num) {\n      var n = this.copy();\n      num = Number(num); //cast to number for safety\n      //since we know it guaranteed to be in the format {digit}{optional dot}{optional digits}\n      //we can round based on this\n\n      if (num === 0) n.coeff = n.coeff.charAt(0);else {\n        //get up to n-1 digits\n        var rounded = this.coeff.substring(0, num + 1); //get the next two\n\n        var next_two = this.coeff.substring(num + 1, num + 3); //the extra digit\n\n        var ed = next_two.charAt(0);\n        if (next_two.charAt(1) > 4) ed++;\n        n.coeff = rounded + ed;\n      }\n      return n;\n    },\n    copy: function () {\n      var n = new Scientific(0);\n      n.coeff = this.coeff;\n      n.exponent = this.exponent;\n      n.sign = this.sign;\n      return n;\n    },\n    toString: function (n) {\n      var retval;\n\n      if (Settings.SCIENTIFIC_IGNORE_ZERO_EXPONENTS && this.exponent === 0 && this.decp < n) {\n        if (this.decp === 0) retval = this.wholes;else retval = this.coeff;\n      } else {\n        var coeff = typeof n === 'undefined' ? this.coeff : Scientific.round(this.coeff, Math.min(n, this.decp || 1));\n        retval = this.exponent === 0 ? coeff : coeff + 'e' + this.exponent;\n      }\n\n      return (this.sign === -1 ? '-' : '') + retval;\n    }\n  };\n\n  Scientific.isScientific = function (num) {\n    return /\\d+\\.?\\d*e[\\+\\-]*\\d+/i.test(num);\n  };\n\n  Scientific.leadingZeroes = function (num) {\n    var match = num.match(/^(0*).*$/);\n    return match ? match[1] : '';\n  };\n\n  Scientific.removeLeadingZeroes = function (num) {\n    var match = num.match(/^0*(.*)$/);\n    return match ? match[1] : '';\n  };\n\n  Scientific.removeTrailingZeroes = function (num) {\n    var match = num.match(/0*$/);\n    return match ? num.substring(0, num.length - match[0].length) : '';\n  }; //Frac =========================================================================\n\n\n  function Frac(n) {\n    if (n instanceof Frac) return n;\n    if (n === undefined) return this;\n\n    try {\n      if (isInt(n)) {\n        try {\n          this.num = bigInt(n);\n          this.den = bigInt(1);\n        } catch (e) {\n          return Frac.simple(n);\n        }\n      } else {\n        var frac = n instanceof bigDec ? Fraction.quickConversion(n) : Fraction.convert(n);\n        this.num = new bigInt(frac[0]);\n        this.den = new bigInt(frac[1]);\n      }\n    } catch (e) {\n      return Frac.simple(n);\n    }\n  } //safe to use with negative numbers or other types\n\n\n  Frac.create = function (n) {\n    if (n instanceof Frac) return n;\n    n = n.toString();\n    var is_neg = n.charAt(0) === '-'; //check if it's negative\n\n    if (is_neg) n = n.substr(1, n.length - 1); //remove the sign\n\n    var frac = new Frac(n); //put the sign back\n\n    if (is_neg) frac.negate();\n    return frac;\n  };\n\n  Frac.isFrac = function (o) {\n    return o instanceof Frac;\n  };\n\n  Frac.quick = function (n, d) {\n    var frac = new Frac();\n    frac.num = new bigInt(n);\n    frac.den = new bigInt(d);\n    return frac;\n  };\n\n  Frac.simple = function (n) {\n    var nstr = String(scientificToDecimal(n)),\n        m_dc = nstr.split('.'),\n        num = m_dc.join(''),\n        den = 1,\n        l = (m_dc[1] || '').length;\n\n    for (var i = 0; i < l; i++) den += '0';\n\n    var frac = Frac.quick(num, den);\n    return frac.simplify();\n  };\n\n  Frac.prototype = {\n    multiply: function (m) {\n      if (this.isOne()) {\n        return m.clone();\n      }\n\n      if (m.isOne()) {\n        return this.clone();\n      }\n\n      var c = this.clone();\n      c.num = c.num.multiply(m.num);\n      c.den = c.den.multiply(m.den);\n      return c.simplify();\n    },\n    divide: function (m) {\n      if (m.equals(0)) throw new DivisionByZero('Division by zero not allowed!');\n      return this.clone().multiply(m.clone().invert()).simplify();\n    },\n    subtract: function (m) {\n      return this.clone().add(m.clone().neg());\n    },\n    neg: function () {\n      this.num = this.num.multiply(-1);\n      return this;\n    },\n    add: function (m) {\n      var n1 = this.den,\n          n2 = m.den,\n          c = this.clone();\n      var a = c.num,\n          b = m.num;\n\n      if (n1.equals(n2)) {\n        c.num = a.add(b);\n      } else {\n        c.num = a.multiply(n2).add(b.multiply(n1));\n        c.den = n1.multiply(n2);\n      }\n\n      return c.simplify();\n    },\n    mod: function (m) {\n      var a = this.clone(),\n          b = m.clone(); //make their denominators even and return the mod of their numerators\n\n      a.num = a.num.multiply(b.den);\n      a.den = a.den.multiply(b.den);\n      b.num = b.num.multiply(this.den);\n      b.den = b.den.multiply(this.den);\n      a.num = a.num.mod(b.num);\n      return a.simplify();\n    },\n    simplify: function () {\n      var gcd = bigInt.gcd(this.num, this.den);\n      this.num = this.num.divide(gcd);\n      this.den = this.den.divide(gcd);\n      return this;\n    },\n    clone: function () {\n      var m = new Frac();\n      m.num = new bigInt(this.num);\n      m.den = new bigInt(this.den);\n      return m;\n    },\n    decimal: function (prec) {\n      var sign = this.num.isNegative() ? '-' : '';\n\n      if (this.num.equals(this.den)) {\n        return '1';\n      } //go plus one for rounding\n\n\n      prec = prec || Settings.PRECISION;\n      prec++;\n      var narr = [],\n          n = this.num.abs(),\n          d = this.den;\n\n      for (var i = 0; i < prec; i++) {\n        var w = n.divide(d),\n            //divide out whole\n        r = n.subtract(w.multiply(d)); //get remainder\n\n        narr.push(w);\n        if (r.equals(0)) break;\n        n = r.times(10); //shift one dec place\n      }\n\n      var whole = narr.shift();\n\n      if (narr.length === 0) {\n        return sign + whole.toString();\n      }\n\n      if (i === prec) {\n        var lt = []; //get the last two so we can round it\n\n        for (var i = 0; i < 2; i++) lt.unshift(narr.pop()); //put the last digit back by rounding the last two\n\n\n        narr.push(Math.round(lt.join('.')));\n      }\n\n      var dec = whole.toString() + '.' + narr.join('');\n      return sign + dec;\n    },\n    toDecimal: function (prec) {\n      prec = prec || Settings.PRECISION;\n\n      if (prec) {\n        return this.decimal(prec);\n      } else return this.num / this.den;\n    },\n    qcompare: function (n) {\n      return [this.num.multiply(n.den), n.num.multiply(this.den)];\n    },\n    equals: function (n) {\n      if (!isNaN(n)) n = new Frac(n);\n      var q = this.qcompare(n);\n      return q[0].equals(q[1]);\n    },\n    absEquals: function (n) {\n      if (!isNaN(n)) n = new Frac(n);\n      var q = this.qcompare(n);\n      return q[0].abs().equals(q[1]);\n    },\n    //lazy check to be fixed. Sufficient for now but will cause future problems\n    greaterThan: function (n) {\n      if (!isNaN(n)) n = new Frac(n);\n      var q = this.qcompare(n);\n      return q[0].gt(q[1]);\n    },\n    gte: function (n) {\n      return this.greaterThan(n) || this.equals(n);\n    },\n    lte: function (n) {\n      return this.lessThan(n) || this.equals(n);\n    },\n    lessThan: function (n) {\n      if (!isNaN(n)) n = new Frac(n);\n      var q = this.qcompare(n);\n      return q[0].lt(q[1]);\n    },\n    isInteger: function () {\n      return this.den.equals(1);\n    },\n    negate: function () {\n      this.num = this.num.multiply(-1);\n      return this;\n    },\n    invert: function () {\n      var t = this.den; //why invert 0/1? It'll become 1/0 and that's a lie.\n\n      if (!this.num.equals(0)) {\n        var isnegative = this.num.isNegative();\n        this.den = this.num.abs();\n        this.num = t;\n        if (isnegative) this.num = this.num.multiply(-1);\n      }\n\n      return this;\n    },\n    isOne: function () {\n      return this.num.equals(1) && this.den.equals(1);\n    },\n    sign: function () {\n      return this.num.isNegative() ? -1 : 1;\n    },\n    abs: function () {\n      this.num = this.num.abs();\n      return this;\n    },\n    gcd: function (f) {\n      return Frac.quick(bigInt.gcd(f.num, this.num), bigInt.lcm(f.den, this.den));\n    },\n    toString: function () {\n      return !this.den.equals(1) ? this.num.toString() + '/' + this.den.toString() : this.num.toString();\n    },\n    valueOf: function () {\n      //            if(this.num == 24) throw new Error(999)\n      if (Settings.USE_BIG) return new bigDec(this.num.toString()).div(new bigDec(this.den.toString()));\n      return this.num / this.den;\n    },\n    isNegative: function () {\n      return this.toDecimal() < 0;\n    }\n  }; //Symbol =======================================================================\n\n  /**\r\n   * All symbols e.g. x, y, z, etc or functions are wrapped in this class. All symbols have a multiplier and a group.\r\n   * All symbols except for \"numbers (group N)\" have a power.\r\n   * @class Primary data type for the Parser.\r\n   * @param {String} obj\r\n   * @returns {Symbol}\r\n   */\n\n  function Symbol(obj) {\n    var isInfinity = obj === 'Infinity'; // This enables the class to be instantiated without the new operator\n\n    if (!(this instanceof Symbol)) {\n      return new Symbol(obj);\n    } // Convert big numbers to a string\n\n\n    if (obj instanceof bigDec) {\n      obj = obj.toString();\n    } //define numeric symbols\n\n\n    if (/^(\\-?\\+?\\d+)\\.?\\d*e?\\-?\\+?\\d*/i.test(obj) || obj instanceof bigDec) {\n      this.group = N;\n      this.value = CONST_HASH;\n      this.multiplier = new Frac(obj);\n    } //define symbolic symbols\n    else {\n        this.group = S;\n        validateName(obj);\n        this.value = obj;\n        this.multiplier = new Frac(1);\n        this.imaginary = obj === Settings.IMAGINARY;\n        this.isInfinity = isInfinity;\n      } //As of 6.0.0 we switched to infinite precision so all objects have a power\n    //Although this is still redundant in constants, it simplifies the logic in\n    //other parts so we'll keep it\n\n\n    this.power = new Frac(1); // Added to silence the strict warning.\n\n    return this;\n  }\n  /**\r\n   * Returns vanilla imaginary symbol\r\n   * @returns {Symbol}\r\n   */\n\n\n  Symbol.imaginary = function () {\n    var s = new Symbol(Settings.IMAGINARY);\n    s.imaginary = true;\n    return s;\n  };\n  /**\r\n   * Return nerdamer's representation of Infinity\r\n   * @param {int} negative -1 to return negative infinity\r\n   * @returns {Symbol}\r\n   */\n\n\n  Symbol.infinity = function (negative) {\n    var v = new Symbol('Infinity');\n    if (negative === -1) v.negate();\n    return v;\n  };\n\n  Symbol.shell = function (group, value) {\n    var symbol = new Symbol(value);\n    symbol.group = group;\n    symbol.symbols = {};\n    symbol.length = 0;\n    return symbol;\n  }; //sqrt(x) -> x^(1/2)\n\n\n  Symbol.unwrapSQRT = function (symbol, all) {\n    var p = symbol.power;\n\n    if (symbol.fname === SQRT && (symbol.isLinear() || all)) {\n      var t = symbol.args[0].clone();\n      t.power = t.power.multiply(new Frac(1 / 2));\n      t.multiplier = t.multiplier.multiply(symbol.multiplier);\n      symbol = t;\n      if (all) symbol.power = p.multiply(new Frac(1 / 2));\n    }\n\n    return symbol;\n  };\n\n  Symbol.hyp = function (a, b) {\n    a = a || new Symbol(0);\n    b = b || new Symbol(0);\n    return _.sqrt(_.add(_.pow(a.clone(), new Symbol(2)), _.pow(b.clone(), new Symbol(2))));\n  }; //converts to polar form array\n\n\n  Symbol.toPolarFormArray = function (symbol) {\n    var re, im, r, theta;\n    re = symbol.realpart();\n    im = symbol.imagpart();\n    r = Symbol.hyp(re, im);\n    theta = re.equals(0) ? _.parse('pi/2') : _.trig.atan(_.divide(im, re));\n    return [r, theta];\n  }; //removes parentheses\n\n\n  Symbol.unwrapPARENS = function (symbol) {\n    if (symbol.fname === '') {\n      var r = symbol.args[0];\n      r.power = r.power.multiply(symbol.power);\n      r.multiplier = r.multiplier.multiply(symbol.multiplier);\n      if (symbol.fname === '') return Symbol.unwrapPARENS(r);\n      return r;\n    }\n\n    return symbol;\n  }; //quickly creates a Symbol\n\n\n  Symbol.create = function (value, power) {\n    power = power === undefined ? 1 : power;\n    return _.parse('(' + value + ')^(' + power + ')');\n  };\n\n  Symbol.prototype = {\n    /**\r\n     * Gets nth root accounting for rounding errors\r\n     * @param {Number} n\r\n     * @return {Number}\r\n     */\n    getNth: function (n) {\n      // First calculate the root\n      var root = evaluate(_.pow(_.parse(this.multiplier), _.parse(n).invert())); // Round of any errors\n\n      var rounded = _.parse(nround(root)); // Reverse the root\n\n\n      var e = evaluate(_.pow(rounded, _.parse(n))); // If the rounded root equals the original number then we're good \n\n      if (e.equals(_.parse(this.multiplier))) {\n        return rounded;\n      } // Otherwise return the unrounded version\n\n\n      return root;\n    },\n\n    /**\r\n     * Checks if symbol is to the nth power\r\n     * @returns {Boolean}\r\n     */\n    isToNth: function (n) {\n      // Start by check in the multiplier for squareness\n      // First get the root but round it because currently we still depend \n      var root = this.getNth(n);\n      var nthMultiplier = isInt(root);\n      var nthPower;\n\n      if (this.group === CB) {\n        // Start by assuming that all will be square.\n        nthPower = true; // All it takes is for one of the symbols to not have an even power\n        // e.g. x^n1*y^n2 requires that both n1 and n2 are even\n\n        this.each(function (x) {\n          var isNth = x.isToNth(n);\n\n          if (!isNth) {\n            nthPower = false;\n          }\n        });\n      } else {\n        // Check if the power is divisible by n if it's not a number.\n        nthPower = this.group === N ? true : isInt(_.divide(_.parse(this.power), _.parse(n)));\n      }\n\n      return nthMultiplier && nthPower;\n    },\n\n    /**\r\n     * Checks if a symbol is square\r\n     * @return {Boolean}\r\n     */\n    isSquare: function () {\n      return this.isToNth(2);\n    },\n\n    /**\r\n     * Checks if a symbol is cube\r\n     * @return {Boolean}\r\n     */\n    isCube: function () {\n      return this.isToNth(3);\n    },\n\n    /**\r\n     * Checks if a symbol is a bare variable\r\n     * @return {Boolean}\r\n     */\n    isSimple: function () {\n      return this.power.equals(1) && this.multiplier.equals(1);\n    },\n\n    /**\r\n     * Simplifies the power of the symbol\r\n     * @returns {Symbol} a clone of the symbol\r\n     */\n    powSimp: function () {\n      if (this.group === CB) {\n        var powers = [],\n            sign = this.multiplier.sign();\n        this.each(function (x) {\n          var p = x.power; //why waste time if I can't do anything anyway\n\n          if (isSymbol(p) || p.equals(1)) return this.clone();\n          powers.push(p);\n        });\n        var min = new Frac(arrayMin(powers)); //handle the coefficient\n        //handle the multiplier\n\n        var sign = this.multiplier.sign(),\n            m = this.multiplier.clone().abs(),\n            mfactors = Math2.ifactor(m); //if we have a multiplier of 6750 and a min of 2 then the factors are 5^3*5^3*2\n        //we can then reduce it to 2*3*5*(15)^2\n\n        var out_ = new Frac(1);\n        var in_ = new Frac(1);\n\n        for (var x in mfactors) {\n          var n = new Frac(mfactors[x]);\n\n          if (!n.lessThan(min)) {\n            n = n.divide(min).subtract(new Frac(1));\n            in_ = in_.multiply(new Frac(x)); //move the factor inside the bracket\n          }\n\n          out_ = out_.multiply(_.parse(inBrackets(x) + '^' + inBrackets(n)).multiplier);\n        }\n\n        var t = new Symbol(in_);\n        this.each(function (x) {\n          x = x.clone();\n          x.power = x.power.divide(min);\n          t = _.multiply(t, x);\n        });\n\n        var xt = _.symfunction(PARENTHESIS, [t]);\n\n        xt.power = min;\n        xt.multiplier = sign < 0 ? out_.negate() : out_;\n        return xt;\n      }\n\n      return this.clone();\n    },\n\n    /**\r\n     * Checks to see if two functions are of equal value\r\n     * @param {Symbol} symbol\r\n     */\n    equals: function (symbol) {\n      if (!isSymbol(symbol)) symbol = new Symbol(symbol);\n      return this.value === symbol.value && this.power.equals(symbol.power) && this.multiplier.equals(symbol.multiplier) && this.group === symbol.group;\n    },\n    abs: function () {\n      var e = this.clone();\n      e.multiplier.abs();\n      return e;\n    },\n    // Greater than\n    gt: function (symbol) {\n      if (!isSymbol(symbol)) symbol = new Symbol(symbol);\n      return this.isConstant() && symbol.isConstant() && this.multiplier.greaterThan(symbol.multiplier);\n    },\n    // Greater than\n    gte: function (symbol) {\n      if (!isSymbol(symbol)) symbol = new Symbol(symbol);\n      return this.equals(symbol) || this.isConstant() && symbol.isConstant() && this.multiplier.greaterThan(symbol.multiplier);\n    },\n    // Less than\n    lt: function (symbol) {\n      if (!isSymbol(symbol)) symbol = new Symbol(symbol);\n      return this.isConstant() && symbol.isConstant() && this.multiplier.lessThan(symbol.multiplier);\n    },\n    // Less than\n    lte: function (symbol) {\n      if (!isSymbol(symbol)) symbol = new Symbol(symbol);\n      return this.equals(symbol) || this.isConstant() && symbol.isConstant() && this.multiplier.lessThan(symbol.multiplier);\n    },\n\n    /**\r\n     * Because nerdamer doesn't group symbols by polynomials but\r\n     * rather a custom grouping method, this has to be\r\n     * reinserted in order to make use of most algorithms. This function\r\n     * checks if the symbol meets the criteria of a polynomial.\r\n     * @param {bool} multivariate\r\n     * @returns {boolean}\r\n     */\n    isPoly: function (multivariate) {\n      var g = this.group,\n          p = this.power; //the power must be a integer so fail if it's not\n\n      if (!isInt(p) || p < 0) return false; //constants and first orders\n\n      if (g === N || g === S || this.isConstant(true)) return true;\n      var vars = variables(this);\n\n      if (g === CB && vars.length === 1) {\n        //the variable is assumed the only one that was found\n        var v = vars[0]; //if no variable then guess what!?!? We're done!!! We have a polynomial.\n\n        if (!v) return true;\n\n        for (var x in this.symbols) {\n          var sym = this.symbols[x]; //sqrt(x)\n\n          if (sym.group === FN && !sym.args[0].isConstant()) return false;\n          if (!sym.contains(v) && !sym.isConstant(true)) return false;\n        }\n\n        return true;\n      } //PL groups. These only fail if a power is not an int\n      //this should handle cases such as x^2*t\n\n\n      if (this.isComposite() || g === CB && multivariate) {\n        //fail if we're not checking for multivariate polynomials\n        if (!multivariate && vars.length > 1) return false; //loop though the symbols and check if they qualify\n\n        for (var x in this.symbols) {\n          //we've already the symbols if we're not checking for multivariates at this point\n          //so we check the sub-symbols\n          if (!this.symbols[x].isPoly(multivariate)) return false;\n        }\n\n        return true;\n      } else return false;\n      /*\r\n       //all tests must have passed so we must be dealing with a polynomial\r\n       return true;\r\n       */\n\n    },\n    //removes the requested variable from the symbol and returns the remainder\n    stripVar: function (x, exclude_x) {\n      var retval;\n      if ((this.group === PL || this.group === S) && this.value === x) retval = new Symbol(exclude_x ? 0 : this.multiplier);else if (this.group === CB && this.isLinear()) {\n        retval = new Symbol(1);\n        this.each(function (s) {\n          if (!s.contains(x, true)) retval = _.multiply(retval, s.clone());\n        });\n        retval.multiplier = retval.multiplier.multiply(this.multiplier);\n      } else if (this.group === CP && !this.isLinear()) {\n        retval = new Symbol(this.multiplier);\n      } else if (this.group === CP && this.isLinear()) {\n        retval = new Symbol(0);\n        this.each(function (s) {\n          if (!s.contains(x)) {\n            var t = s.clone();\n            t.multiplier = t.multiplier.multiply(this.multiplier);\n            retval = _.add(retval, t);\n          }\n        }); //BIG TODO!!! It doesn't make much sense\n\n        if (retval.equals(0)) retval = new Symbol(this.multiplier);\n      } else if (this.group === EX && this.power.contains(x, true)) {\n        retval = new Symbol(this.multiplier);\n      } else if (this.group === FN && this.contains(x)) {\n        retval = new Symbol(this.multiplier);\n      } else //wth? This should technically be the multiplier.\n        //Unfortunately this method wasn't very well thought out :`(.\n        //should be: retval = new Symbol(this.multiplier);\n        //use: ((1+x^2)*sqrt(-1+x^2))^(-1) for correction.\n        //this will break a bunch of unit tests so be ready to for the long haul\n        retval = this.clone();\n      return retval;\n    },\n    //returns symbol in array form with x as base e.g. a*x^2+b*x+c = [c, b, a].\n    toArray: function (v, arr) {\n      arr = arr || {\n        arr: [],\n        add: function (x, idx) {\n          var e = this.arr[idx];\n          this.arr[idx] = e ? _.add(e, x) : x;\n        }\n      };\n      var g = this.group;\n\n      if (g === S && this.contains(v)) {\n        arr.add(new Symbol(this.multiplier), this.power);\n      } else if (g === CB) {\n        var a = this.stripVar(v),\n            x = _.divide(this.clone(), a.clone());\n\n        var p = x.isConstant() ? 0 : x.power;\n        arr.add(a, p);\n      } else if (g === PL && this.value === v) {\n        this.each(function (x, p) {\n          arr.add(x.stripVar(v), p);\n        });\n      } else if (g === CP) {\n        //the logic: they'll be broken into symbols so e.g. (x^2+x)+1 or (a*x^2+b*x+c)\n        //each case is handled above\n        this.each(function (x) {\n          x.toArray(v, arr);\n        });\n      } else if (this.contains(v)) {\n        throw new NerdamerTypeError('Cannot convert to array! Exiting');\n      } else {\n        arr.add(this.clone(), 0); //it's just a constant wrt to v\n      } //fill the holes\n\n\n      arr = arr.arr; //keep only the array since we don't need the object anymore\n\n      for (var i = 0; i < arr.length; i++) if (!arr[i]) arr[i] = new Symbol(0);\n\n      return arr;\n    },\n    //checks to see if a symbol contans a function\n    hasFunc: function (v) {\n      var fn_group = this.group === FN || this.group === EX;\n      if (fn_group && !v || fn_group && this.contains(v)) return true;\n\n      if (this.symbols) {\n        for (var x in this.symbols) {\n          if (this.symbols[x].hasFunc(v)) return true;\n        }\n      }\n\n      return false;\n    },\n    sub: function (a, b) {\n      a = !isSymbol(a) ? _.parse(a) : a.clone();\n      b = !isSymbol(b) ? _.parse(b) : b.clone();\n      if (a.group === N || a.group === P) err('Cannot substitute a number. Must be a variable');\n      var same_pow = false,\n          a_is_unit_multiplier = a.multiplier.equals(1),\n          m = this.multiplier.clone(),\n          retval;\n      /*\r\n       * In order to make the substitution the bases have to first match take\r\n       * (x+1)^x -> (x+1)=y || x^2 -> x=y^6\r\n       * In both cases the first condition is that the bases match so we begin there\r\n       * Either both are PL or both are not PL but we cannot have PL and a non-PL group match\r\n       */\n\n      if (this.value === a.value && (this.group !== PL && a.group !== PL || this.group === PL && a.group === PL)) {\n        //we cleared the first hurdle but a subsitution may not be possible just yet\n        if (a_is_unit_multiplier || a.multiplier.equals(this.multiplier)) {\n          if (a.isLinear()) {\n            retval = b;\n          } else if (a.power.equals(this.power)) {\n            retval = b;\n            same_pow = true;\n          }\n\n          if (a.multiplier.equals(this.multiplier)) m = new Frac(1);\n        }\n      } //the next thing is to handle CB\n      else if (this.group === CB || this.previousGroup === CB) {\n          retval = new Symbol(1);\n          this.each(function (x) {\n            var subbed = _.parse(x.sub(a, b)); //parse it again for safety\n\n\n            retval = _.multiply(retval, subbed);\n          });\n        } else if (this.isComposite()) {\n          var symbol = this.clone();\n\n          if (a.isComposite() && symbol.isComposite() && symbol.isLinear() && a.isLinear()) {\n            var find = function (stack, needle) {\n              for (var x in stack.symbols) {\n                var sym = stack.symbols[x]; //if the symbol equals the needle or it's within the sub-symbols we're done\n\n                if (sym.isComposite() && find(sym, needle) || sym.equals(needle)) return true;\n              }\n\n              return false;\n            }; //go fish\n\n\n            for (var x in a.symbols) {\n              if (!find(symbol, a.symbols[x])) return symbol.clone();\n            }\n\n            retval = _.add(_.subtract(symbol.clone(), a), b);\n          } else {\n            retval = new Symbol(0);\n            symbol.each(function (x) {\n              retval = _.add(retval, x.sub(a, b));\n            });\n          }\n        } else if (this.group === EX) {\n          // the parsed value could be a function so parse and sub\n          retval = _.parse(this.value).sub(a, b);\n        } else if (this.group === FN) {\n          var nargs = [];\n\n          for (var i = 0; i < this.args.length; i++) {\n            var arg = this.args[i];\n            if (!isSymbol(arg)) arg = _.parse(arg);\n            nargs.push(arg.sub(a, b));\n          }\n\n          retval = _.symfunction(this.fname, nargs);\n        } //if we did manage a substitution\n\n\n      if (retval) {\n        if (!same_pow) {\n          //substitute the power\n          var p = this.group === EX ? this.power.sub(a, b) : _.parse(this.power); //now raise the symbol to that power\n\n          retval = _.pow(retval, p);\n        } //transfer the multiplier\n\n\n        retval.multiplier = retval.multiplier.multiply(m); //done\n\n        return retval;\n      } //if all else fails\n\n\n      return this.clone();\n    },\n    isMonomial: function () {\n      if (this.group === S) return true;\n\n      if (this.group === CB) {\n        for (var x in this.symbols) if (this.symbols[x].group !== S) return false;\n      } else return false;\n\n      return true;\n    },\n    isPi: function () {\n      return this.group === S && this.value === 'pi';\n    },\n    sign: function () {\n      return this.multiplier.sign();\n    },\n    isE: function () {\n      return this.value === 'e';\n    },\n    isSQRT: function () {\n      return this.fname === SQRT;\n    },\n    isConstant: function (check_all, check_symbols) {\n      if (check_symbols && this.group === CB) {\n        for (var x in this.symbols) {\n          if (this.symbols[x].isConstant(true)) return true;\n        }\n      }\n\n      if (check_all === 'functions' && this.isComposite()) {\n        var isConstant = true;\n        this.each(function (x) {\n          if (!x.isConstant(check_all, check_symbols)) {\n            isConstant = false;\n          }\n        }, true);\n        return isConstant;\n      }\n\n      if (check_all === 'all' && (this.isPi() || this.isE())) {\n        return true;\n      }\n\n      if (check_all && this.group === FN) {\n        for (var i = 0; i < this.args.length; i++) {\n          if (!this.args[i].isConstant(check_all)) return false;\n        }\n\n        return true;\n      }\n\n      if (check_all) return isNumericSymbol(this);\n      return this.value === CONST_HASH;\n    },\n    //the symbols is imaginary if\n    //1. n*i\n    //2. a+b*i\n    //3. a*i\n    isImaginary: function () {\n      if (this.imaginary) return true;else if (this.symbols) {\n        for (var x in this.symbols) if (this.symbols[x].isImaginary()) return true;\n      }\n      return false;\n    },\n\n    /**\r\n     * Returns the real part of a symbol\r\n     * @returns {Symbol}\r\n     */\n    realpart: function () {\n      if (this.isConstant()) {\n        return this.clone();\n      } else if (this.imaginary) return new Symbol(0);else if (this.isComposite()) {\n        var retval = new Symbol(0);\n        this.each(function (x) {\n          retval = _.add(retval, x.realpart());\n        });\n        return retval;\n      } else if (this.isImaginary()) return new Symbol(0);\n\n      return this.clone();\n    },\n\n    /*\r\n     * Return imaginary part of a symbol\r\n     * @returns {Symbol}\r\n     */\n    imagpart: function () {\n      if (this.group === S && this.isImaginary()) return new Symbol(this.multiplier);\n\n      if (this.isComposite()) {\n        var retval = new Symbol(0);\n        this.each(function (x) {\n          retval = _.add(retval, x.imagpart());\n        });\n        return retval;\n      }\n\n      if (this.group === CB) return this.stripVar(Settings.IMAGINARY);\n      return new Symbol(0);\n    },\n    isInteger: function () {\n      return this.isConstant() && this.multiplier.isInteger();\n    },\n    isLinear: function (wrt) {\n      if (wrt) {\n        if (this.isConstant()) return true;\n\n        if (this.group === S) {\n          if (this.value === wrt) return this.power.equals(1);else return true;\n        }\n\n        if (this.isComposite() && this.power.equals(1)) {\n          for (var x in this.symbols) {\n            if (!this.symbols[x].isLinear(wrt)) return false;\n          }\n\n          return true;\n        }\n\n        if (this.group === CB && this.symbols[wrt]) return this.symbols[wrt].isLinear(wrt);\n        return false;\n      } else return this.power.equals(1);\n    },\n\n    /**\r\n     * Checks to see if a symbol has a function by a specified name or within a specified list\r\n     * @param {String|String[]} names\r\n     * @returns {Boolean}\r\n     */\n    containsFunction: function (names) {\n      if (typeof names === 'string') names = [names];\n      if (this.group === FN && names.indexOf(this.fname) !== -1) return true;\n\n      if (this.symbols) {\n        for (var x in this.symbols) {\n          if (this.symbols[x].containsFunction(names)) return true;\n        }\n      }\n\n      return false;\n    },\n    multiplyPower: function (p2) {\n      //leave out 1\n      if (this.group === N && this.multiplier.equals(1)) return this;\n      var p1 = this.power;\n\n      if (this.group !== EX && p2.group === N) {\n        var p = p2.multiplier;\n\n        if (this.group === N && !p.isInteger()) {\n          this.convert(P);\n        }\n\n        this.power = p1.equals(1) ? p.clone() : p1.multiply(p);\n\n        if (this.group === P && isInt(this.power)) {\n          //bring it back to an N\n          this.value = Math.pow(this.value, this.power);\n          this.toLinear();\n          this.convert(N);\n        }\n      } else {\n        if (this.group !== EX) {\n          p1 = new Symbol(p1);\n          this.convert(EX);\n        }\n\n        this.power = _.multiply(p1, p2);\n      }\n\n      return this;\n    },\n    setPower: function (p, retainSign) {\n      //leave out 1\n      if (this.group === N && this.multiplier.equals(1)) {\n        return this;\n      }\n\n      if (this.group === EX && !isSymbol(p)) {\n        this.group = this.previousGroup;\n        delete this.previousGroup;\n\n        if (this.group === N) {\n          this.multiplier = new Frac(this.value);\n          this.value = CONST_HASH;\n        } else this.power = p;\n      } else {\n        var isSymbolic = false;\n\n        if (isSymbol(p)) {\n          if (p.group === N) {\n            //p should be the multiplier instead\n            p = p.multiplier;\n          } else {\n            isSymbolic = true;\n          }\n        }\n\n        var group = isSymbolic ? EX : P;\n        this.power = p;\n        if (this.group === N && group) this.convert(group, retainSign);\n      }\n\n      return this;\n    },\n\n    /**\r\n     * Checks to see if symbol is located in the denominator\r\n     * @returns {boolean}\r\n     */\n    isInverse: function () {\n      if (this.group === EX) return this.power.multiplier.lessThan(0);\n      return this.power < 0;\n    },\n\n    /**\r\n     * Make a duplicate of a symbol by copying a predefined list of items.\r\n     * The name 'copy' would probably be a more appropriate name.\r\n     * to a new symbol\r\n     * @param {Symbol} c\r\n     * @returns {Symbol}\r\n     */\n    clone: function (c) {\n      var clone = c || new Symbol(0),\n          //list of properties excluding power as this may be a symbol and would also need to be a clone.\n      properties = ['value', 'group', 'length', 'previousGroup', 'imaginary', 'fname', 'args', 'isInfinity', 'scientific'],\n          l = properties.length,\n          i;\n\n      if (this.symbols) {\n        clone.symbols = {};\n\n        for (var x in this.symbols) {\n          clone.symbols[x] = this.symbols[x].clone();\n        }\n      }\n\n      for (i = 0; i < l; i++) {\n        if (this[properties[i]] !== undefined) {\n          clone[properties[i]] = this[properties[i]];\n        }\n      }\n\n      clone.power = this.power.clone();\n      clone.multiplier = this.multiplier.clone(); //add back the flag to track if this symbol is a conversion symbol\n\n      if (this.isConversion) clone.isConversion = this.isConversion;\n      if (this.isUnit) clone.isUnit = this.isUnit;\n      return clone;\n    },\n\n    /**\r\n     * Converts a symbol multiplier to one.\r\n     * @param {Boolean} keepSign Keep the multiplier as negative if the multiplier is negative and keepSign is true\r\n     * @returns {Symbol}\r\n     */\n    toUnitMultiplier: function (keepSign) {\n      this.multiplier.num = new bigInt(this.multiplier.num.isNegative() && keepSign ? -1 : 1);\n      this.multiplier.den = new bigInt(1);\n      return this;\n    },\n\n    /**\r\n     * Converts a Symbol's power to one.\r\n     * @returns {Symbol}\r\n     */\n    toLinear: function () {\n      // Do nothing if it's already linear\n      if (this.power.equals(1)) {\n        return this;\n      }\n\n      this.setPower(new Frac(1));\n      return this;\n    },\n\n    /**\r\n     * Iterates over all the sub-symbols. If no sub-symbols exist then it's called on itself\r\n     * @param {Function} fn\r\n     * @@param {Boolean} deep If true it will itterate over the sub-symbols their symbols as well\r\n     */\n    each: function (fn, deep) {\n      if (!this.symbols) {\n        fn.call(this, this, this.value);\n      } else {\n        for (var x in this.symbols) {\n          var sym = this.symbols[x];\n\n          if (sym.group === PL && deep) {\n            for (var y in sym.symbols) {\n              fn.call(x, sym.symbols[y], y);\n            }\n          } else fn.call(this, sym, x);\n        }\n      }\n    },\n\n    /**\r\n     * A numeric value to be returned for Javascript. It will try to\r\n     * return a number as far a possible but in case of a pure symbolic\r\n     * symbol it will just return its text representation\r\n     * @returns {String|Number}\r\n     */\n    valueOf: function () {\n      if (this.group === N) return this.multiplier.valueOf();else if (this.power === 0) {\n        return 1;\n      } else if (this.multiplier === 0) {\n        return 0;\n      } else {\n        return text(this, 'decimals');\n      }\n    },\n\n    /**\r\n     * Checks to see if a symbols has a particular variable within it.\r\n     * Pass in true as second argument to include the power of exponentials\r\n     * which aren't check by default.\r\n     * @example var s = _.parse('x+y+z'); s.contains('y');\r\n     * //returns true\r\n     * @param {any} variable\r\n     * @param {boolean} all\r\n     * @returns {boolean}\r\n     */\n    contains: function (variable, all) {\n      //contains expects a string\n      variable = String(variable);\n      var g = this.group;\n      if (this.value === variable) return true;\n\n      if (this.symbols) {\n        for (var x in this.symbols) {\n          if (this.symbols[x].contains(variable, all)) return true;\n        }\n      }\n\n      if (g === FN || this.previousGroup === FN) {\n        for (var i = 0; i < this.args.length; i++) {\n          if (this.args[i].contains(variable, all)) return true;\n        }\n      }\n\n      if (g === EX) {\n        //exit only if it does\n        if (all && this.power.contains(variable, all)) {\n          return true;\n        }\n\n        if (this.value === variable) return true;\n      }\n\n      return this.value === variable;\n    },\n\n    /**\r\n     * Negates a symbols\r\n     * @returns {boolean}\r\n     */\n    negate: function () {\n      this.multiplier.negate();\n      if (this.group === CP || this.group === PL) this.distributeMultiplier();\n      return this;\n    },\n\n    /**\r\n     * Inverts a symbol\r\n     * @param {boolean} power_only\r\n     * @param {boolean} all\r\n     * @returns {boolean}\r\n     */\n    invert: function (power_only, all) {\n      //invert the multiplier\n      if (!power_only) this.multiplier = this.multiplier.invert(); //invert the rest\n\n      if (isSymbol(this.power)) {\n        this.power.negate();\n      } else if (this.group === CB && all) {\n        this.each(function (x) {\n          return x.invert();\n        });\n      } else {\n        if (this.power && this.group !== N) this.power.negate();\n      }\n\n      return this;\n    },\n\n    /**\r\n     * Symbols of group CP or PL may have the multiplier being carried by\r\n     * the top level symbol at any given time e.g. 2*(x+y+z). This is\r\n     * convenient in many cases, however in some cases the multiplier needs\r\n     * to be carried individually e.g. 2*x+2*y+2*z.\r\n     * This method distributes the multiplier over the entire symbol\r\n     * @param {boolean} all\r\n     * @returns {Symbol}\r\n     */\n    distributeMultiplier: function (all) {\n      var is_one = all ? this.power.absEquals(1) : this.power.equals(1);\n\n      if (this.symbols && is_one && this.group !== CB && !this.multiplier.equals(1)) {\n        for (var x in this.symbols) {\n          var s = this.symbols[x];\n          s.multiplier = s.multiplier.multiply(this.multiplier);\n          s.distributeMultiplier();\n        }\n\n        this.toUnitMultiplier();\n      }\n\n      return this;\n    },\n\n    /**\r\n     * This method expands the exponent over the entire symbol just like\r\n     * distributeMultiplier\r\n     * @returns {Symbol}\r\n     */\n    distributeExponent: function () {\n      if (!this.power.equals(1)) {\n        var p = this.power;\n\n        for (var x in this.symbols) {\n          var s = this.symbols[x];\n\n          if (s.group === EX) {\n            s.power = _.multiply(s.power, new Symbol(p));\n          } else {\n            this.symbols[x].power = this.symbols[x].power.multiply(p);\n          }\n        }\n\n        this.toLinear();\n      }\n\n      return this;\n    },\n\n    /**\r\n     * This method will attempt to up-convert or down-convert one symbol\r\n     * from one group to another. Not all symbols are convertible from one\r\n     * group to another however. In that case the symbol will remain\r\n     * unchanged.\r\n     * @param {int} group\r\n     * @param {string} imaginary\r\n     */\n    convert: function (group, imaginary) {\n      if (group > FN) {\n        //make a clone of this symbol;\n        var cp = this.clone(); //attach a symbols object and upgrade the group\n\n        this.symbols = {};\n\n        if (group === CB) {\n          //symbol of group CB hold symbols bound together through multiplication\n          //because of commutativity this multiplier can technically be anywhere within the group\n          //to keep track of it however it's easier to always have the top level carry it\n          cp.toUnitMultiplier();\n        } else {\n          //reset the symbol\n          this.toUnitMultiplier();\n        }\n\n        if (this.group === FN) {\n          cp.args = this.args;\n          delete this.args;\n          delete this.fname;\n        } //the symbol may originate from the symbol i but this property no longer holds true\n        //after copying\n\n\n        if (this.isImgSymbol) delete this.isImgSymbol;\n        this.toLinear(); //attach a clone of this symbol to the symbols object using its proper key\n\n        this.symbols[cp.keyForGroup(group)] = cp;\n        this.group = group; //objects by default don't have a length property. However, in order to keep track of the number\n        //of sub-symbols we have to impliment our own.\n\n        this.length = 1;\n      } else if (group === EX) {\n        //1^x is just one so check and make sure\n        if (!(this.group === N && this.multiplier.equals(1))) {\n          if (this.group !== EX) this.previousGroup = this.group;\n\n          if (this.group === N) {\n            this.value = this.multiplier.num.toString();\n            this.toUnitMultiplier();\n          } //update the hash to reflect the accurate hash\n          else this.value = text(this, 'hash');\n\n          this.group = EX;\n        }\n      } else if (group === N) {\n        var m = this.multiplier.toDecimal();\n        if (this.symbols) this.symbols = undefined;\n        new Symbol(this.group === P ? m * Math.pow(this.value, this.power) : m).clone(this);\n      } else if (group === P && this.group === N) {\n        this.value = imaginary ? this.multiplier.num.toString() : Math.abs(this.multiplier.num.toString());\n        this.toUnitMultiplier(!imaginary);\n        this.group = P;\n      }\n\n      return this;\n    },\n\n    /**\r\n     * This method is one of the principal methods to make it all possible.\r\n     * It performs cleanup and prep operations whenever a symbols is\r\n     * inserted. If the symbols results in a 1 in a CB (multiplication)\r\n     * group for instance it will remove the redundant symbol. Similarly\r\n     * in a symbol of group PL or CP (symbols glued by multiplication) it\r\n     * will remove any dangling zeroes from the symbol. It will also\r\n     * up-convert or down-convert a symbol if it detects that it's\r\n     * incorrectly grouped. It should be noted that this method is not\r\n     * called directly but rather by the 'attach' method for addition groups\r\n     * and the 'combine' method for multiplication groups.\r\n     * @param {Symbol} symbol\r\n     * @param {String} action\r\n     */\n    insert: function (symbol, action) {\n      //this check can be removed but saves a lot of aggravation when trying to hunt down\n      //a bug. If left, you will instantly know that the error can only be between 2 symbols.\n      if (!isSymbol(symbol)) err('Object ' + symbol + ' is not of type Symbol!');\n\n      if (this.symbols) {\n        var group = this.group;\n\n        if (group > FN) {\n          var key = symbol.keyForGroup(group);\n          var existing = key in this.symbols ? this.symbols[key] : false; //check if there's already a symbol there\n\n          if (action === 'add') {\n            var hash = key;\n\n            if (existing) {\n              //add them together using the parser\n              this.symbols[hash] = _.add(existing, symbol); //if the addition resulted in a zero multiplier remove it\n\n              if (this.symbols[hash].multiplier.equals(0)) {\n                delete this.symbols[hash];\n                this.length--;\n\n                if (this.length === 0) {\n                  this.convert(N);\n                  this.multiplier = new Frac(0);\n                }\n              }\n            } else {\n              this.symbols[key] = symbol;\n              this.length++;\n            }\n          } else {\n            //check if this is of group P and unwrap before inserting\n            if (symbol.group === P && isInt(symbol.power)) {\n              symbol.convert(N);\n            } //transfer the multiplier to the upper symbol but only if the symbol numeric\n\n\n            if (symbol.group !== EX) {\n              this.multiplier = this.multiplier.multiply(symbol.multiplier);\n              symbol.toUnitMultiplier();\n            } else {\n              symbol.parens = symbol.multiplier.lessThan(0);\n              this.multiplier = this.multiplier.multiply(symbol.multiplier.clone().abs());\n              symbol.toUnitMultiplier(true);\n            }\n\n            if (existing) {\n              //remove because the symbol may have changed\n              symbol = _.multiply(remove(this.symbols, key), symbol);\n\n              if (symbol.isConstant()) {\n                this.multiplier = this.multiplier.multiply(symbol.multiplier);\n                symbol = new Symbol(1); //the dirty work gets done down the line when it detects 1\n              }\n\n              this.length--; //clean up\n            } //don't insert the symbol if it's 1\n\n\n            if (!symbol.isOne(true)) {\n              this.symbols[key] = symbol;\n              this.length++;\n            } else if (symbol.multiplier.lessThan(0)) {\n              this.negate(); //put back the sign\n            }\n          } //clean up\n\n\n          if (this.length === 0) this.convert(N); //update the hash\n\n          if (this.group === CP || this.group === CB) {\n            this.updateHash();\n          }\n        }\n      }\n\n      return this;\n    },\n    //the insert method for addition\n    attach: function (symbol) {\n      if (isArray(symbol)) {\n        for (var i = 0; i < symbol.length; i++) this.insert(symbol[i], 'add');\n\n        return this;\n      }\n\n      return this.insert(symbol, 'add');\n    },\n    //the insert method for multiplication\n    combine: function (symbol) {\n      if (isArray(symbol)) {\n        for (var i = 0; i < symbol.length; i++) this.insert(symbol[i], 'multiply');\n\n        return this;\n      }\n\n      return this.insert(symbol, 'multiply');\n    },\n\n    /**\r\n     * This method should be called after any major \"surgery\" on a symbol.\r\n     * It updates the hash of the symbol for example if the fname of a\r\n     * function has changed it will update the hash of the symbol.\r\n     */\n    updateHash: function () {\n      if (this.group === N) return;\n\n      if (this.group === FN) {\n        var contents = '',\n            args = this.args,\n            is_parens = this.fname === PARENTHESIS;\n\n        for (var i = 0; i < args.length; i++) contents += (i === 0 ? '' : ',') + text(args[i]);\n\n        var fn_name = is_parens ? '' : this.fname;\n        this.value = fn_name + (is_parens ? contents : inBrackets(contents));\n      } else if (!(this.group === S || this.group === PL)) {\n        this.value = text(this, 'hash');\n      }\n    },\n\n    /**\r\n     * this function defines how every group in stored within a group of\r\n     * higher order think of it as the switchboard for the library. It\r\n     * defines the hashes for symbols.\r\n     * @param {int} group\r\n     */\n    keyForGroup: function (group) {\n      var g = this.group;\n      var key;\n\n      if (g === N) {\n        key = this.value;\n      } else if (g === S || g === P) {\n        if (group === PL) key = this.power.toDecimal();else key = this.value;\n      } else if (g === FN) {\n        if (group === PL) key = this.power.toDecimal();else key = text(this, 'hash');\n      } else if (g === PL) {\n        //if the order is reversed then we'll assume multiplication\n        //TODO: possible future dilemma\n        if (group === CB) key = text(this, 'hash');else if (group === CP) {\n          if (this.power.equals(1)) key = this.value;else key = inBrackets(text(this, 'hash')) + Settings.POWER_OPERATOR + this.power.toDecimal();\n        } else if (group === PL) key = this.power.toString();else key = this.value;\n        return key;\n      } else if (g === CP) {\n        if (group === CP) {\n          key = text(this, 'hash');\n        }\n\n        if (group === PL) key = this.power.toDecimal();else key = this.value;\n      } else if (g === CB) {\n        if (group === PL) key = this.power.toDecimal();else key = text(this, 'hash');\n      } else if (g === EX) {\n        if (group === PL) key = text(this.power);else key = text(this, 'hash');\n      }\n\n      return key;\n    },\n\n    /**\r\n     * Symbols are typically stored in an object which works fine for most\r\n     * cases but presents a problem when the order of the symbols makes\r\n     * a difference. This function simply collects all the symbols and\r\n     * returns them as an array. If a function is supplied then that\r\n     * function is called on every symbol contained within the object.\r\n     * @param {Function} fn\r\n     * @param {Object} opt\r\n     * @param {Function} sort_fn\r\n     * @@param {Boolean} expand_symbol\r\n     * @returns {Array}\r\n     */\n    collectSymbols: function (fn, opt, sort_fn, expand_symbol) {\n      var collected = [];\n      if (!this.symbols) collected.push(this);else {\n        for (var x in this.symbols) {\n          var symbol = this.symbols[x];\n\n          if (expand_symbol && (symbol.group === PL || symbol.group === CP)) {\n            collected = collected.concat(symbol.collectSymbols());\n          } else collected.push(fn ? fn(symbol, opt) : symbol);\n        }\n      }\n      if (sort_fn === null) sort_fn = undefined; //WTF Firefox? Seriously?\n\n      return collected.sort(sort_fn); //sort hopefully gives us some sort of consistency\n    },\n\n    /**\r\n     * Returns the latex representation of the symbol\r\n     * @param {String} option\r\n     * @returns {String}\r\n     */\n    latex: function (option) {\n      return LaTeX.latex(this, option);\n    },\n\n    /**\r\n     * Returns the text representation of a symbol\r\n     * @param {String} option\r\n     * @returns {String}\r\n     */\n    text: function (option) {\n      return text(this, option);\n    },\n\n    /**\r\n     * Checks if the function evaluates to 1. e.g. x^0 or 1 :)\r\n     * @@param {bool} abs Compares the absolute value\r\n     */\n    isOne: function (abs) {\n      var f = abs ? 'absEquals' : 'equals';\n      if (this.group === N) return this.multiplier[f](1);else return this.power.equals(0);\n    },\n    isComposite: function () {\n      var g = this.group,\n          pg = this.previousGroup;\n      return g === CP || g === PL || pg === PL || pg === CP;\n    },\n    isCombination: function () {\n      var g = this.group,\n          pg = this.previousGroup;\n      return g === CB || pg === CB;\n    },\n    lessThan: function (n) {\n      return this.multiplier.lessThan(n);\n    },\n    greaterThan: function (n) {\n      if (!isSymbol(n)) {\n        n = new Symbol(n);\n      } // We can't tell for sure if a is greater than be if they're not both numbers\n\n\n      if (!this.isConstant(true) || !n.isConstant(true)) {\n        return false;\n      }\n\n      return this.multiplier.greaterThan(n.multiplier);\n    },\n\n    /**\r\n     * Get's the denominator of the symbol if the symbol is of class CB (multiplication)\r\n     * with other classes the symbol is either the denominator or not.\r\n     * Take x^-1+x^-2. If the symbol was to be mixed such as x+x^-2 then the symbol doesn't have have an exclusive\r\n     * denominator and has to be found by looking at the actual symbols themselves.\r\n     */\n    getDenom: function () {\n      var retval, symbol;\n      symbol = this.clone(); //e.g. 1/(x*(x+1))\n\n      if (this.group === CB && this.power.lessThan(0)) symbol = _.expand(symbol); //if the symbol already is the denominator... DONE!!!\n\n      if (symbol.power.lessThan(0)) {\n        var d = _.parse(symbol.multiplier.den);\n\n        retval = symbol.toUnitMultiplier();\n        retval.power.negate();\n        retval = _.multiply(d, retval); //put back the coeff\n      } else if (symbol.group === CB) {\n        retval = _.parse(symbol.multiplier.den);\n\n        for (var x in symbol.symbols) if (symbol.symbols[x].power < 0) retval = _.multiply(retval, symbol.symbols[x].clone().invert());\n      } else retval = _.parse(symbol.multiplier.den);\n\n      return retval;\n    },\n    getNum: function () {\n      var retval, symbol;\n      symbol = this.clone(); //e.g. 1/(x*(x+1))\n\n      if (symbol.group === CB && symbol.power.lessThan(0)) symbol = _.expand(symbol); //if the symbol already is the denominator... DONE!!!\n\n      if (symbol.power.greaterThan(0) && symbol.group !== CB) {\n        retval = _.multiply(_.parse(symbol.multiplier.num), symbol.toUnitMultiplier());\n      } else if (symbol.group === CB) {\n        retval = _.parse(symbol.multiplier.num);\n        symbol.each(function (x) {\n          if (x.power > 0 || x.group === EX && x.power.multiplier > 0) {\n            retval = _.multiply(retval, x.clone());\n          }\n        });\n      } else {\n        retval = _.parse(symbol.multiplier.num);\n      }\n\n      return retval;\n    },\n    toString: function () {\n      return this.text();\n    }\n  }; //Parser =======================================================================\n  //Uses modified Shunting-yard algorithm. http://en.wikipedia.org/wiki/Shunting-yard_algorithm\n\n  function Parser() {\n    //Point to the local parser instead of the global one\n    var _ = this;\n\n    var bin = {};\n    var preprocessors = {\n      names: [],\n      actions: []\n    }; //Parser.classes ===============================================================\n\n    function Slice(upper, lower) {\n      this.start = upper;\n      this.end = lower;\n    }\n\n    ;\n\n    Slice.prototype.isConstant = function () {\n      return this.start.isConstant() && this.end.isConstant();\n    };\n\n    Slice.prototype.text = function () {\n      return text(this.start) + ':' + text(this.end);\n    };\n    /**\r\n     * Class used to collect arguments for functions\r\n     * @returns {Parser.Collection}\r\n     */\n\n\n    function Collection() {\n      this.elements = [];\n    }\n\n    Collection.prototype.append = function (e) {\n      this.elements.push(e);\n    };\n\n    Collection.prototype.getItems = function () {\n      return this.elements;\n    };\n\n    Collection.prototype.toString = function () {\n      return _.pretty_print(this.elements);\n    };\n\n    Collection.create = function (e) {\n      var collection = new Collection();\n      if (e) collection.append(e);\n      return collection;\n    };\n\n    function Token(node, node_type, column) {\n      this.type = node_type;\n      this.value = node;\n      if (column !== undefined) this.column = column + 1;\n\n      if (node_type === Token.OPERATOR) {\n        //copy everything over from the operator\n        var operator = operators[node];\n\n        for (var x in operator) this[x] = operator[x];\n      } else if (node_type === Token.FUNCTION) {\n        this.precedence = Token.MAX_PRECEDENCE; //leave enough roon\n\n        this.leftAssoc = false;\n      }\n    }\n\n    Token.prototype.toString = function () {\n      return this.value;\n    };\n\n    Token.prototype.toString = function () {\n      if (this.is_prefix) return '`' + this.value;\n      return this.value;\n    }; //some constants\n\n\n    Token.OPERATOR = 'OPERATOR';\n    Token.VARIABLE_OR_LITERAL = 'VARIABLE_OR_LITERAL';\n    Token.FUNCTION = 'FUNCTION';\n    Token.UNIT = 'UNIT';\n    Token.KEYWORD = 'KEYWORD';\n    Token.MAX_PRECEDENCE = 999; //create link to classes\n\n    this.classes = {\n      Collection: Collection,\n      Slice: Slice,\n      Token: Token\n    }; //Parser.modules ===============================================================\n    //object for functions which handle complex number\n\n    var complex = {\n      prec: undefined,\n      cos: function (r, i) {\n        var re, im;\n        re = _.parse(Math.cos(r) * Math.cosh(i));\n        im = _.parse(Math.sin(r) * Math.sinh(i));\n        return _.subtract(re, _.multiply(im, Symbol.imaginary()));\n      },\n      sin: function (r, i) {\n        var re, im;\n        re = _.parse(Math.sin(r) * Math.cosh(i));\n        im = _.parse(Math.cos(r) * Math.sinh(i));\n        return _.subtract(re, _.multiply(im, Symbol.imaginary()));\n      },\n      tan: function (r, i) {\n        var re, im;\n        re = _.parse(Math.sin(2 * r) / (Math.cos(2 * r) + Math.cosh(2 * i)));\n        im = _.parse(Math.sinh(2 * i) / (Math.cos(2 * r) + Math.cosh(2 * i)));\n        return _.add(re, _.multiply(im, Symbol.imaginary()));\n      },\n      sec: function (r, i) {\n        var t = this.removeDen(this.cos(r, i));\n        return _.subtract(t[0], _.multiply(t[1], Symbol.imaginary()));\n      },\n      csc: function (r, i) {\n        var t = this.removeDen(this.sin(r, i));\n        return _.add(t[0], _.multiply(t[1], Symbol.imaginary()));\n      },\n      cot: function (r, i) {\n        var t = this.removeDen(this.tan(r, i));\n        return _.subtract(t[0], _.multiply(t[1], Symbol.imaginary()));\n      },\n      acos: function (r, i) {\n        var symbol, sq, a, b, c, squared;\n        symbol = this.fromArray([r, i]);\n        squared = _.pow(symbol.clone(), new Symbol(2));\n        sq = _.expand(squared); //z*z\n\n        a = _.multiply(sqrt(_.subtract(new Symbol(1), sq)), Symbol.imaginary());\n        b = _.expand(_.add(symbol.clone(), a));\n        c = log(b);\n        return _.expand(_.multiply(Symbol.imaginary().negate(), c));\n      },\n      asin: function (r, i) {\n        return _.subtract(_.parse('pi/2'), this.acos(r, i));\n      },\n      atan: function (r, i) {\n        // Handle i and -i\n        if (r.equals(0) && (i.equals(1) || i.equals(-1))) {\n          // Just copy Wolfram Alpha for now. The parenthesis \n          return _.parse(`${Symbol.infinity()}*${Settings.IMAGINARY}*${i}`);\n        }\n\n        var a, b, c, symbol;\n        symbol = complex.fromArray([r, i]);\n        a = _.expand(_.multiply(Symbol.imaginary(), symbol.clone()));\n        b = log(_.expand(_.subtract(new Symbol(1), a.clone())));\n        c = log(_.expand(_.add(new Symbol(1), a.clone())));\n        return _.expand(_.multiply(_.divide(Symbol.imaginary(), new Symbol(2)), _.subtract(b, c)));\n      },\n      asec: function (r, i) {\n        var d = this.removeDen([r, i]);\n        d[1].negate();\n        return this.acos.apply(this, d);\n      },\n      acsc: function (r, i) {\n        var d = this.removeDen([r, i]);\n        d[1].negate();\n        return this.asin.apply(this, d);\n      },\n      acot: function (r, i) {\n        var d = this.removeDen([r, i]);\n        d[1].negate();\n        return this.atan.apply(this, d);\n      },\n      //Hyperbolic trig\n      cosh: function (r, i) {\n        var re, im;\n        re = _.parse(Math.cosh(r) * Math.cos(i));\n        im = _.parse(Math.sinh(r) * Math.sin(i));\n        return _.add(re, _.multiply(im, Symbol.imaginary()));\n      },\n      sinh: function (r, i) {\n        var re, im;\n        re = _.parse(Math.sinh(r) * Math.cos(i));\n        im = _.parse(Math.cosh(r) * Math.sin(i));\n        return _.add(re, _.multiply(im, Symbol.imaginary()));\n      },\n      tanh: function (r, i) {\n        var re, im;\n        re = _.parse(Math.sinh(2 * r) / (Math.cos(2 * i) + Math.cosh(2 * r)));\n        im = _.parse(Math.sin(2 * i) / (Math.cos(2 * i) + Math.cosh(2 * r)));\n        return _.subtract(re, _.multiply(im, Symbol.imaginary()));\n      },\n      sech: function (r, i) {\n        var t = this.removeDen(this.cosh(r, i));\n        return _.subtract(t[0], _.multiply(t[1], Symbol.imaginary()));\n      },\n      csch: function (r, i) {\n        var t = this.removeDen(this.sinh(r, i));\n        return _.subtract(t[0], _.multiply(t[1], Symbol.imaginary()));\n      },\n      coth: function (r, i) {\n        var t = this.removeDen(this.tanh(r, i));\n        return _.add(t[0], _.multiply(t[1], Symbol.imaginary()));\n      },\n      acosh: function (r, i) {\n        var a, b, z;\n        z = this.fromArray([r, i]);\n        a = sqrt(_.add(z.clone(), new Symbol(1)));\n        b = sqrt(_.subtract(z.clone(), new Symbol(1)));\n        return _.expand(log(_.add(z, _.expand(_.multiply(a, b)))));\n      },\n      asinh: function (r, i) {\n        var a, z;\n        z = this.fromArray([r, i]);\n        a = sqrt(_.add(new Symbol(1), _.expand(_.pow(z.clone(), new Symbol(2)))));\n        return _.expand(log(_.add(z, a)));\n      },\n      atanh: function (r, i) {\n        var a, b, z;\n        z = this.fromArray([r, i]);\n        a = log(_.add(z.clone(), new Symbol(1)));\n        b = log(_.subtract(new Symbol(1), z));\n        return _.expand(_.divide(_.subtract(a, b), new Symbol(2)));\n      },\n      asech: function (r, i) {\n        var t = this.removeDen([r, i]);\n        t[1].negate();\n        return this.acosh.apply(this, t);\n      },\n      acsch: function (r, i) {\n        var t = this.removeDen([r, i]);\n        t[1].negate();\n        return this.asinh.apply(this, t);\n      },\n      acoth: function (r, i) {\n        var t = this.removeDen([r, i]);\n        t[1].negate();\n        return this.atanh.apply(this, t);\n      },\n      sqrt: function (symbol) {\n        var re, im, h, a, d;\n        re = symbol.realpart();\n        im = symbol.imagpart();\n        h = Symbol.hyp(re, im);\n        a = _.add(re.clone(), h);\n        d = sqrt(_.multiply(new Symbol(2), a.clone()));\n        return _.add(_.divide(a.clone(), d.clone()), _.multiply(_.divide(im, d), Symbol.imaginary()));\n      },\n      log: function (r, i) {\n        var re, im, phi;\n        re = log(Symbol.hyp(r, i));\n        phi = Settings.USE_BIG ? Symbol(bigDec.atan2(i.multiplier.toDecimal(), r.multiplier.toDecimal())) : Math.atan2(i, r);\n        im = _.parse(phi);\n        return _.add(re, _.multiply(Symbol.imaginary(), im));\n      },\n\n      erf(symbol, n) {\n        //Do nothing for now. Revisit this in the future.\n        return _.symfunction('erf', [symbol]);\n        n = n || 30;\n\n        var f = function (R, I) {\n          return block('PARSE2NUMBER', function () {\n            var retval = new Symbol(0);\n\n            for (var i = 0; i < n; i++) {\n              var a, b;\n              a = _.parse(bigDec.exp(bigDec(i).toPower(2).neg().dividedBy(bigDec(n).pow(2).plus(bigDec(R).toPower(2).times(4)))));\n              b = _.parse(format('2*({1})-e^(-(2*{0}*{1}*{2}))*(2*{1}*cosh({2}*{3})-{0}*{3}*sinh({3}*{2}))', Settings.IMAGINARY, R, I, i));\n              retval = _.add(retval, _.multiply(a, b));\n            }\n\n            return _.multiply(retval, new Symbol(2));\n          }, true);\n        };\n\n        var re, im, a, b, c, k;\n        re = symbol.realpart();\n        im = symbol.imagpart();\n        k = _.parse(format('(e^(-{0}^2))/pi', re));\n        a = _.parse(format('(1-e^(-(2*{0}*{1}*{2})))/(2*{1})', Settings.IMAGINARY, re, im));\n        b = f(re.toString(), im.toString());\n        return _.add(_.parse(Math2.erf(re.toString())), _.multiply(k, _.add(a, b)));\n      },\n\n      removeDen: function (symbol) {\n        var den, r, i, re, im;\n\n        if (isArray(symbol)) {\n          r = symbol[0];\n          i = symbol[1];\n        } else {\n          r = symbol.realpart();\n          i = symbol.imagpart();\n        }\n\n        den = Math.pow(r, 2) + Math.pow(i, 2);\n        re = _.parse(r / den);\n        im = _.parse(i / den);\n        return [re, im];\n      },\n      fromArray: function (arr) {\n        return _.add(arr[0], _.multiply(Symbol.imaginary(), arr[1]));\n      },\n      evaluate: function (symbol, f) {\n        var re, im, sign;\n        sign = symbol.power.sign(); //remove it from under the denominator\n\n        symbol.power = symbol.power.abs(); //expand\n\n        if (symbol.power.greaterThan(1)) symbol = _.expand(symbol); //remove the denominator\n\n        if (sign < 0) {\n          var d = this.removeDen(symbol);\n          re = d[0];\n          im = d[1];\n        } else {\n          re = symbol.realpart();\n          im = symbol.imagpart();\n        }\n\n        if (re.isConstant('all') && im.isConstant('all')) return this[f].call(this, re, im);\n        return _.symfunction(f, [symbol]);\n      }\n    }; //object for functions which handle trig\n\n    var trig = this.trig = {\n      //container for trigonometric function\n      cos: function (symbol) {\n        if (symbol.equals('pi') && symbol.multiplier.den.equals(2)) return new Symbol(0);\n\n        if (Settings.PARSE2NUMBER) {\n          if (symbol.equals(new Symbol(Settings.PI / 2))) return new Symbol(0);\n\n          if (symbol.isConstant()) {\n            if (Settings.USE_BIG) {\n              return new Symbol(bigDec.cos(symbol.multiplier.toDecimal()));\n            }\n\n            return new Symbol(Math.cos(symbol.valueOf()));\n          }\n\n          if (symbol.isImaginary()) {\n            return complex.evaluate(symbol, 'cos');\n          }\n        }\n\n        if (symbol.equals(0)) return new Symbol(1);\n        var retval,\n            c = false,\n            q = getQuadrant(symbol.multiplier.toDecimal()),\n            m = symbol.multiplier.abs();\n        symbol.multiplier = m;\n\n        if (symbol.isPi() && symbol.isLinear()) {\n          //return for 1 or -1 for multiples of pi\n          if (isInt(m)) {\n            retval = new Symbol(even(m) ? 1 : -1);\n          } else {\n            var n = Number(m.num),\n                d = Number(m.den);\n            if (d === 2) retval = new Symbol(0);else if (d === 3) {\n              retval = _.parse('1/2');\n              c = true;\n            } else if (d === 4) {\n              retval = _.parse('1/sqrt(2)');\n              c = true;\n            } else if (d === 6) {\n              retval = _.parse('sqrt(3)/2');\n              c = true;\n            } else retval = _.symfunction('cos', [symbol]);\n          }\n        }\n\n        if (c && (q === 2 || q === 3)) retval.negate();\n        if (!retval) retval = _.symfunction('cos', [symbol]);\n        return retval;\n      },\n      sin: function (symbol) {\n        if (Settings.PARSE2NUMBER) {\n          if (symbol.isConstant()) {\n            if (symbol % Math.PI === 0) {\n              return new Symbol(0);\n            }\n\n            if (Settings.USE_BIG) {\n              return new Symbol(bigDec.sin(symbol.multiplier.toDecimal()));\n            }\n\n            return new Symbol(Math.sin(symbol.valueOf()));\n          }\n\n          if (symbol.isImaginary()) return complex.evaluate(symbol, 'sin');\n        }\n\n        if (symbol.equals(0)) return new Symbol(0);\n        var retval,\n            c = false,\n            q = getQuadrant(symbol.multiplier.toDecimal()),\n            sign = symbol.multiplier.sign(),\n            m = symbol.multiplier.abs();\n        symbol.multiplier = m;\n        if (symbol.equals('pi')) retval = new Symbol(0);else if (symbol.isPi() && symbol.isLinear()) {\n          //return for 0 for multiples of pi\n          if (isInt(m)) {\n            retval = new Symbol(0);\n          } else {\n            var n = m.num,\n                d = m.den;\n\n            if (d == 2) {\n              retval = new Symbol(1);\n              c = true;\n            } else if (d == 3) {\n              retval = _.parse('sqrt(3)/2');\n              c = true;\n            } else if (d == 4) {\n              retval = _.parse('1/sqrt(2)');\n              c = true;\n            } else if (d == 6) {\n              retval = _.parse('1/2');\n              c = true;\n            } else retval = _.multiply(new Symbol(sign), _.symfunction('sin', [symbol]));\n          }\n        }\n        if (!retval) retval = _.multiply(new Symbol(sign), _.symfunction('sin', [symbol]));\n        if (c && (q === 3 || q === 4)) retval.negate();\n        return retval;\n      },\n      tan: function (symbol) {\n        if (Settings.PARSE2NUMBER) {\n          if (symbol % Math.PI === 0 && symbol.isLinear()) {\n            return new Symbol(0);\n          }\n\n          if (symbol.isConstant()) {\n            if (Settings.USE_BIG) {\n              return new Symbol(bigDec.tan(symbol.multiplier.toDecimal()));\n            }\n\n            return new Symbol(Math.tan(symbol.valueOf()));\n          }\n\n          if (symbol.isImaginary()) return complex.evaluate(symbol, 'tan');\n        }\n\n        var retval,\n            c = false,\n            q = getQuadrant(symbol.multiplier.toDecimal()),\n            m = symbol.multiplier;\n        symbol.multiplier = m;\n\n        if (symbol.isPi() && symbol.isLinear()) {\n          //return 0 for all multiples of pi\n          if (isInt(m)) {\n            retval = new Symbol(0);\n          } else {\n            var n = m.num,\n                d = m.den;\n            if (d == 2) throw new UndefinedError('tan is undefined for ' + symbol.toString());else if (d == 3) {\n              retval = _.parse('sqrt(3)');\n              c = true;\n            } else if (d == 4) {\n              retval = new Symbol(1);\n              c = true;\n            } else if (d == 6) {\n              retval = _.parse('1/sqrt(3)');\n              c = true;\n            } else retval = _.symfunction('tan', [symbol]);\n          }\n        }\n\n        if (!retval) retval = _.symfunction('tan', [symbol]);\n        if (c && (q === 2 || q === 4)) retval.negate();\n        return retval;\n      },\n      sec: function (symbol) {\n        if (Settings.PARSE2NUMBER) {\n          if (symbol.isConstant()) {\n            if (Settings.USE_BIG) {\n              return new Symbol(new bigDec(1).dividedBy(bigDec.cos(symbol.multiplier.toDecimal())));\n            }\n\n            return new Symbol(Math2.sec(symbol.valueOf()));\n          }\n\n          if (symbol.isImaginary()) return complex.evaluate(symbol, 'sec');\n          return _.parse(format('1/cos({0})', symbol));\n        }\n\n        var retval,\n            c = false,\n            q = getQuadrant(symbol.multiplier.toDecimal()),\n            m = symbol.multiplier.abs();\n        symbol.multiplier = m;\n\n        if (symbol.isPi() && symbol.isLinear()) {\n          //return for 1 or -1 for multiples of pi\n          if (isInt(m)) {\n            retval = new Symbol(even(m) ? 1 : -1);\n          } else {\n            var n = m.num,\n                d = m.den;\n            if (d == 2) throw new UndefinedError('sec is undefined for ' + symbol.toString());else if (d == 3) {\n              retval = new Symbol(2);\n              c = true;\n            } else if (d == 4) {\n              retval = _.parse('sqrt(2)');\n              c = true;\n            } else if (d == 6) {\n              retval = _.parse('2/sqrt(3)');\n              c = true;\n            } else retval = _.symfunction('sec', [symbol]);\n          }\n        }\n\n        if (c && (q === 2 || q === 3)) retval.negate();\n        if (!retval) retval = _.symfunction('sec', [symbol]);\n        return retval;\n      },\n      csc: function (symbol) {\n        if (Settings.PARSE2NUMBER) {\n          if (symbol.isConstant()) {\n            if (Settings.USE_BIG) {\n              return new Symbol(new bigDec(1).dividedBy(bigDec.sin(symbol.multiplier.toDecimal())));\n            }\n\n            return new Symbol(Math2.csc(symbol.valueOf()));\n          }\n\n          if (symbol.isImaginary()) return complex.evaluate(symbol, 'csc');\n          return _.parse(format('1/sin({0})', symbol));\n        }\n\n        var retval,\n            c = false,\n            q = getQuadrant(symbol.multiplier.toDecimal()),\n            sign = symbol.multiplier.sign(),\n            m = symbol.multiplier.abs();\n        symbol.multiplier = m;\n\n        if (symbol.isPi() && symbol.isLinear()) {\n          //return for 0 for multiples of pi\n          if (isInt(m)) {\n            throw new UndefinedError('csc is undefined for ' + symbol.toString());\n          } else {\n            var n = m.num,\n                d = m.den;\n\n            if (d == 2) {\n              retval = new Symbol(1);\n              c = true;\n            } else if (d == 3) {\n              retval = _.parse('2/sqrt(3)');\n              c = true;\n            } else if (d == 4) {\n              retval = _.parse('sqrt(2)');\n              c = true;\n            } else if (d == 6) {\n              retval = new Symbol(2);\n              c = true;\n            } else retval = _.multiply(new Symbol(sign), _.symfunction('csc', [symbol]));\n          }\n        }\n\n        if (!retval) retval = _.multiply(new Symbol(sign), _.symfunction('csc', [symbol]));\n        if (c && (q === 3 || q === 4)) retval.negate();\n        return retval;\n      },\n      cot: function (symbol) {\n        if (Settings.PARSE2NUMBER) {\n          if (symbol % (Math.PI / 2) === 0) {\n            return new Symbol(0);\n          }\n\n          if (symbol.isConstant()) {\n            if (Settings.USE_BIG) {\n              return new Symbol(new bigDec(1).dividedBy(bigDec.tan(symbol.multiplier.toDecimal())));\n            }\n\n            return new Symbol(Math2.cot(symbol.valueOf()));\n          }\n\n          if (symbol.isImaginary()) return complex.evaluate(symbol, 'cot');\n          return _.parse(format('1/tan({0})', symbol));\n        }\n\n        var retval,\n            c = false,\n            q = getQuadrant(symbol.multiplier.toDecimal()),\n            m = symbol.multiplier;\n        symbol.multiplier = m;\n\n        if (symbol.isPi() && symbol.isLinear()) {\n          //return 0 for all multiples of pi\n          if (isInt(m)) {\n            throw new UndefinedError('cot is undefined for ' + symbol.toString());\n          } else {\n            var n = m.num,\n                d = m.den;\n            if (d == 2) retval = new Symbol(0);else if (d == 3) {\n              retval = _.parse('1/sqrt(3)');\n              c = true;\n            } else if (d == 4) {\n              retval = new Symbol(1);\n              c = true;\n            } else if (d == 6) {\n              retval = _.parse('sqrt(3)');\n              c = true;\n            } else retval = _.symfunction('cot', [symbol]);\n          }\n        }\n\n        if (!retval) retval = _.symfunction('cot', [symbol]);\n        if (c && (q === 2 || q === 4)) retval.negate();\n        return retval;\n      },\n      acos: function (symbol) {\n        if (Settings.PARSE2NUMBER) {\n          if (symbol.isConstant()) {\n            // Handle values in the complex domain\n            if (symbol.gt(1) || symbol.lt(-1)) {\n              var x = symbol.toString();\n              return expand(evaluate(`pi/2-asin(${x})`));\n            } // Handle big numbers\n\n\n            if (Settings.USE_BIG) {\n              return new Symbol(bigDec.acos(symbol.multiplier.toDecimal()));\n            }\n\n            return new Symbol(Math.acos(symbol.valueOf()));\n          }\n\n          if (symbol.isImaginary()) return complex.evaluate(symbol, 'acos');\n        }\n\n        return _.symfunction('acos', arguments);\n      },\n      asin: function (symbol) {\n        if (Settings.PARSE2NUMBER) {\n          if (symbol.isConstant()) {\n            // Handle values in the complex domain\n            if (symbol.gt(1) || symbol.lt(-1)) {\n              var i = Settings.IMAGINARY;\n              var x = symbol.multiplier.toDecimal();\n              return expand(evaluate(`${i}*log(sqrt(1-${x}^2)-${i}*${x})`));\n            } // Handle big numbers\n\n\n            if (Settings.USE_BIG) {\n              return new Symbol(bigDec.asin(symbol.multiplier.toDecimal()));\n            }\n\n            return new Symbol(Math.asin(symbol.valueOf()));\n          }\n\n          if (symbol.isImaginary()) return complex.evaluate(symbol, 'asin');\n        }\n\n        return _.symfunction('asin', arguments);\n      },\n      atan: function (symbol) {\n        var retval;\n        if (symbol.equals(0)) retval = new Symbol(0);else if (Settings.PARSE2NUMBER) {\n          if (symbol.isConstant()) {\n            // Handle big numbers\n            if (Settings.USE_BIG) {\n              return new Symbol(bigDec.atan(symbol.multiplier.toDecimal()));\n            }\n\n            return new Symbol(Math.atan(symbol.valueOf()));\n          }\n\n          if (symbol.isImaginary()) return complex.evaluate(symbol, 'atan');\n          return _.symfunction('atan', arguments);\n        } else if (symbol.equals(-1)) retval = _.parse('-pi/4');else retval = _.symfunction('atan', arguments);\n        return retval;\n      },\n      asec: function (symbol) {\n        if (Settings.PARSE2NUMBER) {\n          if (symbol.equals(0)) {\n            throw new OutOfFunctionDomainError('Input is out of the domain of sec!');\n          }\n\n          if (symbol.isConstant()) {\n            return trig.acos(symbol.invert());\n          }\n\n          if (symbol.isImaginary()) {\n            return complex.evaluate(symbol, 'asec');\n          }\n        }\n\n        return _.symfunction('asec', arguments);\n      },\n      acsc: function (symbol) {\n        if (Settings.PARSE2NUMBER) {\n          if (symbol.isConstant()) {\n            return trig.asin(symbol.invert());\n          }\n\n          if (symbol.isImaginary()) return complex.evaluate(symbol, 'acsc');\n        }\n\n        return _.symfunction('acsc', arguments);\n      },\n      acot: function (symbol) {\n        if (Settings.PARSE2NUMBER) {\n          if (symbol.isConstant()) {\n            return new _.add(_.parse('pi/2'), trig.atan(symbol).negate());\n          }\n\n          if (symbol.isImaginary()) return complex.evaluate(symbol, 'acot');\n        }\n\n        return _.symfunction('acot', arguments);\n      },\n      atan2: function (a, b) {\n        if (a.equals(0) && b.equals(0)) throw new UndefinedError('atan2 is undefined for 0, 0');\n\n        if (Settings.PARSE2NUMBER && a.isConstant() && b.isConstant()) {\n          return new Symbol(Math.atan2(a, b));\n        }\n\n        return _.symfunction('atan2', arguments);\n      }\n    }; //object for functions which handle hyperbolic trig\n\n    var trigh = this.trigh = {\n      //container for hyperbolic trig function\n      cosh: function (symbol) {\n        var retval;\n\n        if (Settings.PARSE2NUMBER) {\n          if (symbol.isConstant()) return new Symbol(Math.cosh(symbol.valueOf()));\n\n          if (symbol.isImaginary()) {\n            return complex.evaluate(symbol, 'cosh');\n          }\n        }\n\n        return retval = _.symfunction('cosh', arguments);\n      },\n      sinh: function (symbol) {\n        var retval;\n\n        if (Settings.PARSE2NUMBER) {\n          if (symbol.isConstant()) return new Symbol(Math.sinh(symbol.valueOf()));\n\n          if (symbol.isImaginary()) {\n            return complex.evaluate(symbol, 'sinh');\n          }\n        }\n\n        return retval = _.symfunction('sinh', arguments);\n      },\n      tanh: function (symbol) {\n        var retval;\n\n        if (Settings.PARSE2NUMBER) {\n          if (symbol.isConstant()) return new Symbol(Math.tanh(symbol.valueOf()));\n\n          if (symbol.isImaginary()) {\n            return complex.evaluate(symbol, 'tanh');\n          }\n        }\n\n        return retval = _.symfunction('tanh', arguments);\n      },\n      sech: function (symbol) {\n        var retval;\n\n        if (Settings.PARSE2NUMBER) {\n          if (symbol.isConstant()) {\n            return new Symbol(Math.sech(symbol.valueOf()));\n          }\n\n          if (symbol.isImaginary()) {\n            return complex.evaluate(symbol, 'sech');\n          }\n\n          return _.parse(format('1/cosh({0})', symbol));\n        }\n\n        return retval = _.symfunction('sech', arguments);\n      },\n      csch: function (symbol) {\n        var retval;\n\n        if (Settings.PARSE2NUMBER) {\n          if (symbol.isConstant()) return new Symbol(Math.csch(symbol.valueOf()));\n\n          if (symbol.isImaginary()) {\n            return complex.evaluate(symbol, 'csch');\n          }\n\n          return _.parse(format('1/sinh({0})', symbol));\n        }\n\n        return retval = _.symfunction('csch', arguments);\n      },\n      coth: function (symbol) {\n        var retval;\n\n        if (Settings.PARSE2NUMBER) {\n          if (symbol.isConstant()) return new Symbol(Math.coth(symbol.valueOf()));\n\n          if (symbol.isImaginary()) {\n            return complex.evaluate(symbol, 'coth');\n          }\n\n          return _.parse(format('1/tanh({0})', symbol));\n        }\n\n        return retval = _.symfunction('coth', arguments);\n      },\n      acosh: function (symbol) {\n        var retval;\n        if (Settings.PARSE2NUMBER && symbol.isImaginary()) retval = complex.evaluate(symbol, 'acosh');else if (Settings.PARSE2NUMBER) retval = evaluate(_.parse(format(Settings.LOG + '(({0})+sqrt(({0})^2-1))', symbol.toString())));else retval = _.symfunction('acosh', arguments);\n        return retval;\n      },\n      asinh: function (symbol) {\n        var retval;\n        if (Settings.PARSE2NUMBER && symbol.isImaginary()) retval = complex.evaluate(symbol, 'asinh');else if (Settings.PARSE2NUMBER) retval = evaluate(_.parse(format(Settings.LOG + '(({0})+sqrt(({0})^2+1))', symbol.toString())));else retval = _.symfunction('asinh', arguments);\n        return retval;\n      },\n      atanh: function (symbol) {\n        var retval;\n        if (Settings.PARSE2NUMBER && symbol.isImaginary()) retval = complex.evaluate(symbol, 'atanh');else if (Settings.PARSE2NUMBER) {\n          retval = evaluate(_.parse(format('(1/2)*' + Settings.LOG + '((1+({0}))/(1-({0})))', symbol.toString())));\n        } else retval = _.symfunction('atanh', arguments);\n        return retval;\n      },\n      asech: function (symbol) {\n        var retval;\n        if (Settings.PARSE2NUMBER && symbol.isImaginary()) retval = complex.evaluate(symbol, 'asech');else if (Settings.PARSE2NUMBER) retval = evaluate(log(_.add(symbol.clone().invert(), sqrt(_.subtract(_.pow(symbol, new Symbol(-2)), new Symbol(1))))));else retval = _.symfunction('asech', arguments);\n        return retval;\n      },\n      acsch: function (symbol) {\n        var retval;\n        if (Settings.PARSE2NUMBER && symbol.isImaginary()) retval = complex.evaluate(symbol, 'acsch');else if (Settings.PARSE2NUMBER) retval = evaluate(_.parse(format(Settings.LOG + '((1+sqrt(1+({0})^2))/({0}))', symbol.toString())));else retval = _.symfunction('acsch', arguments);\n        return retval;\n      },\n      acoth: function (symbol) {\n        var retval;\n        if (Settings.PARSE2NUMBER && symbol.isImaginary()) retval = complex.evaluate(symbol, 'acoth');else if (Settings.PARSE2NUMBER) {\n          if (symbol.equals(1)) retval = Symbol.infinity();else retval = evaluate(_.divide(log(_.divide(_.add(symbol.clone(), new Symbol(1)), _.subtract(symbol.clone(), new Symbol(1)))), new Symbol(2)));\n        } else retval = _.symfunction('acoth', arguments);\n        return retval;\n      }\n    }; //list of supported units\n\n    this.units = {}; //list all the supported operators\n\n    var operators = {\n      '\\\\': {\n        precedence: 8,\n        operator: '\\\\',\n        action: 'slash',\n        prefix: true,\n        postfix: false,\n        leftAssoc: true,\n        operation: function (e) {\n          return e; //bypass the slash\n        }\n      },\n      '!!': {\n        precedence: 7,\n        operator: '!!',\n        action: 'dfactorial',\n        prefix: false,\n        postfix: true,\n        leftAssoc: true,\n        operation: function (e) {\n          return _.symfunction(Settings.DOUBLEFACTORIAL, [e]); //wrap it in a factorial function\n        }\n      },\n      '!': {\n        precedence: 7,\n        operator: '!',\n        action: 'factorial',\n        prefix: false,\n        postfix: true,\n        leftAssoc: true,\n        operation: function (e) {\n          return factorial(e); //wrap it in a factorial function\n        }\n      },\n      '^': {\n        precedence: 6,\n        operator: '^',\n        action: 'pow',\n        prefix: false,\n        postfix: false,\n        leftAssoc: true\n      },\n      '**': {\n        precedence: 6,\n        operator: '**',\n        action: 'pow',\n        prefix: false,\n        postfix: false,\n        leftAssoc: true\n      },\n      '%': {\n        precedence: 4,\n        operator: '%',\n        action: 'percent',\n        prefix: false,\n        postfix: true,\n        leftAssoc: true,\n        overloaded: true,\n        overloadAction: 'mod',\n        overloadLeftAssoc: false,\n        operation: function (x) {\n          return _.divide(x, new Symbol(100));\n        }\n      },\n      '*': {\n        precedence: 4,\n        operator: '*',\n        action: 'multiply',\n        prefix: false,\n        postfix: false,\n        leftAssoc: false\n      },\n      '/': {\n        precedence: 4,\n        operator: '/',\n        action: 'divide',\n        prefix: false,\n        postfix: false,\n        leftAssoc: false\n      },\n      '+': {\n        precedence: 3,\n        operator: '+',\n        action: 'add',\n        prefix: true,\n        postfix: false,\n        leftAssoc: false,\n        operation: function (x) {\n          return x;\n        }\n      },\n      'plus': {\n        precedence: 3,\n        operator: 'plus',\n        action: 'add',\n        prefix: true,\n        postfix: false,\n        leftAssoc: false,\n        operation: function (x) {\n          return x;\n        }\n      },\n      '-': {\n        precedence: 3,\n        operator: '-',\n        action: 'subtract',\n        prefix: true,\n        postfix: false,\n        leftAssoc: false,\n        operation: function (x) {\n          return x.negate();\n        }\n      },\n      '=': {\n        precedence: 2,\n        operator: '=',\n        action: 'equals',\n        prefix: false,\n        postfix: false,\n        leftAssoc: false\n      },\n      '==': {\n        precedence: 1,\n        operator: '==',\n        action: 'eq',\n        prefix: false,\n        postfix: false,\n        leftAssoc: false\n      },\n      '<': {\n        precedence: 1,\n        operator: '<',\n        action: 'lt',\n        prefix: false,\n        postfix: false,\n        leftAssoc: false\n      },\n      '<=': {\n        precedence: 1,\n        operator: '<=',\n        action: 'lte',\n        prefix: false,\n        postfix: false,\n        leftAssoc: false\n      },\n      '>': {\n        precedence: 1,\n        operator: '>',\n        action: 'gt',\n        prefix: false,\n        postfix: false,\n        leftAssoc: false\n      },\n      '=>': {\n        precedence: 1,\n        operator: '=>',\n        action: 'gte',\n        prefix: false,\n        postfix: false,\n        leftAssoc: false\n      },\n      ',': {\n        precedence: 0,\n        operator: ',',\n        action: 'comma',\n        prefix: false,\n        postfix: false,\n        leftAssoc: false\n      },\n      ':': {\n        precedence: 0,\n        operator: ',',\n        action: 'assign',\n        prefix: false,\n        postfix: false,\n        leftAssoc: false,\n        vectorFn: 'slice'\n      },\n      ':=': {\n        precedence: 0,\n        operator: ',',\n        action: 'function_assign',\n        prefix: false,\n        postfix: false,\n        leftAssoc: true\n      }\n    }; //brackets\n\n    var brackets = {\n      '(': {\n        type: 'round',\n        id: 1,\n        is_open: true,\n        is_close: false\n      },\n      ')': {\n        type: 'round',\n        id: 2,\n        is_open: false,\n        is_close: true\n      },\n      '[': {\n        type: 'square',\n        id: 3,\n        is_open: true,\n        is_close: false,\n        maps_to: 'vector'\n      },\n      ']': {\n        type: 'square',\n        id: 4,\n        is_open: false,\n        is_close: true\n      },\n      '{': {\n        type: 'curly',\n        id: 5,\n        is_open: true,\n        is_close: false,\n        maps_to: 'Set'\n      },\n      '}': {\n        type: 'curly',\n        id: 6,\n        is_open: false,\n        is_close: true\n      }\n    }; // Supported functions.\n    // Format: function_name: [mapped_function, number_of_parameters]\n\n    var functions = this.functions = {\n      'cos': [trig.cos, 1],\n      'sin': [trig.sin, 1],\n      'tan': [trig.tan, 1],\n      'sec': [trig.sec, 1],\n      'csc': [trig.csc, 1],\n      'cot': [trig.cot, 1],\n      'acos': [trig.acos, 1],\n      'asin': [trig.asin, 1],\n      'atan': [trig.atan, 1],\n      'arccos': [trig.acos, 1],\n      'arcsin': [trig.asin, 1],\n      'arctan': [trig.atan, 1],\n      'asec': [trig.asec, 1],\n      'acsc': [trig.acsc, 1],\n      'acot': [trig.acot, 1],\n      'atan2': [trig.atan2, 2],\n      'acoth': [trigh.acoth, 1],\n      'asech': [trigh.asech, 1],\n      'acsch': [trigh.acsch, 1],\n      'sinh': [trigh.sinh, 1],\n      'cosh': [trigh.cosh, 1],\n      'tanh': [trigh.tanh, 1],\n      'asinh': [trigh.asinh, 1],\n      'sech': [trigh.sech, 1],\n      'csch': [trigh.csch, 1],\n      'coth': [trigh.coth, 1],\n      'acosh': [trigh.acosh, 1],\n      'atanh': [trigh.atanh, 1],\n      'log10': [, 1],\n      'exp': [exp, 1],\n      'radians': [radians, 1],\n      'degrees': [degrees, 1],\n      'min': [min, -1],\n      'max': [max, -1],\n      'erf': [, 1],\n      'floor': [, 1],\n      'ceil': [, 1],\n      'trunc': [, 1],\n      'Si': [, 1],\n      'step': [, 1],\n      'rect': [, 1],\n      'sinc': [sinc, 1],\n      'tri': [, 1],\n      'sign': [sign, 1],\n      'Ci': [, 1],\n      'Ei': [, 1],\n      'Shi': [, 1],\n      'Chi': [, 1],\n      'Li': [, 1],\n      'fib': [, 1],\n      'fact': [factorial, 1],\n      'factorial': [factorial, 1],\n      'continued_fraction': [continued_fraction, [1, 2]],\n      'dfactorial': [, 1],\n      'gamma_incomplete': [, [1, 2]],\n      'round': [round, [1, 2]],\n      'scientific': [scientific, [1, 2]],\n      'mod': [mod, 2],\n      'pfactor': [pfactor, 1],\n      'vector': [vector, -1],\n      'matrix': [matrix, -1],\n      'Set': [set, -1],\n      'imatrix': [imatrix, -1],\n      'parens': [parens, -1],\n      'sqrt': [sqrt, 1],\n      'cbrt': [cbrt, 1],\n      'nthroot': [nthroot, 2],\n      'log': [log, [1, 2]],\n      'expand': [expandall, 1],\n      'abs': [abs, 1],\n      'invert': [invert, 1],\n      'determinant': [determinant, 1],\n      'size': [size, 1],\n      'transpose': [transpose, 1],\n      'dot': [dot, 2],\n      'cross': [cross, 2],\n      'vecget': [vecget, 2],\n      'vecset': [vecset, 3],\n      'vectrim': [vectrim, [1, 2]],\n      'matget': [matget, 3],\n      'matset': [matset, 4],\n      'matgetrow': [matgetrow, 2],\n      'matsetrow': [matsetrow, 3],\n      'matgetcol': [matgetcol, 2],\n      'matsetcol': [matsetcol, 3],\n      'rationalize': [rationalize, 1],\n      'IF': [IF, 3],\n      'is_in': [is_in, 2],\n      //imaginary support\n      'realpart': [realpart, 1],\n      'imagpart': [imagpart, 1],\n      'conjugate': [conjugate, 1],\n      'arg': [arg, 1],\n      'polarform': [polarform, 1],\n      'rectform': [rectform, 1],\n      'sort': [sort, [1, 2]],\n      'integer_part': [, 1],\n      'union': [union, 2],\n      'contains': [contains, 2],\n      'intersection': [intersection, 2],\n      'difference': [difference, 2],\n      'intersects': [intersects, 2],\n      'is_subset': [is_subset, 2],\n      //system support\n      'print': [print, -1]\n    }; //error handler\n\n    this.error = err; //this function is used to comb through the function modules and find a function given its name\n\n    var findFunction = function (fname) {\n      var fmodules = Settings.FUNCTION_MODULES,\n          l = fmodules.length;\n\n      for (var i = 0; i < l; i++) {\n        var fmodule = fmodules[i];\n        if (fname in fmodule) return fmodule[fname];\n      }\n\n      err('The function ' + fname + ' is undefined!');\n    };\n    /**\r\n     * This method gives the ability to override operators with new methods.\r\n     * @param {String} which\r\n     * @param {Function} with_what\r\n     */\n\n\n    this.override = function (which, with_what) {\n      if (!bin[which]) bin[which] = [];\n      bin[which].push(this[which]);\n      this[which] = with_what;\n    };\n    /**\r\n     * Restores a previously overridden operator\r\n     * @param {String} what\r\n     */\n\n\n    this.restore = function (what) {\n      if (this[what]) this[what] = bin[what].pop();\n    };\n    /**\r\n     * This method is supposed to behave similarly to the override method but it does not override\r\n     * the existing function rather it only extends it\r\n     * @param {String} what\r\n     * @param {Function} with_what\r\n     * @param {boolean} force_call\r\n     */\n\n\n    this.extend = function (what, with_what, force_call) {\n      var _ = this,\n          extended = this[what];\n\n      if (typeof extended === 'function' && typeof with_what === 'function') {\n        var f = this[what];\n\n        this[what] = function (a, b) {\n          if (isSymbol(a) && isSymbol(b) && !force_call) return f.call(_, a, b);else return with_what.call(_, a, b, f);\n        };\n      }\n    };\n    /**\r\n     * Generates library's representation of a function. It's a fancy way of saying a symbol with\r\n     * a few extras. The most important thing is that that it gives a fname and\r\n     * an args property to the symbols in addition to changing its group to FN\r\n     * @param {String} fn_name\r\n     * @param {Array} params\r\n     * @returns {Symbol}\r\n     */\n\n\n    this.symfunction = function (fn_name, params) {\n      //call the proper function and return the result;\n      var f = new Symbol(fn_name);\n      f.group = FN;\n      if (typeof params === 'object') params = [].slice.call(params); //ensure an array\n\n      f.args = params;\n      f.fname = fn_name === PARENTHESIS ? '' : fn_name;\n      f.updateHash();\n      return f;\n    };\n    /**\r\n     * An internal function call for the Parser. This will either trigger a real\r\n     * function call if it can do so or just return a symbolic representation of the\r\n     * function using symfunction.\r\n     * @param {String} fn_name\r\n     * @param {Array} args\r\n     * @param {int} allowed_args\r\n     * @returns {Symbol}\r\n     */\n\n\n    this.callfunction = function (fn_name, args, allowed_args) {\n      var fn_settings = functions[fn_name];\n      if (!fn_settings) err('Nerdamer currently does not support the function ' + fn_name);\n      var num_allowed_args = fn_settings[1] || allowed_args,\n          //get the number of allowed arguments\n      fn = fn_settings[0],\n          //get the mapped function\n      retval; //We want to be able to call apply on the arguments or create a symfunction. Both require\n      //an array so make sure to wrap the argument in an array.\n\n      if (!(args instanceof Array)) args = args !== undefined ? [args] : [];\n\n      if (num_allowed_args !== -1) {\n        var is_array = isArray(num_allowed_args),\n            min_args = is_array ? num_allowed_args[0] : num_allowed_args,\n            max_args = is_array ? num_allowed_args[1] : num_allowed_args,\n            num_args = args.length;\n        var error_msg = fn_name + ' requires a {0} of {1} arguments. {2} provided!';\n        if (num_args < min_args) err(format(error_msg, 'minimum', min_args, num_args));\n        if (num_args > max_args) err(format(error_msg, 'maximum', max_args, num_args));\n      }\n      /*\r\n       * The following are very important to the how nerdamer constructs functions!\r\n       * Assumption 1 - if fn is undefined then handling of the function is purely numeric. This\r\n       *     enables us to reuse Math, Math2, ..., any function from Settings.FUNCTIONS_MODULES entry\r\n       * Assumption 2 - if fn is defined then that function takes care of EVERYTHING including symbolics\r\n       * Assumption 3 - if the user calls symbolics on a function that returns a numeric value then\r\n       *     they are expecting a symbolic output.\r\n       */\n      //check if arguments are all numers\n\n\n      var numericArgs = allNumbers(args); //Big number support. Check if Big number is requested and the arguments are all numeric and, not imaginary\n      //            if (Settings.USE_BIG && numericArgs) {\n      //                retval = Big[fn_name].apply(undefined, args);\n      //            }\n      //            else {\n\n      if (!fn) {\n        //Remember assumption 1. No function defined so it MUST be numeric in nature\n        fn = findFunction(fn_name);\n        if (Settings.PARSE2NUMBER && numericArgs) retval = bigConvert(fn.apply(fn, args));else retval = _.symfunction(fn_name, args);\n      } else {\n        //Remember assumption 2. The function is defined so it MUST handle all aspects including numeric values\n        retval = fn.apply(fn_settings[2], args);\n      } //            }\n\n\n      return retval;\n    };\n    /**\r\n     * Build a regex based on the operators currently loaded. These operators are to be ignored when\r\n     * substituting spaces for multiplication\r\n     */\n\n\n    this.operator_filter_regex = function () {\n      //we only want the operators which are singular since those are the ones\n      //that nerdamer uses anyway\n      var ostr = '^\\\\' + Object.keys(operators).filter(function (x) {\n        if (x.length === 1) return x;\n      }).join('\\\\'); //create a regex which captures all spaces between characters except those\n      //have an operator on one end\n\n      return new RegExp('([' + ostr + '])\\\\s+([' + ostr + '])');\n    }();\n    /**\r\n     * Replaces nerdamer.setOperator\r\n     * @param {object} operator\r\n     * @param {boolean} shift\r\n     */\n\n\n    this.setOperator = function (operator, action, shift) {\n      var name = operator.operator; //take the name to be the symbol\n\n      operators[name] = operator;\n      if (action) this[operator.action] = action; //make the parser aware of the operator\n\n      _[name] = operator.operation; //make the action available to the parser if infix\n\n      if (!operator.action && !(operator.prefix || operator.postif)) {\n        operator.action = name;\n      } //if this operator is exclusive then all successive operators should be shifted\n\n\n      if (shift === 'over' || shift === 'under') {\n        var precedence = operator.precedence;\n\n        for (var x in operators) {\n          var o = operators[x];\n          var condition = shift === 'over' ? o.precedence >= precedence : o.precedence > precedence;\n          if (condition) o.precedence++;\n        }\n\n        ;\n      }\n    };\n    /**\r\n     * Gets an opererator by its symbol\r\n     * @param {String} operator\r\n     * @returns {Object}\r\n     */\n\n\n    this.getOperator = function (operator) {\n      return operators[operator];\n    };\n\n    this.aliasOperator = function (o, n) {\n      var t = {};\n      var operator = operators[o]; //copy everything over to the new operator\n\n      for (var x in operator) {\n        t[x] = operator[x];\n      } //update the symbol\n\n\n      t.operator = n;\n      this.setOperator(t);\n    };\n    /**\r\n     * Returns the list of operators. Caution! Can break parser!\r\n     * @returns {object}\r\n     */\n\n\n    this.getOperators = function () {\n      //will replace this with some cloning action in the future\n      return operators;\n    };\n\n    this.getBrackets = function () {\n      return brackets;\n    };\n    /*\r\n     * Preforms preprocessing on the string. Useful for making early modification before\r\n     * sending to the parser\r\n     * @param {String} e\r\n     */\n\n\n    var prepare_expression = function (e) {\n      /*\r\n       * Since variables cannot start with a number, the assumption is made that when this occurs the\r\n       * user intents for this to be a coefficient. The multiplication symbol in then added. The same goes for\r\n       * a side-by-side close and open parenthesis\r\n       */\n      e = String(e); //apply preprocessors\n\n      for (var i = 0; i < preprocessors.actions.length; i++) e = preprocessors.actions[i].call(this, e); //e = e.split(' ').join('');//strip empty spaces\n      //replace multiple spaces with one space\n\n\n      e = e.replace(/\\s+/g, ' '); //only even bother to check if the string contains e. This regex is painfully slow and might need a better solution. e.g. hangs on (0.06/3650))^(365)\n\n      if (/e/gi.test(e)) {\n        e = e.replace(/\\-*\\d+\\.*\\d*e\\+?\\-?\\d+/gi, function (x) {\n          return scientificToDecimal(x);\n        });\n      } //replace scientific numbers\n      //allow omission of multiplication after coefficients\n\n\n      e = e.replace(Settings.IMPLIED_MULTIPLICATION_REGEX, function () {\n        var str = arguments[4],\n            group1 = arguments[1],\n            group2 = arguments[2],\n            start = arguments[3],\n            first = str.charAt(start),\n            before = '',\n            d = '*';\n        if (!first.match(/[\\+\\-\\/\\*]/)) before = str.charAt(start - 1);\n        if (before.match(/[a-z]/i)) d = '';\n        return group1 + d + group2;\n      }).replace(/([a-z0-9_]+)/gi, function (match, a) {\n        if (Settings.USE_MULTICHARACTER_VARS === false && !(a in functions)) {\n          if (!isNaN(a)) return a;\n          return a.split('').join('*');\n        }\n\n        return a;\n      }) //allow omission of multiplication sign between brackets\n      .replace(/\\)\\(/g, ')*(') || '0'; //replace x(x+a) with x*(x+a)\n\n      while (true) {\n        var e_org = e; //store the original\n\n        e = e.replace(/([a-z0-9_]+)(\\()|(\\))([a-z0-9]+)/gi, function (match, a, b, c, d) {\n          var g1 = a || c,\n              g2 = b || d;\n          if (g1 in functions) //create a passthrough for functions\n            return g1 + g2;\n          return g1 + '*' + g2;\n        }); //if the original equals the replace we're done\n\n        if (e_org === e) break;\n      }\n\n      return e;\n    }; //delay setting of constants until Settings is ready\n\n\n    this.initConstants = function () {\n      this.CONSTANTS = {\n        E: new Symbol(Settings.E),\n        PI: new Symbol(Settings.PI)\n      };\n    };\n    /*\r\n     * Debugging method used to better visualize vector and arrays\r\n     * @param {object} o\r\n     * @returns {String}\r\n     */\n\n\n    this.pretty_print = function (o) {\n      if (Array.isArray(o)) {\n        var s = o.map(x => _.pretty_print(x)).join(', ');\n        if (o.type === 'vector') return 'vector<' + s + '>';\n        return '(' + s + ')';\n      }\n\n      return o.toString();\n    };\n\n    this.peekers = {\n      pre_operator: [],\n      post_operator: [],\n      pre_function: [],\n      post_function: []\n    };\n\n    this.callPeekers = function (name) {\n      if (Settings.callPeekers) {\n        var peekers = this.peekers[name]; //remove the first items and stringify\n\n        var args = arguments2Array(arguments).slice(1).map(stringify); //call each one of the peekers\n\n        for (var i = 0; i < peekers.length; i++) {\n          peekers[i].apply(null, args);\n        }\n      }\n    };\n    /*\r\n     * Tokenizes the string\r\n     * @param {String} e\r\n     * @returns {Token[]}\r\n     */\n\n\n    this.tokenize = function (e) {\n      //cast to String\n      e = String(e); //remove multiple white spaces and spaces at beginning and end of string\n\n      e = e.trim().replace(/\\s+/g, ' '); //remove spaces before and after brackets\n\n      for (var x in brackets) {\n        var regex = new RegExp(brackets[x].is_close ? '\\\\s+\\\\' + x : '\\\\' + x + '\\\\s+', 'g');\n        e = e.replace(regex, x);\n      }\n\n      var col = 0; //the column position\n\n      var L = e.length; //expression length\n\n      var lpos = 0; //marks beginning of next token\n\n      var tokens = []; //the tokens container\n\n      var scopes = [tokens]; //initiate with the tokens as the highest scope\n\n      var target = scopes[0]; //the target to which the tokens are added. This can swing up or down\n\n      var depth = 0;\n      var open_brackets = [];\n      var has_space = false; //marks if an open space character was found\n\n      var SPACE = ' ';\n      var EMPTY_STRING = '';\n      var COMMA = ',';\n      var MINUS = '-';\n      var MULT = '*'; //Possible source of bug. Review\n\n      /*\r\n       //gets the next space\r\n       var next_space = function(from) {\r\n       for(var i=from; i<L; i++) {\r\n       if(e.charAt(i) === ' ')\r\n       return i;\r\n       }\r\n       \r\n       return L; //assume the end of the string instead\r\n       };\r\n       */\n\n      /**\r\n       * Adds a scope to tokens\r\n       * @param {String} scope_type\r\n       * @param {int} column\r\n       * @returns {undefined}\r\n       */\n\n      var addScope = function (scope_type, column) {\n        var new_scope = []; //create a new scope\n\n        if (scope_type !== undefined) {\n          new_scope.type = scope_type;\n        }\n\n        new_scope.column = column; //mark the column of the scope\n\n        scopes.push(new_scope); //add it to the list of scopes\n\n        target.push(new_scope); //add it to the tokens list since now it's a scope\n\n        target = new_scope; //point to it\n\n        depth++; //go down one in scope\n      };\n      /**\r\n       * Goes up in scope by one\r\n       * @returns {undefined}\r\n       */\n\n\n      var goUp = function () {\n        scopes.pop(); //remove the scope from the scopes stack\n\n        target = scopes[--depth]; //point the above scope\n      };\n      /**\r\n       * Extracts all the operators from the expression string starting at postion start_at\r\n       * @param {int} start_at\r\n       * @returns {String}\r\n       */\n\n\n      var get_operator_str = function (start_at) {\n        start_at = start_at !== undefined ? start_at : col; //mark the end of the operator as the start since we're just going\n        //to be walking along the string\n\n        var end = start_at + 1; //just keep moving along\n\n        while (e.charAt(end++) in operators) {} //remember that we started at one position ahead. The beginning operator is what triggered\n        //this function to be called in the first place. String.CharAt is zero based so we now\n        //have to correct two places. The initial increment + the extra++ at the end of end during\n        //the last iteration.\n\n\n        return e.substring(start_at, end - 1);\n      };\n      /**\r\n       * Breaks operator up in to several different operators as defined in operators\r\n       * @param {String} operator_str\r\n       * @returns {String[]}\r\n       */\n\n\n      var chunkify = function (operator_str) {\n        var start = col - operator_str.length; //start of operator\n\n        var _operators = [];\n        var operator = operator_str.charAt(0); //grab the largest possible chunks but start at 2 since we already know\n        //that the first character is an operator\n\n        for (var i = 1, L = operator_str.length; i < L; i++) {\n          var ch = operator_str.charAt(i);\n          var o = operator + ch; //since the operator now is undefined then the last operator\n          //was the largest possible combination.\n\n          if (!(o in operators)) {\n            _operators.push(new Token(operator, Token.OPERATOR, start + i));\n\n            operator = ch;\n          } else operator = o; //now the operator is the larger chunk\n\n        } //add the last operator\n\n\n        _operators.push(new Token(operator, Token.OPERATOR, start + i));\n\n        return _operators;\n      };\n      /**\r\n       * Is used to add a token to the tokens array. Makes sure that no empty token is added\r\n       * @param {int} at\r\n       * @param {String} token\r\n       * @returns {undefined}\r\n       */\n\n\n      var add_token = function (at, token) {\n        //grab the token if we're not supplied one\n        if (token === undefined) token = e.substring(lpos, at); //only add it if it's not an empty string\n\n        if (token in _.units) target.push(new Token(token, Token.UNIT, lpos));else if (token !== '') target.push(new Token(token, Token.VARIABLE_OR_LITERAL, lpos));\n      };\n      /**\r\n       * Adds a function to the output\r\n       * @param {String} f\r\n       * @returns {undefined}\r\n       */\n\n\n      var add_function = function (f) {\n        target.push(new Token(f, Token.FUNCTION, lpos));\n      };\n      /**\r\n       * Tokens are found between operators so this marks the location of where the last token was found\r\n       * @param {int} position\r\n       * @returns {undefined}\r\n       */\n\n\n      var set_last_position = function (position) {\n        lpos = position + 1;\n      };\n      /**\r\n       * When a operator is found and added, especially a combo operator, then the column location\r\n       * has to be adjusted to the end of the operator\r\n       * @returns {undefined}\r\n       */\n\n\n      var adjust_column_position = function () {\n        lpos = lpos + operator_str.length - 2;\n        col = lpos - 1;\n      };\n\n      for (; col < L; col++) {\n        var ch = e.charAt(col);\n\n        if (ch in operators) {\n          add_token(col); //is the last token numeric?\n\n          var last_token_is_numeric = target[0] && isNumber(target[0]); //is this character multiplication?\n\n          var is_multiplication = last_token_is_numeric && ch === MULT; //if we're in a new scope then go up by one but if the space\n          //is right befor an operator then it makes no sense to go up in scope\n          //consider sin -x. The last position = current position at the minus sign\n          //this means that we're going for sin(x) -x which is wrong\n          //Ignore comma since comma is still part of the existing scope.\n\n          if (has_space && lpos < col && !(ch === COMMA || is_multiplication)) {\n            has_space = false;\n            goUp();\n          } //mark the last position that a\n\n\n          set_last_position(col + 1);\n          var operator_str = get_operator_str(col);\n          adjust_column_position();\n          target.push.apply(target, chunkify(operator_str));\n        } else if (ch in brackets) {\n          var bracket = brackets[ch];\n\n          if (bracket.is_open) {\n            //mark the bracket\n            open_brackets.push([bracket, lpos]);\n            var f = e.substring(lpos, col);\n\n            if (f in functions) {\n              add_function(f);\n            } else if (f !== '') {\n              //assume multiplication\n              //TODO: Add the multiplication to stack\n              target.push(new Token(f, Token.VARIABLE_OR_LITERAL, lpos));\n            } //go down one in scope\n\n\n            addScope(bracket.maps_to, col);\n          } else if (bracket.is_close) {\n            //get the matching bracket\n            var pair = open_brackets.pop(); //throw errors accordingly\n            //missing open bracket\n\n            if (!pair) throw new ParityError('Missing open bracket for bracket at: ' + (col + 1)); //incorrect pair\n            else if (pair[0].id !== bracket.id - 1) throw new ParityError('Parity error');\n            add_token(col);\n            goUp();\n          }\n\n          set_last_position(col);\n        } else if (ch === SPACE) {\n          var prev = e.substring(lpos, col); //look back\n\n          var nxt = e.charAt(col + 1); //look forward\n\n          if (has_space) {\n            if (prev in operators) {\n              target.push(new Token(prev, Token.OPERATOR, col));\n            } else {\n              add_token(undefined, prev); //we're at the closing space\n\n              goUp(); //go up in scope if we're at a space\n              //assume multiplication if it's not an operator except for minus\n\n              var is_operator = (nxt in operators);\n\n              if (is_operator && operators[nxt].value === MINUS || !is_operator) {\n                target.push(new Token(MULT, Token.OPERATOR, col));\n              }\n            }\n\n            has_space = false; //remove the space\n          } else {\n            //we're at the closing space\n            //check if it's a function\n            var f = e.substring(lpos, col);\n\n            if (f in functions) {\n              //there's no need to go up in scope if the next character is an operator\n              has_space = true; //mark that a space was found\n\n              add_function(f);\n              addScope();\n            } else if (f in operators) {\n              target.push(new Token(f, Token.OPERATOR, col));\n            } else {\n              add_token(undefined, f); //peek ahead to the next character\n\n              var nxt = e.charAt(col + 1); //If it's a number then add the multiplication operator to the stack but make sure that the next character\n              //is not an operator\n\n              if (prev !== EMPTY_STRING && nxt !== EMPTY_STRING && !(prev in operators) && !(nxt in operators)) target.push(new Token(MULT, Token.OPERATOR, col));\n            } //Possible source of bug. Review\n\n            /*\r\n             //space can mean multiplication so add the symbol if the is encountered\r\n             if(/\\d+|\\d+\\.?\\d*e[\\+\\-]*\\d+/i.test(f)) {\r\n             var next = e.charAt(col+1);\r\n             var next_is_operator = next in operators;\r\n             var ns = next_space(col+1);\r\n             var next_word = e.substring(col+1, ns);\r\n             //the next can either be a prefix operator or no operator\r\n             if((next_is_operator && operators[next].prefix) || !(next_is_operator || next_word in operators))\r\n             target.push(new Token('*', Token.OPERATOR, col));\r\n             }\r\n             */\n\n          }\n\n          set_last_position(col); //mark this location\n        }\n      } //check that all brackets were closed\n\n\n      if (open_brackets.length) {\n        var b = open_brackets.pop();\n        throw new ParityError('Missing closed bracket for bracket at ' + (b[1] + 1));\n      } //add the last token\n\n\n      add_token(col);\n      return tokens;\n    };\n    /*\r\n     * Puts token array in Reverse Polish Notation\r\n     * @param {Token[]} tokens\r\n     * @returns {Token[]}\r\n     */\n\n\n    this.toRPN = function (tokens) {\n      var fn = tokens.type;\n      var l = tokens.length,\n          i;\n      var output = [];\n      var stack = [];\n      var prefixes = [];\n\n      var collapse = function (target, destination) {\n        while (target.length) destination.push(target.pop());\n      }; //mark all the prefixes and add them to the stack\n\n\n      for (i = 0; i < l; i++) {\n        var token = tokens[i];\n        if (token.type !== Token.OPERATOR) break;\n        if (!token.prefix) throw new OperatorError('Not a prefix operator');\n        token.is_prefix = true;\n        stack.push(token);\n      } //begin with remaining tokens\n\n\n      for (; i < l; i++) {\n        var e = tokens[i];\n\n        if (e.type === Token.OPERATOR) {\n          var operator = e; //create the option for the operator being overloaded\n\n          if (operator.overloaded) {\n            var next = tokens[i + 1]; //if it's followed by a number or variable then we assume it's not a postfix operator\n\n            if (next && next.type === Token.VARIABLE_OR_LITERAL) {\n              operator.postfix = false; //override the original function with the overload function\n\n              operator.action = operator.overloadAction;\n              operator.leftAssoc = operator.overloadLeftAssoc;\n            }\n          } //if the stack is not empty\n\n\n          while (stack.length) {\n            var last = stack[stack.length - 1]; //if (there is an operator at the top of the operator stack with greater precedence)\n            //or (the operator at the top of the operator stack has equal precedence and is left associative)) ~ wikipedia\n            //the !prefixes.length makes sure that the operator on stack isn't prematurely taken fromt he stack.\n\n            if (!(last.precedence > operator.precedence || !operator.leftAssoc && last.precedence === operator.precedence)) break;\n            output.push(stack.pop());\n          } //change the behavior of the operator if it's a vector and we've been asked to do so\n\n\n          if ((fn === 'vector' || fn === 'set') && 'vectorFn' in operator) operator.action = operator.vectorFn; //if the operator is a postfix operator then we're ready to go since it belongs\n          //to the preceding token. However the output cannot be empty. It must have either\n          //an operator or a variable/literal\n\n          if (operator.postfix) {\n            var previous = tokens[i - 1];\n            if (!previous) throw new OperatorError(\"Unexpected prefix operator '\" + e.value + \"'! at \" + e.column);else if (previous.type === Token.OPERATOR) {\n              //a postfix can only be followed by a postfix\n              if (!previous.postfix) throw new OperatorError(\"Unexpected prefix operator '\" + previous.value + \"'! at \" + previous.column);\n            }\n          } else {\n            //we must be at an infix so point the operator this\n            do {\n              //the first one is an infix operator all others have to be prefix operators so jump to the end\n              var next = tokens[i + 1]; //take a look ahead\n\n              var next_is_operator = next ? next.type === Token.OPERATOR : false; //check if it's an operator\n\n              if (next_is_operator) {\n                //if it's not a prefix operator then it not in the right place\n                if (!next.prefix) {\n                  throw new OperatorError('A prefix operator was expected at ' + next.column);\n                } //mark it as a confirmed prefix\n\n\n                next.is_prefix = true; //add it to the prefixes\n\n                prefixes.push(next);\n                i++;\n              }\n            } while (next_is_operator);\n          } //if it's a prefix it should be on a special stack called prefixes\n          //we do this to hold on to prefixes because of left associative operators.\n          //they belong to the variable/literal but if placed on either the stack\n          //or output there's no way of knowing this. I might be wrong so I welcome\n          //any discussion about this.\n\n\n          if (operator.is_prefix) //ADD ALL EXCEPTIONS FOR ADDING TO PREFIX STACK HERE. !!!\n            prefixes.push(operator);else stack.push(operator); //move the prefixes to the stack\n\n          while (prefixes.length) {\n            if (operator.leftAssoc || !operator.leftAssoc && prefixes[prefixes.length - 1].precedence >= operator.precedence) //revisit for commas\n              stack.push(prefixes.pop());else break;\n          }\n        } else if (e.type === Token.VARIABLE_OR_LITERAL) {\n          //move prefixes to stack at beginning of scope\n          if (output.length === 0) collapse(prefixes, stack); //done with token\n\n          output.push(e);\n          var last_on_stack = stack[stack.length - 1]; //then move all the prefixes to the output\n\n          if (!last_on_stack || !last_on_stack.leftAssoc) collapse(prefixes, output);\n        } else if (e.type === Token.FUNCTION) {\n          stack.push(e);\n        } else if (e.type === Token.UNIT) {\n          //if it's a unit it belongs on the stack since it's tied to the previous token\n          output.push(e);\n        } //if it's an additonal scope then put that into RPN form\n\n\n        if (Array.isArray(e)) {\n          output.push(this.toRPN(e));\n          if (e.type) output.push(new Token(e.type, Token.FUNCTION, e.column)); //since it's hidden it needs no column\n        }\n      } //collapse the remainder of the stack and prefixes to output\n\n\n      collapse(stack, output);\n      collapse(prefixes, output);\n      return output;\n    };\n    /*\r\n     * Parses the tokens\r\n     * @param {Tokens[]} rpn\r\n     * @param {object} substitutions\r\n     * @returns {Symbol}\r\n     */\n\n\n    this.parseRPN = function (rpn, substitutions) {\n      try {\n        //default substitutions\n        substitutions = substitutions || {}; //prepare the substitutions.\n        //we first parse them out as-is\n\n        for (var x in substitutions) substitutions[x] = _.parse(substitutions[x], {}); //Although technically constants,\n        //pi and e are only available when evaluating the expression so add to the subs.\n        //Doing this avoids rounding errors\n        //link e and pi\n\n\n        if (Settings.PARSE2NUMBER) {\n          //use the value provided if the individual for some strange reason prefers this.\n          //one reason could be to sub e but not pi or vice versa\n          if (!('e' in substitutions)) substitutions.e = new Symbol(Settings.E);\n          if (!('pi' in substitutions)) substitutions.pi = new Symbol(Settings.PI);\n        }\n\n        var Q = [];\n\n        for (var i = 0, l = rpn.length; i < l; i++) {\n          var e = rpn[i]; //Arrays indicate a new scope so parse that out\n\n          if (Array.isArray(e)) {\n            e = this.parseRPN(e, substitutions);\n          }\n\n          if (e) {\n            if (e.type === Token.OPERATOR) {\n              if (e.is_prefix || e.postfix) //resolve the operation assocated with the prefix\n                Q.push(e.operation(Q.pop()));else {\n                var b = Q.pop();\n                var a = Q.pop(); //Throw an error if the RH value is empty. This cannot be a postfix since we already checked\n\n                if (typeof a === 'undefined') throw new OperatorError(e + ' is not a valid postfix operator at ' + e.column);\n                var is_comma = e.action === 'comma'; //convert Sets to Vectors on all operations at this point. Sets are only recognized functions or individually\n\n                if (a instanceof Set && !is_comma) a = Vector.fromSet(a);\n                if (b instanceof Set && !is_comma) b = Vector.fromSet(b); //call all the pre-operators\n\n                this.callPeekers('pre_operator', a, b, e);\n\n                var ans = _[e.action](a, b); //call all the pre-operators\n\n\n                this.callPeekers('post_operator', ans, a, b, e);\n                Q.push(ans);\n              }\n            } else if (e.type === Token.FUNCTION) {\n              var args = Q.pop();\n              var parent = args.parent; //make a note of the parent\n\n              if (!(args instanceof Collection)) args = Collection.create(args); //the return value may be a vector. If it is then we check\n              //Q to see if there's another vector on the stack. If it is then\n              //we check if has elements. If it does then we know that we're dealing\n              //with an \"getter\" object and return the requested values\n              //call the function. This is the _.callfunction method in nerdamer\n              //call the function. This is the _.callfunction method in nerdamer\n\n              var fn_name = e.value;\n              var fn_args = args.getItems(); //call the pre-function peekers\n\n              this.callPeekers('pre_function', fn_name, fn_args);\n\n              var ret = _.callfunction(fn_name, fn_args); //call the post-function peekers\n\n\n              this.callPeekers('post_function', ret, fn_name, fn_args);\n              var last = Q[Q.length - 1];\n              var next = rpn[i + 1];\n              var next_is_comma = next && next.type === Token.OPERATOR && next.value === ',';\n\n              if (!next_is_comma && ret instanceof Vector && last && last.elements && !(last instanceof Collection)) {\n                //remove the item from the queue\n                var item = Q.pop();\n                var getter = ret.elements[0]; //check if it's symbolic. If so put it back and add the item to the stack\n\n                if (!getter.isConstant()) {\n                  item.getter = getter;\n                  Q.push(item);\n                  Q.push(ret);\n                } else if (getter instanceof Slice) {\n                  //if it's a Slice return the slice\n                  Q.push(Vector.fromArray(item.elements.slice(getter.start, getter.end)));\n                } else {\n                  var index = Number(getter);\n                  var il = item.elements.length; //support for negative indices\n\n                  if (index < 0) index = il + index; //it it's still out of bounds\n\n                  if (index < 0 || index >= il) //index should no longer be negative since it's been reset above\n                    //range error\n                    throw new OutOfRangeError('Index out of range ' + (e.column + 1));\n                  var element = item.elements[index]; //cyclic but we need to mark this for future reference\n\n                  item.getter = index;\n                  element.parent = item;\n                  Q.push(element);\n                }\n              } else {\n                //extend the parent reference\n                if (parent) ret.parent = parent;\n                Q.push(ret);\n              }\n            } else {\n              var subbed;\n              var v = e.value;\n              if (v in Settings.ALIASES) e = _.parse(Settings.ALIASES[e]); //wrap it in a symbol if need be\n              else if (e.type === Token.VARIABLE_OR_LITERAL) e = new Symbol(v);else if (e.type === Token.UNIT) {\n                  e = new Symbol(v);\n                  e.isUnit = true;\n                } //make substitutions\n              //Always constants first. This avoids the being overridden\n\n              if (v in _.CONSTANTS) {\n                subbed = e;\n                e = new Symbol(_.CONSTANTS[v]);\n              } //next substitutions. This allows declared variable to be overridden\n              //check if the values match to avoid erasing the multiplier.\n              //Example:/e = 3*a. substutiting a for a will wipe out the multiplier.\n              else if (v in substitutions && v !== substitutions[v].toString()) {\n                  subbed = e;\n                  e = substitutions[v].clone();\n                } //next declare variables\n                else if (v in VARS) {\n                    subbed = e;\n                    e = VARS[v].clone();\n                  } //make notation of what it was before\n\n\n              if (subbed) e.subbed = subbed;\n              Q.push(e);\n            }\n          }\n        }\n\n        var retval = Q[0];\n\n        if (['undefined', 'string', 'number'].indexOf(typeof retval) !== -1) {\n          throw new UnexpectedTokenError('Unexpected token!');\n        }\n\n        return retval;\n      } catch (error) {\n        var rethrowErrors = [OutOfFunctionDomainError]; // Rethrow certain errors in the same class to preserve them\n\n        rethrowErrors.forEach(function (E) {\n          if (error instanceof E) {\n            throw new E(error.message + ': ' + e.column);\n          }\n        });\n        throw new ParseError(error.message + ': ' + e.column);\n      }\n    };\n    /**\r\n     * This is the method that triggers the parsing of the string. It generates a parse tree but processes\r\n     * it right away. The operator functions are called when their respective operators are reached. For instance\r\n     * + with cause this.add to be called with the left and right hand values. It works by walking along each\r\n     * character of the string and placing the operators on the stack and values on the output. When an operator\r\n     * having a lower order than the last is reached then the stack is processed from the last operator on the\r\n     * stack.\r\n     * @param {String} token\r\n     */\n\n\n    function Node(token) {\n      this.type = token.type;\n      this.value = token.value; //the incoming token may already be a Node type\n\n      this.left = token.left;\n      this.right = token.right;\n    }\n\n    Node.prototype.toString = function () {\n      var left = this.left ? this.left.toString() + '---' : '';\n      var right = this.right ? '---' + this.right.toString() : '';\n      return left + '(' + this.value + ')' + right;\n    };\n\n    Node.prototype.toHTML = function (depth, indent) {\n      depth = depth || 0;\n      indent = typeof indent === 'undefined' ? 4 : indent;\n\n      var tab = function (n) {\n        return ' '.repeat(indent * n);\n      };\n\n      var html = '';\n      var left = this.left ? tab(depth + 1) + '<li>\\n' + this.left.toHTML(depth + 2, indent) + tab(depth + 1) + '</li> \\n' : '';\n      var right = this.right ? tab(depth + 1) + '<li>\\n' + this.right.toHTML(depth + 2, indent) + tab(depth + 1) + '</li>\\n' : '';\n      var html = tab(depth) + '<div class=\"' + this.type.toLowerCase() + '\"><span>' + this.value + '</span></div>' + tab(depth) + '\\n';\n\n      if (left || right) {\n        html += tab(depth) + '<ul>\\n' + left + right + tab(depth) + '</ul>\\n';\n      }\n\n      html += '';\n      return html;\n    };\n\n    this.tree = function (tokens) {\n      var Q = [];\n\n      for (var i = 0; i < tokens.length; i++) {\n        var e = tokens[i]; //Arrays indicate a new scope so parse that out\n\n        if (Array.isArray(e)) {\n          e = this.tree(e); //if it's a comma then it's just arguments\n\n          Q.push(e);\n          continue;\n        }\n\n        if (e.type === Token.OPERATOR) {\n          if (e.is_prefix || e.postfix) {\n            //prefixes go to the left, postfix to the right\n            var location = e.is_prefix ? 'left' : 'right';\n            var last = Q.pop();\n            e = new Node(e);\n            e[location] = last;\n            Q.push(e);\n          } else {\n            e = new Node(e);\n            e.right = Q.pop();\n            e.left = Q.pop();\n            Q.push(e);\n          }\n        } else if (e.type === Token.FUNCTION) {\n          e = new Node(e);\n          var args = Q.pop();\n          e.right = args;\n\n          if (e.value === 'object') {\n            //check if Q has a value\n            var last = Q[Q.length - 1];\n\n            if (last) {\n              while (last.right) {\n                last = last.right;\n              }\n\n              last.right = e;\n              continue;\n            }\n          }\n\n          Q.push(e);\n        } else {\n          Q.push(new Node(e));\n        }\n      }\n\n      return Q[0];\n    };\n\n    this.parse = function (e, substitutions) {\n      e = prepare_expression(e);\n      substitutions = substitutions || {}; //three passes but easier to debug\n\n      var tokens = this.tokenize(e);\n      var rpn = this.toRPN(tokens);\n      return this.parseRPN(rpn, substitutions);\n    };\n    /**\r\n     * TODO: Switch to Parser.tokenize for this method\r\n     * Reads a string into an array of Symbols and operators\r\n     * @param {String} expression_string\r\n     * @returns {Array}\r\n     */\n\n\n    this.toObject = function (expression_string) {\n      var objectify = function (tokens) {\n        var output = [];\n\n        for (var i = 0, l = tokens.length; i < l; i++) {\n          var token = tokens[i];\n          var v = token.value;\n\n          if (token.type === Token.VARIABLE_OR_LITERAL) {\n            output.push(new Symbol(v));\n          } else if (token.type === Token.FUNCTION) {\n            //jump ahead since the next object are the arguments\n            i++; //create a symbolic function and stick it on output\n\n            var f = _.symfunction(v, objectify(tokens[i]));\n\n            f.isConversion = true;\n            output.push(f);\n          } else if (token.type === Token.OPERATOR) {\n            output.push(v);\n          } else {\n            output.push(objectify(token));\n          }\n        }\n\n        return output;\n      };\n\n      return objectify(_.tokenize(expression_string));\n    }; // A helper method for toTeX\n\n\n    var chunkAtCommas = function (arr) {\n      var j,\n          k = 0,\n          chunks = [[]];\n\n      for (var j = 0, l = arr.length; j < l; j++) {\n        if (arr[j] === ',') {\n          k++;\n          chunks[k] = [];\n        } else {\n          chunks[k].push(arr[j]);\n        }\n      }\n\n      return chunks;\n    }; // Helper method for toTeX\n\n\n    var rem_brackets = function (str) {\n      return str.replace(/^\\\\left\\((.+)\\\\right\\)$/g, function (str, a) {\n        if (a) return a;\n        return str;\n      });\n    };\n\n    var remove_redundant_powers = function (arr) {\n      // The filtered array\n      var narr = [];\n\n      while (arr.length) {\n        // Remove the element from the front\n        var e = arr.shift();\n        var next = arr[0];\n        var next_is_array = isArray(next);\n        var next_is_minus = next === '-'; // Remove redundant plusses \n\n        if (e === '^') {\n          if (next === '+') {\n            arr.shift();\n          } else if (next_is_array && next[0] === '+') {\n            next.shift();\n          } // Remove redundant parentheses\n\n\n          if (next_is_array && next.length === 1) {\n            arr.unshift(arr.shift()[0]);\n          }\n        } // Check if it's a negative power\n\n\n        if (e === '^' && (next_is_array && next[0] === '-' || next_is_minus)) {\n          // If so:\n          // - Remove it from the new array, place a one and a division sign in that array and put it back\n          var last = narr.pop(); // Check if it's something multiplied by\n\n          var before = narr[narr.length - 1];\n          var before_last = '1';\n\n          if (before === '*') {\n            narr.pop(); // For simplicity we just pop it. \n\n            before_last = narr.pop();\n          } // Implied multiplication\n          else if (isArray(before)) {\n              before_last = narr.pop();\n            }\n\n          narr.push(before_last, '/', last, e); // Remove the negative sign from the power \n\n          if (next_is_array) {\n            next.shift();\n          } else {\n            arr.shift();\n          } // Remove it from the array so we don't end up with redundant parentheses if we can\n\n\n          if (next_is_array && next.length === 1) {\n            narr.push(arr.shift()[0]);\n          }\n        } else {\n          narr.push(e);\n        }\n      }\n\n      return narr;\n    };\n    /*\r\n     * Convert expression or object to LaTeX\r\n     * @param {String} expression_or_obj\r\n     * @param {object} opt\r\n     * @returns {String}\r\n     */\n\n\n    this.toTeX = function (expression_or_obj, opt) {\n      opt = opt || {}; // Add decimal option as per issue #579. Consider passing an object to Latex.latex as option instead of string\n\n      var decimals = opt.decimals === true ? 'decimals' : undefined;\n      var obj = typeof expression_or_obj === 'string' ? this.toObject(expression_or_obj) : expression_or_obj,\n          TeX = [],\n          cdot = typeof opt.cdot === 'undefined' ? '\\\\cdot' : opt.cdot; //set omit cdot to true by default\n      // Remove negative powers as per issue #570\n\n      obj = remove_redundant_powers(obj);\n\n      if (isArray(obj)) {\n        var nobj = [],\n            a,\n            b; //first handle ^\n\n        for (var i = 0; i < obj.length; i++) {\n          a = obj[i];\n\n          if (obj[i + 1] === '^') {\n            b = obj[i + 2];\n            nobj.push(LaTeX.braces(this.toTeX([a])) + '^' + LaTeX.braces(this.toTeX([b])));\n            i += 2;\n          } else {\n            nobj.push(a);\n          }\n        }\n\n        obj = nobj;\n      }\n\n      for (var i = 0, l = obj.length; i < l; i++) {\n        var e = obj[i]; // Convert * to cdot\n\n        if (e === '*') {\n          e = cdot;\n        }\n\n        if (isSymbol(e)) {\n          if (e.group === FN) {\n            var fname = e.fname,\n                f;\n            if (fname === SQRT) f = '\\\\sqrt' + LaTeX.braces(this.toTeX(e.args));else if (fname === ABS) f = LaTeX.brackets(this.toTeX(e.args), 'abs');else if (fname === PARENTHESIS) f = LaTeX.brackets(this.toTeX(e.args), 'parens');else if (fname === Settings.LOG10) {\n              f = '\\\\' + Settings.LOG10_LATEX + '\\\\left( ' + this.toTeX(e.args) + '\\\\right)';\n            } else if (fname === 'integrate') {\n              /* Retrive [Expression, x] */\n              var chunks = chunkAtCommas(e.args);\n              /* Build TeX */\n\n              var expr = LaTeX.braces(this.toTeX(chunks[0])),\n                  dx = this.toTeX(chunks[1]);\n              f = '\\\\int ' + expr + '\\\\, d' + dx;\n            } else if (fname === 'defint') {\n              var chunks = chunkAtCommas(e.args),\n                  expr = LaTeX.braces(this.toTeX(chunks[0])),\n                  dx = this.toTeX(chunks[3]),\n                  lb = this.toTeX(chunks[1]),\n                  ub = this.toTeX(chunks[2]);\n              f = '\\\\int\\\\limits_{' + lb + '}^{' + ub + '} ' + expr + '\\\\, d' + dx;\n            } else if (fname === 'diff') {\n              var chunks = chunkAtCommas(e.args);\n              var dx = '',\n                  expr = LaTeX.braces(this.toTeX(chunks[0]));\n              /* Handle cases: one argument provided, we need to guess the variable, and assume n = 1 */\n\n              if (chunks.length === 1) {\n                var vars = [];\n\n                for (j = 0; j < chunks[0].length; j++) {\n                  if (chunks[0][j].group === 3) {\n                    vars.push(chunks[0][j].value);\n                  }\n                }\n\n                vars.sort();\n                dx = vars.length > 0 ? '\\\\frac{d}{d ' + vars[0] + '}' : '\\\\frac{d}{d x}';\n              }\n              /* If two arguments, we have expression and variable, we assume n = 1 */\n              else if (chunks.length === 2) {\n                  dx = '\\\\frac{d}{d ' + chunks[1] + '}';\n                }\n                /* If we have more than 2 arguments, we assume we've got everything */\n                else {\n                    dx = '\\\\frac{d^{' + chunks[2] + '}}{d ' + this.toTeX(chunks[1]) + '^{' + chunks[2] + '}}';\n                  }\n\n              f = dx + '\\\\left(' + expr + '\\\\right)';\n            } else if (fname === 'sum' || fname === 'product') {\n              // Split e.args into 4 parts based on locations of , symbols.\n              var argSplit = [[], [], [], []],\n                  j = 0,\n                  i;\n\n              for (i = 0; i < e.args.length; i++) {\n                if (e.args[i] === ',') {\n                  j++;\n                  continue;\n                }\n\n                argSplit[j].push(e.args[i]);\n              } // Then build TeX string.\n\n\n              f = (fname === 'sum' ? '\\\\sum_' : '\\\\prod_') + LaTeX.braces(this.toTeX(argSplit[1]) + ' = ' + this.toTeX(argSplit[2]));\n              f += '^' + LaTeX.braces(this.toTeX(argSplit[3])) + LaTeX.braces(this.toTeX(argSplit[0]));\n            } else if (fname === 'limit') {\n              var args = chunkAtCommas(e.args).map(function (x) {\n                if (Array.isArray(x)) return _.toTeX(x.join(''));\n                return _.toTeX(String(x));\n              });\n              f = '\\\\lim_' + LaTeX.braces(args[1] + '\\\\to ' + args[2]) + ' ' + LaTeX.braces(args[0]);\n            } else if (fname === FACTORIAL || fname === DOUBLEFACTORIAL) f = this.toTeX(e.args) + (fname === FACTORIAL ? '!' : '!!');else {\n              f = LaTeX.latex(e, decimals); //f = '\\\\mathrm'+LaTeX.braces(fname.replace(/_/g, '\\\\_')) + LaTeX.brackets(this.toTeX(e.args), 'parens');\n            }\n            TeX.push(f);\n          } else {\n            TeX.push(LaTeX.latex(e, decimals));\n          }\n        } else if (isArray(e)) {\n          TeX.push(LaTeX.brackets(this.toTeX(e)));\n        } else {\n          if (e === '/') TeX.push(LaTeX.frac(rem_brackets(TeX.pop()), rem_brackets(this.toTeX([obj[++i]]))));else TeX.push(e);\n        }\n      }\n\n      return TeX.join(' ');\n    }; //Parser.functions ==============================================================\n\n    /* Although parens is not a \"real\" function it is important in some cases when the\r\n     * symbol must carry parenthesis. Once set you don't have to worry about it anymore\r\n     * as the parser will get rid of it at the first opportunity\r\n     */\n\n\n    function parens(symbol) {\n      if (Settings.PARSE2NUMBER) {\n        return symbol;\n      }\n\n      return _.symfunction('parens', [symbol]);\n    }\n\n    function abs(symbol) {\n      //|-∞| = ∞\n      if (symbol.isInfinity) {\n        return Symbol.infinity();\n      }\n\n      if (symbol.multiplier.lessThan(0)) symbol.multiplier.negate();\n\n      if (symbol.isImaginary()) {\n        var re = symbol.realpart();\n        var im = symbol.imagpart();\n        if (re.isConstant() && im.isConstant()) return sqrt(_.add(_.pow(re, new Symbol(2)), _.pow(im, new Symbol(2))));\n      } else if (isNumericSymbol(symbol) || even(symbol.power)) {\n        return symbol;\n      }\n\n      if (symbol.isComposite()) {\n        var ms = [];\n        symbol.each(function (x) {\n          ms.push(x.multiplier);\n        });\n        var gcd = Math2.QGCD.apply(null, ms);\n\n        if (gcd.lessThan(0)) {\n          symbol.multiplier = symbol.multiplier.multiply(new Frac(-1));\n          symbol.distributeMultiplier();\n        }\n      } //convert |n*x| to n*|x|\n\n\n      var m = _.parse(symbol.multiplier);\n\n      symbol.toUnitMultiplier();\n      return _.multiply(m, _.symfunction(ABS, [symbol]));\n    }\n    /**\r\n     * The factorial function\r\n     * @param {Symbol} symbol\r\n     * @return {Symbol}\r\n     */\n\n\n    function factorial(symbol) {\n      var retval;\n\n      if (isVector(symbol)) {\n        var V = new Vector();\n        symbol.each(function (x, i) {\n          //i start at one.\n          V.set(i - 1, factorial(x));\n        });\n        return V;\n      }\n\n      if (isMatrix(symbol)) {\n        var M = new Matrix();\n        symbol.each(function (x, i, j) {\n          //i start at one.\n          M.set(i, j, factorial(x));\n        });\n        return M;\n      }\n\n      if (Settings.PARSE2NUMBER && symbol.isConstant()) {\n        if (isInt(symbol)) {\n          retval = Math2.bigfactorial(symbol);\n        } else {\n          retval = Math2.gamma(symbol.multiplier.add(new Frac(1)).toDecimal());\n        }\n\n        retval = bigConvert(retval);\n        return retval;\n      } else if (symbol.isConstant()) {\n        var den = symbol.getDenom();\n\n        if (den.equals(2)) {\n          var num = symbol.getNum();\n          var a, b, c, n;\n\n          if (!symbol.multiplier.isNegative()) {\n            n = _.add(num, new Symbol(1)).multiplier.divide(new Frac(2));\n            a = Math2.bigfactorial(new Frac(2).multiply(n));\n            b = _.pow(new Symbol(4), new Symbol(n)).multiplier.multiply(Math2.bigfactorial(n));\n          } else {\n            n = _.subtract(num.negate(), new Symbol(1)).multiplier.divide(new Frac(2));\n            a = _.pow(new Symbol(-4), new Symbol(n)).multiplier.multiply(Math2.bigfactorial(n));\n            b = Math2.bigfactorial(new Frac(2).multiply(n));\n          }\n\n          c = a.divide(b);\n          return _.multiply(_.parse('sqrt(pi)'), new Symbol(c));\n        }\n      }\n\n      return _.symfunction(FACTORIAL, [symbol]);\n    }\n\n    ;\n    /**\r\n     * Returns the continued fraction of a number\r\n     * @param {Symbol} symbol\r\n     * @param {Symbol} n\r\n     * @returns {Symbol}\r\n     */\n\n    function continued_fraction(symbol, n) {\n      var _symbol = evaluate(symbol);\n\n      if (_symbol.isConstant()) {\n        var cf = Math2.continuedFraction(_symbol, n); //convert the fractions array to a new Vector\n\n        var fractions = Vector.fromArray(cf.fractions.map(function (x) {\n          return new Symbol(x);\n        }));\n        return Vector.fromArray([new Symbol(cf.sign), new Symbol(cf.whole), fractions]);\n      }\n\n      return _.symfunction('continued_fraction', arguments);\n    }\n    /**\r\n     * Returns the error function\r\n     * @param {Symbol} symbol\r\n     * @returns {Symbol}\r\n     */\n\n\n    function erf(symbol) {\n      var _symbol = evaluate(symbol);\n\n      if (_symbol.isConstant()) {\n        return Math2.erf(_symbol);\n      } else if (_symbol.isImaginary()) {\n        return complex.erf(symbol);\n      }\n\n      return _.symfunction('erf', arguments);\n    }\n\n    ;\n    /**\r\n     * The mod function\r\n     * @param {Symbol} symbol1\r\n     * @param {Symbol} symbol2\r\n     * @returns {Symbol}\r\n     */\n\n    function mod(symbol1, symbol2) {\n      if (symbol1.isConstant() && symbol2.isConstant()) {\n        var retval = new Symbol(1);\n        retval.multiplier = retval.multiplier.multiply(symbol1.multiplier.mod(symbol2.multiplier));\n        return retval;\n      } //try to see if division has remainder of zero\n\n\n      var r = _.divide(symbol1.clone(), symbol2.clone());\n\n      if (isInt(r)) return new Symbol(0);\n      return _.symfunction('mod', [symbol1, symbol2]);\n    }\n    /**\r\n     * A branghing function\r\n     * @param {Boolean} condition\r\n     * @param {Symbol} a\r\n     * @param {Symbol} b\r\n     * @returns {Symbol}\r\n     */\n\n\n    function IF(condition, a, b) {\n      if (typeof condition !== 'boolean') if (isNumericSymbol(condition)) condition = !!Number(condition);\n      if (condition) return a;\n      return b;\n    }\n    /**\r\n     *\r\n     * @param {Matrix|Vector|Set|Collection} obj\r\n     * @param {Symbol} item\r\n     * @returns {Boolean}\r\n     */\n\n\n    function is_in(obj, item) {\n      if (isMatrix(obj)) {\n        for (var i = 0, l = obj.rows(); i < l; i++) {\n          for (var j = 0, l2 = obj.cols(); j < l2; j++) {\n            var element = obj.elements[i][j];\n            if (element.equals(item)) return new Symbol(1);\n          }\n        }\n      } else if (obj.elements) {\n        for (var i = 0, l = obj.elements.length; i < l; i++) {\n          if (obj.elements[i].equals(item)) return new Symbol(1);\n        }\n      }\n\n      return new Symbol(0);\n    }\n    /**\r\n     * A symbolic extension for sinc\r\n     * @param {Symbol} symbol\r\n     * @returns {Symbol}\r\n     */\n\n\n    function sinc(symbol) {\n      if (Settings.PARSE2NUMBER) {\n        if (symbol.isConstant()) {\n          return new Symbol(Math2.sinc(symbol));\n        }\n\n        return _.parse(format('sin({0})/({0})', symbol));\n      }\n\n      return _.symfunction('sinc', [symbol]);\n    }\n    /**\r\n     * A symbolic extension for exp. This will auto-convert all instances of exp(x) to e^x.\r\n     * Thanks @ Happypig375\r\n     * @param {Symbol} symbol\r\n     * @returns {Symbol}\r\n     */\n\n\n    function exp(symbol) {\n      if (symbol.fname === Settings.LOG && symbol.isLinear()) {\n        return _.pow(symbol.args[0], Symbol.create(symbol.multiplier));\n      }\n\n      return _.parse(format('e^({0})', symbol));\n    }\n    /**\r\n     * Converts value degrees to radians\r\n     * @param {Symbol} symbol\r\n     * @returns {Symbol}\r\n     */\n\n\n    function radians(symbol) {\n      return _.parse(format('({0})*pi/180', symbol));\n    }\n    /**\r\n     * Converts value from radians to degrees\r\n     * @param {Symbol} symbol\r\n     * @returns {Symbol}\r\n     */\n\n\n    function degrees(symbol) {\n      return _.parse(format('({0})*180/pi', symbol));\n    }\n\n    function nroots(symbol) {\n      var a, b;\n\n      if (symbol.group === FN && symbol.fname === '') {\n        a = Symbol.unwrapPARENS(_.parse(symbol).toLinear());\n        b = _.parse(symbol.power);\n      } else if (symbol.group === P) {\n        a = _.parse(symbol.value);\n        b = _.parse(symbol.power);\n      }\n\n      if (a && b && a.group === N && b.group === N) {\n        var _roots = [];\n        var parts = Symbol.toPolarFormArray(symbol);\n\n        var r = _.parse(a).abs().toString(); //https://en.wikipedia.org/wiki/De_Moivre%27s_formula\n\n\n        var x = arg(a).toString();\n        var n = b.multiplier.den.toString();\n        var p = b.multiplier.num.toString();\n        var formula = \"(({0})^({1})*(cos({3})+({2})*sin({3})))^({4})\";\n\n        for (var i = 0; i < n; i++) {\n          var t = evaluate(_.parse(format(\"(({0})+2*pi*({1}))/({2})\", x, i, n))).multiplier.toDecimal();\n\n          _roots.push(evaluate(_.parse(format(formula, r, n, Settings.IMAGINARY, t, p))));\n        }\n\n        return Vector.fromArray(_roots);\n      } else if (symbol.isConstant(true)) {\n        var sign = symbol.sign();\n        var x = evaluate(symbol.abs());\n\n        var root = _.sqrt(x);\n\n        var _roots = [root.clone(), root.negate()];\n        if (sign < 0) _roots = _roots.map(function (x) {\n          return _.multiply(x, Symbol.imaginary());\n        });\n      } else {\n        _roots = [_.parse(symbol)];\n      }\n\n      return Vector.fromArray(_roots);\n    }\n    /**\r\n     * Rationalizes a symbol\r\n     * @param {Symbol} symbol\r\n     * @returns {Symbol}\r\n     */\n\n\n    function rationalize(symbol) {\n      if (symbol.isComposite()) {\n        var retval = new Symbol(0);\n        var num, den, retnum, retden, a, b, n, d;\n        symbol.each(function (x) {\n          num = x.getNum();\n          den = x.getDenom();\n          retnum = retval.getNum();\n          retden = retval.getDenom();\n          a = _.multiply(den, retnum);\n          b = _.multiply(num, retden);\n          n = _.expand(_.add(a, b));\n          d = _.multiply(retden, den);\n          retval = _.divide(n, d);\n        }, true);\n        return retval;\n      }\n\n      return symbol;\n    }\n    /**\r\n     * The square root function\r\n     * @param {Symbol} symbol\r\n     * @returns {Symbol}\r\n     */\n\n\n    function sqrt(symbol) {\n      if (!isSymbol(symbol)) {\n        symbol = _.parse(symbol);\n      } // Exit early for EX\n\n\n      if (symbol.group === EX) {\n        return _.symfunction(SQRT, [symbol]);\n      }\n\n      if (symbol.fname === '' && symbol.power.equals(1)) symbol = symbol.args[0];\n      var is_negative = symbol.multiplier.sign() < 0;\n\n      if (Settings.PARSE2NUMBER) {\n        if (symbol.isConstant() && !is_negative) {\n          return new Symbol(bigDec.sqrt(symbol.multiplier.toDecimal()));\n        } else if (symbol.isImaginary()) {\n          return complex.sqrt(symbol);\n        } else if (symbol.group === S) {\n          return _.symfunction('sqrt', [symbol]);\n        }\n      }\n\n      var img,\n          retval,\n          isConstant = symbol.isConstant();\n\n      if (symbol.group === CB && symbol.isLinear()) {\n        var m = sqrt(Symbol(symbol.multiplier));\n\n        for (var s in symbol.symbols) {\n          var x = symbol.symbols[s];\n          m = _.multiply(m, sqrt(x));\n        }\n\n        retval = m;\n      } //if the symbol is already sqrt then it's that symbol^(1/4) and we can unwrap it\n      else if (symbol.fname === SQRT) {\n          var s = symbol.args[0];\n          var ms = symbol.multiplier;\n          s.setPower(symbol.power.multiply(new Frac(0.25)));\n          retval = s; //grab the multiplier\n\n          if (!ms.equals(1)) retval = _.multiply(sqrt(_.parse(ms)), retval);\n        } //if the symbol is a fraction then we don't keep can unwrap it. For instance\n        //no need to keep sqrt(x^(1/3))\n        else if (!symbol.power.isInteger()) {\n            symbol.setPower(symbol.power.multiply(new Frac(0.5)));\n            retval = symbol;\n          } else if (symbol.multiplier < 0 && symbol.group === S) {\n            var a = _.parse(symbol.multiplier).negate();\n\n            var b = _.parse(symbol).toUnitMultiplier().negate();\n\n            retval = _.multiply(_.symfunction(Settings.SQRT, [b]), sqrt(a));\n          } else {\n            //Related to issue #401. Since sqrt(a)*sqrt(b^-1) relates in issues, we'll change the form\n            //to sqrt(a)*sqrt(b)^1 for better simplification\n            //the sign of the power\n            var sign = symbol.power.sign(); //remove the sign\n\n            symbol.power = symbol.power.abs(); //if the symbols is imagary then we place in the imaginary part. We'll return it\n            //as a product\n\n            if (isConstant && symbol.multiplier.lessThan(0)) {\n              img = Symbol.imaginary();\n              symbol.multiplier = symbol.multiplier.abs();\n            }\n\n            var q = symbol.multiplier.toDecimal(),\n                qa = Math.abs(q),\n                t = Math.sqrt(qa);\n            var m; //it's a perfect square so take the square\n\n            if (isInt(t)) {\n              m = new Symbol(t);\n            } else if (isInt(q)) {\n              var factors = Math2.ifactor(q);\n              var tw = 1;\n\n              for (var x in factors) {\n                var n = factors[x],\n                    nn = n - n % 2; //get out the whole numbers\n\n                if (nn) {\n                  //if there is a whole number ...\n                  var w = Math.pow(x, nn);\n                  tw *= Math.pow(x, nn / 2); //add to total wholes\n\n                  q /= w; //reduce the number by the wholes\n                }\n              }\n\n              m = _.multiply(_.symfunction(SQRT, [new Symbol(q)]), new Symbol(tw));\n            } else {\n              //reduce the numerator and denominator using prime factorization\n              var c = [new Symbol(symbol.multiplier.num), new Symbol(symbol.multiplier.den)];\n              var r = [new Symbol(1), new Symbol(1)];\n              var sq = [new Symbol(1), new Symbol(1)];\n\n              for (var i = 0; i < 2; i++) {\n                var n = c[i]; //get the prime factors and loop through each.\n\n                pfactor(n).each(function (x) {\n                  x = Symbol.unwrapPARENS(x);\n                  var b = x.clone().toLinear();\n                  var p = Number(x.power); //We'll consider it safe to use the native Number since 2^1000 is already a pretty huge number\n\n                  var rem = p % 2; //get the remainder. This will be 1 if 3 since sqrt(n^2) = n where n is positive\n\n                  var w = (p - rem) / 2; //get the whole numbers of n/2\n\n                  r[i] = _.multiply(r[i], _.pow(b, new Symbol(w)));\n                  sq[i] = _.multiply(sq[i], sqrt(_.pow(b, new Symbol(rem))));\n                });\n              }\n\n              m = _.divide(_.multiply(r[0], sq[0]), _.multiply(r[1], sq[1]));\n            } //strip the multiplier since we already took the sqrt\n\n\n            symbol = symbol.toUnitMultiplier(true); //if the symbol is one just return one and not the sqrt function\n\n            if (symbol.isOne()) {\n              retval = symbol;\n            } else if (even(symbol.power.toString())) {\n              //just raise it to the 1/2\n              retval = _.pow(symbol.clone(), new Symbol(0.5));\n            } else {\n              retval = _.symfunction(SQRT, [symbol]);\n            } //put back the sign that was removed earlier\n\n\n            if (sign < 0) retval.power.negate();\n            if (m) retval = _.multiply(m, retval);\n            if (img) retval = _.multiply(img, retval);\n          }\n\n      if (is_negative && Settings.PARSE2NUMBER) return _.parse(retval);\n      return retval;\n    }\n    /**\r\n     * The cube root function\r\n     * @param {Symbol} symbol\r\n     * @returns {Symbol}\r\n     */\n\n\n    function cbrt(symbol) {\n      if (!symbol.isConstant(true)) {\n        var retval;\n        var n = symbol.power / 3; //take the cube root of the multplier\n\n        var m = _.pow(_.parse(symbol.multiplier), new Symbol(1 / 3)); //strip the multiplier\n\n\n        var sym = symbol.toUnitMultiplier(); //simplify the power\n\n        if (isInt(n)) {\n          retval = _.pow(sym.toLinear(), _.parse(n));\n        } else {\n          if (sym.group === CB) {\n            retval = new Symbol(1);\n            sym.each(function (x) {\n              retval = _.multiply(retval, cbrt(x));\n            });\n          } else {\n            retval = _.symfunction('cbrt', [sym]);\n          }\n        }\n\n        return _.multiply(m, retval);\n      }\n\n      return nthroot(symbol, new Symbol(3));\n    }\n\n    function scientific(symbol, sigfigs) {\n      //Just set the flag and keep it moving. Symbol.toString will deal with how to\n      //display this\n      symbol.scientific = sigfigs || 10;\n      return symbol;\n    }\n    /**\r\n     *\r\n     * @param {Symbol} num - the number being raised\r\n     * @param {Symbol} p - the exponent\r\n     * @param {type} prec - the precision wanted\r\n     * @param {bool} asbig - true if a bigDecimal is wanted\r\n     * @returns {Symbol}\r\n     */\n\n\n    function nthroot(num, p, prec, asbig) {\n      //clone p and convert to a number if possible\n      p = evaluate(_.parse(p)); //cannot calculate if p = 0. nthroot(0, 0) => 0^(1/0) => undefined\n\n      if (p.equals(0)) {\n        throw new UndefinedError('Unable to calculate nthroots of zero');\n      } //Stop computation if it negative and even since we have an imaginary result\n\n\n      if (num < 0 && even(p)) throw new Error('Cannot calculate nthroot of negative number for even powers'); //return non numeric values unevaluated\n\n      if (!num.isConstant(true)) {\n        return _.symfunction('nthroot', arguments);\n      } //evaluate numeric values\n\n\n      if (num.group !== N) {\n        num = evaluate(num);\n      } //default is to return a big value\n\n\n      if (typeof asbig === 'undefined') asbig = true;\n      prec = prec || 25;\n      var sign = num.sign();\n      var retval;\n      var ans;\n\n      if (sign < 0) {\n        num = abs(num); //remove the sign\n      }\n\n      if (isInt(num) && p.isConstant()) {\n        if (num < 18446744073709551616) {\n          //2^64\n          ans = Frac.create(Math.pow(num, 1 / p));\n        } else {\n          ans = Math2.nthroot(num, p);\n        }\n\n        var retval;\n\n        if (asbig) {\n          retval = new Symbol(ans);\n        }\n\n        retval = new Symbol(ans.toDecimal(prec));\n        return _.multiply(new Symbol(sign), retval);\n      }\n    }\n\n    function pfactor(symbol) {\n      //Fix issue #458 | nerdamer(\"sqrt(1-(3.3333333550520926e-7)^2)\").evaluate().text()\n      //More Big Number issues >:(\n      if (symbol.greaterThan(9.999999999998891e+41) || symbol.equals(-1)) return symbol; //Fix issue #298\n\n      if (symbol.equals(Math.PI)) return new Symbol(Math.PI); //evaluate the symbol to merge constants\n\n      symbol = evaluate(symbol.clone());\n\n      if (symbol.isConstant()) {\n        var retval = new Symbol(1);\n        var m = symbol.toString();\n\n        if (isInt(m)) {\n          var factors = Math2.ifactor(m);\n\n          for (var factor in factors) {\n            var p = factors[factor];\n            retval = _.multiply(retval, _.symfunction('parens', [new Symbol(factor).setPower(new Frac(p))]));\n          }\n        } else {\n          var n = pfactor(new Symbol(symbol.multiplier.num));\n          var d = pfactor(new Symbol(symbol.multiplier.den));\n          retval = _.multiply(_.symfunction('parens', [n]), _.symfunction('parens', [d]).invert());\n        }\n      } else retval = _.symfunction('pfactor', arguments);\n\n      return retval;\n    }\n    /**\r\n     * Get's the real part of a complex number. Return number if real\r\n     * @param {Symbol} symbol\r\n     * @returns {Symbol}\r\n     */\n\n\n    function realpart(symbol) {\n      return symbol.realpart();\n    }\n    /**\r\n     * Get's the imaginary part of a complex number\r\n     * @param {Symbol} symbol\r\n     * @returns {Symbol}\r\n     */\n\n\n    function imagpart(symbol) {\n      return symbol.imagpart();\n    }\n    /**\r\n     * Computes the conjugate of a complex number\r\n     * @param {Symbol} symbol\r\n     * @returns {Symbol}\r\n     */\n\n\n    function conjugate(symbol) {\n      var re = symbol.realpart();\n      var im = symbol.imagpart();\n      return _.add(re, _.multiply(im.negate(), Symbol.imaginary()));\n    }\n    /**\r\n     * Returns the arugment of a complex number\r\n     * @param {Symbol} symbol\r\n     * @returns {Symbol}\r\n     */\n\n\n    function arg(symbol) {\n      var re = symbol.realpart();\n      var im = symbol.imagpart();\n      if (re.isConstant() && im.isConstant()) return new Symbol(Math.atan2(im, re));\n      return _.symfunction('atan2', [im, re]);\n    }\n    /**\r\n     * Returns the arugment of a complex number\r\n     * @param {Symbol} symbol\r\n     * @returns {Symbol}\r\n     */\n\n\n    function arg(symbol) {\n      var re = symbol.realpart();\n      var im = symbol.imagpart();\n\n      if (re.isConstant() && im.isConstant()) {\n        if (im.equals(0) && re.equals(-1)) {\n          return _.parse('pi');\n        } else if (im.equals(1) && re.equals(0)) {\n          return _.parse('pi/2');\n        } else if (im.equals(1) && re.equals(1)) {\n          return _.parse('pi/4');\n        }\n\n        return new Symbol(Math.atan2(im, re));\n      }\n\n      return _.symfunction('atan2', [im, re]);\n    }\n    /**\r\n     * Returns the polarform of a complex number\r\n     * @param {Symbol} symbol\r\n     * @returns {Symbol}\r\n     */\n\n\n    function polarform(symbol) {\n      var p, r, e, theta;\n      p = Symbol.toPolarFormArray(symbol);\n      theta = p[1];\n      r = p[0];\n      e = _.parse(format('e^({0}*({1}))', Settings.IMAGINARY, theta));\n      return _.multiply(r, e);\n    }\n    /**\r\n     * Returns the rectangular form of a complex number. Does not work for symbolic coefficients\r\n     * @param {Symbol} symbol\r\n     * @returns {Symbol}\r\n     */\n\n\n    function rectform(symbol) {\n      //TODO: e^((i*pi)/4)\n      var original = symbol.clone();\n\n      try {\n        var f, p, q, s, h, d, n;\n        f = decompose_fn(symbol, 'e', true);\n        p = _.divide(f.x.power, Symbol.imaginary());\n        q = evaluate(trig.tan(p));\n        s = _.pow(f.a, new Symbol(2));\n        d = q.getDenom(true);\n        n = q.getNum();\n        h = Symbol.hyp(n, d); //check\n\n        if (h.equals(f.a)) {\n          return _.add(d, _.multiply(Symbol.imaginary(), n));\n        } else {\n          return original;\n        }\n      } catch (e) {\n        return original;\n      }\n    }\n\n    function symMinMax(f, args) {\n      args.map(function (x) {\n        x.numVal = evaluate(x).multiplier;\n      });\n      var l, a, b, a_val, b_val;\n\n      while (true) {\n        l = args.length;\n        if (l < 2) return args[0];\n        a = args.pop();\n        b = args[l - 2];\n\n        if (f === 'min' ? a.numVal < b.numVal : a.numVal > b.numVal) {\n          args.pop();\n          args.push(a);\n        }\n      }\n    }\n    /**\r\n     * Returns maximum of a set of numbers\r\n     * @returns {Symbol}\r\n     */\n\n\n    function max() {\n      var args = [].slice.call(arguments);\n      if (allSame(args)) return args[0];\n      if (allNumbers(args)) return new Symbol(Math.max.apply(null, args));\n      if (Settings.SYMBOLIC_MIN_MAX && allConstants(args)) return symMinMax('max', args);\n      return _.symfunction('max', args);\n    }\n    /**\r\n     * Returns minimum of a set of numbers\r\n     * @returns {Symbol}\r\n     */\n\n\n    function min() {\n      var args = [].slice.call(arguments);\n      if (allSame(args)) return args[0];\n      if (allNumbers(args)) return new Symbol(Math.min.apply(null, args));\n      if (Settings.SYMBOLIC_MIN_MAX && allConstants(args)) return symMinMax('min', args);\n      return _.symfunction('min', args);\n    }\n    /**\r\n     * Returns the sign of a number\r\n     * @param {Symbol} x\r\n     * @returns {Symbol}\r\n     */\n\n\n    function sign(x) {\n      if (x.isConstant(true)) return new Symbol(Math.sign(evaluate(x)));\n      return _.symfunction('sign', arguments);\n    }\n\n    function sort(symbol, opt) {\n      opt = opt ? opt.toString() : 'asc';\n\n      var getval = function (e) {\n        if (e.group === N) return e.multiplier;\n\n        if (e.group === FN) {\n          if (e.fname === '') return getval(e.args[0]);\n          return e.fname;\n        }\n\n        if (e.group === S) return e.power;\n        return e.value;\n      };\n\n      var symbols = isVector(symbol) ? symbol.elements : symbol.collectSymbols();\n      return new Vector(symbols.sort(function (a, b) {\n        var aval = getval(a),\n            bval = getval(b);\n        if (opt === 'desc') return bval - aval;\n        return aval - bval;\n      }));\n    }\n    /**\r\n     * The log function\r\n     * @param {Symbol} symbol\r\n     * @param {Symbol} base\r\n     * @returns {Symbol}\r\n     */\n\n\n    function log(symbol, base) {\n      if (symbol.equals(1)) {\n        return new Symbol(0);\n      }\n\n      var retval;\n\n      if (symbol.fname === SQRT && symbol.multiplier.equals(1)) {\n        retval = _.divide(log(symbol.args[0]), new Symbol(2));\n\n        if (symbol.power.sign() < 0) {\n          retval.negate();\n        } // Exit early\n\n\n        return retval;\n      } //log(0) is undefined so complain\n\n\n      if (symbol.equals(0)) {\n        throw new UndefinedError(Settings.LOG + '(0) is undefined!');\n      } //deal with imaginary values\n\n\n      if (symbol.isImaginary()) {\n        return complex.evaluate(symbol, Settings.LOG);\n      }\n\n      if (symbol.isConstant() && typeof base !== 'undefined' && base.isConstant()) {\n        var log_sym = Math.log(symbol);\n        var log_base = Math.log(base);\n        retval = new Symbol(log_sym / log_base);\n      } else if (symbol.group === EX && symbol.power.multiplier.lessThan(0) || symbol.power.toString() === '-1') {\n        symbol.power.negate(); //move the negative outside but keep the positive inside :)\n\n        retval = log(symbol).negate();\n      } else if (symbol.value === 'e' && symbol.multiplier.equals(1)) {\n        var p = symbol.power;\n        retval = isSymbol(p) ? p : new Symbol(p);\n      } else if (symbol.group === FN && symbol.fname === 'exp') {\n        var s = symbol.args[0];\n        if (symbol.multiplier.equals(1)) retval = _.multiply(s, new Symbol(symbol.power));else retval = _.symfunction(Settings.LOG, [symbol]);\n      } else if (Settings.PARSE2NUMBER && isNumericSymbol(symbol)) {\n        // Parse for safety.\n        symbol = _.parse(symbol);\n        var img_part;\n\n        if (symbol.multiplier.lessThan(0)) {\n          symbol.negate();\n          img_part = _.multiply(new Symbol(Math.PI), new Symbol('i'));\n        }\n\n        retval = new Symbol(Math.log(symbol.multiplier.toDecimal()));\n\n        if (img_part) {\n          retval = _.add(retval, img_part);\n        }\n      } else {\n        var s;\n\n        if (!symbol.power.equals(1) && !symbol.contains('e')) {\n          s = symbol.group === EX ? symbol.power : new Symbol(symbol.power);\n          symbol.toLinear();\n        } //log(a,a) = 1 since the base is allowed to be changed.\n        //This was pointed out by Happypig375 in issue #280\n\n\n        if (arguments.length > 1 && allSame(arguments)) {\n          retval = new Symbol(1);\n        } else {\n          retval = _.symfunction(Settings.LOG, arguments);\n        }\n\n        if (s) retval = _.multiply(s, retval);\n      }\n\n      return retval;\n    }\n    /**\r\n     * Round a number up to s decimal places\r\n     * @param {Number} x\r\n     * @param {int} s - the number of decimal places\r\n     * @returns {undefined}\r\n     */\n\n\n    function round(x, s) {\n      var sIsConstant = s && s.isConstant() || typeof s === 'undefined';\n\n      if (x.isConstant() && sIsConstant) {\n        var v, e, exp, retval;\n        v = x; //round the coefficient of then number but not the actual decimal value\n        //we know this because a negative number was passed\n\n        if (s && s.lessThan(0)) {\n          s = abs(s); //convert the number to exponential form\n\n          e = Number(x).toExponential().toString().split('e'); //point v to the coefficient of then number\n\n          v = e[0]; //set the expontent\n\n          exp = e[1];\n        } //round the number to the requested precision\n\n\n        retval = new Symbol(nround(v, Number(s || 0))); //if there's a exponent then put it back\n\n        return _.multiply(retval, _.pow(new Symbol(10), new Symbol(exp || 0)));\n      }\n\n      return _.symfunction('round', arguments);\n    }\n    /**\r\n     * Gets the quadrant of the trig function\r\n     * @param {Frac} m\r\n     * @returns {Int}\r\n     */\n\n\n    function getQuadrant(m) {\n      var v = m % 2,\n          quadrant;\n      if (v < 0) v = 2 + v; //put it in terms of pi\n\n      if (v >= 0 && v <= 0.5) quadrant = 1;else if (v > 0.5 && v <= 1) quadrant = 2;else if (v > 1 && v <= 1.5) quadrant = 3;else quadrant = 4;\n      return quadrant;\n    }\n    /*\r\n     * Serves as a bridge between numbers and bigNumbers\r\n     * @param {Frac|Number} n\r\n     * @returns {Symbol}\r\n     */\n\n\n    function bigConvert(n) {\n      if (!isFinite(n)) {\n        var sign = Math.sign(n);\n        var r = new Symbol(String(Math.abs(n)));\n        r.multiplier = r.multiplier.multiply(new Frac(sign));\n        return r;\n      }\n\n      if (isSymbol(n)) return n;\n\n      if (typeof n === 'number') {\n        try {\n          n = Frac.simple(n);\n        } catch (e) {\n          n = new Frac(n);\n        }\n      }\n\n      var symbol = new Symbol(0);\n      symbol.multiplier = n;\n      return symbol;\n    }\n\n    ;\n\n    function clean(symbol) {\n      // handle functions with numeric values\n      // handle denominator within denominator\n      // handle trig simplifications\n      var g = symbol.group,\n          retval; //Now let's get to work\n\n      if (g === CP) {\n        var num = symbol.getNum(),\n            den = symbol.getDenom() || new Symbol(1),\n            p = Number(symbol.power),\n            factor = new Symbol(1);\n\n        if (Math.abs(p) === 1) {\n          den.each(function (x) {\n            if (x.group === CB) {\n              factor = _.multiply(factor, clean(x.getDenom()));\n            } else if (x.power.lessThan(0)) {\n              factor = _.multiply(factor, clean(x.clone().toUnitMultiplier()));\n            }\n          });\n          var new_den = new Symbol(0); //now divide out the factor and add to new den\n\n          den.each(function (x) {\n            new_den = _.add(_.divide(x, factor.clone()), new_den);\n          });\n          factor.invert(); //invert so it can be added to the top\n\n          var new_num;\n\n          if (num.isComposite()) {\n            new_num = new Symbol(0);\n            num.each(function (x) {\n              new_num = _.add(_.multiply(clean(x), factor.clone()), new_num);\n            });\n          } else new_num = _.multiply(factor, num);\n\n          retval = _.divide(new_num, new_den);\n        }\n      } else if (g === CB) {\n        retval = new Symbol(1);\n        symbol.each(function (x) {\n          retval = _.multiply(retval, _.clean(x));\n        });\n      } else if (g === FN) {\n        if (symbol.args.length === 1 && symbol.args[0].isConstant()) retval = block('PARSE2NUMBER', function () {\n          return _.parse(symbol);\n        }, true);\n      }\n\n      if (!retval) retval = symbol;\n      return retval;\n    }\n    /**\r\n     * A wrapper for the expand function\r\n     * @param {Symbol} symbol\r\n     * @returns {Symbol}\r\n     */\n\n\n    function expandall(symbol, opt) {\n      opt = opt || {\n        expand_denominator: true,\n        expand_functions: true\n      };\n      return expand(symbol, opt);\n    }\n    /**\r\n     * Expands a symbol\r\n     * @param symbol\r\n     */\n    // Old expand\n\n\n    function expand(symbol, opt) {\n      if (Array.isArray(symbol)) {\n        return symbol.map(function (x) {\n          return expand(x, opt);\n        });\n      }\n\n      opt = opt || {}; //deal with parenthesis\n\n      if (symbol.group === FN && symbol.fname === '') {\n        var f = expand(symbol.args[0], opt);\n        var x = expand(_.pow(f, _.parse(symbol.power)), opt);\n        return _.multiply(_.parse(symbol.multiplier), x).distributeMultiplier();\n      } // We can expand these groups so no need to waste time. Just return and be done.\n\n\n      if ([N, P, S].indexOf(symbol.group) !== -1) {\n        return symbol; //nothing to do\n      }\n\n      var original = symbol.clone(); // Set up a try-catch block. If anything goes wrong then we simply return the original symbol\n\n      try {\n        // Store the power and multiplier\n        var m = symbol.multiplier.toString();\n        var p = Number(symbol.power);\n        var retval = symbol; // Handle (a+b)^2 | (x+x^2)^2\n\n        if (symbol.isComposite() && isInt(symbol.power) && symbol.power > 0) {\n          var n = p - 1; // Strip the expression of it's multiplier and power. We'll call it f. The power will be p and the multiplier m.\n\n          var f = new Symbol(0);\n          symbol.each(function (x) {\n            f = _.add(f, expand(_.parse(x), opt));\n          });\n\n          var expanded = _.parse(f);\n\n          for (var i = 0; i < n; i++) {\n            expanded = mix(expanded, f, opt);\n          }\n\n          retval = _.multiply(_.parse(m), expanded).distributeMultiplier();\n        } else if (symbol.group === FN && opt.expand_functions === true) {\n          var args = []; // Expand function the arguments\n\n          symbol.args.forEach(function (x) {\n            args.push(expand(x, opt));\n          }); // Put back the power and multiplier\n\n          retval = _.pow(_.symfunction(symbol.fname, args), _.parse(symbol.power));\n          retval = _.multiply(retval, _.parse(symbol.multiplier));\n        } else if (symbol.isComposite() && isInt(symbol.power) && symbol.power < 0 && opt.expand_denominator === true) {\n          // Invert it. Expand it and then re-invert it.\n          symbol = symbol.invert();\n          retval = expand(symbol, opt);\n          retval.invert();\n        } else if (symbol.group === CB) {\n          var rank = function (s) {\n            switch (s.group) {\n              case CP:\n                return 0;\n\n              case PL:\n                return 1;\n\n              case CB:\n                return 2;\n\n              case FN:\n                return 3;\n\n              default:\n                return 4;\n            }\n          }; // Consider (a+b)(c+d). The result will be (a*c+a*d)+(b*c+b*d).\n          // We start by moving collecting the symbols. We want others>FN>CB>PL>CP\n\n\n          var symbols = symbol.collectSymbols().sort(function (a, b) {\n            return rank(b) - rank(a);\n          }) // Distribute the power to each symbol and expand\n          .map(function (s) {\n            var x = _.pow(s, _.parse(p));\n\n            var e = expand(x, opt);\n            return e;\n          });\n          var f = symbols.pop(); // If the first symbols isn't a composite then we're done\n\n          if (f.isComposite() && f.isLinear()) {\n            symbols.forEach(function (s) {\n              f = mix(f, s, opt);\n            }); // If f is of group PL or CP then we can expand some more\n\n            if (f.isComposite()) {\n              if (f.power > 1) {\n                f = expand(_.pow(f, _.parse(f.power)), opt);\n              } // Put back the multiplier\n\n\n              retval = _.multiply(_.parse(m), f).distributeMultiplier();\n              ;\n            } else {\n              // Everything is expanded at this point so if it's still a CB\n              // then just return the symbol\n              retval = f;\n            }\n          } else {\n            // Just multiply back in the expanded form of each\n            retval = f;\n            symbols.forEach(function (s) {\n              retval = _.multiply(retval, s);\n            }); // Put back the multiplier\n\n            retval = _.multiply(retval, _.parse(m)).distributeMultiplier();\n          } // TODO: This exists solely as a quick fix for sqrt(11)*sqrt(33) not simplifying.\n\n\n          if (retval.group === CB) {\n            retval = _.parse(retval);\n          }\n        } else {\n          // Otherwise just return the expression\n          retval = symbol;\n        } // Final cleanup and return\n\n\n        return retval;\n      } catch (e) {\n        return original;\n      }\n\n      return original;\n    }\n    /**\r\n     * Returns an identity matrix of nxn\r\n     * @param {Number} n\r\n     * @returns {Matrix}\r\n     */\n\n\n    function imatrix(n) {\n      return Matrix.identity(n);\n    }\n    /**\r\n     * Retrieves and item from a vector\r\n     * @param {Vector} vector\r\n     * @param {Number} index\r\n     * @returns {Vector|Symbol}\r\n     */\n\n\n    function vecget(vector, index) {\n      if (index.isConstant() && isInt(index)) return vector.elements[index];\n      return _.symfunction('vecget', arguments);\n    }\n    /**\r\n     * Removes duplicates from a vector\r\n     * @param {Vector} vector\r\n     * @param {Number} tolerance\r\n     * @returns {Vector}\r\n     */\n\n\n    function vectrim(vector, tolerance) {\n      tolerance = typeof tolerance === 'undefined' ? 1e-14 : tolerance;\n      vector = vector.clone();\n      tolerance = Number(tolerance); //place algebraic solutions first\n\n      vector.elements.sort(function (a, b) {\n        return b.group - a.group;\n      }); //depending on the start point we may have duplicates so we need to clean those up a bit.\n      //start by creating an object with the solution and the numeric value. This way we don't destroy algebraic values\n\n      vector.elements = removeDuplicates(vector.elements, function (a, b) {\n        var diff = Number(_.subtract(evaluate(a), evaluate(b)).abs());\n        return diff <= tolerance;\n      });\n      return vector;\n    }\n    /**\r\n     * Set a value for a vector at a given index\r\n     * @param {Vector} vector\r\n     * @param {Number} index\r\n     * @param {Symbol} value\r\n     * @returns {Vector}\r\n     */\n\n\n    function vecset(vector, index, value) {\n      if (!index.isConstant) return _.symfunction('vecset', arguments);\n      vector.elements[index] = value;\n      return vector;\n    }\n\n    function matget(matrix, i, j) {\n      if (i.isConstant() && j.isConstant()) return matrix.elements[i][j];\n      return _.symfunction('matget', arguments);\n    }\n\n    function matgetrow(matrix, i) {\n      if (i.isConstant()) return new Matrix(matrix.elements[i]);\n      return _.symfunction('matgetrow', arguments);\n    }\n\n    function matsetrow(matrix, i, x) {\n      //handle symbolics\n      if (!i.isConstant()) return _.symfunction('matsetrow', arguments);\n      if (matrix.elements[i].length !== x.elements.length) throw new DimensionError('Matrix row must match row dimensions!');\n      var M = matrix.clone();\n      M.elements[i] = x.clone().elements;\n      return M;\n    }\n\n    function matgetcol(matrix, col_index) {\n      //handle symbolics\n      if (!col_index.isConstant()) return _.symfunction('matgetcol', arguments);\n      col_index = Number(col_index);\n      var M = Matrix.fromArray([]);\n      matrix.each(function (x, i, j) {\n        if (j === col_index) {\n          M.elements.push([x.clone()]);\n        }\n      });\n      return M;\n    }\n\n    function matsetcol(matrix, j, col) {\n      //handle symbolics\n      if (!j.isConstant()) return _.symfunction('matsetcol', arguments);\n      j = Number(j);\n      if (matrix.rows() !== col.elements.length) throw new DimensionError('Matrix columns must match number of columns!');\n      col.each(function (x, i) {\n        matrix.set(i - 1, j, x.elements[0].clone());\n      });\n      return matrix;\n    }\n\n    function matset(matrix, i, j, value) {\n      matrix.elements[i][j] = value;\n      return matrix;\n    } //the constructor for vectors\n\n\n    function vector() {\n      return new Vector([].slice.call(arguments));\n    } //the constructor for matrices\n\n\n    function matrix() {\n      return Matrix.fromArray(arguments);\n    } //the constructor for sets\n\n\n    function set() {\n      return Set.fromArray(arguments);\n    }\n\n    function determinant(symbol) {\n      if (isMatrix(symbol)) {\n        return symbol.determinant();\n      }\n\n      return symbol;\n    }\n\n    function size(symbol) {\n      var retval;\n      if (isMatrix(symbol)) retval = [new Symbol(symbol.cols()), new Symbol(symbol.rows())];else if (isVector(symbol) || isSet(symbol)) retval = new Symbol(symbol.elements.length);else err('size expects a matrix or a vector');\n      return retval;\n    }\n\n    function dot(vec1, vec2) {\n      if (isVector(vec1) && isVector(vec2)) return vec1.dot(vec2);\n      err('function dot expects 2 vectors');\n    }\n\n    function cross(vec1, vec2) {\n      if (isVector(vec1) && isVector(vec2)) return vec1.cross(vec2);\n      err('function cross expects 2 vectors');\n    }\n\n    function transpose(mat) {\n      if (isMatrix(mat)) return mat.transpose();\n      err('function transpose expects a matrix');\n    }\n\n    function invert(mat) {\n      if (isMatrix(mat)) return mat.invert();\n      err('invert expects a matrix');\n    } //basic set functions\n\n\n    function union(set1, set2) {\n      return set1.union(set2);\n    }\n\n    function intersection(set1, set2) {\n      return set1.intersection(set2);\n    }\n\n    function contains(set1, e) {\n      return set1.contains(e);\n    }\n\n    function difference(set1, set2) {\n      return set1.difference(set2);\n    }\n\n    function intersects(set1, set2) {\n      return new Symbol(Number(set1.intersects(set2)));\n    }\n\n    function is_subset(set1, set2) {\n      return new Symbol(Number(set1.is_subset(set2)));\n    }\n\n    function print() {\n      arguments2Array(arguments).map(function (x) {\n        console.log(x.toString());\n      });\n    }\n\n    function testSQRT(symbol) {\n      //wrap the symbol in sqrt. This eliminates one more check down the line.\n      if (!isSymbol(symbol.power) && symbol.power.absEquals(0.5)) {\n        var sign = symbol.power.sign(); //don't devide the power directly. Notice the use of toString. This makes it possible\n        //to use a bigNumber library in the future\n\n        var retval = sqrt(symbol.group === P ? new Symbol(symbol.value) : symbol.toLinear()); //place back the sign of the power\n\n        if (sign < 0) retval.invert();\n        return retval;\n      }\n\n      return symbol;\n    } //try to reduce a symbol by pulling its power\n\n\n    function testPow(symbol) {\n      if (symbol.group === P) {\n        var v = symbol.value;\n        var fct = primeFactors(v)[0]; //safety\n\n        if (!fct) {\n          warn('Unable to compute prime factors. This should not happen. Please review and report.');\n          return symbol;\n        }\n\n        var n = new Frac(Math.log(v) / Math.log(fct)),\n            p = n.multiply(symbol.power); //we don't want a more complex number than before\n\n        if (p.den > symbol.power.den) return symbol;\n        if (isInt(p)) symbol = Symbol(Math.pow(fct, p));else symbol = new Symbol(fct).setPower(p);\n      }\n\n      return symbol;\n    } //Link the functions to the parse so they're available outside of the library.\n    //This is strictly for convenience and may be deprecated.\n\n\n    this.expand = expand;\n    this.round = round;\n    this.clean = clean;\n    this.sqrt = sqrt;\n    this.cbrt = cbrt;\n    this.abs = abs;\n    this.log = log;\n    this.rationalize = rationalize;\n    this.nthroot = nthroot;\n    this.arg = arg;\n    this.conjugate = conjugate;\n    this.imagpart = imagpart;\n    this.realpart = realpart; //TODO:\n    //Utilize the function below instead of the linked function\n\n    this.getFunction = function (name) {\n      return functions[name][0];\n    }; //Parser.methods ===============================================================\n\n\n    this.addPreprocessor = function (name, action, order, shift_cells) {\n      var names = preprocessors.names;\n      var actions = preprocessors.actions;\n      if (typeof action !== 'function') //the person probably forgot to specify a name\n        throw new PreprocessorError('Incorrect parameters. Function expected!');\n\n      if (!order) {\n        names.push(name);\n        actions.push(action);\n      } else {\n        if (shift_cells) {\n          names.splice(order, 0, name);\n          actions.splice(order, 0, action);\n        } else {\n          names[order] = name;\n          actions[order] = action;\n        }\n      }\n    };\n\n    this.getPreprocessors = function () {\n      var preprocessors = {};\n\n      for (var i = 0, l = preprocessors.names.length; i < l; i++) {\n        var name = preprocessors.names[i];\n        preprocessors[name] = {\n          order: i,\n          action: preprocessors.actions[i]\n        };\n      }\n\n      return preprocessors;\n    };\n\n    this.removePreprocessor = function (name, shift_cells) {\n      var i = preprocessors.names.indexOf(name);\n\n      if (shift_cells) {\n        remove(preprocessors.names, i);\n        remove(preprocessors.actions, i);\n      } else {\n        preprocessors.names[i] = undefined;\n        preprocessors.actions[i] = undefined;\n      }\n    }; //The loader for functions which are not part of Math2\n\n\n    this.mapped_function = function () {\n      var subs = {},\n          params = this.params;\n\n      for (var i = 0; i < params.length; i++) {\n        subs[params[i]] = String(arguments[i]);\n      }\n\n      return _.parse(this.body, subs);\n    };\n    /**\r\n     * Adds two symbols\r\n     * @param {Symbol} a\r\n     * @param {Symbol} b\r\n     * @returns {Symbol}\r\n     */\n\n\n    this.add = function (a, b) {\n      var aIsSymbol = isSymbol(a),\n          bIsSymbol = isSymbol(b); //we're dealing with two symbols\n\n      if (aIsSymbol && bIsSymbol) {\n        //forward the adding of symbols with units to the Unit module\n        if (a.unit || b.unit) {\n          return _.Unit.add(a, b);\n        } //handle Infinity\n        //https://www.encyclopediaofmath.org/index.php/Infinity\n\n\n        if (a.isInfinity || b.isInfinity) {\n          var aneg = a.multiplier.lessThan(0),\n              bneg = b.multiplier.lessThan(0);\n\n          if (a.isInfinity && b.isInfinity && aneg !== bneg) {\n            throw new UndefinedError('(' + a + ')+(' + b + ') is not defined!');\n          }\n\n          var inf = Symbol.infinity();\n          if (bneg) inf.negate();\n          return inf;\n        }\n\n        if (a.isComposite() && a.isLinear() && b.isComposite() && b.isLinear()) {\n          a.distributeMultiplier();\n          b.distributeMultiplier(); // Fix for issue #606\n\n          if (b.length > a.length && a.group === b.group) {\n            [a, b] = [b, a];\n          }\n        } //no need to waste time on zeroes\n\n\n        if (a.multiplier.equals(0)) return b;\n        if (b.multiplier.equals(0)) return a;\n\n        if (a.isConstant() && b.isConstant() && Settings.PARSE2NUMBER) {\n          var result = new Symbol(a.multiplier.add(b.multiplier).toDecimal(Settings.PRECISION));\n          return result;\n        }\n\n        var g1 = a.group,\n            g2 = b.group,\n            ap = a.power.toString(),\n            bp = b.power.toString(); //always keep the greater group on the left.\n\n        if (g1 < g2 || g1 === g2 && ap > bp && bp > 0) {\n          return this.add(b, a);\n        }\n        /*note to self: Please don't forget about this dilemma ever again. In this model PL and CB goes crazy\r\n         * because it doesn't know which one to prioritize. */\n        //correction to PL dilemma\n\n\n        if (g1 === CB && g2 === PL && a.value === b.value) {\n          //swap\n          var t = a;\n          a = b;\n          b = t;\n          g1 = a.group;\n          g2 = b.group;\n          ap = a.power.toString();\n          bp = b.power.toString();\n        }\n\n        var powEQ = ap === bp,\n            v1 = a.value,\n            v2 = b.value,\n            aIsComposite = a.isComposite(),\n            bIsComposite = b.isComposite(),\n            h1,\n            h2,\n            result;\n        if (aIsComposite) h1 = text(a, 'hash');\n        if (bIsComposite) h2 = text(b, 'hash');\n\n        if (g1 === CP && g2 === CP && b.isLinear() && !a.isLinear() && h1 !== h2) {\n          return this.add(b, a);\n        } //PL & PL should compare hashes and not values e.g. compare x+x^2 with x+x^3 and not x with x\n\n\n        if (g1 === PL && g2 === PL) {\n          v1 = h1;\n          v2 = h2;\n        }\n\n        var PN = g1 === P && g2 === N,\n            PNEQ = a.value === b.multiplier.toString(),\n            valEQ = v1 === v2 || h1 === h2 && h1 !== undefined || PN && PNEQ; //equal values, equal powers\n\n        if (valEQ && powEQ && g1 === g2) {\n          //make sure to convert N to something P can work with\n          if (PN) b = b.convert(P); //CL\n          //handle PL\n\n          if (g1 === PL && (g2 === S || g2 === P)) {\n            a.distributeMultiplier();\n            result = a.attach(b);\n          } else {\n            result = a; //CL\n\n            if (a.multiplier.isOne() && b.multiplier.isOne() && g1 === CP && a.isLinear() && b.isLinear()) {\n              for (var s in b.symbols) {\n                var x = b.symbols[s];\n                result.attach(x);\n              }\n            } else result.multiplier = result.multiplier.add(b.multiplier);\n          }\n        } //equal values uneven powers\n        else if (valEQ && g1 !== PL) {\n            //break the tie for e.g. (x+1)+((x+1)^2+(x+1)^3)\n            if (g1 === CP && g2 === PL) {\n              b.insert(a, 'add');\n              result = b;\n            } else {\n              result = Symbol.shell(PL).attach([a, b]); //update the hash\n\n              result.value = g1 === PL ? h1 : v1;\n            }\n          } else if (aIsComposite && a.isLinear()) {\n            var canIterate = g1 === g2,\n                bothPL = g1 === PL && g2 === PL; //we can only iterate group PL if they values match\n\n            if (bothPL) canIterate = a.value === b.value; //distribute the multiplier over the entire symbol\n\n            a.distributeMultiplier();\n\n            if (b.isComposite() && b.isLinear() && canIterate) {\n              b.distributeMultiplier(); //CL\n\n              for (var s in b.symbols) {\n                var x = b.symbols[s];\n                a.attach(x);\n              }\n\n              result = a;\n            } //handle cases like 2*(x+x^2)^2+2*(x+x^2)^3+4*(x+x^2)^2\n            else if (bothPL && a.value !== h2 || g1 === PL && !valEQ) {\n                result = Symbol.shell(CP).attach([a, b]);\n                result.updateHash();\n              } else {\n                result = a.attach(b);\n              }\n          } else {\n            if (g1 === FN && a.fname === SQRT && g2 !== EX && b.power.equals(0.5)) {\n              var m = b.multiplier.clone();\n              b = sqrt(b.toUnitMultiplier().toLinear());\n              b.multiplier = m;\n            } //fix for issue #3 and #159\n\n\n            if (a.length === 2 && b.length === 2 && even(a.power) && even(b.power)) {\n              result = _.add(expand(a), expand(b));\n            } else {\n              result = Symbol.shell(CP).attach([a, b]);\n              result.updateHash();\n            }\n          }\n\n        if (result.multiplier.equals(0)) result = new Symbol(0); //make sure to remove unnecessary wraps\n\n        if (result.length === 1) {\n          var m = result.multiplier;\n          result = firstObject(result.symbols);\n          result.multiplier = result.multiplier.multiply(m);\n        }\n\n        return result;\n      } else {\n        //keep symbols to the right\n        if (bIsSymbol && !aIsSymbol) {\n          var t = a;\n          a = b;\n          b = t; //swap\n\n          t = bIsSymbol;\n          bIsSymbol = aIsSymbol;\n          aIsSymbol = t;\n        }\n\n        var bIsMatrix = isMatrix(b);\n\n        if (aIsSymbol && bIsMatrix) {\n          var M = new Matrix();\n          b.eachElement(function (e, i, j) {\n            M.set(i, j, _.add(a.clone(), e));\n          });\n          b = M;\n        } else {\n          if (isMatrix(a) && bIsMatrix) {\n            b = a.add(b);\n          } else if (aIsSymbol && isVector(b)) {\n            b.each(function (x, i) {\n              i--;\n              b.elements[i] = _.add(a.clone(), b.elements[i]);\n            });\n          } else {\n            if (isVector(a) && isVector(b)) {\n              b.each(function (x, i) {\n                i--;\n                b.elements[i] = _.add(a.elements[i], b.elements[i]);\n              });\n            } else if (isVector(a) && isMatrix(b)) {\n              //try to convert a to a matrix\n              return _.add(b, a);\n            } else if (isMatrix(a) && isVector(b)) {\n              if (b.elements.length === a.rows()) {\n                var M = new Matrix(),\n                    l = a.cols();\n                b.each(function (e, i) {\n                  var row = [];\n\n                  for (var j = 0; j < l; j++) {\n                    row.push(_.add(a.elements[i - 1][j].clone(), e.clone()));\n                  }\n\n                  M.elements.push(row);\n                });\n                return M;\n              } else err('Dimensions must match!');\n            }\n          }\n        }\n\n        return b;\n      }\n    };\n    /**\r\n     * Gets called when the parser finds the - operator. Not the prefix operator. See this.add\r\n     * @param {Symbol} a\r\n     * @param {Symbol} b\r\n     * @returns {Symbol}\r\n     */\n\n\n    this.subtract = function (a, b) {\n      var aIsSymbol = aIsSymbol = isSymbol(a),\n          bIsSymbol = isSymbol(b),\n          t;\n\n      if (aIsSymbol && bIsSymbol) {\n        if (a.unit || b.unit) {\n          return _.Unit.subtract(a, b);\n        }\n\n        return this.add(a, b.negate());\n      } else {\n        if (bIsSymbol && isVector(a)) {\n          b = a.map(function (x) {\n            return _.subtract(x, b.clone());\n          });\n        } else if (aIsSymbol && isVector(b)) {\n          b = b.map(function (x) {\n            return _.subtract(a.clone(), x);\n          });\n        } else if (isVector(a) && isVector(b)) {\n          if (a.dimensions() === b.dimensions()) b = a.subtract(b);else _.error('Unable to subtract vectors. Dimensions do not match.');\n        } else if (isMatrix(a) && isVector(b)) {\n          if (b.elements.length === a.rows()) {\n            var M = new Matrix(),\n                l = a.cols();\n            b.each(function (e, i) {\n              var row = [];\n\n              for (var j = 0; j < l; j++) {\n                row.push(_.subtract(a.elements[i - 1][j].clone(), e.clone()));\n              }\n\n              M.elements.push(row);\n            });\n            return M;\n          } else err('Dimensions must match!');\n        } else if (isVector(a) && isMatrix(b)) {\n          var M = b.clone().negate();\n          return _.add(M, a);\n        } else if (isMatrix(a) && isMatrix(b)) {\n          b = a.subtract(b);\n        } else if (isMatrix(a) && bIsSymbol) {\n          var M = new Matrix();\n          a.each(function (x, i, j) {\n            M.set(i, j, _.subtract(x, b.clone()));\n          });\n          b = M;\n        } else if (aIsSymbol && isMatrix(b)) {\n          var M = new Matrix();\n          b.each(function (x, i, j) {\n            M.set(i, j, _.subtract(a.clone(), x));\n          });\n          b = M;\n        }\n\n        return b;\n      }\n    };\n    /**\r\n     * Gets called when the parser finds the * operator. See this.add\r\n     * @param {Symbol} a\r\n     * @param {Symbol} b\r\n     * @returns {Symbol}\r\n     */\n\n\n    this.multiply = function (a, b) {\n      var aIsSymbol = isSymbol(a),\n          bIsSymbol = isSymbol(b); //we're dealing with function assignment here\n\n      if (aIsSymbol && b instanceof Collection) {\n        b.elements.push(a);\n        return b;\n      }\n\n      if (aIsSymbol && bIsSymbol) {\n        //if it has a unit then add it and return it right away.\n        if (b.isUnit) {\n          var result = a.clone();\n          a.unit = b;\n          return result;\n        } //if it has units then just forward that problem to the unit module\n\n\n        if (a.unit || b.unit) {\n          return _.Unit.multiply(a, b);\n        } //handle Infinty\n\n\n        if (a.isInfinity || b.isInfinity) {\n          if (a.equals(0) || b.equals(0)) throw new UndefinedError(a + '*' + b + ' is undefined!'); //x/infinity\n\n          if (b.power.lessThan(0)) {\n            if (!a.isInfinity) {\n              return new Symbol(0);\n            } else {\n              throw new UndefinedError('Infinity/Infinity is not defined!');\n            }\n          }\n\n          var sign = a.multiplier.multiply(b.multiplier).sign(),\n              inf = Symbol.infinity();\n\n          if (a.isConstant() || b.isConstant() || a.isInfinity && b.isInfinity) {\n            if (sign < 0) inf.negate();\n            return inf;\n          }\n        } //the quickies\n\n\n        if (a.isConstant() && b.isConstant() && Settings.PARSE2NUMBER) {\n          var t = new bigDec(a.multiplier.toDecimal()).times(new bigDec(b.multiplier.toDecimal())).toFixed();\n          var retval = new Symbol(t);\n          return retval;\n        } //don't waste time\n\n\n        if (a.isOne()) {\n          return b.clone();\n        }\n\n        if (b.isOne()) {\n          return a.clone();\n        }\n\n        if (a.multiplier.equals(0) || b.multiplier.equals(0)) return new Symbol(0);\n        if (b.group > a.group && !(b.group === CP)) return this.multiply(b, a); //correction for PL/CB dilemma\n\n        if (a.group === CB && b.group === PL && a.value === b.value) {\n          var t = a;\n          a = b;\n          b = t; //swap\n        }\n\n        var g1 = a.group,\n            g2 = b.group,\n            bnum = b.multiplier.num,\n            bden = b.multiplier.den;\n\n        if (g1 === FN && a.fname === SQRT && !b.isConstant() && a.args[0].value === b.value && !a.args[0].multiplier.lessThan(0)) {\n          //unwrap sqrt\n          var a_pow = a.power;\n\n          var a_multiplier = _.parse(a.multiplier);\n\n          a = _.multiply(a_multiplier, a.args[0].clone());\n          a.setPower(new Frac(0.5).multiply(a_pow));\n          g1 = a.group;\n        } //simplify n/sqrt(n). Being very specific\n        else if (g1 === FN && a.fname === SQRT && a.multiplier.equals(1) && a.power.equals(-1) && b.isConstant() && a.args[0].equals(b)) {\n            a = _.symfunction(SQRT, [b.clone()]);\n            b = new Symbol(1);\n          }\n\n        ;\n        var v1 = a.value,\n            v2 = b.value,\n            sign = new Frac(a.sign()),\n            //since P is just a morphed version of N we need to see if they relate\n        ONN = g1 === P && g2 === N && b.multiplier.equals(a.value),\n            //don't multiply the multiplier of b since that's equal to the value of a\n        m = ONN ? new Frac(1).multiply(a.multiplier).abs() : a.multiplier.multiply(b.multiplier).abs(),\n            result = a.clone().toUnitMultiplier();\n        b = b.clone().toUnitMultiplier(true); //further simplification of sqrt\n\n        if (g1 === FN && g2 === FN) {\n          var u = a.args[0].clone();\n          var v = b.args[0].clone();\n\n          if (a.fname === SQRT && b.fname === SQRT && a.isLinear() && b.isLinear()) {\n            var q = _.divide(u, v).invert();\n\n            if (q.gt(1) && isInt(q)) {\n              //b contains a factor a which can be moved to a\n              result = _.multiply(a.args[0].clone(), sqrt(q.clone()));\n              b = new Symbol(1);\n            }\n          } //simplify factorial but only if\n          //1 - It's division so b will have a negative power\n          //2 - We're not dealing with factorials of numbers\n          else if (a.fname === FACTORIAL && b.fname === FACTORIAL && !u.isConstant() && !v.isConstant() && b.power < 0) {\n              //assume that n = positive\n              var d = _.subtract(u.clone(), v.clone()); //if it's not numeric then we don't know if we can simplify so just return\n\n\n              if (d.isConstant()) {\n                //there will never be a case where d == 0 since this will already have\n                //been handled at the beginning of this function\n                t = new Symbol(1);\n\n                if (d < 0) {\n                  //If d is negative then the numerator is larger so expand that\n                  for (var i = 0, n = Math.abs(d); i <= n; i++) {\n                    var s = _.add(u.clone(), new Symbol(i));\n\n                    t = _.multiply(t, s);\n                  }\n\n                  result = _.multiply(_.pow(u, new Symbol(a.power)), _.pow(t, new Symbol(b.power)));\n                  b = new Symbol(1);\n                } else {\n                  //Otherwise the denominator is larger so expand that\n                  for (var i = 0, n = Math.abs(d); i <= n; i++) {\n                    var s = _.add(v.clone(), new Symbol(i));\n\n                    t = _.multiply(t, s);\n                  }\n\n                  result = _.multiply(_.pow(t, new Symbol(a.power)), _.pow(v, new Symbol(b.power)));\n                  b = new Symbol(1);\n                }\n              }\n            }\n        } //if both are PL then their hashes have to match\n\n\n        if (v1 === v2 && g1 === PL && g1 === g2) {\n          v1 = a.text('hash');\n          v2 = b.text('hash');\n        } //same issue with (x^2+1)^x*(x^2+1)\n        //EX needs an exception when multiplying because it needs to recognize\n        //that (x+x^2)^x has the same hash as (x+x^2). The latter is kept as x\n\n\n        if (g2 === EX && b.previousGroup === PL && g1 === PL) {\n          v1 = text(a, 'hash', EX);\n        }\n\n        if ((v1 === v2 || ONN) && !(g1 === PL && (g2 === S || g2 === P || g2 === FN)) && !(g1 === PL && g2 === CB)) {\n          var p1 = a.power,\n              p2 = b.power,\n              isSymbolP1 = isSymbol(p1),\n              isSymbolP2 = isSymbol(p2),\n              toEX = isSymbolP1 || isSymbolP2; //TODO: this needs cleaning up\n\n          if (g1 === PL && g2 !== PL && b.previousGroup !== PL && p1.equals(1)) {\n            result = new Symbol(0);\n            a.each(function (x) {\n              result = _.add(result, _.multiply(x, b.clone()));\n            }, true);\n          } else {\n            //add the powers\n            result.power = toEX ? _.add(!isSymbol(p1) ? new Symbol(p1) : p1, !isSymbol(p2) ? new Symbol(p2) : p2) : g1 === N\n            /*don't add powers for N*/\n            ? p1 : p1.add(p2); //eliminate zero power values and convert them to numbers\n\n            if (result.power.equals(0)) result = result.convert(N); //properly convert to EX\n\n            if (toEX) result.convert(EX); //take care of imaginaries\n\n            if (a.imaginary && b.imaginary) {\n              var isEven = even(result.power % 2);\n\n              if (isEven) {\n                result = new Symbol(1);\n                m.negate();\n              }\n            } //cleanup: this causes the LaTeX generator to get confused as to how to render the symbol\n\n\n            if (result.group !== EX && result.previousGroup) result.previousGroup = undefined; //the sign for b is floating around. Remember we are assuming that the odd variable will carry\n            //the sign but this isn't true if they're equals symbols\n\n            result.multiplier = result.multiplier.multiply(b.multiplier);\n          }\n        } else if (g1 === CB && a.isLinear()) {\n          if (g2 === CB) b.distributeExponent();\n\n          if (g2 === CB && b.isLinear()) {\n            for (var s in b.symbols) {\n              var x = b.symbols[s];\n              result = result.combine(x);\n            }\n\n            result.multiplier = result.multiplier.multiply(b.multiplier);\n          } else {\n            result.combine(b);\n          }\n        } else {\n          //the multiplier was already handled so nothing left to do\n          if (g1 !== N) {\n            if (g1 === CB) {\n              result.distributeExponent();\n              result.combine(b);\n            } else if (!b.isOne()) {\n              var bm = b.multiplier.clone();\n              b.toUnitMultiplier();\n              result = Symbol.shell(CB).combine([result, b]); //transfer the multiplier to the outside\n\n              result.multiplier = result.multiplier.multiply(bm);\n            }\n          } else {\n            result = b.clone().toUnitMultiplier();\n          }\n        }\n\n        if (result.group === P) {\n          var logV = Math.log(result.value),\n              n1 = Math.log(bnum) / logV,\n              n2 = Math.log(bden) / logV,\n              ndiv = m.num / bnum,\n              ddiv = m.den / bden; //we don't want to divide by zero no do we? Strange things happen.\n\n          if (n1 !== 0 && isInt(n1) && isInt(ndiv)) {\n            result.power = result.power.add(new Frac(n1));\n            m.num /= bnum; //BigInt? Keep that in mind for the future.\n          }\n\n          if (n2 !== 0 && isInt(n2) && isInt(ddiv)) {\n            result.power = result.power.subtract(new Frac(n2));\n            m.den /= bden; //BigInt? Keep that in mind for the future.\n          }\n        } //unpack CB if length is only one\n\n\n        if (result.length === 1) {\n          var t = result.multiplier; //transfer the multiplier\n\n          result = firstObject(result.symbols);\n          result.multiplier = result.multiplier.multiply(t);\n        } //reduce square root\n\n\n        var ps = result.power.toString();\n\n        if (even(ps) && result.fname === SQRT) {\n          //grab the sign of the symbol\n          sign = sign * result.sign();\n          var p = result.power;\n          result = result.args[0];\n          result = _.multiply(new Symbol(m), _.pow(result, new Symbol(p.divide(new Frac(2))))); //flip it back to the correct sign\n\n          if (sign < 0) result.negate();\n        } else {\n          result.multiplier = result.multiplier.multiply(m).multiply(sign);\n          if (result.group === CP && result.isImaginary()) result.distributeMultiplier();\n        } //back convert group P to a simpler group N if possible\n\n\n        if (result.group === P && isInt(result.power.toDecimal())) result = result.convert(N);\n        return result;\n      } else {\n        //****** Matrices & Vector *****//\n        if (bIsSymbol && !aIsSymbol) {\n          //keep symbols to the right\n          t = a;\n          a = b;\n          b = t; //swap\n\n          t = bIsSymbol;\n          bIsSymbol = aIsSymbol;\n          aIsSymbol = t;\n        }\n\n        var isMatrixB = isMatrix(b),\n            isMatrixA = isMatrix(a);\n\n        if (aIsSymbol && isMatrixB) {\n          var M = new Matrix();\n          b.eachElement(function (e, i, j) {\n            M.set(i, j, _.multiply(a.clone(), e));\n          });\n          b = M;\n        } else {\n          if (isMatrixA && isMatrixB) {\n            b = a.multiply(b);\n          } else if (aIsSymbol && isVector(b)) {\n            b.each(function (x, i) {\n              i--;\n              b.elements[i] = _.multiply(a.clone(), b.elements[i]);\n            });\n          } else {\n            if (isVector(a) && isVector(b)) {\n              b.each(function (x, i) {\n                i--;\n                b.elements[i] = _.multiply(a.elements[i], b.elements[i]);\n              });\n            } else if (isVector(a) && isMatrix(b)) {\n              //try to convert a to a matrix\n              return this.multiply(b, a);\n            } else if (isMatrix(a) && isVector(b)) {\n              if (b.elements.length === a.rows()) {\n                var M = new Matrix(),\n                    l = a.cols();\n                b.each(function (e, i) {\n                  var row = [];\n\n                  for (var j = 0; j < l; j++) {\n                    row.push(_.multiply(a.elements[i - 1][j].clone(), e.clone()));\n                  }\n\n                  M.elements.push(row);\n                });\n                return M;\n              } else err('Dimensions must match!');\n            }\n          }\n        }\n\n        return b;\n      }\n    };\n    /**\r\n     * Gets called when the parser finds the / operator. See this.add\r\n     * @param {Symbol} a\r\n     * @param {Symbol} b\r\n     * @returns {Symbol}\r\n     */\n\n\n    this.divide = function (a, b) {\n      var aIsSymbol = isSymbol(a),\n          bIsSymbol = isSymbol(b);\n\n      if (aIsSymbol && bIsSymbol) {\n        //forward to Unit division\n        if (a.unit || b.unit) {\n          return _.Unit.divide(a, b);\n        }\n\n        var result;\n        if (b.equals(0)) throw new DivisionByZero('Division by zero not allowed!');\n\n        if (a.isConstant() && b.isConstant()) {\n          result = a.clone();\n          result.multiplier = result.multiplier.divide(b.multiplier);\n        } else {\n          b.invert();\n          result = _.multiply(a, b);\n        }\n\n        return result;\n      } else {\n        //******* Vectors & Matrices *********//\n        var isVectorA = isVector(a),\n            isVectorB = isVector(b);\n\n        if (aIsSymbol && isVectorB) {\n          b = b.map(function (x) {\n            return _.divide(a.clone(), x);\n          });\n        } else if (isVectorA && bIsSymbol) {\n          b = a.map(function (x) {\n            return _.divide(x, b.clone());\n          });\n        } else if (isVectorA && isVectorB) {\n          if (a.dimensions() === b.dimensions()) {\n            b = b.map(function (x, i) {\n              return _.divide(a.elements[--i], x);\n            });\n          } else _.error('Cannot divide vectors. Dimensions do not match!');\n        } else {\n          var isMatrixA = isMatrix(a),\n              isMatrixB = isMatrix(b);\n\n          if (isMatrixA && bIsSymbol) {\n            var M = new Matrix();\n            a.eachElement(function (x, i, j) {\n              M.set(i, j, _.divide(x, b.clone()));\n            });\n            b = M;\n          } else if (aIsSymbol && isMatrixB) {\n            var M = new Matrix();\n            b.eachElement(function (x, i, j) {\n              M.set(i, j, _.divide(a.clone(), x));\n            });\n            b = M;\n          } else if (isMatrixA && isMatrixB) {\n            var M = new Matrix();\n\n            if (a.rows() === b.rows() && a.cols() === b.cols()) {\n              a.eachElement(function (x, i, j) {\n                M.set(i, j, _.divide(x, b.elements[i][j]));\n              });\n              b = M;\n            } else {\n              _.error('Dimensions do not match!');\n            }\n          } else if (isMatrixA && isVectorB) {\n            if (a.cols() === b.dimensions()) {\n              var M = new Matrix();\n              a.eachElement(function (x, i, j) {\n                M.set(i, j, _.divide(x, b.elements[i].clone()));\n              });\n              b = M;\n            } else {\n              _.error('Unable to divide matrix by vector.');\n            }\n          }\n        }\n\n        return b;\n      }\n    };\n    /**\r\n     * Gets called when the parser finds the ^ operator. See this.add\r\n     * @param {Symbol} a\r\n     * @param {Symbol} b\r\n     * @returns {Symbol}\r\n     */\n\n\n    this.pow = function (a, b) {\n      var aIsSymbol = isSymbol(a),\n          bIsSymbol = isSymbol(b);\n\n      if (aIsSymbol && bIsSymbol) {\n        //it has units then it's the Unit module's problem\n        if (a.unit || b.unit) {\n          return _.Unit.pow(a, b);\n        } // Handle abs\n\n\n        if (a.group === FN && a.fname === ABS && even(b)) {\n          var m = a.multiplier.clone();\n\n          var raised = _.pow(a.args[0], b);\n\n          raised.multiplier = m;\n          return raised;\n        } // Handle infinity\n\n\n        if (a.isInfinity || b.isInfinity) {\n          if (a.isInfinity && b.isInfinity) throw new UndefinedError('(' + a + ')^(' + b + ') is undefined!');\n\n          if (a.isConstant() && b.isInfinity) {\n            if (a.equals(0)) {\n              if (b.lessThan(0)) throw new UndefinedError('0^Infinity is undefined!');\n              return new Symbol(0);\n            }\n\n            if (a.equals(1)) throw new UndefinedError('1^' + b.toString() + ' is undefined!'); //a^-oo\n\n            if (b.lessThan(0)) return new Symbol(0); //a^oo\n\n            if (!a.lessThan(0)) return Symbol.infinity();\n          }\n\n          if (a.isInfinity && b.isConstant()) {\n            if (b.equals(0)) throw new UndefinedError(a + '^0 is undefined!');\n            if (b.lessThan(0)) return new Symbol(0);\n            return _.multiply(Symbol.infinity(), _.pow(new Symbol(a.sign()), b.clone()));\n          }\n        }\n\n        var aIsZero = a.equals(0);\n        var bIsZero = b.equals(0);\n        if (aIsZero && bIsZero) throw new UndefinedError('0^0 is undefined!'); // Return 0 right away if possible\n\n        if (aIsZero && b.isConstant() && b.multiplier.greaterThan(0)) return new Symbol(0);\n        if (bIsZero) return new Symbol(1);\n        var bIsConstant = b.isConstant(),\n            aIsConstant = a.isConstant(),\n            bIsInt = b.isInteger(),\n            m = a.multiplier,\n            result = a.clone(); // 0^0, 1/0, etc. Complain.\n\n        if (aIsConstant && bIsConstant && a.equals(0) && b.lessThan(0)) throw new UndefinedError('Division by zero is not allowed!'); // Compute imaginary numbers right away\n\n        if (Settings.PARSE2NUMBER && aIsConstant && bIsConstant && a.sign() < 0 && evenFraction(b)) {\n          var k, re, im;\n          k = Math.PI * b;\n          re = new Symbol(Math.cos(k));\n          im = _.multiply(Symbol.imaginary(), new Symbol(Math.sin(k)));\n          return _.add(re, im);\n        } // Imaginary number under negative nthroot or to the n\n\n\n        if (Settings.PARSE2NUMBER && a.isImaginary() && bIsConstant && isInt(b) && !b.lessThan(0)) {\n          var re, im, r, theta, nre, nim, phi;\n          re = a.realpart();\n          im = a.imagpart();\n\n          if (re.isConstant('all') && im.isConstant('all')) {\n            phi = Settings.USE_BIG ? Symbol(bigDec.atan2(i.multiplier.toDecimal(), r.multiplier.toDecimal()).times(b.toString())) : Math.atan2(im, re) * b;\n            theta = new Symbol(phi);\n            r = _.pow(Symbol.hyp(re, im), b);\n            nre = _.multiply(r.clone(), _.trig.cos(theta.clone()));\n            nim = _.multiply(r, _.trig.sin(theta));\n            return _.add(nre, _.multiply(Symbol.imaginary(), nim));\n          }\n        } // Take care of the symbolic part\n\n\n        result.toUnitMultiplier(); //simpifly sqrt\n\n        if (result.group === FN && result.fname === SQRT && !bIsConstant) {\n          var s = result.args[0];\n          s.multiplyPower(new Symbol(0.5));\n          s.multiplier.multiply(result.multiplier);\n          s.multiplyPower(b);\n          result = s;\n        } else {\n          var sign = m.sign(); //handle cases such as (-a^3)^(1/4)\n\n          if (evenFraction(b) && sign < 0) {\n            // Swaperoo\n            // First put the sign back on the symbol\n            result.negate(); // Wrap it in brackets\n\n            result = _.symfunction(PARENTHESIS, [result]); // Move the sign back the exterior and let nerdamer handle the rest\n\n            result.negate();\n          }\n\n          result.multiplyPower(b);\n        }\n\n        if (aIsConstant && bIsConstant && Settings.PARSE2NUMBER) {\n          var c; //remove the sign\n\n          if (sign < 0) {\n            a.negate();\n            if (b.multiplier.den.equals(2)) //we know that the numerator has to be odd and therefore it's i\n              c = new Symbol(Settings.IMAGINARY);else if (isInt(b.multiplier)) {\n              if (even(b.multiplier)) c = new Symbol(1);else c = new Symbol(-1);\n            } else if (!even(b.multiplier.den)) {\n              c = new Symbol(Math.pow(sign, b.multiplier.num));\n            } else {\n              c = _.pow(_.symfunction(PARENTHESIS, [new Symbol(sign)]), b.clone());\n            }\n          }\n\n          result = new Symbol(Math.pow(a.multiplier.toDecimal(), b.multiplier.toDecimal())); //result = new Symbol(Math2.bigpow(a.multiplier, b.multiplier));\n          //put the back sign\n\n          if (c) result = _.multiply(result, c);\n        } else if (bIsInt && !m.equals(1)) {\n          var abs_b = b.abs(); // Provide fall back to JS until big number implementation is improved\n\n          if (abs_b.gt(Settings.MAX_EXP)) {\n            if (b.sign() < 0) return new Symbol(0);\n            return Symbol.infinity();\n          } else {\n            var p = b.multiplier.toDecimal();\n            var sgn = Math.sign(p);\n            p = Math.abs(p);\n            var multiplier = new Frac(1);\n            multiplier.num = m.num.pow(p);\n            multiplier.den = m.den.pow(p);\n            if (sgn < 0) multiplier.invert(); //multiplying is justified since after mulltiplyPower if it was of group P it will now be of group N\n\n            result.multiplier = result.multiplier.multiply(multiplier);\n          }\n        } else {\n          var sign = a.sign();\n\n          if (b.isConstant() && a.isConstant() && !b.multiplier.den.equals(1) && sign < 0) {\n            //we know the sign is negative so if the denominator for b == 2 then it's i\n            if (b.multiplier.den.equals(2)) {\n              var i = new Symbol(Settings.IMAGINARY);\n              a.negate(); //remove the sign\n              //if the power is negative then i is negative\n\n              if (b.lessThan(0)) {\n                i.negate();\n                b.negate(); //remove the sign from the power\n              } //pull the power normally and put back the imaginary\n\n\n              result = _.multiply(_.pow(a, b), i);\n            } else {\n              var aa = a.clone();\n              aa.multiplier.negate();\n              result = _.pow(_.symfunction(PARENTHESIS, [new Symbol(sign)]), b.clone());\n\n              var _a = _.pow(new Symbol(aa.multiplier.num), b.clone());\n\n              var _b = _.pow(new Symbol(aa.multiplier.den), b.clone());\n\n              var r = _.divide(_a, _b);\n\n              result = _.multiply(result, r);\n            }\n          } else if (Settings.PARSE2NUMBER && b.isImaginary()) {\n            //4^(i + 2) = e^(- (2 - 4 i) π n + (2 + i) log(4))\n            var re = b.realpart();\n            var im = b.imagpart();\n            /*\r\n             if(b.group === CP && false) {\r\n             var ex = _.pow(a.clone(), re);\r\n             var xi = _.multiply(_.multiply(ex.clone(), trig.sin(im.clone())), Symbol.imaginary());\r\n             var xa = _.multiply(trig.cos(im), ex);\r\n             result = _.add(xi, xa);\r\n             }\r\n             else {\r\n             */\n\n            var aa = a.clone().toLinear();\n\n            var a1 = _.pow(aa.clone(), re);\n\n            var log_a = log(aa.clone());\n            var b1 = trig.cos(_.multiply(im.clone(), log_a));\n\n            var c1 = _.multiply(trig.sin(_.multiply(im, log(aa))), Symbol.imaginary());\n\n            result = _.multiply(a1, _.add(b1, c1));\n            result = _.expand(_.parse(result));\n            /*\r\n             }   \r\n             */\n          } else {\n            //b is a symbol\n            var neg_num = a.group === N && sign < 0,\n                num = testSQRT(new Symbol(neg_num ? m.num : Math.abs(m.num)).setPower(b.clone())),\n                den = testSQRT(new Symbol(m.den).setPower(b.clone()).invert()); //eliminate imaginary if possible\n\n            if (a.imaginary) {\n              if (bIsInt) {\n                var s, p, n;\n                s = Math.sign(b);\n                p = abs(b);\n                n = p % 4;\n                result = new Symbol(even(n) ? -1 : Settings.IMAGINARY);\n\n                if (n === 0 || s < 0 && n === 1 || s > 0 && n === 3) {\n                  result.negate();\n                }\n              } else {\n                //assume i = sqrt(-1) -> (-1)^(1/2)\n                var nr = b.multiplier.multiply(Frac.quick(1, 2)),\n                    //the denominator denotes the power so raise to it. It will turn positive it round\n                tn = Math.pow(-1, nr.num);\n                result = even(nr.den) ? new Symbol(-1).setPower(nr, true) : new Symbol(tn);\n              }\n            } //ensure that the sign is carried by the symbol and not the multiplier\n            //this enables us to check down the line if the multiplier can indeed be transferred\n\n\n            if (sign < 0 && !neg_num) result.negate(); //retain the absolute value\n\n            if (bIsConstant && a.group !== EX) {\n              var evenr = even(b.multiplier.den),\n                  evenp = even(a.power),\n                  n = result.power.toDecimal(),\n                  evennp = even(n);\n\n              if (evenr && evenp && !evennp) {\n                if (n === 1) result = _.symfunction(ABS, [result]);else if (!isInt(n)) {\n                  var p = result.power;\n                  result = _.symfunction(ABS, [result.toLinear()]).setPower(p);\n                } else {\n                  result = _.multiply(_.symfunction(ABS, [result.clone().toLinear()]), result.clone().setPower(new Frac(n - 1)));\n                } //quick workaround. Revisit\n\n                if (Settings.POSITIVE_MULTIPLIERS && result.fname === ABS) result = result.args[0];\n              }\n            } //multiply out sqrt\n\n\n            if (b.equals(2) && result.group === CB) {\n              var _result = new Symbol(1);\n\n              result.each(function (sym) {\n                _result = _.multiply(_result, _.pow(sym, b));\n              });\n              result = _result;\n            }\n          }\n        }\n\n        result = testSQRT(result); // Don't multiply until we've tested the remaining symbol\n\n        if (num && den) {\n          result = _.multiply(result, testPow(_.multiply(num, den)));\n        } // Reduce square root\n\n\n        if (result.fname === SQRT) {\n          var isEX = result.group === EX;\n          var t = isEX ? result.power.multiplier.toString() : result.power.toString();\n\n          if (even(t)) {\n            var pt = isEX ? _.divide(result.power, new Symbol(2)) : new Symbol(result.power.divide(new Frac(2))),\n                m = result.multiplier;\n            result = _.pow(result.args[0], pt);\n            result.multiplier = result.multiplier.multiply(m);\n          }\n        } // Detect Euler's identity\n        else if (!Settings.IGNORE_E && result.isE() && result.group === EX && result.power.contains('pi') && result.power.contains(Settings.IMAGINARY) && b.group === CB) {\n            var theta = b.stripVar(Settings.IMAGINARY);\n            result = _.add(trig.cos(theta), _.multiply(Symbol.imaginary(), trig.sin(theta)));\n          }\n\n        return result;\n      } else {\n        if (isVector(a) && bIsSymbol) {\n          a = a.map(function (x) {\n            return _.pow(x, b.clone());\n          });\n        } else if (isMatrix(a) && bIsSymbol) {\n          var M = new Matrix();\n          a.eachElement(function (x, i, j) {\n            M.set(i, j, _.pow(x, b.clone()));\n          });\n          a = M;\n        } else if (aIsSymbol && isMatrix(b)) {\n          var M = new Matrix();\n          b.eachElement(function (x, i, j) {\n            M.set(i, j, _.pow(a.clone(), x));\n          });\n          a = M;\n        }\n\n        return a;\n      }\n    }; // Gets called when the parser finds the , operator.\n    // Commas return a Collector object which is roughly an array\n\n\n    this.comma = function (a, b) {\n      if (!(a instanceof Collection)) a = Collection.create(a);\n      a.append(b);\n      return a;\n    }; // Link to modulus\n\n\n    this.mod = function (a, b) {\n      return mod(a, b);\n    }; // Used to slice elements from arrays\n\n\n    this.slice = function (a, b) {\n      return new Slice(a, b);\n    }; // The equality setter\n\n\n    this.equals = function (a, b) {\n      // Equality can only be set for group S so complain it's not\n      if (a.group !== S && !a.isLinear()) err('Cannot set equality for ' + a.toString());\n      VARS[a.value] = b.clone();\n      return b;\n    }; // Percent\n\n\n    this.percent = function (a) {\n      return _.divide(a, new Symbol(100));\n    }; // Set variable\n\n\n    this.assign = function (a, b) {\n      if (a instanceof Collection && b instanceof Collection) {\n        a.elements.map(function (x, i) {\n          return _.assign(x, b.elements[i]);\n        });\n        return Vector.fromArray(b.elements);\n      }\n\n      if (a.parent) {\n        // It's referring to the parent instead. The current item can be discarded\n        var e = a.parent;\n        e.elements[e.getter] = b;\n        delete e.getter;\n        return e;\n      }\n\n      if (a.group !== S) throw new NerdamerValueError('Cannot complete operation. Incorrect LH value for ' + a);\n      VARS[a.value] = b;\n      return b;\n    };\n\n    this.function_assign = function (a, b) {\n      var f = a.elements.pop();\n      return setFunction(f, a.elements, b);\n    }; // Function to quickly convert bools to Symbols\n\n\n    var bool2Symbol = function (x) {\n      return new Symbol(x === true ? 1 : 0);\n    }; //check for equality\n\n\n    this.eq = function (a, b) {\n      return bool2Symbol(a.equals(b));\n    }; //checks for greater than\n\n\n    this.gt = function (a, b) {\n      return bool2Symbol(a.gt(b));\n    }; //checks for greater than equal\n\n\n    this.gte = function (a, b) {\n      return bool2Symbol(a.gte(b));\n    }; //checks for less than\n\n\n    this.lt = function (a, b) {\n      return bool2Symbol(a.lt(b));\n    }; //checks for less than equal\n\n\n    this.lte = function (a, b) {\n      return bool2Symbol(a.lte(b));\n    }; // wraps the factorial\n\n\n    this.factorial = function (a) {\n      return this.symfunction(FACTORIAL, [a]);\n    }; // wraps the double factorial\n\n\n    this.dfactorial = function (a) {\n      return this.symfunction(DOUBLEFACTORIAL, [a]);\n    };\n  }\n\n  ;\n  /* \"STATIC\" */\n  // converts a number to a fraction.\n\n  var Fraction = {\n    /**\r\n     * Converts a decimal to a fraction\r\n     * @param {number} value\r\n     * @param {object} opts\r\n     * @returns {Array} - an array containing the denominator and the numerator\r\n     */\n    convert: function (value, opts) {\n      var frac;\n\n      if (value === 0) {\n        frac = [0, 1];\n      } else {\n        if (value < 1e-6 || value > 1e20) {\n          var qc = this.quickConversion(Number(value));\n\n          if (qc[1] <= 1e20) {\n            var abs = Math.abs(value);\n            var sign = value / abs;\n            frac = this.fullConversion(abs.toFixed((qc[1] + '').length - 1));\n            frac[0] = frac[0] * sign;\n          } else {\n            frac = qc;\n          }\n        } else {\n          frac = this.fullConversion(value);\n        }\n      }\n\n      return frac;\n    },\n\n    /**\r\n     * If the fraction is too small or too large this gets called instead of fullConversion method\r\n     * @param {number} dec\r\n     * @returns {Array} - an array containing the denominator and the numerator\r\n     */\n    quickConversion: function (value) {\n      var stripSign = function (s) {\n        // Explicitely convert to a string\n        if (typeof s !== 'string') {\n          s = s.toString();\n        }\n\n        var sign = ''; // Remove and store the sign\n\n        var start = s.charAt(0);\n\n        if (start === '-') {\n          s = s.substr(1, s.length);\n          sign = '-';\n        } else if (start === '+') {\n          // Just remove the plus sign\n          s = s.substr(1, s.length);\n        }\n\n        return {\n          sign: sign,\n          value: s\n        };\n      };\n\n      function convert(value) {\n        // Explicitely convert to a decimal\n        if (Scientific.isScientific(value)) {\n          value = scientificToDecimal(value);\n        } // Split the value into the sign and the value\n\n\n        var nparts = stripSign(value); // Split it at the decimal. We'll refer to it as the coeffient parts\n\n        var cparts = nparts.value.split('.'); // Combine the entire number by removing leading zero and adding the decimal part\n        // This would be teh same as moving the decimal point to the end\n\n        var num; // We're dealing with integers\n\n        if (cparts.length === 1) {\n          num = cparts[0];\n        } else {\n          num = cparts[0] + cparts[1];\n        }\n\n        var n = cparts[1] ? cparts[1].length : 0; // Generate the padding for the zeros\n\n        var den = `1${'0'.repeat(n)}`;\n\n        if (num !== '0') {\n          num = num.replace(/^0+/, '');\n        }\n\n        return [nparts.sign + num, den];\n      }\n\n      return convert(value);\n    },\n\n    /**\r\n     * Returns a good approximation of a fraction. This method gets called by convert\r\n     * http://mathforum.org/library/drmath/view/61772.html\r\n     * Decimal To Fraction Conversion - A Simpler Version\r\n     * Dr Peterson\r\n     * @param {number} dec\r\n     * @returns {Array} - an array containing the denominator and the numerator\r\n     */\n    fullConversion: function (dec) {\n      var done = false; // you can adjust the epsilon to a larger number if you don't need very high precision\n\n      var n1 = 0,\n          d1 = 1,\n          n2 = 1,\n          d2 = 0,\n          n = 0,\n          q = dec,\n          epsilon = 1e-16;\n\n      while (!done) {\n        n++;\n\n        if (n > 10000) {\n          done = true;\n        }\n\n        var a = Math.floor(q);\n        var num = n1 + a * n2;\n        var den = d1 + a * d2;\n        var e = q - a;\n\n        if (e < epsilon) {\n          done = true;\n        }\n\n        q = 1 / e;\n        n1 = n2;\n        d1 = d2;\n        n2 = num;\n        d2 = den;\n\n        if (Math.abs(num / den - dec) < epsilon || n > 30) {\n          done = true;\n        }\n      }\n\n      return [num, den];\n    }\n  }; //Depends on Fraction\n  //The latex generator\n\n  var LaTeX = {\n    parser: function () {\n      // create a parser and strip it from everything except the items that you need\n      var keep = ['classes', 'setOperator', 'getOperators', 'getBrackets', 'tokenize', 'toRPN', 'tree', 'units'];\n      var parser = new Parser();\n\n      for (var x in parser) {\n        if (keep.indexOf(x) === -1) delete parser[x];\n      } // declare the operators\n\n\n      parser.setOperator({\n        precedence: 8,\n        operator: '\\\\',\n        action: 'slash',\n        prefix: true,\n        postfix: false,\n        leftAssoc: true,\n        operation: function (e) {\n          return e; // bypass the slash\n        }\n      });\n      parser.setOperator({\n        precedence: 8,\n        operator: '\\\\,',\n        action: 'slash_comma',\n        prefix: true,\n        postfix: false,\n        leftAssoc: true,\n        operation: function (e) {\n          return e; // bypass the slash\n        }\n      }); // have braces not map to anything. We want them to be return as-is\n\n      var brackets = parser.getBrackets();\n      brackets['{'].maps_to = undefined;\n      return parser;\n    }(),\n    space: '~',\n    dot: ' \\\\cdot ',\n    // grab a list of supported functions but remove the excluded ones found in exclFN\n    latex: function (symbol, option) {\n      // it might be an array\n      if (symbol.clone) {\n        symbol = symbol.clone(); // leave original as-is\n      }\n\n      if (symbol instanceof _.classes.Collection) symbol = symbol.elements;\n\n      if (isArray(symbol)) {\n        var LaTeXArray = [];\n\n        for (var i = 0; i < symbol.length; i++) {\n          var sym = symbol[i]; //This way I can generate LaTeX on an array of strings.\n\n          if (!isSymbol(sym)) sym = _.parse(sym);\n          LaTeXArray.push(this.latex(sym, option));\n        }\n\n        return this.brackets(LaTeXArray.join(', '), 'square');\n      } else if (isMatrix(symbol)) {\n        var TeX = '\\\\begin{pmatrix}\\n';\n\n        for (var i = 0; i < symbol.elements.length; i++) {\n          var rowTeX = [],\n              e = symbol.elements[i];\n\n          for (var j = 0; j < e.length; j++) {\n            rowTeX.push(this.latex(e[j], option));\n          }\n\n          TeX += rowTeX.join(' & ');\n\n          if (i < symbol.elements.length - 1) {\n            TeX += '\\\\\\\\\\n';\n          }\n        }\n\n        TeX += '\\\\end{pmatrix}';\n        return TeX;\n      } else if (isVector(symbol)) {\n        var TeX = '\\\\left[';\n\n        for (var i = 0; i < symbol.elements.length; i++) {\n          TeX += this.latex(symbol.elements[i], option) + ' ' + (i !== symbol.elements.length - 1 ? ',\\\\,' : '');\n        }\n\n        TeX += '\\\\right]';\n        return TeX;\n      } else if (isSet(symbol)) {\n        var TeX = '\\\\{';\n\n        for (var i = 0; i < symbol.elements.length; i++) {\n          TeX += this.latex(symbol.elements[i], option) + ' ' + (i !== symbol.elements.length - 1 ? ',\\\\,' : '');\n        }\n\n        TeX += '\\\\}';\n        return TeX;\n      }\n\n      symbol = symbol.clone();\n      var decimal = option === 'decimal' || option === 'decimals',\n          power = symbol.power,\n          invert = isNegative(power),\n          negative = symbol.multiplier.lessThan(0);\n\n      if (symbol.group === P && decimal) {\n        return String(symbol.multiplier.toDecimal() * Math.pow(symbol.value, symbol.power.toDecimal()));\n      } else {\n        symbol.multiplier = symbol.multiplier.abs(); // if the user wants the result in decimal format then return it as such by placing it at the top part\n\n        var m_array;\n\n        if (decimal) {\n          var m = String(symbol.multiplier.toDecimal()); // if(String(m) === '1' && !decimal) m = '';\n\n          m_array = [m, ''];\n        } else {\n          m_array = [symbol.multiplier.num, symbol.multiplier.den];\n        } // get the value as a two part array\n\n\n        var v_array = this.value(symbol, invert, option, negative),\n            p; // make it all positive since we know whether to push the power to the numerator or denominator already.\n\n        if (invert) power.negate(); // the power is simple since it requires no additional formatting. We can get it to a\n        // string right away. pass in true to neglect unit powers\n\n        if (decimal) {\n          p = isSymbol(power) ? LaTeX.latex(power, option) : String(power.toDecimal());\n          if (String(p) === '1') p = '';\n        } // get the latex representation\n        else if (isSymbol(power)) p = this.latex(power, option); // get it as a fraction\n          else p = this.formatFrac(power, true); // use this array to specify if the power is getting attached to the top or the bottom\n\n\n        var p_array = ['', ''],\n            // stick it to the top or the bottom. If it's negative then the power gets placed on the bottom\n        index = invert ? 1 : 0;\n        p_array[index] = p; // special case group P and decimal\n\n        var retval = (negative ? '-' : '') + this.set(m_array, v_array, p_array, symbol.group === CB);\n        return retval.replace(/\\+\\-/gi, '-');\n      }\n    },\n    // greek mapping\n    greek: {\n      alpha: '\\\\alpha',\n      beta: '\\\\beta',\n      gamma: '\\\\gamma',\n      delta: '\\\\delta',\n      epsilon: '\\\\epsilon',\n      zeta: '\\\\zeta',\n      eta: '\\\\eta',\n      theta: '\\\\theta',\n      iota: '\\\\iota',\n      kappa: '\\\\kappa',\n      lambda: '\\\\lambda',\n      mu: '\\\\mu',\n      nu: '\\\\nu',\n      xi: '\\\\xi',\n      omnikron: '\\\\omnikron',\n      pi: '\\\\pi',\n      rho: '\\\\rho',\n      sigma: '\\\\sigma',\n      tau: '\\\\tau',\n      upsilon: '\\\\upsilon',\n      phi: '\\\\phi',\n      chi: '\\\\chi',\n      psi: '\\\\psi',\n      omega: '\\\\omega',\n      Gamma: '\\\\Gamma',\n      Delta: '\\\\Delta',\n      Epsilon: '\\\\Epsilon',\n      Theta: '\\\\Theta',\n      Lambda: '\\\\Lambda',\n      Xi: '\\\\Xi',\n      Pi: '\\\\Pi',\n      Sigma: '\\\\Sigma',\n      Phi: '\\\\Phi',\n      Psi: '\\\\Psi',\n      Omega: '\\\\Omega'\n    },\n    symbols: {\n      arccos: '\\\\arccos',\n      cos: '\\\\cos',\n      csc: '\\\\csc',\n      exp: '\\\\exp',\n      ker: '\\\\ker',\n      limsup: '\\\\limsup',\n      min: '\\\\min',\n      sinh: '\\\\sinh',\n      arcsin: '\\\\arcsin',\n      cosh: '\\\\cosh',\n      deg: '\\\\deg',\n      gcd: '\\\\gcd',\n      lg: '\\\\lg',\n      ln: '\\\\ln',\n      Pr: '\\\\Pr',\n      sqrt: '\\\\sqrt',\n      sup: '\\\\sup',\n      arctan: '\\\\arctan',\n      cot: '\\\\cot',\n      det: '\\\\det',\n      hom: '\\\\hom',\n      lim: '\\\\lim',\n      log: '\\\\log',\n      LN: '\\\\LN',\n      sec: '\\\\sec',\n      tan: '\\\\tan',\n      arg: '\\\\arg',\n      coth: '\\\\coth',\n      dim: '\\\\dim',\n      inf: '\\\\inf',\n      liminf: '\\\\liminf',\n      max: '\\\\max',\n      sin: '\\\\sin',\n      tanh: '\\\\tanh'\n    },\n    // get the raw value of the symbol as an array\n    value: function (symbol, inverted, option, negative) {\n      var group = symbol.group,\n          previousGroup = symbol.previousGroup,\n          v = ['', ''],\n          index = inverted ? 1 : 0;\n      /*if(group === N) // do nothing since we want to return top & bottom blank; */\n\n      if (symbol.isInfinity) {\n        v[index] = '\\\\infty';\n      } else if (group === S || group === P || previousGroup === S || previousGroup === P || previousGroup === N) {\n        var value = this.formatSubscripts(symbol.value);\n        if (value.replace) value = value.replace(/(.+)_$/, '$1\\\\_'); // split it so we can check for instances of alpha as well as alpha_b\n\n        var t_varray = String(value).split('_');\n        var greek = this.greek[t_varray[0]];\n\n        if (greek) {\n          t_varray[0] = greek;\n          value = t_varray.join('_');\n        }\n\n        var symbol = this.symbols[t_varray[0]];\n\n        if (symbol) {\n          t_varray[0] = symbol;\n          value = t_varray.join('_');\n        }\n\n        v[index] = value;\n      } else if (group === FN || previousGroup === FN) {\n        var name,\n            input = [],\n            fname = symbol.fname; // collect the arguments\n\n        for (var i = 0; i < symbol.args.length; i++) {\n          var arg = symbol.args[i],\n              item;\n          if (typeof arg === 'string') item = arg;else {\n            item = this.latex(arg, option);\n          }\n          input.push(item);\n        }\n\n        if (fname === SQRT) {\n          v[index] = '\\\\sqrt' + this.braces(input.join(','));\n        } else if (fname === ABS) {\n          v[index] = this.brackets(input.join(','), 'abs');\n        } else if (fname === PARENTHESIS) {\n          v[index] = this.brackets(input.join(','), 'parens');\n        } else if (fname === 'limit') {\n          v[index] = ' \\\\lim\\\\limits_{' + input[1] + ' \\\\to ' + input[2] + '} ' + input[0];\n        } else if (fname === 'integrate') {\n          v[index] = '\\\\int' + this.braces(input[0]) + this.braces('d' + input[1]);\n        } else if (fname === 'defint') {\n          v[index] = '\\\\int\\\\limits_' + this.braces(input[1]) + '^' + this.braces(input[2]) + ' ' + input[0] + ' d' + input[3];\n        } else if (fname === FACTORIAL || fname === DOUBLEFACTORIAL) {\n          var arg = symbol.args[0];\n\n          if (arg.power.equals(1) && (arg.isComposite() || arg.isCombination())) {\n            input[0] = this.brackets(input[0]);\n          }\n\n          v[index] = input[0] + (fname === FACTORIAL ? '!' : '!!');\n        } else if (fname === 'floor') {\n          v[index] = '\\\\left \\\\lfloor' + this.braces(input[0]) + '\\\\right \\\\rfloor';\n        } else if (fname === 'ceil') {\n          v[index] = '\\\\left \\\\lceil' + this.braces(input[0]) + '\\\\right \\\\rceil';\n        } // capture log(a, b)\n        else if (fname === Settings.LOG && input.length > 1) {\n            v[index] = '\\\\mathrm' + this.braces(Settings.LOG) + '_' + this.braces(input[1]) + this.brackets(input[0]);\n          } // capture log(a, b)\n          else if (fname === Settings.LOG10) {\n              v[index] = '\\\\mathrm' + this.braces(Settings.LOG) + '_' + this.braces(10) + this.brackets(input[0]);\n            } else if (fname === 'sum') {\n              var a = input[0],\n                  b = input[1],\n                  c = input[2],\n                  d = input[3];\n              v[index] = '\\\\sum\\\\limits_{' + this.braces(b) + '=' + this.braces(c) + '}^' + this.braces(d) + ' ' + this.braces(a) + '';\n            } else if (fname === 'product') {\n              var a = input[0],\n                  b = input[1],\n                  c = input[2],\n                  d = input[3];\n              v[index] = '\\\\prod\\\\limits_{' + this.braces(b) + '=' + this.braces(c) + '}^' + this.braces(d) + ' ' + this.braces(a) + '';\n            } else if (fname === 'nthroot') {\n              v[index] = '\\\\sqrt[' + input[1] + ']' + this.braces(input[0]);\n            } else if (fname === 'mod') {\n              v[index] = input[0] + ' \\\\bmod ' + input[1];\n            } else if (fname === 'realpart') {\n              v[index] = '\\\\operatorname{Re}' + this.brackets(input[0]);\n            } else if (fname === 'imagpart') {\n              v[index] = '\\\\operatorname{Im}' + this.brackets(input[0]);\n            } else {\n              var name = fname !== '' ? '\\\\mathrm' + this.braces(fname.replace(/_/g, '\\\\_')) : '';\n              if (symbol.isConversion) v[index] = name + this.brackets(input.join(''), 'parens');else v[index] = name + this.brackets(input.join(','), 'parens');\n            }\n      } else if (symbol.isComposite()) {\n        var collected = symbol.collectSymbols().sort(group === CP || previousGroup === CP ? function (a, b) {\n          return b.group - a.group;\n        } : function (a, b) {\n          var x = isSymbol(a.power) ? -1 : a.power;\n          var y = isSymbol(b.power) ? -1 : b.power;\n          return y - x;\n        }),\n            symbols = [],\n            l = collected.length;\n\n        for (var i = 0; i < l; i++) {\n          symbols.push(LaTeX.latex(collected[i], option));\n        }\n\n        var value = symbols.join('+');\n        v[index] = !(symbol.isLinear() && symbol.multiplier.equals(1)) || negative ? this.brackets(value, 'parens') : value;\n      } else if (group === CB || previousGroup === EX || previousGroup === CB) {\n        if (group === CB) symbol.distributeExponent(); // This almost feels a little like cheating but I need to know if I should be wrapping the symbol\n        // in brackets or not. We'll do this by checking the value of the numerator and then comparing it\n        // to whether the symbol value is \"simple\" or not.\n\n        var denominator = [],\n            numerator = []; // Generate a profile\n\n        var den_map = [],\n            num_map = [],\n            num_c = 0,\n            den_c = 0;\n\n        var setBrackets = function (container, map, counter) {\n          if (counter > 1 && map.length > 0) {\n            var l = map.length;\n\n            for (var i = 0; i < l; i++) {\n              var idx = map[i],\n                  item = container[idx];\n\n              if (!(/^\\\\left\\(.+\\\\right\\)\\^\\{.+\\}$/g.test(item) || /^\\\\left\\(.+\\\\right\\)$/g.test(item))) {\n                container[idx] = LaTeX.brackets(item, 'parens');\n              }\n            }\n          }\n\n          return container;\n        }; // Generate latex for each of them\n\n\n        symbol.each(function (x) {\n          var isDenom = isNegative(x.power),\n              laTex;\n\n          if (isDenom) {\n            laTex = LaTeX.latex(x.invert(), option);\n            den_c++;\n\n            if (x.isComposite()) {\n              if (symbol.multiplier.den != 1 && Math.abs(x.power) == 1) laTex = LaTeX.brackets(laTex, 'parens');\n              den_map.push(denominator.length); // make a note of where the composite was found\n            }\n\n            denominator.push(laTex);\n          } else {\n            laTex = LaTeX.latex(x, option);\n            num_c++;\n\n            if (x.isComposite()) {\n              if (symbol.multiplier.num != 1 && Math.abs(x.power) == 1) laTex = LaTeX.brackets(laTex, 'parens');\n              num_map.push(numerator.length); // make a note of where the composite was found\n            }\n\n            numerator.push(laTex);\n          }\n        }); // Apply brackets\n\n        setBrackets(numerator, num_map, num_c);\n        v[0] = numerator.join(this.dot); // collapse the numerator into one string\n\n        setBrackets(denominator, den_map, den_c);\n        v[1] = denominator.join(this.dot);\n      }\n\n      return v;\n    },\n    set: function (m, v, p, combine_power) {\n      var isBracketed = function (v) {\n        return /^\\\\left\\(.+\\\\right\\)$/.test(v);\n      }; // format the power if it exists\n\n\n      if (p) p = this.formatP(p); // group CB will have to be wrapped since the power applies to both it's numerator and denominator\n\n      if (combine_power) {\n        // POSSIBLE BUG: If powers for group CB format wrong, investigate this since I might have overlooked something\n        // the assumption is that in every case the denonimator should be empty when dealing with CB. I can't think\n        // of a case where this isn't true\n        var tp = p[0];\n        p[0] = ''; // temporarily make p blank\n      } // merge v and p. Not that v MUST be first since the order matters\n\n\n      v = this.merge(v, p);\n      var mn = m[0],\n          md = m[1],\n          vn = v[0],\n          vd = v[1]; // filters\n      // if the top has a variable but the numerator is one drop it\n\n      if (vn && Number(mn) === 1) mn = ''; // if denominator is 1 drop it always\n\n      if (Number(md) === 1) md = ''; // prepare the top portion but check that it's not already bracketed. If it is then leave out the cdot\n\n      var top = this.join(mn, vn, !isBracketed(vn) ? this.dot : ''); // prepare the bottom portion but check that it's not already bracketed. If it is then leave out the cdot\n\n      var bottom = this.join(md, vd, !isBracketed(vd) ? this.dot : ''); // format the power if it exists\n      // make it a fraction if both top and bottom exists\n\n      if (top && bottom) {\n        var frac = this.frac(top, bottom);\n        if (combine_power && tp) frac = this.brackets(frac) + tp;\n        return frac;\n      } // otherwise only the top exists so return that\n      else return top;\n    },\n    merge: function (a, b) {\n      var r = [];\n\n      for (var i = 0; i < 2; i++) r[i] = a[i] + b[i];\n\n      return r;\n    },\n    // joins together two strings if both exist\n    join: function (n, d, glue) {\n      if (!n && !d) return '';\n      if (n && !d) return n;\n      if (d && !n) return d;\n      return n + glue + d;\n    },\n\n    /**\r\n     * Places subscripts in braces for proper formatting\r\n     * @param {String} v\r\n     * @returns {String}\r\n     */\n    formatSubscripts: function (v) {\n      // Split it at the underscore\n      var arr = v.toString().split('_');\n      var name = ''; // Loop over all entries except the first one\n\n      while (arr.length > 1) {\n        // Wrap all in braces except for the last one\n        if (arr.length > 0) {\n          name = '_' + this.braces(arr.pop() + name);\n        }\n      }\n\n      return arr[0] + name;\n    },\n    formatP: function (p_array) {\n      for (var i = 0; i < 2; i++) {\n        var p = p_array[i];\n        if (p) p_array[i] = '^' + this.braces(p);\n      }\n\n      return p_array;\n    },\n\n    /**\r\n     * formats the fractions accordingly.\r\n     * @param {Frac} f\r\n     * @param {bool} is_pow\r\n     */\n    formatFrac: function (f, is_pow) {\n      var n = f.num.toString(),\n          d = f.den.toString(); // no need to have x^1\n\n      if (is_pow && n === '1' && d === '1') return ''; // no need to have x/1\n\n      if (d === '1') return n;\n      return this.frac(n, d);\n    },\n    frac: function (n, d) {\n      return '\\\\frac' + this.braces(n) + this.braces(d);\n    },\n    braces: function (e) {\n      return '{' + e + '}';\n    },\n    brackets: function (e, typ) {\n      typ = typ || 'parens';\n      var bracketTypes = {\n        parens: ['(', ')'],\n        square: ['[', ']'],\n        brace: ['{', '}'],\n        abs: ['|', '|'],\n        angle: ['\\\\langle', '\\\\rangle']\n      };\n      var bracket = bracketTypes[typ];\n      return '\\\\left' + bracket[0] + e + '\\\\right' + bracket[1];\n    },\n\n    /**\r\n     * Removes extreneous tokens\r\n     * @param {Tokens[]} tokens\r\n     * @returns {Tokens[]}\r\n     */\n    filterTokens: function (tokens) {\n      var filtered = []; // Copy over the type of the scope\n\n      if (isArray(tokens)) {\n        filtered.type = tokens.type;\n      } // the items that need to be disposed\n\n\n      var d = ['\\\\', 'left', 'right', 'big', 'Big', 'large', 'Large'];\n\n      for (var i = 0, l = tokens.length; i < l; i++) {\n        var token = tokens[i];\n        var next_token = tokens[i + 1];\n\n        if (token.value === '\\\\' && next_token.value === '\\\\') {\n          filtered.push(token);\n        } else if (isArray(token)) {\n          filtered.push(LaTeX.filterTokens(token));\n        } else if (d.indexOf(token.value) === -1) {\n          filtered.push(token);\n        }\n      }\n\n      return filtered;\n    },\n\n    /*\r\n     * Parses tokens from LaTeX string. Does not do any error checking\r\n     * @param {Tokens[]} rpn\r\n     * @returns {String}\r\n     */\n    parse: function (raw_tokens) {\n      var i, l;\n      var retval = '';\n      var tokens = this.filterTokens(raw_tokens);\n      var replace = {\n        'cdot': '',\n        'times': '',\n        'infty': 'Infinity'\n      }; // get the next token\n\n      var next = function (n) {\n        return tokens[typeof n === 'undefined' ? ++i : i += n];\n      };\n\n      var parse_next = function () {\n        return LaTeX.parse(next());\n      };\n\n      var get = function (token) {\n        if (token in replace) {\n          return replace[token];\n        } // A quirk with implicit multiplication forces us to check for *\n\n\n        if (token === '*' && tokens[i + 1].value === '&') {\n          next(2); // skip this and the &\n\n          return ',';\n        }\n\n        if (token === '&') {\n          next();\n          return ','; // Skip the *\n        } // If it's the end of a row, return the row separator\n\n\n        if (token === '\\\\') {\n          return '],[';\n        }\n\n        return token;\n      }; // start parsing the tokens\n\n\n      for (i = 0, l = tokens.length; i < l; i++) {\n        var token = tokens[i]; // fractions\n\n        if (token.value === 'frac') {\n          // parse and wrap it in brackets\n          var n = parse_next();\n          var d = parse_next();\n          retval += n + '/' + d;\n        } else if (token.value in LaTeX.symbols) {\n          if (token.value === SQRT && tokens[i + 1].type === 'vector' && tokens[i + 2].type === 'Set') {\n            var base = parse_next();\n            var expr = parse_next();\n            retval += expr + '^' + inBrackets('1/' + base);\n          } else {\n            retval += token.value + parse_next();\n          }\n        } else if (token.value === 'int') {\n          var f = parse_next(); // skip the comma\n\n          i++; // get the variable of integration\n\n          var dx = next().value;\n          dx = get(dx.substring(1, dx.length));\n          retval += 'integrate' + inBrackets(f + ',' + dx);\n        } else if (token.value === 'mathrm') {\n          var f = tokens[++i][0].value;\n          retval += f + parse_next();\n        } // sum and product\n        else if (token.value === 'sum_' || token.value === 'prod_') {\n            var fn = token.value === 'sum_' ? 'sum' : 'product';\n            var nxt = next();\n            i++; // skip the caret\n\n            var end = parse_next();\n            var f = parse_next();\n            retval += fn + inBrackets([f, get(nxt[0]), get(nxt[2]), get(end)].join(','));\n          } else if (token.value === 'lim_') {\n            var nxt = next();\n            retval += 'limit' + inBrackets([parse_next(), get(nxt[0]), get(nxt[2])].join(','));\n          } else if (token.value === 'begin') {\n            var nxt = next();\n\n            if (Array.isArray(nxt)) {\n              var v = nxt[0].value;\n\n              if (v === 'matrix') {\n                // Start a matrix\n                retval += 'matrix([';\n              }\n            }\n          } else if (token.value === 'end') {\n            var nxt = next();\n\n            if (Array.isArray(nxt)) {\n              var v = nxt[0].value;\n\n              if (v === 'matrix') {\n                // End a matrix\n                retval += '])';\n              }\n            }\n          } else {\n            if (Array.isArray(token)) {\n              retval += get(LaTeX.parse(token));\n            } else {\n              retval += get(token.value.toString());\n            }\n          }\n      }\n\n      return inBrackets(retval);\n    }\n  }; //Vector =======================================================================\n\n  function Vector(v) {\n    if (isVector(v)) this.elements = v.items.slice(0);else if (isArray(v)) this.elements = v.slice(0);else this.elements = [].slice.call(arguments);\n  }\n  /*\r\n   * Generates a pre-filled array\r\n   * @param {type} n\r\n   * @param {type} val\r\n   * @returns {unresolved}\r\n   */\n\n\n  Vector.arrayPrefill = function (n, val) {\n    var a = [];\n    val = val || 0;\n\n    for (var i = 0; i < n; i++) a[i] = val;\n\n    return a;\n  };\n  /**\r\n   * Generate a vector from and array\r\n   * @param {type} a\r\n   * @returns {unresolved}\r\n   */\n\n\n  Vector.fromArray = function (a) {\n    var v = new Vector();\n    v.elements = a;\n    return v;\n  };\n  /**\r\n   * Convert a Set to a Vector\r\n   * @param {Set} set\r\n   * @returns {Vector}\r\n   */\n\n\n  Vector.fromSet = function (set) {\n    return Vector.fromArray(set.elements);\n  }; //Ported from Sylvester.js\n\n\n  Vector.prototype = {\n    custom: true,\n    // Returns element i of the vector\n    e: function (i) {\n      return i < 1 || i > this.elements.length ? null : this.elements[i - 1];\n    },\n    set: function (i, val) {\n      if (!isSymbol(val)) val = new Symbol(val);\n      this.elements[i] = val;\n    },\n    // Returns the number of elements the vector has\n    dimensions: function () {\n      return this.elements.length;\n    },\n    // Returns the modulus ('length') of the vector\n    modulus: function () {\n      return block('SAFE', function () {\n        return _.pow(this.dot(this.clone()), new Symbol(0.5));\n      }, undefined, this);\n    },\n    // Returns true iff the vector is equal to the argument\n    eql: function (vector) {\n      var n = this.elements.length;\n      var V = vector.elements || vector;\n\n      if (n !== V.length) {\n        return false;\n      }\n\n      do {\n        if (Math.abs(_.subtract(this.elements[n - 1], V[n - 1]).valueOf()) > PRECISION) {\n          return false;\n        }\n      } while (--n);\n\n      return true;\n    },\n    // Returns a clone of the vector\n    clone: function () {\n      var V = new Vector(),\n          l = this.elements.length;\n\n      for (var i = 0; i < l; i++) {\n        //Rule: all items within the vector must have a clone method.\n        V.elements.push(this.elements[i].clone());\n      }\n\n      if (this.getter) {\n        V.getter = this.getter.clone();\n      }\n\n      return V;\n    },\n    // Maps the vector to another vector according to the given function\n    map: function (fn) {\n      var elements = [];\n      this.each(function (x, i) {\n        elements.push(fn(x, i));\n      });\n      return new Vector(elements);\n    },\n    // Calls the iterator for each element of the vector in turn\n    each: function (fn) {\n      var n = this.elements.length,\n          k = n,\n          i;\n\n      do {\n        i = k - n;\n        fn(this.elements[i], i + 1);\n      } while (--n);\n    },\n    // Returns a new vector created by normalizing the receiver\n    toUnitVector: function () {\n      return block('SAFE', function () {\n        var r = this.modulus();\n\n        if (r.valueOf() === 0) {\n          return this.clone();\n        }\n\n        return this.map(function (x) {\n          return _.divide(x, r);\n        });\n      }, undefined, this);\n    },\n    // Returns the angle between the vector and the argument (also a vector)\n    angleFrom: function (vector) {\n      return block('SAFE', function () {\n        var V = vector.elements || vector;\n        var n = this.elements.length;\n\n        if (n !== V.length) {\n          return null;\n        }\n\n        var dot = new Symbol(0),\n            mod1 = new Symbol(0),\n            mod2 = new Symbol(0); // Work things out in parallel to save time\n\n        this.each(function (x, i) {\n          dot = _.add(dot, _.multiply(x, V[i - 1]));\n          mod1 = _.add(mod1, _.multiply(x, x)); // will not conflict in safe block\n\n          mod2 = _.add(mod2, _.multiply(V[i - 1], V[i - 1])); // will not conflict in safe block\n        });\n        mod1 = _.pow(mod1, new Symbol(0.5));\n        mod2 = _.pow(mod2, new Symbol(0.5));\n\n        var product = _.multiply(mod1, mod2);\n\n        if (product.valueOf() === 0) {\n          return null;\n        }\n\n        var theta = _.divide(dot, product);\n\n        var theta_val = theta.valueOf();\n\n        if (theta_val < -1) {\n          theta = -1;\n        }\n\n        if (theta_val > 1) {\n          theta = 1;\n        }\n\n        return new Symbol(Math.acos(theta));\n      }, undefined, this);\n    },\n    // Returns true iff the vector is parallel to the argument\n    isParallelTo: function (vector) {\n      var angle = this.angleFrom(vector).valueOf();\n      return angle === null ? null : angle <= PRECISION;\n    },\n    // Returns true iff the vector is antiparallel to the argument\n    isAntiparallelTo: function (vector) {\n      var angle = this.angleFrom(vector).valueOf();\n      return angle === null ? null : Math.abs(angle - Math.PI) <= PRECISION;\n    },\n    // Returns true iff the vector is perpendicular to the argument\n    isPerpendicularTo: function (vector) {\n      var dot = this.dot(vector);\n      return dot === null ? null : Math.abs(dot) <= PRECISION;\n    },\n    // Returns the result of adding the argument to the vector\n    add: function (vector) {\n      return block('SAFE', function () {\n        var V = vector.elements || vector;\n\n        if (this.elements.length !== V.length) {\n          return null;\n        }\n\n        return this.map(function (x, i) {\n          return _.add(x, V[i - 1]);\n        });\n      }, undefined, this);\n    },\n    // Returns the result of subtracting the argument from the vector\n    subtract: function (vector) {\n      return block('SAFE', function () {\n        var V = vector.elements || vector;\n\n        if (this.elements.length !== V.length) {\n          return null;\n        }\n\n        return this.map(function (x, i) {\n          return _.subtract(x, V[i - 1]);\n        });\n      }, undefined, this);\n    },\n    // Returns the result of multiplying the elements of the vector by the argument\n    multiply: function (k) {\n      return this.map(function (x) {\n        return x.clone() * k.clone();\n      });\n    },\n    x: function (k) {\n      return this.multiply(k);\n    },\n    // Returns the scalar product of the vector with the argument\n    // Both vectors must have equal dimensionality\n    dot: function (vector) {\n      return block('SAFE', function () {\n        var V = vector.elements || vector;\n        var product = new Symbol(0),\n            n = this.elements.length;\n\n        if (n !== V.length) {\n          return null;\n        }\n\n        do {\n          product = _.add(product, _.multiply(this.elements[n - 1], V[n - 1]));\n        } while (--n);\n\n        return product;\n      }, undefined, this);\n    },\n    // Returns the vector product of the vector with the argument\n    // Both vectors must have dimensionality 3\n    cross: function (vector) {\n      var B = vector.elements || vector;\n\n      if (this.elements.length !== 3 || B.length !== 3) {\n        return null;\n      }\n\n      var A = this.elements;\n      return block('SAFE', function () {\n        return new Vector([_.subtract(_.multiply(A[1], B[2]), _.multiply(A[2], B[1])), _.subtract(_.multiply(A[2], B[0]), _.multiply(A[0], B[2])), _.subtract(_.multiply(A[0], B[1]), _.multiply(A[1], B[0]))]);\n      }, undefined, this);\n    },\n    // Returns the (absolute) largest element of the vector\n    max: function () {\n      var m = 0,\n          n = this.elements.length,\n          k = n,\n          i;\n\n      do {\n        i = k - n;\n\n        if (Math.abs(this.elements[i].valueOf()) > Math.abs(m.valueOf())) {\n          m = this.elements[i];\n        }\n      } while (--n);\n\n      return m;\n    },\n    magnitude: function () {\n      var magnitude = new Symbol(0);\n      this.each(function (e) {\n        magnitude = _.add(magnitude, _.pow(e, new Symbol(2)));\n      });\n      return _.sqrt(magnitude);\n    },\n    // Returns the index of the first match found\n    indexOf: function (x) {\n      var index = null,\n          n = this.elements.length,\n          k = n,\n          i;\n\n      do {\n        i = k - n;\n\n        if (index === null && this.elements[i].valueOf() === x.valueOf()) {\n          index = i + 1;\n        }\n      } while (--n);\n\n      return index;\n    },\n    text: function (x) {\n      return text(this);\n    },\n    toString: function () {\n      return this.text();\n    },\n    latex: function (option) {\n      var tex = [];\n\n      for (var i = 0; i < this.elements.length; i++) {\n        tex.push(LaTeX.latex.call(LaTeX, this.elements[i], option));\n      }\n\n      return '[' + tex.join(', ') + ']';\n    }\n  }; //Matrix =======================================================================\n\n  function Matrix() {\n    var m = arguments,\n        l = m.length,\n        i,\n        el = [];\n\n    if (isMatrix(m)) {\n      // if it's a matrix then make a clone\n      for (i = 0; i < l; i++) {\n        el.push(m[i].slice(0));\n      }\n    } else {\n      var row, lw, rl;\n\n      for (i = 0; i < l; i++) {\n        row = m[i];\n        if (isVector(row)) row = row.elements;\n        if (!isArray(row)) row = [row];\n        rl = row.length;\n        if (lw && lw !== rl) err('Unable to create Matrix. Row dimensions do not match!');\n        el.push(row);\n        lw = rl;\n      }\n    }\n\n    this.elements = el;\n  }\n\n  Matrix.identity = function (n) {\n    var m = new Matrix();\n\n    for (var i = 0; i < n; i++) {\n      m.elements.push([]);\n\n      for (var j = 0; j < n; j++) {\n        m.set(i, j, i === j ? new Symbol(1) : new Symbol(0));\n      }\n    }\n\n    return m;\n  };\n\n  Matrix.fromArray = function (arr) {\n    function F(args) {\n      return Matrix.apply(this, args);\n    }\n\n    F.prototype = Matrix.prototype;\n    return new F(arr);\n  };\n\n  Matrix.zeroMatrix = function (rows, cols) {\n    var m = new Matrix();\n\n    for (var i = 0; i < rows; i++) {\n      m.elements.push(Vector.arrayPrefill(cols, new Symbol(0)));\n    }\n\n    return m;\n  };\n\n  Matrix.prototype = {\n    // needs be true to let the parser know not to try to cast it to a symbol\n    custom: true,\n    get: function (row, column) {\n      if (!this.elements[row]) return undefined;\n      return this.elements[row][column];\n    },\n    map: function (f, raw_values) {\n      var M = new Matrix();\n      this.each(function (e, i, j) {\n        M.set(i, j, f.call(M, e), raw_values);\n      });\n      return M;\n    },\n    set: function (row, column, value, raw) {\n      if (!this.elements[row]) this.elements[row] = [];\n      this.elements[row][column] = raw ? value : isSymbol(value) ? value : new Symbol(value);\n    },\n    cols: function () {\n      return this.elements[0].length;\n    },\n    rows: function () {\n      return this.elements.length;\n    },\n    row: function (n) {\n      if (!n || n > this.cols()) return [];\n      return this.elements[n - 1];\n    },\n    col: function (n) {\n      var nr = this.rows(),\n          col = [];\n      if (n > this.cols() || !n) return col;\n\n      for (var i = 0; i < nr; i++) {\n        col.push(this.elements[i][n - 1]);\n      }\n\n      return col;\n    },\n    eachElement: function (fn) {\n      var nr = this.rows(),\n          nc = this.cols(),\n          i,\n          j;\n\n      for (i = 0; i < nr; i++) {\n        for (j = 0; j < nc; j++) {\n          fn.call(this, this.elements[i][j], i, j);\n        }\n      }\n    },\n    // ported from Sylvester.js\n    determinant: function () {\n      if (!this.isSquare()) {\n        return null;\n      }\n\n      var M = this.toRightTriangular();\n      var det = M.elements[0][0],\n          n = M.elements.length - 1,\n          k = n,\n          i;\n\n      do {\n        i = k - n + 1;\n        det = _.multiply(det, M.elements[i][i]);\n      } while (--n);\n\n      return det;\n    },\n    isSquare: function () {\n      return this.elements.length === this.elements[0].length;\n    },\n    isSingular: function () {\n      return this.isSquare() && this.determinant() === 0;\n    },\n    augment: function (m) {\n      var r = this.rows(),\n          rr = m.rows();\n      if (r !== rr) err(\"Cannot augment matrix. Rows don't match.\");\n\n      for (var i = 0; i < r; i++) {\n        this.elements[i] = this.elements[i].concat(m.elements[i]);\n      }\n\n      return this;\n    },\n    clone: function () {\n      var r = this.rows(),\n          c = this.cols(),\n          m = new Matrix();\n\n      for (var i = 0; i < r; i++) {\n        m.elements[i] = [];\n\n        for (var j = 0; j < c; j++) {\n          var symbol = this.elements[i][j];\n          m.elements[i][j] = isSymbol(symbol) ? symbol.clone() : symbol;\n        }\n      }\n\n      return m;\n    },\n    // ported from Sylvester.js\n    invert: function () {\n      if (!this.isSquare()) err('Matrix is not square!');\n      return block('SAFE', function () {\n        var ni = this.elements.length,\n            ki = ni,\n            i,\n            j;\n        var imatrix = Matrix.identity(ni);\n        var M = this.augment(imatrix).toRightTriangular();\n        var np,\n            kp = M.elements[0].length,\n            p,\n            els,\n            divisor;\n        var inverse_elements = [],\n            new_element; // Matrix is non-singular so there will be no zeros on the diagonal\n        // Cycle through rows from last to first\n\n        do {\n          i = ni - 1; // First, normalise diagonal elements to 1\n\n          els = [];\n          np = kp;\n          inverse_elements[i] = [];\n          divisor = M.elements[i][i];\n\n          do {\n            p = kp - np;\n            new_element = _.divide(M.elements[i][p], divisor.clone());\n            els.push(new_element); // Shuffle of the current row of the right hand side into the results\n            // array as it will not be modified by later runs through this loop\n\n            if (p >= ki) {\n              inverse_elements[i].push(new_element);\n            }\n          } while (--np);\n\n          M.elements[i] = els; // Then, subtract this row from those above it to\n          // give the identity matrix on the left hand side\n\n          for (j = 0; j < i; j++) {\n            els = [];\n            np = kp;\n\n            do {\n              p = kp - np;\n              els.push(_.subtract(M.elements[j][p].clone(), _.multiply(M.elements[i][p].clone(), M.elements[j][i].clone())));\n            } while (--np);\n\n            M.elements[j] = els;\n          }\n        } while (--ni);\n\n        return Matrix.fromArray(inverse_elements);\n      }, undefined, this);\n    },\n    // ported from Sylvester.js\n    toRightTriangular: function () {\n      return block('SAFE', function () {\n        var M = this.clone(),\n            els,\n            fel,\n            nel,\n            n = this.elements.length,\n            k = n,\n            i,\n            np,\n            kp = this.elements[0].length,\n            p;\n\n        do {\n          i = k - n;\n          fel = M.elements[i][i];\n\n          if (fel.valueOf() === 0) {\n            for (var j = i + 1; j < k; j++) {\n              nel = M.elements[j][i];\n\n              if (nel && nel.valueOf() !== 0) {\n                els = [];\n                np = kp;\n\n                do {\n                  p = kp - np;\n                  els.push(_.add(M.elements[i][p].clone(), M.elements[j][p].clone()));\n                } while (--np);\n\n                M.elements[i] = els;\n                break;\n              }\n            }\n          }\n\n          var fel = M.elements[i][i];\n\n          if (fel.valueOf() !== 0) {\n            for (j = i + 1; j < k; j++) {\n              var multiplier = _.divide(M.elements[j][i].clone(), M.elements[i][i].clone());\n\n              els = [];\n              np = kp;\n\n              do {\n                p = kp - np; // Elements with column numbers up to an including the number\n                // of the row that we're subtracting can safely be set straight to\n                // zero, since that's the point of this routine and it avoids having\n                // to loop over and correct rounding errors later\n\n                els.push(p <= i ? new Symbol(0) : _.subtract(M.elements[j][p].clone(), _.multiply(M.elements[i][p].clone(), multiplier.clone())));\n              } while (--np);\n\n              M.elements[j] = els;\n            }\n          }\n        } while (--n);\n\n        return M;\n      }, undefined, this);\n    },\n    transpose: function () {\n      var rows = this.elements.length,\n          cols = this.elements[0].length;\n      var M = new Matrix(),\n          ni = cols,\n          i,\n          nj,\n          j;\n\n      do {\n        i = cols - ni;\n        M.elements[i] = [];\n        nj = rows;\n\n        do {\n          j = rows - nj;\n          M.elements[i][j] = this.elements[j][i].clone();\n        } while (--nj);\n      } while (--ni);\n\n      return M;\n    },\n    // Returns true if the matrix can multiply the argument from the left\n    canMultiplyFromLeft: function (matrix) {\n      var l = isMatrix(matrix) ? matrix.elements.length : matrix.length; // this.columns should equal matrix.rows\n\n      return this.elements[0].length === l;\n    },\n    sameSize: function (matrix) {\n      return this.rows() === matrix.rows() && this.cols() === matrix.cols();\n    },\n    multiply: function (matrix) {\n      return block('SAFE', function () {\n        var M = matrix.elements || matrix;\n\n        if (!this.canMultiplyFromLeft(M)) {\n          if (this.sameSize(matrix)) {\n            var MM = new Matrix();\n            var rows = this.rows();\n\n            for (var i = 0; i < rows; i++) {\n              var e = _.multiply(new Vector(this.elements[i]), new Vector(matrix.elements[i]));\n\n              MM.elements[i] = e.elements;\n            }\n\n            return MM;\n          }\n\n          return null;\n        }\n\n        var ni = this.elements.length,\n            ki = ni,\n            i,\n            nj,\n            kj = M[0].length,\n            j;\n        var cols = this.elements[0].length,\n            elements = [],\n            sum,\n            nc,\n            c;\n\n        do {\n          i = ki - ni;\n          elements[i] = [];\n          nj = kj;\n\n          do {\n            j = kj - nj;\n            sum = new Symbol(0);\n            nc = cols;\n\n            do {\n              c = cols - nc;\n              sum = _.add(sum, _.multiply(this.elements[i][c], M[c][j]));\n            } while (--nc);\n\n            elements[i][j] = sum;\n          } while (--nj);\n        } while (--ni);\n\n        return Matrix.fromArray(elements);\n      }, undefined, this);\n    },\n    add: function (matrix, callback) {\n      var M = new Matrix();\n\n      if (this.sameSize(matrix)) {\n        this.eachElement(function (e, i, j) {\n          var result = _.add(e.clone(), matrix.elements[i][j].clone());\n\n          if (callback) {\n            result = callback.call(M, result, e, matrix.elements[i][j]);\n          }\n\n          M.set(i, j, result);\n        });\n      }\n\n      return M;\n    },\n    subtract: function (matrix, callback) {\n      var M = new Matrix();\n\n      if (this.sameSize(matrix)) {\n        this.eachElement(function (e, i, j) {\n          var result = _.subtract(e.clone(), matrix.elements[i][j].clone());\n\n          if (callback) {\n            result = callback.call(M, result, e, matrix.elements[i][j]);\n          }\n\n          M.set(i, j, result);\n        });\n      }\n\n      return M;\n    },\n    negate: function () {\n      this.each(function (e) {\n        return e.negate();\n      });\n      return this;\n    },\n    toVector: function () {\n      if (this.rows() === 1 || this.cols() === 1) {\n        var v = new Vector();\n        v.elements = this.elements;\n        return v;\n      }\n\n      return this;\n    },\n    toString: function (newline, to_decimal) {\n      var l = this.rows(),\n          s = [];\n      newline = newline === undefined ? '\\n' : newline;\n\n      for (var i = 0; i < l; i++) {\n        s.push('[' + this.elements[i].map(function (x) {\n          var v = to_decimal ? x.multiplier.toDecimal() : x.toString();\n          return x !== undefined ? v : '';\n        }).join(',') + ']');\n      }\n\n      return 'matrix' + inBrackets(s.join(','));\n    },\n    text: function () {\n      return 'matrix(' + this.elements.toString('') + ')';\n    },\n    latex: function (option) {\n      var cols = this.cols(),\n          elements = this.elements;\n      return format('\\\\begin{vmatrix}{0}\\\\end{vmatrix}', function () {\n        var tex = [];\n\n        for (var row in elements) {\n          var row_tex = [];\n\n          for (var i = 0; i < cols; i++) {\n            row_tex.push(LaTeX.latex.call(LaTeX, elements[row][i], option));\n          }\n\n          tex.push(row_tex.join(' & '));\n        }\n\n        return tex.join(' \\\\cr ');\n      });\n    }\n  }; // aliases\n\n  Matrix.prototype.each = Matrix.prototype.eachElement;\n\n  function Set(set) {\n    this.elements = []; // if the first object isn't an array, convert it to one.\n\n    if (!isVector(set)) set = Vector.fromArray(arguments);\n\n    if (set) {\n      var elements = set.elements;\n\n      for (var i = 0, l = elements.length; i < l; i++) {\n        this.add(elements[i]);\n      }\n    }\n  }\n\n  Set.fromArray = function (arr) {\n    function F(args) {\n      return Set.apply(this, args);\n    }\n\n    F.prototype = Set.prototype;\n    return new F(arr);\n  };\n\n  Set.prototype = {\n    add: function (x) {\n      if (!this.contains(x)) this.elements.push(x.clone());\n    },\n    contains: function (x) {\n      for (var i = 0; i < this.elements.length; i++) {\n        var e = this.elements[i];\n        if (x.equals(e)) return true;\n      }\n\n      return false;\n    },\n    each: function (f) {\n      var elements = this.elements;\n      var set = new Set();\n\n      for (var i = 0, l = elements.length; i < l; i++) {\n        var e = elements[i];\n        f.call(this, e, set, i);\n      }\n\n      return set;\n    },\n    clone: function () {\n      var set = new Set();\n      this.each(function (e) {\n        set.add(e.clone());\n      });\n      return set;\n    },\n    union: function (set) {\n      var _union = this.clone();\n\n      set.each(function (e) {\n        _union.add(e);\n      });\n      return _union;\n    },\n    difference: function (set) {\n      var diff = this.clone();\n      set.each(function (e) {\n        diff.remove(e);\n      });\n      return diff;\n    },\n    remove: function (element) {\n      for (var i = 0, l = this.elements.length; i < l; i++) {\n        var e = this.elements[i];\n\n        if (e.equals(element)) {\n          remove(this.elements, i);\n          return true;\n        }\n      }\n\n      return false;\n    },\n    intersection: function (set) {\n      var _intersection = new Set();\n\n      var A = this;\n      set.each(function (e) {\n        if (A.contains(e)) {\n          _intersection.add(e);\n        }\n\n        ;\n      });\n      return _intersection;\n    },\n    intersects: function (set) {\n      return this.intersection(set).elements.length > 0;\n    },\n    is_subset: function (set) {\n      var elements = set.elements;\n\n      for (var i = 0, l = elements.length; i < l; i++) {\n        if (!this.contains(elements[i])) {\n          return false;\n        }\n      }\n\n      return true;\n    },\n    toString: function () {\n      return '{' + this.elements.join(',') + '}';\n    }\n  }; //build ========================================================================\n\n  var Build = {\n    dependencies: {\n      _rename: {\n        'Math2.factorial': 'factorial'\n      },\n      factorial: {\n        'Math2.gamma': Math2.gamma\n      },\n      gamma_incomplete: {\n        'Math2.factorial': Math2.factorial\n      },\n      Li: {\n        'Math2.Ei': Math2.Ei,\n        'Math2.bigLog': Math2.bigLog,\n        'Frac': Frac\n      },\n      Ci: {\n        'Math2.factorial': Math2.factorial\n      },\n      Ei: {\n        'Math2.factorial': Math2.factorial\n      },\n      Si: {\n        'Math2.factorial': Math2.factorial\n      },\n      Shi: {\n        'Math2.factorial': Math2.factorial\n      },\n      Chi: {\n        'isInt': isInt,\n        'nround': nround,\n        'Math2.num_integrate': Math2.num_integrate\n      },\n      factor: {\n        'Math2.ifactor': Math2.ifactor,\n        'Symbol': Symbol\n      },\n      num_integrate: {\n        'Math2.simpson': Math2.simpson,\n        'nround': nround\n      },\n      fib: {\n        'even': even\n      }\n    },\n\n    /* Some functions need to be made numeric safe. Build checks if there's a\r\n     * reformat option and calls that instead when compiling the function string.\r\n     */\n    reformat: {\n      // this simply extends the build function\n      diff: function (symbol, deps) {\n        var v = symbol.args[1].toString();\n        var f = 'var f = ' + Build.build(symbol.args[0].toString(), [v]) + ';';\n        deps[1] += 'var diff = ' + Math2.diff.toString() + ';';\n        deps[1] += f;\n        return ['diff(f)(' + v + ')', deps];\n      }\n    },\n    getProperName: function (f) {\n      var map = {\n        continued_fraction: 'continuedFraction'\n      };\n      return map[f] || f;\n    },\n    // assumes that dependences are at max 2 levels\n    compileDependencies: function (f, deps) {\n      // grab the predefined dependiences\n      var dependencies = Build.dependencies[f]; // the dependency string\n\n      var dep_string = deps && deps[1] ? deps[1] : ''; // the functions to be replaced\n\n      var replacements = deps && deps[0] ? deps[0] : {}; // loop through them and add them to the list\n\n      for (var x in dependencies) {\n        if (typeof dependencies[x] === 'object') continue; // skip object\n\n        var components = x.split('.'); //Math.f becomes f\n        // if the function isn't part of an object then reference the function itself\n\n        dep_string += 'var ' + (components.length > 1 ? components[1] : components[0]) + '=' + dependencies[x] + ';';\n        replacements[x] = components.pop();\n      }\n\n      return [replacements, dep_string];\n    },\n    getArgsDeps: function (symbol, dependencies) {\n      var args = symbol.args;\n\n      for (var i = 0; i < args.length; i++) {\n        symbol.args[i].each(function (x) {\n          if (x.group === FN) dependencies = Build.compileDependencies(x.fname, dependencies);\n        });\n      }\n\n      return dependencies;\n    },\n    build: function (symbol, arg_array) {\n      symbol = block('PARSE2NUMBER', function () {\n        return _.parse(symbol);\n      }, true);\n      var args = variables(symbol);\n      var supplements = [];\n      var dependencies = [];\n\n      var ftext = function (symbol, xports) {\n        //Fix for #545 - Parentheses confuse build.\n        if (symbol.fname === '') {\n          symbol = Symbol.unwrapPARENS(symbol);\n        }\n\n        xports = xports || [];\n        var c = [],\n            group = symbol.group,\n            prefix = '';\n\n        var ftext_complex = function (group) {\n          var d = group === CB ? '*' : '+',\n              cc = [];\n\n          for (var x in symbol.symbols) {\n            var sym = symbol.symbols[x],\n                ft = ftext(sym, xports)[0]; // wrap it in brackets if it's group PL or CP\n\n            if (sym.isComposite()) ft = inBrackets(ft);\n            cc.push(ft);\n          }\n\n          var retval = cc.join(d);\n          retval = retval && !symbol.multiplier.equals(1) ? inBrackets(retval) : retval;\n          return retval;\n        },\n            ftext_function = function (bn) {\n          var retval;\n          if (bn in Math) retval = 'Math.' + bn;else {\n            bn = Build.getProperName(bn);\n\n            if (supplements.indexOf(bn) === -1) {\n              // make sure you're not adding the function twice\n              //Math2 functions aren't part of the standard javascript\n              //Math library and must be exported.\n              xports.push('var ' + bn + ' = ' + Math2[bn].toString() + '; ');\n              supplements.push(bn);\n            }\n\n            retval = bn;\n          }\n          retval = retval + inBrackets(symbol.args.map(function (x) {\n            return ftext(x, xports)[0];\n          }).join(','));\n          return retval;\n        }; // the multiplier\n\n\n        if (group === N) c.push(symbol.multiplier.toDecimal());else if (symbol.multiplier.equals(-1)) prefix = '-';else if (!symbol.multiplier.equals(1)) c.push(symbol.multiplier.toDecimal()); // the value\n\n        var value;\n        if (group === S || group === P) value = symbol.value;else if (group === FN) {\n          dependencies = Build.compileDependencies(symbol.fname, dependencies);\n          dependencies = Build.getArgsDeps(symbol, dependencies);\n\n          if (Build.reformat[symbol.fname]) {\n            var components = Build.reformat[symbol.fname](symbol, dependencies);\n            dependencies = components[1];\n            value = components[0];\n          } else {\n            value = ftext_function(symbol.fname);\n          }\n        } else if (group === EX) {\n          var pg = symbol.previousGroup;\n          if (pg === N || pg === S) value = symbol.value;else if (pg === FN) {\n            value = ftext_function(symbol.fname);\n            dependencies = Build.compileDependencies(symbol.fname, dependencies);\n            dependencies = Build.getArgsDeps(symbol, dependencies);\n          } else value = ftext_complex(symbol.previousGroup);\n        } else {\n          value = ftext_complex(symbol.group);\n        }\n\n        if (symbol.group !== N && !symbol.power.equals(1)) {\n          var pow = ftext(_.parse(symbol.power));\n          xports.push(pow[1]);\n          value = 'Math.pow' + inBrackets(value + ',' + pow[0]);\n        }\n\n        if (value) c.push(prefix + value);\n        return [c.join('*'), xports.join('').replace(/\\n+\\s+/g, ' ')];\n      };\n\n      if (arg_array) {\n        // Fix for issue #546\n        // Disable argument checking since it's a bit presumptuous.\n        // Consider f(x) = 5; If I explicitely pass in an argument array contain x \n        // this check will fail and complain since the function doesn't contain x.\n\n        /*\r\n         for (var i = 0; i < args.length; i++) {\r\n         var arg = args[i];\r\n         if (arg_array.indexOf(arg) === -1)\r\n         err(arg + ' not found in argument array');\r\n         }\r\n         */\n        args = arg_array;\n      }\n\n      var f_array = ftext(symbol); // make all the substitutions;\n\n      for (var x in dependencies[0]) {\n        var alias = dependencies[0][x];\n        f_array[1] = f_array[1].replace(x, alias);\n        dependencies[1] = dependencies[1].replace(x, alias);\n      }\n\n      var f = new Function(args, (dependencies[1] || '') + f_array[1] + ' return ' + f_array[0] + ';');\n      return f;\n    }\n  }; //finalize =====================================================================\n\n  /* FINALIZE */\n\n  (function () {\n    reserveNames(_.CONSTANTS);\n    reserveNames(_.functions);\n\n    _.initConstants(); //bug fix for error but needs to be revisited\n\n\n    if (!_.error) _.error = err; //Store the log and log10 functions\n\n    Settings.LOG_FNS = {\n      log: _.functions['log'],\n      log10: _.functions['log10']\n    };\n  })();\n  /* END FINALIZE */\n  //Core =========================================================================\n\n\n  var Utils = {\n    allSame: allSame,\n    allNumeric: allNumeric,\n    arguments2Array: arguments2Array,\n    arrayAddSlices: arrayAddSlices,\n    arrayClone: arrayClone,\n    arrayMax: arrayMax,\n    arrayMin: arrayMin,\n    arrayEqual: arrayEqual,\n    arrayUnique: arrayUnique,\n    arrayGetVariables: arrayGetVariables,\n    arraySum: arraySum,\n    block: block,\n    build: Build.build,\n    clearU: clearU,\n    comboSort: comboSort,\n    compare: compare,\n    convertToVector: convertToVector,\n    customError: customError,\n    customType: customType,\n    decompose_fn: decompose_fn,\n    each: each,\n    evaluate: evaluate,\n    even: even,\n    evenFraction: evenFraction,\n    fillHoles: fillHoles,\n    firstObject: firstObject,\n    format: format,\n    generatePrimes: generatePrimes,\n    getCoeffs: getCoeffs,\n    getU: getU,\n    importFunctions: importFunctions,\n    inBrackets: inBrackets,\n    isArray: isArray,\n    isExpression: isExpression,\n    isFraction: isFraction,\n    isInt: isInt,\n    isMatrix: isMatrix,\n    isNegative: isNegative,\n    isNumericSymbol: isNumericSymbol,\n    isPrime: isPrime,\n    isReserved: isReserved,\n    isSymbol: isSymbol,\n    isVariableSymbol: isVariableSymbol,\n    isVector: isVector,\n    keys: keys,\n    knownVariable: knownVariable,\n    nroots: nroots,\n    remove: remove,\n    reserveNames: reserveNames,\n    range: range,\n    round: nround,\n    sameSign: sameSign,\n    scientificToDecimal: scientificToDecimal,\n    separate: separate,\n    stringReplace: stringReplace,\n    text: text,\n    validateName: validateName,\n    variables: variables,\n    warn: warn\n  }; //This contains all the parts of nerdamer and enables nerdamer's internal functions\n  //to be used.\n\n  var C = {\n    groups: Groups,\n    Symbol: Symbol,\n    Expression: Expression,\n    Frac: Frac,\n    Vector: Vector,\n    Matrix: Matrix,\n    Parser: Parser,\n    Scientific: Scientific,\n    Fraction: Fraction,\n    Math2: Math2,\n    LaTeX: LaTeX,\n    Utils: Utils,\n    PARSER: _,\n    PARENTHESIS: PARENTHESIS,\n    Settings: Settings,\n    err: err,\n    bigInt: bigInt,\n    bigDec: bigDec,\n    exceptions: exceptions\n  }; //libExports ===================================================================\n\n  /**\r\n   *\r\n   * @param {String} expression the expression to be evaluated\r\n   * @param {Object} subs the object containing the variable values\r\n   * @param {Integer} location a specific location in the equation list to\r\n   * insert the evaluated expression\r\n   * @param {String} option additional options\r\n   * @returns {Expression}\r\n   */\n\n  var libExports = function (expression, subs, option, location) {\n    // Initiate the numer flag\n    var numer = false; // Is the user declaring a function?\n\n    var fndec = /^([a-z_][a-z\\d\\_]*)\\(([a-z_,\\s]*)\\):=(.+)$/gi.exec(expression);\n    if (fndec) return nerdamer.setFunction(fndec[1], fndec[2].split(','), fndec[3]); // var variable, fn, args;\n    // Convert any expression passed in to a string\n\n    if (expression instanceof Expression) expression = expression.toString(); // Convert it to an array for simplicity\n\n    if (!isArray(option)) {\n      option = typeof option === 'undefined' ? [] : [option];\n    }\n\n    option.forEach(function (o) {\n      // Turn on the numer flag if requested\n      if (o === 'numer') {\n        numer = true;\n        return;\n      } // Wrap it in a function if requested. This only holds true for\n      // functions that take a single argument which is the expression\n\n\n      var f = _.functions[option]; // If there's a function and it takes a single argument, then wrap\n      // the expression in it\n\n      if (f && f[1] === 1) {\n        expression = `${o}(${expression})`;\n      }\n    });\n    var e = block('PARSE2NUMBER', function () {\n      return _.parse(expression, subs);\n    }, numer || Settings.PARSE2NUMBER);\n\n    if (location) {\n      EXPRESSIONS[location - 1] = e;\n    } else {\n      EXPRESSIONS.push(e);\n    }\n\n    return new Expression(e);\n  };\n  /**\r\n   * Converts expression into rpn form\r\n   * @param {String} expression\r\n   * @returns {Token[]}\r\n   */\n\n\n  libExports.rpn = function (expression) {\n    return _.tokenize(_.toRPN(expression));\n  };\n  /**\r\n   * Generates LaTeX from expression string\r\n   * @param {String} e\r\n   * @param {object} opt\r\n   * @returns {String}\r\n   */\n\n\n  libExports.convertToLaTeX = function (e, opt) {\n    return _.toTeX(e, opt);\n  };\n  /**\r\n   * Converts latex to text - Very very very basic at the moment\r\n   * @param {String} e\r\n   * @returns {String}\r\n   */\n\n\n  libExports.convertFromLaTeX = function (e) {\n    var txt = LaTeX.parse(_.tokenize(e));\n    return new Expression(_.parse(txt));\n  };\n  /**\r\n   * Get the version of nerdamer or a loaded add-on\r\n   * @param {String} add_on - The add-on being checked\r\n   * @returns {String} returns the version of nerdamer\r\n   */\n\n\n  libExports.version = function (add_on) {\n    if (add_on) {\n      try {\n        return C[add_on].version;\n      } catch (e) {\n        return \"No module named \" + add_on + \" found!\";\n      }\n    }\n\n    return version;\n  };\n  /**\r\n   * Get nerdamer generated warnings\r\n   * @returns {String[]}\r\n   */\n\n\n  libExports.getWarnings = function () {\n    return WARNINGS;\n  };\n  /**\r\n   *\r\n   * @param {String} constant The name of the constant to be set\r\n   * @param {mixed} value The value of the constant\r\n   * @returns {Object} Returns the nerdamer object\r\n   */\n\n\n  libExports.setConstant = function (constant, value) {\n    validateName(constant);\n\n    if (!isReserved(constant)) {\n      //fix for issue #127\n      if (value === 'delete' || value === '') {\n        delete _.CONSTANTS[constant];\n      } else {\n        if (isNaN(value)) throw new NerdamerTypeError('Constant must be a number!');\n        _.CONSTANTS[constant] = value;\n      }\n    }\n\n    return this;\n  };\n  /**\r\n   * Returns the value of a previously set constant\r\n   * @param {type} constant\r\n   * @returns {String}\r\n   */\n\n\n  libExports.getConstant = function (constant) {\n    return String(_.constant[constant]);\n  };\n  /**\r\n   *\r\n   * @param {String} name The name of the function\r\n   * @param {Array} params_array A list containing the parameter name of the functions\r\n   * @param {String} body The body of the function\r\n   * @returns {Boolean} returns true if succeeded and falls on fail\r\n   * @example nerdamer.setFunction('f',['x'], 'x^2+2');\r\n   */\n\n\n  libExports.setFunction = setFunction;\n  /**\r\n   *\r\n   * @returns {C} Exports the nerdamer core functions and objects\r\n   */\n\n  libExports.getCore = function () {\n    return C;\n  };\n\n  libExports.getExpression = libExports.getEquation = Expression.getExpression;\n  /**\r\n   *\r\n   * @param {Boolean} asArray The returned names are returned as an array if this is set to true;\r\n   * @returns {String|Array}\r\n   */\n\n  libExports.reserved = function (asArray) {\n    if (asArray) {\n      return RESERVED;\n    }\n\n    return RESERVED.join(', ');\n  };\n  /**\r\n   *\r\n   * @param {Integer} equation_number the number of the equation to clear.\r\n   * If 'all' is supplied then all equations are cleared\r\n   * @param {Boolean} keep_EXPRESSIONS_fixed use true if you don't want to keep EXPRESSIONS length fixed\r\n   * @returns {Object} Returns the nerdamer object\r\n   */\n\n\n  libExports.clear = function (equation_number, keep_EXPRESSIONS_fixed) {\n    if (equation_number === 'all') {\n      EXPRESSIONS = [];\n    } else if (equation_number === 'last') {\n      EXPRESSIONS.pop();\n    } else if (equation_number === 'first') {\n      EXPRESSIONS.shift();\n    } else {\n      var index = !equation_number ? EXPRESSIONS.length : equation_number - 1;\n      keep_EXPRESSIONS_fixed === true ? EXPRESSIONS[index] = undefined : remove(EXPRESSIONS, index);\n    }\n\n    return this;\n  };\n  /**\r\n   * Alias for nerdamer.clear('all')\r\n   */\n\n\n  libExports.flush = function () {\n    this.clear('all');\n    return this;\n  };\n  /**\r\n   *\r\n   * @param {Boolean} asObject\r\n   * @param {Boolean} asLaTeX\r\n   * @param {String|String[]} option\r\n   * @returns {Array}\r\n   */\n\n\n  libExports.expressions = function (asObject, asLaTeX, option) {\n    var result = asObject ? {} : [];\n\n    for (var i = 0; i < EXPRESSIONS.length; i++) {\n      var eq = asLaTeX ? LaTeX.latex(EXPRESSIONS[i], option) : text(EXPRESSIONS[i], option);\n      asObject ? result[i + 1] = eq : result.push(eq);\n    }\n\n    return result;\n  }; //the method for registering modules\n\n\n  libExports.register = function (obj) {\n    var core = this.getCore();\n\n    if (isArray(obj)) {\n      for (var i = 0; i < obj.length; i++) {\n        if (obj) this.register(obj[i]);\n      }\n    } else if (obj && Settings.exclude.indexOf(obj.name) === -1) {\n      //make sure all the dependencies are available\n      if (obj.dependencies) {\n        for (var i = 0; i < obj.dependencies.length; i++) if (!core[obj.dependencies[i]]) throw new Error(format('{0} requires {1} to be loaded!', obj.name, obj.dependencies[i]));\n      } //if no parent object is provided then the function does not have an address and cannot be called directly\n\n\n      var parent_obj = obj.parent,\n          fn = obj.build.call(core); //call constructor to get function\n\n      if (parent_obj) {\n        if (!core[parent_obj]) core[obj.parent] = {};\n        var ref_obj = parent_obj === 'nerdamer' ? this : core[parent_obj]; //attach the function to the core\n\n        ref_obj[obj.name] = fn;\n      }\n\n      if (obj.visible) _.functions[obj.name] = [fn, obj.numargs]; //make the function available\n    }\n  };\n  /**\r\n   * @param {String} name variable name\r\n   * @returns {boolean} validates if the profided string is a valid variable name\r\n   */\n\n\n  libExports.validateName = validateName;\n  /**\r\n   * @param {String} varname variable name\r\n   * @returns {boolean} validates if the profided string is a valid variable name\r\n   */\n\n  libExports.validVarName = function (varname) {\n    try {\n      validateName(varname);\n      return RESERVED.indexOf(varname) === -1;\n    } catch (e) {\n      return false;\n    }\n  };\n  /**\r\n   *\r\n   * @returns {Array} Array of functions currently supported by nerdamer\r\n   */\n\n\n  libExports.supported = function () {\n    return keys(_.functions);\n  };\n  /**\r\n   *\r\n   * @returns {Number} The number equations/expressions currently loaded\r\n   */\n\n\n  libExports.numEquations = libExports.numExpressions = function () {\n    return EXPRESSIONS.length;\n  };\n  /* END EXPORTS */\n\n  /**\r\n   *\r\n   * @param {String} v variable to be set\r\n   * @param {String} val value of variable. This can be a variable expression or number\r\n   * @returns {Object} Returns the nerdamer object\r\n   */\n\n\n  libExports.setVar = function (v, val) {\n    validateName(v); //check if it's not already a constant\n\n    if (v in _.CONSTANTS) err('Cannot set value for constant ' + v);\n    if (val === 'delete' || val === '') delete VARS[v];else {\n      VARS[v] = isSymbol(val) ? val : _.parse(val);\n    }\n    return this;\n  };\n  /**\r\n   * Returns the value of a set variable\r\n   * @param {type} v\r\n   * @returns {varies}\r\n   */\n\n\n  libExports.getVar = function (v) {\n    return VARS[v];\n  };\n  /**\r\n   * Clear the variables from the VARS object\r\n   * @returns {Object} Returns the nerdamer object\r\n   */\n\n\n  libExports.clearVars = function () {\n    VARS = {};\n    return this;\n  };\n  /**\r\n   *\r\n   * @param {Function} loader\r\n   * @returns {nerdamer}\r\n   */\n\n\n  libExports.load = function (loader) {\n    loader.call(this);\n    return this;\n  };\n  /**\r\n   * @param {String} output - output format. Can be 'object' (just returns the VARS object), 'text' or 'latex'. Default: 'text'\r\n   * @param {String|String[]} option\r\n   * @returns {Object} Returns an object with the variables\r\n   */\n\n\n  libExports.getVars = function (output, option) {\n    output = output || 'text';\n    var variables = {};\n    if (output === 'object') variables = VARS;else {\n      for (var v in VARS) {\n        if (output === 'latex') {\n          variables[v] = VARS[v].latex(option);\n        } else if (output === 'text') {\n          variables[v] = VARS[v].text(option);\n        }\n      }\n    }\n    return variables;\n  };\n  /**\r\n   * Set the value of a setting\r\n   * @param {String} setting The setting to be changed\r\n   * @param {boolean} value\r\n   */\n\n\n  libExports.set = function (setting, value) {\n    //current options:\n    //PARSE2NUMBER, suppress_errors\n    if (typeof setting === 'object') for (var x in setting) {\n      libExports.set(x, setting[x]);\n    }\n    var disallowed = ['SAFE'];\n    if (disallowed.indexOf(setting) !== -1) err('Cannot modify setting: ' + setting);\n\n    if (setting === 'PRECISION') {\n      bigDec.set({\n        precision: value\n      });\n      Settings.PRECISION = value; // Avoid that nerdamer puts out garbage after 21 decimal place\n\n      if (value > 21) {\n        this.set('USE_BIG', true);\n      }\n    } else if (setting === 'USE_LN' && value === true) {\n      //set log as LN\n      Settings.LOG = 'LN'; //set log10 as log\n\n      Settings.LOG10 = 'log'; //point the functions in the right direction\n\n      _.functions['log'] = Settings.LOG_FNS.log10; //log is now log10\n      //the log10 function must be explicitly set\n\n      _.functions['log'][0] = function (x) {\n        if (x.isConstant()) return new Symbol(Math.log10(x));\n        return _.symfunction(Settings.LOG10, [x]);\n      };\n\n      _.functions['LN'] = Settings.LOG_FNS.log; //LN is now log\n      //remove log10\n\n      delete _.functions['log10'];\n    } else Settings[setting] = value;\n  };\n  /**\r\n   * Get the value of a setting\r\n   * @param {type} setting\r\n   * @returns {undefined}\r\n   */\n\n\n  libExports.get = function (setting) {\n    return Settings[setting];\n  };\n  /**\r\n   * This functions makes internal functions available externally\r\n   * @param {bool} override Override the functions when calling api if it exists\r\n   */\n\n\n  libExports.api = function (override) {\n    //Map internal functions to external ones\n    var linker = function (fname) {\n      return function () {\n        var args = [].slice.call(arguments);\n\n        for (var i = 0; i < args.length; i++) args[i] = _.parse(args[i]);\n\n        return new Expression(block('PARSE2NUMBER', function () {\n          return _.callfunction(fname, args);\n        }));\n      };\n    }; //perform the mapping\n\n\n    for (var x in _.functions) if (!(x in libExports) || override) libExports[x] = linker(x);\n  };\n\n  libExports.replaceFunction = function (name, fn, num_args) {\n    var existing = _.functions[name];\n    var new_num_args = typeof num_args === 'undefined' ? existing[1] : num_args;\n    _.functions[name] = [fn.call(undefined, existing[0], C), new_num_args];\n  };\n\n  libExports.setOperator = function (operator, shift) {\n    _.setOperator(operator, shift);\n  };\n\n  libExports.getOperator = function (operator) {\n    return _.getOperator(operator);\n  };\n\n  libExports.aliasOperator = function (operator, withOperator) {\n    _.aliasOperator(operator, withOperator);\n  };\n\n  libExports.tree = function (expression) {\n    return _.tree(_.toRPN(_.tokenize(expression)));\n  };\n\n  libExports.htmlTree = function (expression, indent) {\n    var tree = this.tree(expression);\n    return '<div class=\"tree\">\\n' + '    <ul>\\n' + '        <li>\\n' + tree.toHTML(3, indent) + '\\n' + '        </li>\\n' + '    </ul>\\n' + '</div>';\n  };\n\n  libExports.addPeeker = function (name, f) {\n    if (_.peekers[name]) _.peekers[name].push(f);\n  };\n\n  libExports.removePeeker = function (name, f) {\n    remove(_.peekers[name], f);\n  };\n\n  libExports.parse = function (e) {\n    return String(e).split(';').map(function (x) {\n      return _.parse(x);\n    });\n  };\n\n  libExports.api();\n  return libExports; //Done\n  //imports ======================================================================\n}({\n  //https://github.com/peterolson/BigInteger.js\n  bigInt: function () {\n    var bigInt = function (undefined) {\n      \"use strict\";\n\n      var BASE = 1e7,\n          LOG_BASE = 7,\n          MAX_INT = 9007199254740992,\n          MAX_INT_ARR = smallToArray(MAX_INT),\n          LOG_MAX_INT = Math.log(MAX_INT);\n\n      function Integer(v, radix) {\n        if (typeof v === \"undefined\") return Integer[0];\n        if (typeof radix !== \"undefined\") return +radix === 10 ? parseValue(v) : parseBase(v, radix);\n        return parseValue(v);\n      }\n\n      function BigInteger(value, sign) {\n        this.value = value;\n        this.sign = sign;\n        this.isSmall = false;\n      }\n\n      BigInteger.prototype = Object.create(Integer.prototype);\n\n      function SmallInteger(value) {\n        this.value = value;\n        this.sign = value < 0;\n        this.isSmall = true;\n      }\n\n      SmallInteger.prototype = Object.create(Integer.prototype);\n\n      function isPrecise(n) {\n        return -MAX_INT < n && n < MAX_INT;\n      }\n\n      function smallToArray(n) {\n        if (n < 1e7) return [n];\n        if (n < 1e14) return [n % 1e7, Math.floor(n / 1e7)];\n        return [n % 1e7, Math.floor(n / 1e7) % 1e7, Math.floor(n / 1e14)];\n      }\n\n      function arrayToSmall(arr) {\n        trim(arr);\n        var length = arr.length;\n\n        if (length < 4 && compareAbs(arr, MAX_INT_ARR) < 0) {\n          switch (length) {\n            case 0:\n              return 0;\n\n            case 1:\n              return arr[0];\n\n            case 2:\n              return arr[0] + arr[1] * BASE;\n\n            default:\n              return arr[0] + (arr[1] + arr[2] * BASE) * BASE;\n          }\n        }\n\n        return arr;\n      }\n\n      function trim(v) {\n        var i = v.length;\n\n        while (v[--i] === 0);\n\n        v.length = i + 1;\n      }\n\n      function createArray(length) {\n        var x = new Array(length);\n        var i = -1;\n\n        while (++i < length) {\n          x[i] = 0;\n        }\n\n        return x;\n      }\n\n      function truncate(n) {\n        if (n > 0) return Math.floor(n);\n        return Math.ceil(n);\n      }\n\n      function add(a, b) {\n        var l_a = a.length,\n            l_b = b.length,\n            r = new Array(l_a),\n            carry = 0,\n            base = BASE,\n            sum,\n            i;\n\n        for (i = 0; i < l_b; i++) {\n          sum = a[i] + b[i] + carry;\n          carry = sum >= base ? 1 : 0;\n          r[i] = sum - carry * base;\n        }\n\n        while (i < l_a) {\n          sum = a[i] + carry;\n          carry = sum === base ? 1 : 0;\n          r[i++] = sum - carry * base;\n        }\n\n        if (carry > 0) r.push(carry);\n        return r;\n      }\n\n      function addAny(a, b) {\n        if (a.length >= b.length) return add(a, b);\n        return add(b, a);\n      }\n\n      function addSmall(a, carry) {\n        var l = a.length,\n            r = new Array(l),\n            base = BASE,\n            sum,\n            i;\n\n        for (i = 0; i < l; i++) {\n          sum = a[i] - base + carry;\n          carry = Math.floor(sum / base);\n          r[i] = sum - carry * base;\n          carry += 1;\n        }\n\n        while (carry > 0) {\n          r[i++] = carry % base;\n          carry = Math.floor(carry / base);\n        }\n\n        return r;\n      }\n\n      BigInteger.prototype.add = function (v) {\n        var n = parseValue(v);\n\n        if (this.sign !== n.sign) {\n          return this.subtract(n.negate());\n        }\n\n        var a = this.value,\n            b = n.value;\n\n        if (n.isSmall) {\n          return new BigInteger(addSmall(a, Math.abs(b)), this.sign);\n        }\n\n        return new BigInteger(addAny(a, b), this.sign);\n      };\n\n      BigInteger.prototype.plus = BigInteger.prototype.add;\n\n      SmallInteger.prototype.add = function (v) {\n        var n = parseValue(v);\n        var a = this.value;\n\n        if (a < 0 !== n.sign) {\n          return this.subtract(n.negate());\n        }\n\n        var b = n.value;\n\n        if (n.isSmall) {\n          if (isPrecise(a + b)) return new SmallInteger(a + b);\n          b = smallToArray(Math.abs(b));\n        }\n\n        return new BigInteger(addSmall(b, Math.abs(a)), a < 0);\n      };\n\n      SmallInteger.prototype.plus = SmallInteger.prototype.add;\n\n      function subtract(a, b) {\n        var a_l = a.length,\n            b_l = b.length,\n            r = new Array(a_l),\n            borrow = 0,\n            base = BASE,\n            i,\n            difference;\n\n        for (i = 0; i < b_l; i++) {\n          difference = a[i] - borrow - b[i];\n\n          if (difference < 0) {\n            difference += base;\n            borrow = 1;\n          } else borrow = 0;\n\n          r[i] = difference;\n        }\n\n        for (i = b_l; i < a_l; i++) {\n          difference = a[i] - borrow;\n          if (difference < 0) difference += base;else {\n            r[i++] = difference;\n            break;\n          }\n          r[i] = difference;\n        }\n\n        for (; i < a_l; i++) {\n          r[i] = a[i];\n        }\n\n        trim(r);\n        return r;\n      }\n\n      function subtractAny(a, b, sign) {\n        var value;\n\n        if (compareAbs(a, b) >= 0) {\n          value = subtract(a, b);\n        } else {\n          value = subtract(b, a);\n          sign = !sign;\n        }\n\n        value = arrayToSmall(value);\n\n        if (typeof value === \"number\") {\n          if (sign) value = -value;\n          return new SmallInteger(value);\n        }\n\n        return new BigInteger(value, sign);\n      }\n\n      function subtractSmall(a, b, sign) {\n        var l = a.length,\n            r = new Array(l),\n            carry = -b,\n            base = BASE,\n            i,\n            difference;\n\n        for (i = 0; i < l; i++) {\n          difference = a[i] + carry;\n          carry = Math.floor(difference / base);\n          difference %= base;\n          r[i] = difference < 0 ? difference + base : difference;\n        }\n\n        r = arrayToSmall(r);\n\n        if (typeof r === \"number\") {\n          if (sign) r = -r;\n          return new SmallInteger(r);\n        }\n\n        return new BigInteger(r, sign);\n      }\n\n      BigInteger.prototype.subtract = function (v) {\n        var n = parseValue(v);\n\n        if (this.sign !== n.sign) {\n          return this.add(n.negate());\n        }\n\n        var a = this.value,\n            b = n.value;\n        if (n.isSmall) return subtractSmall(a, Math.abs(b), this.sign);\n        return subtractAny(a, b, this.sign);\n      };\n\n      BigInteger.prototype.minus = BigInteger.prototype.subtract;\n\n      SmallInteger.prototype.subtract = function (v) {\n        var n = parseValue(v);\n        var a = this.value;\n\n        if (a < 0 !== n.sign) {\n          return this.add(n.negate());\n        }\n\n        var b = n.value;\n\n        if (n.isSmall) {\n          return new SmallInteger(a - b);\n        }\n\n        return subtractSmall(b, Math.abs(a), a >= 0);\n      };\n\n      SmallInteger.prototype.minus = SmallInteger.prototype.subtract;\n\n      BigInteger.prototype.negate = function () {\n        return new BigInteger(this.value, !this.sign);\n      };\n\n      SmallInteger.prototype.negate = function () {\n        var sign = this.sign;\n        var small = new SmallInteger(-this.value);\n        small.sign = !sign;\n        return small;\n      };\n\n      BigInteger.prototype.abs = function () {\n        return new BigInteger(this.value, false);\n      };\n\n      SmallInteger.prototype.abs = function () {\n        return new SmallInteger(Math.abs(this.value));\n      };\n\n      function multiplyLong(a, b) {\n        var a_l = a.length,\n            b_l = b.length,\n            l = a_l + b_l,\n            r = createArray(l),\n            base = BASE,\n            product,\n            carry,\n            i,\n            a_i,\n            b_j;\n\n        for (i = 0; i < a_l; ++i) {\n          a_i = a[i];\n\n          for (var j = 0; j < b_l; ++j) {\n            b_j = b[j];\n            product = a_i * b_j + r[i + j];\n            carry = Math.floor(product / base);\n            r[i + j] = product - carry * base;\n            r[i + j + 1] += carry;\n          }\n        }\n\n        trim(r);\n        return r;\n      }\n\n      function multiplySmall(a, b) {\n        var l = a.length,\n            r = new Array(l),\n            base = BASE,\n            carry = 0,\n            product,\n            i;\n\n        for (i = 0; i < l; i++) {\n          product = a[i] * b + carry;\n          carry = Math.floor(product / base);\n          r[i] = product - carry * base;\n        }\n\n        while (carry > 0) {\n          r[i++] = carry % base;\n          carry = Math.floor(carry / base);\n        }\n\n        return r;\n      }\n\n      function shiftLeft(x, n) {\n        var r = [];\n\n        while (n-- > 0) r.push(0);\n\n        return r.concat(x);\n      }\n\n      function multiplyKaratsuba(x, y) {\n        var n = Math.max(x.length, y.length);\n        if (n <= 30) return multiplyLong(x, y);\n        n = Math.ceil(n / 2);\n        var b = x.slice(n),\n            a = x.slice(0, n),\n            d = y.slice(n),\n            c = y.slice(0, n);\n        var ac = multiplyKaratsuba(a, c),\n            bd = multiplyKaratsuba(b, d),\n            abcd = multiplyKaratsuba(addAny(a, b), addAny(c, d));\n        var product = addAny(addAny(ac, shiftLeft(subtract(subtract(abcd, ac), bd), n)), shiftLeft(bd, 2 * n));\n        trim(product);\n        return product;\n      }\n\n      function useKaratsuba(l1, l2) {\n        return -.012 * l1 - .012 * l2 + 15e-6 * l1 * l2 > 0;\n      }\n\n      BigInteger.prototype.multiply = function (v) {\n        var n = parseValue(v),\n            a = this.value,\n            b = n.value,\n            sign = this.sign !== n.sign,\n            abs;\n\n        if (n.isSmall) {\n          if (b === 0) return Integer[0];\n          if (b === 1) return this;\n          if (b === -1) return this.negate();\n          abs = Math.abs(b);\n\n          if (abs < BASE) {\n            return new BigInteger(multiplySmall(a, abs), sign);\n          }\n\n          b = smallToArray(abs);\n        }\n\n        if (useKaratsuba(a.length, b.length)) return new BigInteger(multiplyKaratsuba(a, b), sign);\n        return new BigInteger(multiplyLong(a, b), sign);\n      };\n\n      BigInteger.prototype.times = BigInteger.prototype.multiply;\n\n      function multiplySmallAndArray(a, b, sign) {\n        if (a < BASE) {\n          return new BigInteger(multiplySmall(b, a), sign);\n        }\n\n        return new BigInteger(multiplyLong(b, smallToArray(a)), sign);\n      }\n\n      SmallInteger.prototype._multiplyBySmall = function (a) {\n        if (isPrecise(a.value * this.value)) {\n          return new SmallInteger(a.value * this.value);\n        }\n\n        return multiplySmallAndArray(Math.abs(a.value), smallToArray(Math.abs(this.value)), this.sign !== a.sign);\n      };\n\n      BigInteger.prototype._multiplyBySmall = function (a) {\n        if (a.value === 0) return Integer[0];\n        if (a.value === 1) return this;\n        if (a.value === -1) return this.negate();\n        return multiplySmallAndArray(Math.abs(a.value), this.value, this.sign !== a.sign);\n      };\n\n      SmallInteger.prototype.multiply = function (v) {\n        return parseValue(v)._multiplyBySmall(this);\n      };\n\n      SmallInteger.prototype.times = SmallInteger.prototype.multiply;\n\n      function square(a) {\n        var l = a.length,\n            r = createArray(l + l),\n            base = BASE,\n            product,\n            carry,\n            i,\n            a_i,\n            a_j;\n\n        for (i = 0; i < l; i++) {\n          a_i = a[i];\n          carry = 0 - a_i * a_i;\n\n          for (var j = i; j < l; j++) {\n            a_j = a[j];\n            product = 2 * (a_i * a_j) + r[i + j] + carry;\n            carry = Math.floor(product / base);\n            r[i + j] = product - carry * base;\n          }\n\n          r[i + l] = carry;\n        }\n\n        trim(r);\n        return r;\n      }\n\n      BigInteger.prototype.square = function () {\n        return new BigInteger(square(this.value), false);\n      };\n\n      SmallInteger.prototype.square = function () {\n        var value = this.value * this.value;\n        if (isPrecise(value)) return new SmallInteger(value);\n        return new BigInteger(square(smallToArray(Math.abs(this.value))), false);\n      };\n\n      function divMod1(a, b) {\n        var a_l = a.length,\n            b_l = b.length,\n            base = BASE,\n            result = createArray(b.length),\n            divisorMostSignificantDigit = b[b_l - 1],\n            lambda = Math.ceil(base / (2 * divisorMostSignificantDigit)),\n            remainder = multiplySmall(a, lambda),\n            divisor = multiplySmall(b, lambda),\n            quotientDigit,\n            shift,\n            carry,\n            borrow,\n            i,\n            l,\n            q;\n        if (remainder.length <= a_l) remainder.push(0);\n        divisor.push(0);\n        divisorMostSignificantDigit = divisor[b_l - 1];\n\n        for (shift = a_l - b_l; shift >= 0; shift--) {\n          quotientDigit = base - 1;\n\n          if (remainder[shift + b_l] !== divisorMostSignificantDigit) {\n            quotientDigit = Math.floor((remainder[shift + b_l] * base + remainder[shift + b_l - 1]) / divisorMostSignificantDigit);\n          }\n\n          carry = 0;\n          borrow = 0;\n          l = divisor.length;\n\n          for (i = 0; i < l; i++) {\n            carry += quotientDigit * divisor[i];\n            q = Math.floor(carry / base);\n            borrow += remainder[shift + i] - (carry - q * base);\n            carry = q;\n\n            if (borrow < 0) {\n              remainder[shift + i] = borrow + base;\n              borrow = -1;\n            } else {\n              remainder[shift + i] = borrow;\n              borrow = 0;\n            }\n          }\n\n          while (borrow !== 0) {\n            quotientDigit -= 1;\n            carry = 0;\n\n            for (i = 0; i < l; i++) {\n              carry += remainder[shift + i] - base + divisor[i];\n\n              if (carry < 0) {\n                remainder[shift + i] = carry + base;\n                carry = 0;\n              } else {\n                remainder[shift + i] = carry;\n                carry = 1;\n              }\n            }\n\n            borrow += carry;\n          }\n\n          result[shift] = quotientDigit;\n        }\n\n        remainder = divModSmall(remainder, lambda)[0];\n        return [arrayToSmall(result), arrayToSmall(remainder)];\n      }\n\n      function divMod2(a, b) {\n        var a_l = a.length,\n            b_l = b.length,\n            result = [],\n            part = [],\n            base = BASE,\n            guess,\n            xlen,\n            highx,\n            highy,\n            check;\n\n        while (a_l) {\n          part.unshift(a[--a_l]);\n          trim(part);\n\n          if (compareAbs(part, b) < 0) {\n            result.push(0);\n            continue;\n          }\n\n          xlen = part.length;\n          highx = part[xlen - 1] * base + part[xlen - 2];\n          highy = b[b_l - 1] * base + b[b_l - 2];\n\n          if (xlen > b_l) {\n            highx = (highx + 1) * base;\n          }\n\n          guess = Math.ceil(highx / highy);\n\n          do {\n            check = multiplySmall(b, guess);\n            if (compareAbs(check, part) <= 0) break;\n            guess--;\n          } while (guess);\n\n          result.push(guess);\n          part = subtract(part, check);\n        }\n\n        result.reverse();\n        return [arrayToSmall(result), arrayToSmall(part)];\n      }\n\n      function divModSmall(value, lambda) {\n        var length = value.length,\n            quotient = createArray(length),\n            base = BASE,\n            i,\n            q,\n            remainder,\n            divisor;\n        remainder = 0;\n\n        for (i = length - 1; i >= 0; --i) {\n          divisor = remainder * base + value[i];\n          q = truncate(divisor / lambda);\n          remainder = divisor - q * lambda;\n          quotient[i] = q | 0;\n        }\n\n        return [quotient, remainder | 0];\n      }\n\n      function divModAny(self, v) {\n        var value,\n            n = parseValue(v);\n        var a = self.value,\n            b = n.value;\n        var quotient;\n        if (b === 0) throw new Error(\"Cannot divide by zero\");\n\n        if (self.isSmall) {\n          if (n.isSmall) {\n            return [new SmallInteger(truncate(a / b)), new SmallInteger(a % b)];\n          }\n\n          return [Integer[0], self];\n        }\n\n        if (n.isSmall) {\n          if (b === 1) return [self, Integer[0]];\n          if (b == -1) return [self.negate(), Integer[0]];\n          var abs = Math.abs(b);\n\n          if (abs < BASE) {\n            value = divModSmall(a, abs);\n            quotient = arrayToSmall(value[0]);\n            var remainder = value[1];\n            if (self.sign) remainder = -remainder;\n\n            if (typeof quotient === \"number\") {\n              if (self.sign !== n.sign) quotient = -quotient;\n              return [new SmallInteger(quotient), new SmallInteger(remainder)];\n            }\n\n            return [new BigInteger(quotient, self.sign !== n.sign), new SmallInteger(remainder)];\n          }\n\n          b = smallToArray(abs);\n        }\n\n        var comparison = compareAbs(a, b);\n        if (comparison === -1) return [Integer[0], self];\n        if (comparison === 0) return [Integer[self.sign === n.sign ? 1 : -1], Integer[0]];\n        if (a.length + b.length <= 200) value = divMod1(a, b);else value = divMod2(a, b);\n        quotient = value[0];\n        var qSign = self.sign !== n.sign,\n            mod = value[1],\n            mSign = self.sign;\n\n        if (typeof quotient === \"number\") {\n          if (qSign) quotient = -quotient;\n          quotient = new SmallInteger(quotient);\n        } else quotient = new BigInteger(quotient, qSign);\n\n        if (typeof mod === \"number\") {\n          if (mSign) mod = -mod;\n          mod = new SmallInteger(mod);\n        } else mod = new BigInteger(mod, mSign);\n\n        return [quotient, mod];\n      }\n\n      BigInteger.prototype.divmod = function (v) {\n        var result = divModAny(this, v);\n        return {\n          quotient: result[0],\n          remainder: result[1]\n        };\n      };\n\n      SmallInteger.prototype.divmod = BigInteger.prototype.divmod;\n\n      BigInteger.prototype.divide = function (v) {\n        return divModAny(this, v)[0];\n      };\n\n      SmallInteger.prototype.over = SmallInteger.prototype.divide = BigInteger.prototype.over = BigInteger.prototype.divide;\n\n      BigInteger.prototype.mod = function (v) {\n        return divModAny(this, v)[1];\n      };\n\n      SmallInteger.prototype.remainder = SmallInteger.prototype.mod = BigInteger.prototype.remainder = BigInteger.prototype.mod;\n\n      BigInteger.prototype.pow = function (v) {\n        var n = parseValue(v),\n            a = this.value,\n            b = n.value,\n            value,\n            x,\n            y;\n        if (b === 0) return Integer[1];\n        if (a === 0) return Integer[0];\n        if (a === 1) return Integer[1];\n        if (a === -1) return n.isEven() ? Integer[1] : Integer[-1];\n\n        if (n.sign) {\n          return Integer[0];\n        }\n\n        if (!n.isSmall) throw new Error(\"The exponent \" + n.toString() + \" is too large.\");\n\n        if (this.isSmall) {\n          if (isPrecise(value = Math.pow(a, b))) return new SmallInteger(truncate(value));\n        }\n\n        x = this;\n        y = Integer[1];\n\n        while (true) {\n          if (b & 1 === 1) {\n            y = y.times(x);\n            --b;\n          }\n\n          if (b === 0) break;\n          b /= 2;\n          x = x.square();\n        }\n\n        return y;\n      };\n\n      SmallInteger.prototype.pow = BigInteger.prototype.pow;\n\n      BigInteger.prototype.modPow = function (exp, mod) {\n        exp = parseValue(exp);\n        mod = parseValue(mod);\n        if (mod.isZero()) throw new Error(\"Cannot take modPow with modulus 0\");\n        var r = Integer[1],\n            base = this.mod(mod);\n\n        while (exp.isPositive()) {\n          if (base.isZero()) return Integer[0];\n          if (exp.isOdd()) r = r.multiply(base).mod(mod);\n          exp = exp.divide(2);\n          base = base.square().mod(mod);\n        }\n\n        return r;\n      };\n\n      SmallInteger.prototype.modPow = BigInteger.prototype.modPow;\n\n      function compareAbs(a, b) {\n        if (a.length !== b.length) {\n          return a.length > b.length ? 1 : -1;\n        }\n\n        for (var i = a.length - 1; i >= 0; i--) {\n          if (a[i] !== b[i]) return a[i] > b[i] ? 1 : -1;\n        }\n\n        return 0;\n      }\n\n      BigInteger.prototype.compareAbs = function (v) {\n        var n = parseValue(v),\n            a = this.value,\n            b = n.value;\n        if (n.isSmall) return 1;\n        return compareAbs(a, b);\n      };\n\n      SmallInteger.prototype.compareAbs = function (v) {\n        var n = parseValue(v),\n            a = Math.abs(this.value),\n            b = n.value;\n\n        if (n.isSmall) {\n          b = Math.abs(b);\n          return a === b ? 0 : a > b ? 1 : -1;\n        }\n\n        return -1;\n      };\n\n      BigInteger.prototype.compare = function (v) {\n        if (v === Infinity) {\n          return -1;\n        }\n\n        if (v === -Infinity) {\n          return 1;\n        }\n\n        var n = parseValue(v),\n            a = this.value,\n            b = n.value;\n\n        if (this.sign !== n.sign) {\n          return n.sign ? 1 : -1;\n        }\n\n        if (n.isSmall) {\n          return this.sign ? -1 : 1;\n        }\n\n        return compareAbs(a, b) * (this.sign ? -1 : 1);\n      };\n\n      BigInteger.prototype.compareTo = BigInteger.prototype.compare;\n\n      SmallInteger.prototype.compare = function (v) {\n        if (v === Infinity) {\n          return -1;\n        }\n\n        if (v === -Infinity) {\n          return 1;\n        }\n\n        var n = parseValue(v),\n            a = this.value,\n            b = n.value;\n\n        if (n.isSmall) {\n          return a == b ? 0 : a > b ? 1 : -1;\n        }\n\n        if (a < 0 !== n.sign) {\n          return a < 0 ? -1 : 1;\n        }\n\n        return a < 0 ? 1 : -1;\n      };\n\n      SmallInteger.prototype.compareTo = SmallInteger.prototype.compare;\n\n      BigInteger.prototype.equals = function (v) {\n        return this.compare(v) === 0;\n      };\n\n      SmallInteger.prototype.eq = SmallInteger.prototype.equals = BigInteger.prototype.eq = BigInteger.prototype.equals;\n\n      BigInteger.prototype.notEquals = function (v) {\n        return this.compare(v) !== 0;\n      };\n\n      SmallInteger.prototype.neq = SmallInteger.prototype.notEquals = BigInteger.prototype.neq = BigInteger.prototype.notEquals;\n\n      BigInteger.prototype.greater = function (v) {\n        return this.compare(v) > 0;\n      };\n\n      SmallInteger.prototype.gt = SmallInteger.prototype.greater = BigInteger.prototype.gt = BigInteger.prototype.greater;\n\n      BigInteger.prototype.lesser = function (v) {\n        return this.compare(v) < 0;\n      };\n\n      SmallInteger.prototype.lt = SmallInteger.prototype.lesser = BigInteger.prototype.lt = BigInteger.prototype.lesser;\n\n      BigInteger.prototype.greaterOrEquals = function (v) {\n        return this.compare(v) >= 0;\n      };\n\n      SmallInteger.prototype.geq = SmallInteger.prototype.greaterOrEquals = BigInteger.prototype.geq = BigInteger.prototype.greaterOrEquals;\n\n      BigInteger.prototype.lesserOrEquals = function (v) {\n        return this.compare(v) <= 0;\n      };\n\n      SmallInteger.prototype.leq = SmallInteger.prototype.lesserOrEquals = BigInteger.prototype.leq = BigInteger.prototype.lesserOrEquals;\n\n      BigInteger.prototype.isEven = function () {\n        return (this.value[0] & 1) === 0;\n      };\n\n      SmallInteger.prototype.isEven = function () {\n        return (this.value & 1) === 0;\n      };\n\n      BigInteger.prototype.isOdd = function () {\n        return (this.value[0] & 1) === 1;\n      };\n\n      SmallInteger.prototype.isOdd = function () {\n        return (this.value & 1) === 1;\n      };\n\n      BigInteger.prototype.isPositive = function () {\n        return !this.sign;\n      };\n\n      SmallInteger.prototype.isPositive = function () {\n        return this.value > 0;\n      };\n\n      BigInteger.prototype.isNegative = function () {\n        return this.sign;\n      };\n\n      SmallInteger.prototype.isNegative = function () {\n        return this.value < 0;\n      };\n\n      BigInteger.prototype.isUnit = function () {\n        return false;\n      };\n\n      SmallInteger.prototype.isUnit = function () {\n        return Math.abs(this.value) === 1;\n      };\n\n      BigInteger.prototype.isZero = function () {\n        return false;\n      };\n\n      SmallInteger.prototype.isZero = function () {\n        return this.value === 0;\n      };\n\n      BigInteger.prototype.isDivisibleBy = function (v) {\n        var n = parseValue(v);\n        var value = n.value;\n        if (value === 0) return false;\n        if (value === 1) return true;\n        if (value === 2) return this.isEven();\n        return this.mod(n).equals(Integer[0]);\n      };\n\n      SmallInteger.prototype.isDivisibleBy = BigInteger.prototype.isDivisibleBy;\n\n      function isBasicPrime(v) {\n        var n = v.abs();\n        if (n.isUnit()) return false;\n        if (n.equals(2) || n.equals(3) || n.equals(5)) return true;\n        if (n.isEven() || n.isDivisibleBy(3) || n.isDivisibleBy(5)) return false;\n        if (n.lesser(49)) return true;\n      }\n\n      function millerRabinTest(n, a) {\n        var nPrev = n.prev(),\n            b = nPrev,\n            r = 0,\n            d,\n            t,\n            i,\n            x;\n\n        while (b.isEven()) b = b.divide(2), r++;\n\n        next: for (i = 0; i < a.length; i++) {\n          if (n.lesser(a[i])) continue;\n          x = bigInt(a[i]).modPow(b, n);\n          if (x.equals(Integer[1]) || x.equals(nPrev)) continue;\n\n          for (d = r - 1; d != 0; d--) {\n            x = x.square().mod(n);\n            if (x.isUnit()) return false;\n            if (x.equals(nPrev)) continue next;\n          }\n\n          return false;\n        }\n\n        return true;\n      }\n\n      BigInteger.prototype.isPrime = function (strict) {\n        var isPrime = isBasicPrime(this);\n        if (isPrime !== undefined) return isPrime;\n        var n = this.abs();\n        var bits = n.bitLength();\n        if (bits <= 64) return millerRabinTest(n, [2, 325, 9375, 28178, 450775, 9780504, 1795265022]);\n        var logN = Math.log(2) * bits;\n        var t = Math.ceil(strict === true ? 2 * Math.pow(logN, 2) : logN);\n\n        for (var a = [], i = 0; i < t; i++) {\n          a.push(bigInt(i + 2));\n        }\n\n        return millerRabinTest(n, a);\n      };\n\n      SmallInteger.prototype.isPrime = BigInteger.prototype.isPrime;\n\n      BigInteger.prototype.isProbablePrime = function (iterations) {\n        var isPrime = isBasicPrime(this);\n        if (isPrime !== undefined) return isPrime;\n        var n = this.abs();\n        var t = iterations === undefined ? 5 : iterations;\n\n        for (var a = [], i = 0; i < t; i++) {\n          a.push(bigInt.randBetween(2, n.minus(2)));\n        }\n\n        return millerRabinTest(n, a);\n      };\n\n      SmallInteger.prototype.isProbablePrime = BigInteger.prototype.isProbablePrime;\n\n      BigInteger.prototype.modInv = function (n) {\n        var t = bigInt.zero,\n            newT = bigInt.one,\n            r = parseValue(n),\n            newR = this.abs(),\n            q,\n            lastT,\n            lastR;\n\n        while (!newR.equals(bigInt.zero)) {\n          q = r.divide(newR);\n          lastT = t;\n          lastR = r;\n          t = newT;\n          r = newR;\n          newT = lastT.subtract(q.multiply(newT));\n          newR = lastR.subtract(q.multiply(newR));\n        }\n\n        if (!r.equals(1)) throw new Error(this.toString() + \" and \" + n.toString() + \" are not co-prime\");\n\n        if (t.compare(0) === -1) {\n          t = t.add(n);\n        }\n\n        if (this.isNegative()) {\n          return t.negate();\n        }\n\n        return t;\n      };\n\n      SmallInteger.prototype.modInv = BigInteger.prototype.modInv;\n\n      BigInteger.prototype.next = function () {\n        var value = this.value;\n\n        if (this.sign) {\n          return subtractSmall(value, 1, this.sign);\n        }\n\n        return new BigInteger(addSmall(value, 1), this.sign);\n      };\n\n      SmallInteger.prototype.next = function () {\n        var value = this.value;\n        if (value + 1 < MAX_INT) return new SmallInteger(value + 1);\n        return new BigInteger(MAX_INT_ARR, false);\n      };\n\n      BigInteger.prototype.prev = function () {\n        var value = this.value;\n\n        if (this.sign) {\n          return new BigInteger(addSmall(value, 1), true);\n        }\n\n        return subtractSmall(value, 1, this.sign);\n      };\n\n      SmallInteger.prototype.prev = function () {\n        var value = this.value;\n        if (value - 1 > -MAX_INT) return new SmallInteger(value - 1);\n        return new BigInteger(MAX_INT_ARR, true);\n      };\n\n      var powersOfTwo = [1];\n\n      while (2 * powersOfTwo[powersOfTwo.length - 1] <= BASE) powersOfTwo.push(2 * powersOfTwo[powersOfTwo.length - 1]);\n\n      var powers2Length = powersOfTwo.length,\n          highestPower2 = powersOfTwo[powers2Length - 1];\n\n      function shift_isSmall(n) {\n        return (typeof n === \"number\" || typeof n === \"string\") && +Math.abs(n) <= BASE || n instanceof BigInteger && n.value.length <= 1;\n      }\n\n      BigInteger.prototype.shiftLeft = function (n) {\n        if (!shift_isSmall(n)) {\n          throw new Error(String(n) + \" is too large for shifting.\");\n        }\n\n        n = +n;\n        if (n < 0) return this.shiftRight(-n);\n        var result = this;\n        if (result.isZero()) return result;\n\n        while (n >= powers2Length) {\n          result = result.multiply(highestPower2);\n          n -= powers2Length - 1;\n        }\n\n        return result.multiply(powersOfTwo[n]);\n      };\n\n      SmallInteger.prototype.shiftLeft = BigInteger.prototype.shiftLeft;\n\n      BigInteger.prototype.shiftRight = function (n) {\n        var remQuo;\n\n        if (!shift_isSmall(n)) {\n          throw new Error(String(n) + \" is too large for shifting.\");\n        }\n\n        n = +n;\n        if (n < 0) return this.shiftLeft(-n);\n        var result = this;\n\n        while (n >= powers2Length) {\n          if (result.isZero() || result.isNegative() && result.isUnit()) return result;\n          remQuo = divModAny(result, highestPower2);\n          result = remQuo[1].isNegative() ? remQuo[0].prev() : remQuo[0];\n          n -= powers2Length - 1;\n        }\n\n        remQuo = divModAny(result, powersOfTwo[n]);\n        return remQuo[1].isNegative() ? remQuo[0].prev() : remQuo[0];\n      };\n\n      SmallInteger.prototype.shiftRight = BigInteger.prototype.shiftRight;\n\n      function bitwise(x, y, fn) {\n        y = parseValue(y);\n        var xSign = x.isNegative(),\n            ySign = y.isNegative();\n        var xRem = xSign ? x.not() : x,\n            yRem = ySign ? y.not() : y;\n        var xDigit = 0,\n            yDigit = 0;\n        var xDivMod = null,\n            yDivMod = null;\n        var result = [];\n\n        while (!xRem.isZero() || !yRem.isZero()) {\n          xDivMod = divModAny(xRem, highestPower2);\n          xDigit = xDivMod[1].toJSNumber();\n\n          if (xSign) {\n            xDigit = highestPower2 - 1 - xDigit;\n          }\n\n          yDivMod = divModAny(yRem, highestPower2);\n          yDigit = yDivMod[1].toJSNumber();\n\n          if (ySign) {\n            yDigit = highestPower2 - 1 - yDigit;\n          }\n\n          xRem = xDivMod[0];\n          yRem = yDivMod[0];\n          result.push(fn(xDigit, yDigit));\n        }\n\n        var sum = fn(xSign ? 1 : 0, ySign ? 1 : 0) !== 0 ? bigInt(-1) : bigInt(0);\n\n        for (var i = result.length - 1; i >= 0; i -= 1) {\n          sum = sum.multiply(highestPower2).add(bigInt(result[i]));\n        }\n\n        return sum;\n      }\n\n      BigInteger.prototype.not = function () {\n        return this.negate().prev();\n      };\n\n      SmallInteger.prototype.not = BigInteger.prototype.not;\n\n      BigInteger.prototype.and = function (n) {\n        return bitwise(this, n, function (a, b) {\n          return a & b;\n        });\n      };\n\n      SmallInteger.prototype.and = BigInteger.prototype.and;\n\n      BigInteger.prototype.or = function (n) {\n        return bitwise(this, n, function (a, b) {\n          return a | b;\n        });\n      };\n\n      SmallInteger.prototype.or = BigInteger.prototype.or;\n\n      BigInteger.prototype.xor = function (n) {\n        return bitwise(this, n, function (a, b) {\n          return a ^ b;\n        });\n      };\n\n      SmallInteger.prototype.xor = BigInteger.prototype.xor;\n      var LOBMASK_I = 1 << 30,\n          LOBMASK_BI = (BASE & -BASE) * (BASE & -BASE) | LOBMASK_I;\n\n      function roughLOB(n) {\n        var v = n.value,\n            x = typeof v === \"number\" ? v | LOBMASK_I : v[0] + v[1] * BASE | LOBMASK_BI;\n        return x & -x;\n      }\n\n      function integerLogarithm(value, base) {\n        if (base.compareTo(value) <= 0) {\n          var tmp = integerLogarithm(value, base.square(base));\n          var p = tmp.p;\n          var e = tmp.e;\n          var t = p.multiply(base);\n          return t.compareTo(value) <= 0 ? {\n            p: t,\n            e: e * 2 + 1\n          } : {\n            p: p,\n            e: e * 2\n          };\n        }\n\n        return {\n          p: bigInt(1),\n          e: 0\n        };\n      }\n\n      BigInteger.prototype.bitLength = function () {\n        var n = this;\n\n        if (n.compareTo(bigInt(0)) < 0) {\n          n = n.negate().subtract(bigInt(1));\n        }\n\n        if (n.compareTo(bigInt(0)) === 0) {\n          return bigInt(0);\n        }\n\n        return bigInt(integerLogarithm(n, bigInt(2)).e).add(bigInt(1));\n      };\n\n      SmallInteger.prototype.bitLength = BigInteger.prototype.bitLength;\n\n      function max(a, b) {\n        a = parseValue(a);\n        b = parseValue(b);\n        return a.greater(b) ? a : b;\n      }\n\n      function min(a, b) {\n        a = parseValue(a);\n        b = parseValue(b);\n        return a.lesser(b) ? a : b;\n      }\n\n      function gcd(a, b) {\n        a = parseValue(a).abs();\n        b = parseValue(b).abs();\n        if (a.equals(b)) return a;\n        if (a.isZero()) return b;\n        if (b.isZero()) return a;\n        var c = Integer[1],\n            d,\n            t;\n\n        while (a.isEven() && b.isEven()) {\n          d = Math.min(roughLOB(a), roughLOB(b));\n          a = a.divide(d);\n          b = b.divide(d);\n          c = c.multiply(d);\n        }\n\n        while (a.isEven()) {\n          a = a.divide(roughLOB(a));\n        }\n\n        do {\n          while (b.isEven()) {\n            b = b.divide(roughLOB(b));\n          }\n\n          if (a.greater(b)) {\n            t = b;\n            b = a;\n            a = t;\n          }\n\n          b = b.subtract(a);\n        } while (!b.isZero());\n\n        return c.isUnit() ? a : a.multiply(c);\n      }\n\n      function lcm(a, b) {\n        a = parseValue(a).abs();\n        b = parseValue(b).abs();\n        return a.divide(gcd(a, b)).multiply(b);\n      }\n\n      function randBetween(a, b) {\n        a = parseValue(a);\n        b = parseValue(b);\n        var low = min(a, b),\n            high = max(a, b);\n        var range = high.subtract(low).add(1);\n        if (range.isSmall) return low.add(Math.floor(Math.random() * range));\n        var length = range.value.length - 1;\n        var result = [],\n            restricted = true;\n\n        for (var i = length; i >= 0; i--) {\n          var top = restricted ? range.value[i] : BASE;\n          var digit = truncate(Math.random() * top);\n          result.unshift(digit);\n          if (digit < top) restricted = false;\n        }\n\n        result = arrayToSmall(result);\n        return low.add(typeof result === \"number\" ? new SmallInteger(result) : new BigInteger(result, false));\n      }\n\n      var parseBase = function (text, base) {\n        var length = text.length;\n        var i;\n        var absBase = Math.abs(base);\n\n        for (var i = 0; i < length; i++) {\n          var c = text[i].toLowerCase();\n          if (c === \"-\") continue;\n\n          if (/[a-z0-9]/.test(c)) {\n            if (/[0-9]/.test(c) && +c >= absBase) {\n              if (c === \"1\" && absBase === 1) continue;\n              throw new Error(c + \" is not a valid digit in base \" + base + \".\");\n            } else if (c.charCodeAt(0) - 87 >= absBase) {\n              throw new Error(c + \" is not a valid digit in base \" + base + \".\");\n            }\n          }\n        }\n\n        if (2 <= base && base <= 36) {\n          if (length <= LOG_MAX_INT / Math.log(base)) {\n            var result = parseInt(text, base);\n\n            if (isNaN(result)) {\n              throw new Error(c + \" is not a valid digit in base \" + base + \".\");\n            }\n\n            return new SmallInteger(parseInt(text, base));\n          }\n        }\n\n        base = parseValue(base);\n        var digits = [];\n        var isNegative = text[0] === \"-\";\n\n        for (i = isNegative ? 1 : 0; i < text.length; i++) {\n          var c = text[i].toLowerCase(),\n              charCode = c.charCodeAt(0);\n          if (48 <= charCode && charCode <= 57) digits.push(parseValue(c));else if (97 <= charCode && charCode <= 122) digits.push(parseValue(c.charCodeAt(0) - 87));else if (c === \"<\") {\n            var start = i;\n\n            do {\n              i++;\n            } while (text[i] !== \">\");\n\n            digits.push(parseValue(text.slice(start + 1, i)));\n          } else throw new Error(c + \" is not a valid character\");\n        }\n\n        return parseBaseFromArray(digits, base, isNegative);\n      };\n\n      function parseBaseFromArray(digits, base, isNegative) {\n        var val = Integer[0],\n            pow = Integer[1],\n            i;\n\n        for (i = digits.length - 1; i >= 0; i--) {\n          val = val.add(digits[i].times(pow));\n          pow = pow.times(base);\n        }\n\n        return isNegative ? val.negate() : val;\n      }\n\n      function stringify(digit) {\n        if (digit <= 35) {\n          return \"0123456789abcdefghijklmnopqrstuvwxyz\".charAt(digit);\n        }\n\n        return \"<\" + digit + \">\";\n      }\n\n      function toBase(n, base) {\n        base = bigInt(base);\n\n        if (base.isZero()) {\n          if (n.isZero()) return {\n            value: [0],\n            isNegative: false\n          };\n          throw new Error(\"Cannot convert nonzero numbers to base 0.\");\n        }\n\n        if (base.equals(-1)) {\n          if (n.isZero()) return {\n            value: [0],\n            isNegative: false\n          };\n          if (n.isNegative()) return {\n            value: [].concat.apply([], Array.apply(null, Array(-n)).map(Array.prototype.valueOf, [1, 0])),\n            isNegative: false\n          };\n          var arr = Array.apply(null, Array(+n - 1)).map(Array.prototype.valueOf, [0, 1]);\n          arr.unshift([1]);\n          return {\n            value: [].concat.apply([], arr),\n            isNegative: false\n          };\n        }\n\n        var neg = false;\n\n        if (n.isNegative() && base.isPositive()) {\n          neg = true;\n          n = n.abs();\n        }\n\n        if (base.equals(1)) {\n          if (n.isZero()) return {\n            value: [0],\n            isNegative: false\n          };\n          return {\n            value: Array.apply(null, Array(+n)).map(Number.prototype.valueOf, 1),\n            isNegative: neg\n          };\n        }\n\n        var out = [];\n        var left = n,\n            divmod;\n\n        while (left.isNegative() || left.compareAbs(base) >= 0) {\n          divmod = left.divmod(base);\n          left = divmod.quotient;\n          var digit = divmod.remainder;\n\n          if (digit.isNegative()) {\n            digit = base.minus(digit).abs();\n            left = left.next();\n          }\n\n          out.push(digit.toJSNumber());\n        }\n\n        out.push(left.toJSNumber());\n        return {\n          value: out.reverse(),\n          isNegative: neg\n        };\n      }\n\n      function toBaseString(n, base) {\n        var arr = toBase(n, base);\n        return (arr.isNegative ? \"-\" : \"\") + arr.value.map(stringify).join(\"\");\n      }\n\n      BigInteger.prototype.toArray = function (radix) {\n        return toBase(this, radix);\n      };\n\n      SmallInteger.prototype.toArray = function (radix) {\n        return toBase(this, radix);\n      };\n\n      BigInteger.prototype.toString = function (radix) {\n        if (radix === undefined) radix = 10;\n        if (radix !== 10) return toBaseString(this, radix);\n        var v = this.value,\n            l = v.length,\n            str = String(v[--l]),\n            zeros = \"0000000\",\n            digit;\n\n        while (--l >= 0) {\n          digit = String(v[l]);\n          str += zeros.slice(digit.length) + digit;\n        }\n\n        var sign = this.sign ? \"-\" : \"\";\n        return sign + str;\n      };\n\n      SmallInteger.prototype.toString = function (radix) {\n        if (radix === undefined) radix = 10;\n        if (radix != 10) return toBaseString(this, radix);\n        return String(this.value);\n      };\n\n      BigInteger.prototype.toJSON = SmallInteger.prototype.toJSON = function () {\n        return this.toString();\n      };\n\n      BigInteger.prototype.valueOf = function () {\n        return parseInt(this.toString(), 10);\n      };\n\n      BigInteger.prototype.toJSNumber = BigInteger.prototype.valueOf;\n\n      SmallInteger.prototype.valueOf = function () {\n        return this.value;\n      };\n\n      SmallInteger.prototype.toJSNumber = SmallInteger.prototype.valueOf;\n\n      function parseStringValue(v) {\n        if (isPrecise(+v)) {\n          var x = +v;\n          if (x === truncate(x)) return new SmallInteger(x);\n          throw new Error(\"Invalid integer: \" + v);\n        }\n\n        var sign = v[0] === \"-\";\n        if (sign) v = v.slice(1);\n        var split = v.split(/e/i);\n        if (split.length > 2) throw new Error(\"Invalid integer: \" + split.join(\"e\"));\n\n        if (split.length === 2) {\n          var exp = split[1];\n          if (exp[0] === \"+\") exp = exp.slice(1);\n          exp = +exp;\n          if (exp !== truncate(exp) || !isPrecise(exp)) throw new Error(\"Invalid integer: \" + exp + \" is not a valid exponent.\");\n          var text = split[0];\n          var decimalPlace = text.indexOf(\".\");\n\n          if (decimalPlace >= 0) {\n            exp -= text.length - decimalPlace - 1;\n            text = text.slice(0, decimalPlace) + text.slice(decimalPlace + 1);\n          }\n\n          if (exp < 0) throw new Error(\"Cannot include negative exponent part for integers\");\n          text += new Array(exp + 1).join(\"0\");\n          v = text;\n        }\n\n        var isValid = /^([0-9][0-9]*)$/.test(v);\n        if (!isValid) throw new Error(\"Invalid integer: \" + v);\n        var r = [],\n            max = v.length,\n            l = LOG_BASE,\n            min = max - l;\n\n        while (max > 0) {\n          r.push(+v.slice(min, max));\n          min -= l;\n          if (min < 0) min = 0;\n          max -= l;\n        }\n\n        trim(r);\n        return new BigInteger(r, sign);\n      }\n\n      function parseNumberValue(v) {\n        if (isPrecise(v)) {\n          if (v !== truncate(v)) throw new Error(v + \" is not an integer.\");\n          return new SmallInteger(v);\n        }\n\n        return parseStringValue(v.toString());\n      }\n\n      function parseValue(v) {\n        if (typeof v === \"number\") {\n          return parseNumberValue(v);\n        }\n\n        if (typeof v === \"string\") {\n          return parseStringValue(v);\n        }\n\n        return v;\n      }\n\n      for (var i = 0; i < 1e3; i++) {\n        Integer[i] = new SmallInteger(i);\n        if (i > 0) Integer[-i] = new SmallInteger(-i);\n      }\n\n      Integer.one = Integer[1];\n      Integer.zero = Integer[0];\n      Integer.minusOne = Integer[-1];\n      Integer.max = max;\n      Integer.min = min;\n      Integer.gcd = gcd;\n      Integer.lcm = lcm;\n\n      Integer.isInstance = function (x) {\n        return x instanceof BigInteger || x instanceof SmallInteger;\n      };\n\n      Integer.randBetween = randBetween;\n\n      Integer.fromArray = function (digits, base, isNegative) {\n        return parseBaseFromArray(digits.map(parseValue), parseValue(base || 10), isNegative);\n      };\n\n      return Integer;\n    }();\n\n    if (typeof module !== \"undefined\" && module.hasOwnProperty(\"exports\")) {\n      module.exports = bigInt;\n    }\n\n    if (typeof define === \"function\" && define.amd) {\n      define(\"big-integer\", [], function () {\n        return bigInt;\n      });\n    }\n\n    return bigInt;\n  }(),\n\n  /*\r\n   *  decimal.js v10.2.1\r\n   *  An arbitrary-precision Decimal type for JavaScript.\r\n   *  https://github.com/MikeMcl/decimal.js\r\n   *  Copyright (c) 2020 Michael Mclaughlin <M8ch88l@gmail.com>\r\n   *  MIT Licence\r\n   */\n  bigDec: function (n) {\n    \"use strict\";\n\n    var e,\n        i,\n        t,\n        r,\n        s = 9e15,\n        o = 1e9,\n        u = \"0123456789abcdef\",\n        c = \"2.3025850929940456840179914546843642076011014886287729760333279009675726096773524802359972050895982983419677840422862486334095254650828067566662873690987816894829072083255546808437998948262331985283935053089653777326288461633662222876982198867465436674744042432743651550489343149393914796194044002221051017141748003688084012647080685567743216228355220114804663715659121373450747856947683463616792101806445070648000277502684916746550586856935673420670581136429224554405758925724208241314695689016758940256776311356919292033376587141660230105703089634572075440370847469940168269282808481184289314848524948644871927809676271275775397027668605952496716674183485704422507197965004714951050492214776567636938662976979522110718264549734772662425709429322582798502585509785265383207606726317164309505995087807523710333101197857547331541421808427543863591778117054309827482385045648019095610299291824318237525357709750539565187697510374970888692180205189339507238539205144634197265287286965110862571492198849978748873771345686209167058\",\n        f = \"3.1415926535897932384626433832795028841971693993751058209749445923078164062862089986280348253421170679821480865132823066470938446095505822317253594081284811174502841027019385211055596446229489549303819644288109756659334461284756482337867831652712019091456485669234603486104543266482133936072602491412737245870066063155881748815209209628292540917153643678925903600113305305488204665213841469519415116094330572703657595919530921861173819326117931051185480744623799627495673518857527248912279381830119491298336733624406566430860213949463952247371907021798609437027705392171762931767523846748184676694051320005681271452635608277857713427577896091736371787214684409012249534301465495853710507922796892589235420199561121290219608640344181598136297747713099605187072113499999983729780499510597317328160963185950244594553469083026425223082533446850352619311881710100031378387528865875332083814206171776691473035982534904287554687311595628638823537875937519577818577805321712268066130019278766111959092164201989380952572010654858632789\",\n        a = {\n      precision: 20,\n      rounding: 4,\n      modulo: 1,\n      toExpNeg: -7,\n      toExpPos: 21,\n      minE: -s,\n      maxE: s,\n      crypto: !1\n    },\n        h = !0,\n        d = \"[DecimalError] \",\n        l = d + \"Invalid argument: \",\n        p = d + \"Precision limit exceeded\",\n        g = d + \"crypto unavailable\",\n        m = Math.floor,\n        w = Math.pow,\n        v = /^0b([01]+(\\.[01]*)?|\\.[01]+)(p[+-]?\\d+)?$/i,\n        N = /^0x([0-9a-f]+(\\.[0-9a-f]*)?|\\.[0-9a-f]+)(p[+-]?\\d+)?$/i,\n        b = /^0o([0-7]+(\\.[0-7]*)?|\\.[0-7]+)(p[+-]?\\d+)?$/i,\n        E = /^(\\d+(\\.\\d*)?|\\.\\d+)(e[+-]?\\d+)?$/i,\n        x = 1e7,\n        y = 7,\n        M = c.length - 1,\n        q = f.length - 1,\n        O = {\n      name: \"[object Decimal]\"\n    };\n\n    function D(n) {\n      var e,\n          i,\n          t,\n          r = n.length - 1,\n          s = \"\",\n          o = n[0];\n\n      if (r > 0) {\n        for (s += o, e = 1; e < r; e++) t = n[e] + \"\", (i = y - t.length) && (s += k(i)), s += t;\n\n        o = n[e], (i = y - (t = o + \"\").length) && (s += k(i));\n      } else if (0 === o) return \"0\";\n\n      for (; o % 10 == 0;) o /= 10;\n\n      return s + o;\n    }\n\n    function F(n, e, i) {\n      if (n !== ~~n || n < e || n > i) throw Error(l + n);\n    }\n\n    function A(n, e, i, t) {\n      var r, s, o, u;\n\n      for (s = n[0]; s >= 10; s /= 10) --e;\n\n      return --e < 0 ? (e += y, r = 0) : (r = Math.ceil((e + 1) / y), e %= y), s = w(10, y - e), u = n[r] % s | 0, null == t ? e < 3 ? (0 == e ? u = u / 100 | 0 : 1 == e && (u = u / 10 | 0), o = i < 4 && 99999 == u || i > 3 && 49999 == u || 5e4 == u || 0 == u) : o = (i < 4 && u + 1 == s || i > 3 && u + 1 == s / 2) && (n[r + 1] / s / 100 | 0) == w(10, e - 2) - 1 || (u == s / 2 || 0 == u) && 0 == (n[r + 1] / s / 100 | 0) : e < 4 ? (0 == e ? u = u / 1e3 | 0 : 1 == e ? u = u / 100 | 0 : 2 == e && (u = u / 10 | 0), o = (t || i < 4) && 9999 == u || !t && i > 3 && 4999 == u) : o = ((t || i < 4) && u + 1 == s || !t && i > 3 && u + 1 == s / 2) && (n[r + 1] / s / 1e3 | 0) == w(10, e - 3) - 1, o;\n    }\n\n    function S(n, e, i) {\n      for (var t, r, s = [0], o = 0, c = n.length; o < c;) {\n        for (r = s.length; r--;) s[r] *= e;\n\n        for (s[0] += u.indexOf(n.charAt(o++)), t = 0; t < s.length; t++) s[t] > i - 1 && (void 0 === s[t + 1] && (s[t + 1] = 0), s[t + 1] += s[t] / i | 0, s[t] %= i);\n      }\n\n      return s.reverse();\n    }\n\n    O.absoluteValue = O.abs = function () {\n      var n = new this.constructor(this);\n      return n.s < 0 && (n.s = 1), P(n);\n    }, O.ceil = function () {\n      return P(new this.constructor(this), this.e + 1, 2);\n    }, O.comparedTo = O.cmp = function (n) {\n      var e,\n          i,\n          t,\n          r,\n          s = this,\n          o = s.d,\n          u = (n = new s.constructor(n)).d,\n          c = s.s,\n          f = n.s;\n      if (!o || !u) return c && f ? c !== f ? c : o === u ? 0 : !o ^ c < 0 ? 1 : -1 : NaN;\n      if (!o[0] || !u[0]) return o[0] ? c : u[0] ? -f : 0;\n      if (c !== f) return c;\n      if (s.e !== n.e) return s.e > n.e ^ c < 0 ? 1 : -1;\n\n      for (e = 0, i = (t = o.length) < (r = u.length) ? t : r; e < i; ++e) if (o[e] !== u[e]) return o[e] > u[e] ^ c < 0 ? 1 : -1;\n\n      return t === r ? 0 : t > r ^ c < 0 ? 1 : -1;\n    }, O.cosine = O.cos = function () {\n      var n,\n          e,\n          i = this,\n          t = i.constructor;\n      return i.d ? i.d[0] ? (n = t.precision, e = t.rounding, t.precision = n + Math.max(i.e, i.sd()) + y, t.rounding = 1, i = function (n, e) {\n        var i,\n            t,\n            r = e.d.length;\n        r < 32 ? (i = Math.ceil(r / 3), t = (1 / z(4, i)).toString()) : (i = 16, t = \"2.3283064365386962890625e-10\");\n        n.precision += i, e = J(n, 1, e.times(t), new n(1));\n\n        for (var s = i; s--;) {\n          var o = e.times(e);\n          e = o.times(o).minus(o).times(8).plus(1);\n        }\n\n        return n.precision -= i, e;\n      }(t, G(t, i)), t.precision = n, t.rounding = e, P(2 == r || 3 == r ? i.neg() : i, n, e, !0)) : new t(1) : new t(NaN);\n    }, O.cubeRoot = O.cbrt = function () {\n      var n,\n          e,\n          i,\n          t,\n          r,\n          s,\n          o,\n          u,\n          c,\n          f,\n          a = this,\n          d = a.constructor;\n      if (!a.isFinite() || a.isZero()) return new d(a);\n\n      for (h = !1, (s = a.s * w(a.s * a, 1 / 3)) && Math.abs(s) != 1 / 0 ? t = new d(s.toString()) : (i = D(a.d), (s = ((n = a.e) - i.length + 1) % 3) && (i += 1 == s || -2 == s ? \"0\" : \"00\"), s = w(i, 1 / 3), n = m((n + 1) / 3) - (n % 3 == (n < 0 ? -1 : 2)), (t = new d(i = s == 1 / 0 ? \"5e\" + n : (i = s.toExponential()).slice(0, i.indexOf(\"e\") + 1) + n)).s = a.s), o = (n = d.precision) + 3;;) if (f = (c = (u = t).times(u).times(u)).plus(a), t = Z(f.plus(a).times(u), f.plus(c), o + 2, 1), D(u.d).slice(0, o) === (i = D(t.d)).slice(0, o)) {\n        if (\"9999\" != (i = i.slice(o - 3, o + 1)) && (r || \"4999\" != i)) {\n          +i && (+i.slice(1) || \"5\" != i.charAt(0)) || (P(t, n + 1, 1), e = !t.times(t).times(t).eq(a));\n          break;\n        }\n\n        if (!r && (P(u, n + 1, 0), u.times(u).times(u).eq(a))) {\n          t = u;\n          break;\n        }\n\n        o += 4, r = 1;\n      }\n\n      return h = !0, P(t, n, d.rounding, e);\n    }, O.decimalPlaces = O.dp = function () {\n      var n,\n          e = this.d,\n          i = NaN;\n\n      if (e) {\n        if (i = ((n = e.length - 1) - m(this.e / y)) * y, n = e[n]) for (; n % 10 == 0; n /= 10) i--;\n        i < 0 && (i = 0);\n      }\n\n      return i;\n    }, O.dividedBy = O.div = function (n) {\n      return Z(this, new this.constructor(n));\n    }, O.dividedToIntegerBy = O.divToInt = function (n) {\n      var e = this.constructor;\n      return P(Z(this, new e(n), 0, 1, 1), e.precision, e.rounding);\n    }, O.equals = O.eq = function (n) {\n      return 0 === this.cmp(n);\n    }, O.floor = function () {\n      return P(new this.constructor(this), this.e + 1, 3);\n    }, O.greaterThan = O.gt = function (n) {\n      return this.cmp(n) > 0;\n    }, O.greaterThanOrEqualTo = O.gte = function (n) {\n      var e = this.cmp(n);\n      return 1 == e || 0 === e;\n    }, O.hyperbolicCosine = O.cosh = function () {\n      var n,\n          e,\n          i,\n          t,\n          r,\n          s = this,\n          o = s.constructor,\n          u = new o(1);\n      if (!s.isFinite()) return new o(s.s ? 1 / 0 : NaN);\n      if (s.isZero()) return u;\n      i = o.precision, t = o.rounding, o.precision = i + Math.max(s.e, s.sd()) + 4, o.rounding = 1, (r = s.d.length) < 32 ? e = (1 / z(4, n = Math.ceil(r / 3))).toString() : (n = 16, e = \"2.3283064365386962890625e-10\"), s = J(o, 1, s.times(e), new o(1), !0);\n\n      for (var c, f = n, a = new o(8); f--;) c = s.times(s), s = u.minus(c.times(a.minus(c.times(a))));\n\n      return P(s, o.precision = i, o.rounding = t, !0);\n    }, O.hyperbolicSine = O.sinh = function () {\n      var n,\n          e,\n          i,\n          t,\n          r = this,\n          s = r.constructor;\n      if (!r.isFinite() || r.isZero()) return new s(r);\n      if (e = s.precision, i = s.rounding, s.precision = e + Math.max(r.e, r.sd()) + 4, s.rounding = 1, (t = r.d.length) < 3) r = J(s, 2, r, r, !0);else {\n        n = (n = 1.4 * Math.sqrt(t)) > 16 ? 16 : 0 | n, r = J(s, 2, r = r.times(1 / z(5, n)), r, !0);\n\n        for (var o, u = new s(5), c = new s(16), f = new s(20); n--;) o = r.times(r), r = r.times(u.plus(o.times(c.times(o).plus(f))));\n      }\n      return s.precision = e, s.rounding = i, P(r, e, i, !0);\n    }, O.hyperbolicTangent = O.tanh = function () {\n      var n,\n          e,\n          i = this,\n          t = i.constructor;\n      return i.isFinite() ? i.isZero() ? new t(i) : (n = t.precision, e = t.rounding, t.precision = n + 7, t.rounding = 1, Z(i.sinh(), i.cosh(), t.precision = n, t.rounding = e)) : new t(i.s);\n    }, O.inverseCosine = O.acos = function () {\n      var n,\n          e = this,\n          i = e.constructor,\n          t = e.abs().cmp(1),\n          r = i.precision,\n          s = i.rounding;\n      return -1 !== t ? 0 === t ? e.isNeg() ? U(i, r, s) : new i(0) : new i(NaN) : e.isZero() ? U(i, r + 4, s).times(.5) : (i.precision = r + 6, i.rounding = 1, e = e.asin(), n = U(i, r + 4, s).times(.5), i.precision = r, i.rounding = s, n.minus(e));\n    }, O.inverseHyperbolicCosine = O.acosh = function () {\n      var n,\n          e,\n          i = this,\n          t = i.constructor;\n      return i.lte(1) ? new t(i.eq(1) ? 0 : NaN) : i.isFinite() ? (n = t.precision, e = t.rounding, t.precision = n + Math.max(Math.abs(i.e), i.sd()) + 4, t.rounding = 1, h = !1, i = i.times(i).minus(1).sqrt().plus(i), h = !0, t.precision = n, t.rounding = e, i.ln()) : new t(i);\n    }, O.inverseHyperbolicSine = O.asinh = function () {\n      var n,\n          e,\n          i = this,\n          t = i.constructor;\n      return !i.isFinite() || i.isZero() ? new t(i) : (n = t.precision, e = t.rounding, t.precision = n + 2 * Math.max(Math.abs(i.e), i.sd()) + 6, t.rounding = 1, h = !1, i = i.times(i).plus(1).sqrt().plus(i), h = !0, t.precision = n, t.rounding = e, i.ln());\n    }, O.inverseHyperbolicTangent = O.atanh = function () {\n      var n,\n          e,\n          i,\n          t,\n          r = this,\n          s = r.constructor;\n      return r.isFinite() ? r.e >= 0 ? new s(r.abs().eq(1) ? r.s / 0 : r.isZero() ? r : NaN) : (n = s.precision, e = s.rounding, t = r.sd(), Math.max(t, n) < 2 * -r.e - 1 ? P(new s(r), n, e, !0) : (s.precision = i = t - r.e, r = Z(r.plus(1), new s(1).minus(r), i + n, 1), s.precision = n + 4, s.rounding = 1, r = r.ln(), s.precision = n, s.rounding = e, r.times(.5))) : new s(NaN);\n    }, O.inverseSine = O.asin = function () {\n      var n,\n          e,\n          i,\n          t,\n          r = this,\n          s = r.constructor;\n      return r.isZero() ? new s(r) : (e = r.abs().cmp(1), i = s.precision, t = s.rounding, -1 !== e ? 0 === e ? ((n = U(s, i + 4, t).times(.5)).s = r.s, n) : new s(NaN) : (s.precision = i + 6, s.rounding = 1, r = r.div(new s(1).minus(r.times(r)).sqrt().plus(1)).atan(), s.precision = i, s.rounding = t, r.times(2)));\n    }, O.inverseTangent = O.atan = function () {\n      var n,\n          e,\n          i,\n          t,\n          r,\n          s,\n          o,\n          u,\n          c,\n          f = this,\n          a = f.constructor,\n          d = a.precision,\n          l = a.rounding;\n\n      if (f.isFinite()) {\n        if (f.isZero()) return new a(f);\n        if (f.abs().eq(1) && d + 4 <= q) return (o = U(a, d + 4, l).times(.25)).s = f.s, o;\n      } else {\n        if (!f.s) return new a(NaN);\n        if (d + 4 <= q) return (o = U(a, d + 4, l).times(.5)).s = f.s, o;\n      }\n\n      for (a.precision = u = d + 10, a.rounding = 1, n = i = Math.min(28, u / y + 2 | 0); n; --n) f = f.div(f.times(f).plus(1).sqrt().plus(1));\n\n      for (h = !1, e = Math.ceil(u / y), t = 1, c = f.times(f), o = new a(f), r = f; -1 !== n;) if (r = r.times(c), s = o.minus(r.div(t += 2)), r = r.times(c), void 0 !== (o = s.plus(r.div(t += 2))).d[e]) for (n = e; o.d[n] === s.d[n] && n--;);\n\n      return i && (o = o.times(2 << i - 1)), h = !0, P(o, a.precision = d, a.rounding = l, !0);\n    }, O.isFinite = function () {\n      return !!this.d;\n    }, O.isInteger = O.isInt = function () {\n      return !!this.d && m(this.e / y) > this.d.length - 2;\n    }, O.isNaN = function () {\n      return !this.s;\n    }, O.isNegative = O.isNeg = function () {\n      return this.s < 0;\n    }, O.isPositive = O.isPos = function () {\n      return this.s > 0;\n    }, O.isZero = function () {\n      return !!this.d && 0 === this.d[0];\n    }, O.lessThan = O.lt = function (n) {\n      return this.cmp(n) < 0;\n    }, O.lessThanOrEqualTo = O.lte = function (n) {\n      return this.cmp(n) < 1;\n    }, O.logarithm = O.log = function (n) {\n      var e,\n          i,\n          t,\n          r,\n          s,\n          o,\n          u,\n          c,\n          f = this.constructor,\n          a = f.precision,\n          d = f.rounding;\n      if (null == n) n = new f(10), e = !0;else {\n        if (i = (n = new f(n)).d, n.s < 0 || !i || !i[0] || n.eq(1)) return new f(NaN);\n        e = n.eq(10);\n      }\n      if (i = this.d, this.s < 0 || !i || !i[0] || this.eq(1)) return new f(i && !i[0] ? -1 / 0 : 1 != this.s ? NaN : i ? 0 : 1 / 0);\n      if (e) if (i.length > 1) s = !0;else {\n        for (r = i[0]; r % 10 == 0;) r /= 10;\n\n        s = 1 !== r;\n      }\n      if (h = !1, o = V(this, u = a + 5), t = e ? T(f, u + 10) : V(n, u), A((c = Z(o, t, u, 1)).d, r = a, d)) do {\n        if (o = V(this, u += 10), t = e ? T(f, u + 10) : V(n, u), c = Z(o, t, u, 1), !s) {\n          +D(c.d).slice(r + 1, r + 15) + 1 == 1e14 && (c = P(c, a + 1, 0));\n          break;\n        }\n      } while (A(c.d, r += 10, d));\n      return h = !0, P(c, a, d);\n    }, O.minus = O.sub = function (n) {\n      var e,\n          i,\n          t,\n          r,\n          s,\n          o,\n          u,\n          c,\n          f,\n          a,\n          d,\n          l,\n          p = this,\n          g = p.constructor;\n      if (n = new g(n), !p.d || !n.d) return p.s && n.s ? p.d ? n.s = -n.s : n = new g(n.d || p.s !== n.s ? p : NaN) : n = new g(NaN), n;\n      if (p.s != n.s) return n.s = -n.s, p.plus(n);\n\n      if (f = p.d, l = n.d, u = g.precision, c = g.rounding, !f[0] || !l[0]) {\n        if (l[0]) n.s = -n.s;else {\n          if (!f[0]) return new g(3 === c ? -0 : 0);\n          n = new g(p);\n        }\n        return h ? P(n, u, c) : n;\n      }\n\n      if (i = m(n.e / y), a = m(p.e / y), f = f.slice(), s = a - i) {\n        for ((d = s < 0) ? (e = f, s = -s, o = l.length) : (e = l, i = a, o = f.length), s > (t = Math.max(Math.ceil(u / y), o) + 2) && (s = t, e.length = 1), e.reverse(), t = s; t--;) e.push(0);\n\n        e.reverse();\n      } else {\n        for ((d = (t = f.length) < (o = l.length)) && (o = t), t = 0; t < o; t++) if (f[t] != l[t]) {\n          d = f[t] < l[t];\n          break;\n        }\n\n        s = 0;\n      }\n\n      for (d && (e = f, f = l, l = e, n.s = -n.s), o = f.length, t = l.length - o; t > 0; --t) f[o++] = 0;\n\n      for (t = l.length; t > s;) {\n        if (f[--t] < l[t]) {\n          for (r = t; r && 0 === f[--r];) f[r] = x - 1;\n\n          --f[r], f[t] += x;\n        }\n\n        f[t] -= l[t];\n      }\n\n      for (; 0 === f[--o];) f.pop();\n\n      for (; 0 === f[0]; f.shift()) --i;\n\n      return f[0] ? (n.d = f, n.e = L(f, i), h ? P(n, u, c) : n) : new g(3 === c ? -0 : 0);\n    }, O.modulo = O.mod = function (n) {\n      var e,\n          i = this,\n          t = i.constructor;\n      return n = new t(n), !i.d || !n.s || n.d && !n.d[0] ? new t(NaN) : !n.d || i.d && !i.d[0] ? P(new t(i), t.precision, t.rounding) : (h = !1, 9 == t.modulo ? (e = Z(i, n.abs(), 0, 3, 1)).s *= n.s : e = Z(i, n, 0, t.modulo, 1), e = e.times(n), h = !0, i.minus(e));\n    }, O.naturalExponential = O.exp = function () {\n      return B(this);\n    }, O.naturalLogarithm = O.ln = function () {\n      return V(this);\n    }, O.negated = O.neg = function () {\n      var n = new this.constructor(this);\n      return n.s = -n.s, P(n);\n    }, O.plus = O.add = function (n) {\n      var e,\n          i,\n          t,\n          r,\n          s,\n          o,\n          u,\n          c,\n          f,\n          a,\n          d = this,\n          l = d.constructor;\n      if (n = new l(n), !d.d || !n.d) return d.s && n.s ? d.d || (n = new l(n.d || d.s === n.s ? d : NaN)) : n = new l(NaN), n;\n      if (d.s != n.s) return n.s = -n.s, d.minus(n);\n      if (f = d.d, a = n.d, u = l.precision, c = l.rounding, !f[0] || !a[0]) return a[0] || (n = new l(d)), h ? P(n, u, c) : n;\n\n      if (s = m(d.e / y), t = m(n.e / y), f = f.slice(), r = s - t) {\n        for (r < 0 ? (i = f, r = -r, o = a.length) : (i = a, t = s, o = f.length), r > (o = (s = Math.ceil(u / y)) > o ? s + 1 : o + 1) && (r = o, i.length = 1), i.reverse(); r--;) i.push(0);\n\n        i.reverse();\n      }\n\n      for ((o = f.length) - (r = a.length) < 0 && (r = o, i = a, a = f, f = i), e = 0; r;) e = (f[--r] = f[r] + a[r] + e) / x | 0, f[r] %= x;\n\n      for (e && (f.unshift(e), ++t), o = f.length; 0 == f[--o];) f.pop();\n\n      return n.d = f, n.e = L(f, t), h ? P(n, u, c) : n;\n    }, O.precision = O.sd = function (n) {\n      var e,\n          i = this;\n      if (void 0 !== n && n !== !!n && 1 !== n && 0 !== n) throw Error(l + n);\n      return i.d ? (e = _(i.d), n && i.e + 1 > e && (e = i.e + 1)) : e = NaN, e;\n    }, O.round = function () {\n      var n = this,\n          e = n.constructor;\n      return P(new e(n), n.e + 1, e.rounding);\n    }, O.sine = O.sin = function () {\n      var n,\n          e,\n          i = this,\n          t = i.constructor;\n      return i.isFinite() ? i.isZero() ? new t(i) : (n = t.precision, e = t.rounding, t.precision = n + Math.max(i.e, i.sd()) + y, t.rounding = 1, i = function (n, e) {\n        var i,\n            t = e.d.length;\n        if (t < 3) return J(n, 2, e, e);\n        i = (i = 1.4 * Math.sqrt(t)) > 16 ? 16 : 0 | i, e = e.times(1 / z(5, i)), e = J(n, 2, e, e);\n\n        for (var r, s = new n(5), o = new n(16), u = new n(20); i--;) r = e.times(e), e = e.times(s.plus(r.times(o.times(r).minus(u))));\n\n        return e;\n      }(t, G(t, i)), t.precision = n, t.rounding = e, P(r > 2 ? i.neg() : i, n, e, !0)) : new t(NaN);\n    }, O.squareRoot = O.sqrt = function () {\n      var n,\n          e,\n          i,\n          t,\n          r,\n          s,\n          o = this,\n          u = o.d,\n          c = o.e,\n          f = o.s,\n          a = o.constructor;\n      if (1 !== f || !u || !u[0]) return new a(!f || f < 0 && (!u || u[0]) ? NaN : u ? o : 1 / 0);\n\n      for (h = !1, 0 == (f = Math.sqrt(+o)) || f == 1 / 0 ? (((e = D(u)).length + c) % 2 == 0 && (e += \"0\"), f = Math.sqrt(e), c = m((c + 1) / 2) - (c < 0 || c % 2), t = new a(e = f == 1 / 0 ? \"5e\" + c : (e = f.toExponential()).slice(0, e.indexOf(\"e\") + 1) + c)) : t = new a(f.toString()), i = (c = a.precision) + 3;;) if (t = (s = t).plus(Z(o, s, i + 2, 1)).times(.5), D(s.d).slice(0, i) === (e = D(t.d)).slice(0, i)) {\n        if (\"9999\" != (e = e.slice(i - 3, i + 1)) && (r || \"4999\" != e)) {\n          +e && (+e.slice(1) || \"5\" != e.charAt(0)) || (P(t, c + 1, 1), n = !t.times(t).eq(o));\n          break;\n        }\n\n        if (!r && (P(s, c + 1, 0), s.times(s).eq(o))) {\n          t = s;\n          break;\n        }\n\n        i += 4, r = 1;\n      }\n\n      return h = !0, P(t, c, a.rounding, n);\n    }, O.tangent = O.tan = function () {\n      var n,\n          e,\n          i = this,\n          t = i.constructor;\n      return i.isFinite() ? i.isZero() ? new t(i) : (n = t.precision, e = t.rounding, t.precision = n + 10, t.rounding = 1, (i = i.sin()).s = 1, i = Z(i, new t(1).minus(i.times(i)).sqrt(), n + 10, 0), t.precision = n, t.rounding = e, P(2 == r || 4 == r ? i.neg() : i, n, e, !0)) : new t(NaN);\n    }, O.times = O.mul = function (n) {\n      var e,\n          i,\n          t,\n          r,\n          s,\n          o,\n          u,\n          c,\n          f,\n          a = this,\n          d = a.constructor,\n          l = a.d,\n          p = (n = new d(n)).d;\n      if (n.s *= a.s, !(l && l[0] && p && p[0])) return new d(!n.s || l && !l[0] && !p || p && !p[0] && !l ? NaN : l && p ? 0 * n.s : n.s / 0);\n\n      for (i = m(a.e / y) + m(n.e / y), (c = l.length) < (f = p.length) && (s = l, l = p, p = s, o = c, c = f, f = o), s = [], t = o = c + f; t--;) s.push(0);\n\n      for (t = f; --t >= 0;) {\n        for (e = 0, r = c + t; r > t;) u = s[r] + p[t] * l[r - t - 1] + e, s[r--] = u % x | 0, e = u / x | 0;\n\n        s[r] = (s[r] + e) % x | 0;\n      }\n\n      for (; !s[--o];) s.pop();\n\n      return e ? ++i : s.shift(), n.d = s, n.e = L(s, i), h ? P(n, d.precision, d.rounding) : n;\n    }, O.toBinary = function (n, e) {\n      return K(this, 2, n, e);\n    }, O.toDecimalPlaces = O.toDP = function (n, e) {\n      var i = this,\n          t = i.constructor;\n      return i = new t(i), void 0 === n ? i : (F(n, 0, o), void 0 === e ? e = t.rounding : F(e, 0, 8), P(i, n + i.e + 1, e));\n    }, O.toExponential = function (n, e) {\n      var i,\n          t = this,\n          r = t.constructor;\n      return void 0 === n ? i = R(t, !0) : (F(n, 0, o), void 0 === e ? e = r.rounding : F(e, 0, 8), i = R(t = P(new r(t), n + 1, e), !0, n + 1)), t.isNeg() && !t.isZero() ? \"-\" + i : i;\n    }, O.toFixed = function (n, e) {\n      var i,\n          t,\n          r = this,\n          s = r.constructor;\n      return void 0 === n ? i = R(r) : (F(n, 0, o), void 0 === e ? e = s.rounding : F(e, 0, 8), i = R(t = P(new s(r), n + r.e + 1, e), !1, n + t.e + 1)), r.isNeg() && !r.isZero() ? \"-\" + i : i;\n    }, O.toFraction = function (n) {\n      var e,\n          i,\n          t,\n          r,\n          s,\n          o,\n          u,\n          c,\n          f,\n          a,\n          d,\n          p,\n          g = this,\n          m = g.d,\n          v = g.constructor;\n      if (!m) return new v(g);\n      if (f = i = new v(1), t = c = new v(0), o = (s = (e = new v(t)).e = _(m) - g.e - 1) % y, e.d[0] = w(10, o < 0 ? y + o : o), null == n) n = s > 0 ? e : f;else {\n        if (!(u = new v(n)).isInt() || u.lt(f)) throw Error(l + u);\n        n = u.gt(e) ? s > 0 ? e : f : u;\n      }\n\n      for (h = !1, u = new v(D(m)), a = v.precision, v.precision = s = m.length * y * 2; d = Z(u, e, 0, 1, 1), 1 != (r = i.plus(d.times(t))).cmp(n);) i = t, t = r, r = f, f = c.plus(d.times(r)), c = r, r = e, e = u.minus(d.times(r)), u = r;\n\n      return r = Z(n.minus(i), t, 0, 1, 1), c = c.plus(r.times(f)), i = i.plus(r.times(t)), c.s = f.s = g.s, p = Z(f, t, s, 1).minus(g).abs().cmp(Z(c, i, s, 1).minus(g).abs()) < 1 ? [f, t] : [c, i], v.precision = a, h = !0, p;\n    }, O.toHexadecimal = O.toHex = function (n, e) {\n      return K(this, 16, n, e);\n    }, O.toNearest = function (n, e) {\n      var i = this,\n          t = i.constructor;\n\n      if (i = new t(i), null == n) {\n        if (!i.d) return i;\n        n = new t(1), e = t.rounding;\n      } else {\n        if (n = new t(n), void 0 === e ? e = t.rounding : F(e, 0, 8), !i.d) return n.s ? i : n;\n        if (!n.d) return n.s && (n.s = i.s), n;\n      }\n\n      return n.d[0] ? (h = !1, i = Z(i, n, 0, e, 1).times(n), h = !0, P(i)) : (n.s = i.s, i = n), i;\n    }, O.toNumber = function () {\n      return +this;\n    }, O.toOctal = function (n, e) {\n      return K(this, 8, n, e);\n    }, O.toPower = O.pow = function (n) {\n      var e,\n          i,\n          t,\n          r,\n          s,\n          o,\n          u = this,\n          c = u.constructor,\n          f = +(n = new c(n));\n      if (!(u.d && n.d && u.d[0] && n.d[0])) return new c(w(+u, f));\n      if ((u = new c(u)).eq(1)) return u;\n      if (t = c.precision, s = c.rounding, n.eq(1)) return P(u, t, s);\n      if ((e = m(n.e / y)) >= n.d.length - 1 && (i = f < 0 ? -f : f) <= 9007199254740991) return r = C(c, u, i, t), n.s < 0 ? new c(1).div(r) : P(r, t, s);\n\n      if ((o = u.s) < 0) {\n        if (e < n.d.length - 1) return new c(NaN);\n        if (0 == (1 & n.d[e]) && (o = 1), 0 == u.e && 1 == u.d[0] && 1 == u.d.length) return u.s = o, u;\n      }\n\n      return (e = 0 != (i = w(+u, f)) && isFinite(i) ? new c(i + \"\").e : m(f * (Math.log(\"0.\" + D(u.d)) / Math.LN10 + u.e + 1))) > c.maxE + 1 || e < c.minE - 1 ? new c(e > 0 ? o / 0 : 0) : (h = !1, c.rounding = u.s = 1, i = Math.min(12, (e + \"\").length), (r = B(n.times(V(u, t + i)), t)).d && A((r = P(r, t + 5, 1)).d, t, s) && (e = t + 10, +D((r = P(B(n.times(V(u, e + i)), e), e + 5, 1)).d).slice(t + 1, t + 15) + 1 == 1e14 && (r = P(r, t + 1, 0))), r.s = o, h = !0, c.rounding = s, P(r, t, s));\n    }, O.toPrecision = function (n, e) {\n      var i,\n          t = this,\n          r = t.constructor;\n      return void 0 === n ? i = R(t, t.e <= r.toExpNeg || t.e >= r.toExpPos) : (F(n, 1, o), void 0 === e ? e = r.rounding : F(e, 0, 8), i = R(t = P(new r(t), n, e), n <= t.e || t.e <= r.toExpNeg, n)), t.isNeg() && !t.isZero() ? \"-\" + i : i;\n    }, O.toSignificantDigits = O.toSD = function (n, e) {\n      var i = this.constructor;\n      return void 0 === n ? (n = i.precision, e = i.rounding) : (F(n, 1, o), void 0 === e ? e = i.rounding : F(e, 0, 8)), P(new i(this), n, e);\n    }, O.toString = function () {\n      var n = this,\n          e = n.constructor,\n          i = R(n, n.e <= e.toExpNeg || n.e >= e.toExpPos);\n      return n.isNeg() && !n.isZero() ? \"-\" + i : i;\n    }, O.truncated = O.trunc = function () {\n      return P(new this.constructor(this), this.e + 1, 1);\n    }, O.valueOf = O.toJSON = function () {\n      var n = this,\n          e = n.constructor,\n          i = R(n, n.e <= e.toExpNeg || n.e >= e.toExpPos);\n      return n.isNeg() ? \"-\" + i : i;\n    };\n\n    var Z = function () {\n      function n(n, e, i) {\n        var t,\n            r = 0,\n            s = n.length;\n\n        for (n = n.slice(); s--;) t = n[s] * e + r, n[s] = t % i | 0, r = t / i | 0;\n\n        return r && n.unshift(r), n;\n      }\n\n      function e(n, e, i, t) {\n        var r, s;\n        if (i != t) s = i > t ? 1 : -1;else for (r = s = 0; r < i; r++) if (n[r] != e[r]) {\n          s = n[r] > e[r] ? 1 : -1;\n          break;\n        }\n        return s;\n      }\n\n      function t(n, e, i, t) {\n        for (var r = 0; i--;) n[i] -= r, r = n[i] < e[i] ? 1 : 0, n[i] = r * t + n[i] - e[i];\n\n        for (; !n[0] && n.length > 1;) n.shift();\n      }\n\n      return function (r, s, o, u, c, f) {\n        var a,\n            h,\n            d,\n            l,\n            p,\n            g,\n            w,\n            v,\n            N,\n            b,\n            E,\n            M,\n            q,\n            O,\n            D,\n            F,\n            A,\n            S,\n            Z,\n            R,\n            L = r.constructor,\n            T = r.s == s.s ? 1 : -1,\n            U = r.d,\n            _ = s.d;\n        if (!(U && U[0] && _ && _[0])) return new L(r.s && s.s && (U ? !_ || U[0] != _[0] : _) ? U && 0 == U[0] || !_ ? 0 * T : T / 0 : NaN);\n\n        for (f ? (p = 1, h = r.e - s.e) : (f = x, p = y, h = m(r.e / p) - m(s.e / p)), Z = _.length, A = U.length, b = (N = new L(T)).d = [], d = 0; _[d] == (U[d] || 0); d++);\n\n        if (_[d] > (U[d] || 0) && h--, null == o ? (O = o = L.precision, u = L.rounding) : O = c ? o + (r.e - s.e) + 1 : o, O < 0) b.push(1), g = !0;else {\n          if (O = O / p + 2 | 0, d = 0, 1 == Z) {\n            for (l = 0, _ = _[0], O++; (d < A || l) && O--; d++) D = l * f + (U[d] || 0), b[d] = D / _ | 0, l = D % _ | 0;\n\n            g = l || d < A;\n          } else {\n            for ((l = f / (_[0] + 1) | 0) > 1 && (_ = n(_, l, f), U = n(U, l, f), Z = _.length, A = U.length), F = Z, M = (E = U.slice(0, Z)).length; M < Z;) E[M++] = 0;\n\n            (R = _.slice()).unshift(0), S = _[0], _[1] >= f / 2 && ++S;\n\n            do {\n              l = 0, (a = e(_, E, Z, M)) < 0 ? (q = E[0], Z != M && (q = q * f + (E[1] || 0)), (l = q / S | 0) > 1 ? (l >= f && (l = f - 1), 1 == (a = e(w = n(_, l, f), E, v = w.length, M = E.length)) && (l--, t(w, Z < v ? R : _, v, f))) : (0 == l && (a = l = 1), w = _.slice()), (v = w.length) < M && w.unshift(0), t(E, w, M, f), -1 == a && (a = e(_, E, Z, M = E.length)) < 1 && (l++, t(E, Z < M ? R : _, M, f)), M = E.length) : 0 === a && (l++, E = [0]), b[d++] = l, a && E[0] ? E[M++] = U[F] || 0 : (E = [U[F]], M = 1);\n            } while ((F++ < A || void 0 !== E[0]) && O--);\n\n            g = void 0 !== E[0];\n          }\n\n          b[0] || b.shift();\n        }\n        if (1 == p) N.e = h, i = g;else {\n          for (d = 1, l = b[0]; l >= 10; l /= 10) d++;\n\n          N.e = d + h * p - 1, P(N, c ? o + N.e + 1 : o, u, g);\n        }\n        return N;\n      };\n    }();\n\n    function P(n, e, i, t) {\n      var r,\n          s,\n          o,\n          u,\n          c,\n          f,\n          a,\n          d,\n          l,\n          p = n.constructor;\n\n      n: if (null != e) {\n        if (!(d = n.d)) return n;\n\n        for (r = 1, u = d[0]; u >= 10; u /= 10) r++;\n\n        if ((s = e - r) < 0) s += y, o = e, c = (a = d[l = 0]) / w(10, r - o - 1) % 10 | 0;else if ((l = Math.ceil((s + 1) / y)) >= (u = d.length)) {\n          if (!t) break n;\n\n          for (; u++ <= l;) d.push(0);\n\n          a = c = 0, r = 1, o = (s %= y) - y + 1;\n        } else {\n          for (a = u = d[l], r = 1; u >= 10; u /= 10) r++;\n\n          c = (o = (s %= y) - y + r) < 0 ? 0 : a / w(10, r - o - 1) % 10 | 0;\n        }\n        if (t = t || e < 0 || void 0 !== d[l + 1] || (o < 0 ? a : a % w(10, r - o - 1)), f = i < 4 ? (c || t) && (0 == i || i == (n.s < 0 ? 3 : 2)) : c > 5 || 5 == c && (4 == i || t || 6 == i && (s > 0 ? o > 0 ? a / w(10, r - o) : 0 : d[l - 1]) % 10 & 1 || i == (n.s < 0 ? 8 : 7)), e < 1 || !d[0]) return d.length = 0, f ? (e -= n.e + 1, d[0] = w(10, (y - e % y) % y), n.e = -e || 0) : d[0] = n.e = 0, n;\n        if (0 == s ? (d.length = l, u = 1, l--) : (d.length = l + 1, u = w(10, y - s), d[l] = o > 0 ? (a / w(10, r - o) % w(10, o) | 0) * u : 0), f) for (;;) {\n          if (0 == l) {\n            for (s = 1, o = d[0]; o >= 10; o /= 10) s++;\n\n            for (o = d[0] += u, u = 1; o >= 10; o /= 10) u++;\n\n            s != u && (n.e++, d[0] == x && (d[0] = 1));\n            break;\n          }\n\n          if (d[l] += u, d[l] != x) break;\n          d[l--] = 0, u = 1;\n        }\n\n        for (s = d.length; 0 === d[--s];) d.pop();\n      }\n\n      return h && (n.e > p.maxE ? (n.d = null, n.e = NaN) : n.e < p.minE && (n.e = 0, n.d = [0])), n;\n    }\n\n    function R(n, e, i) {\n      if (!n.isFinite()) return j(n);\n      var t,\n          r = n.e,\n          s = D(n.d),\n          o = s.length;\n      return e ? (i && (t = i - o) > 0 ? s = s.charAt(0) + \".\" + s.slice(1) + k(t) : o > 1 && (s = s.charAt(0) + \".\" + s.slice(1)), s = s + (n.e < 0 ? \"e\" : \"e+\") + n.e) : r < 0 ? (s = \"0.\" + k(-r - 1) + s, i && (t = i - o) > 0 && (s += k(t))) : r >= o ? (s += k(r + 1 - o), i && (t = i - r - 1) > 0 && (s = s + \".\" + k(t))) : ((t = r + 1) < o && (s = s.slice(0, t) + \".\" + s.slice(t)), i && (t = i - o) > 0 && (r + 1 === o && (s += \".\"), s += k(t))), s;\n    }\n\n    function L(n, e) {\n      var i = n[0];\n\n      for (e *= y; i >= 10; i /= 10) e++;\n\n      return e;\n    }\n\n    function T(n, e, i) {\n      if (e > M) throw h = !0, i && (n.precision = i), Error(p);\n      return P(new n(c), e, 1, !0);\n    }\n\n    function U(n, e, i) {\n      if (e > q) throw Error(p);\n      return P(new n(f), e, i, !0);\n    }\n\n    function _(n) {\n      var e = n.length - 1,\n          i = e * y + 1;\n\n      if (e = n[e]) {\n        for (; e % 10 == 0; e /= 10) i--;\n\n        for (e = n[0]; e >= 10; e /= 10) i++;\n      }\n\n      return i;\n    }\n\n    function k(n) {\n      for (var e = \"\"; n--;) e += \"0\";\n\n      return e;\n    }\n\n    function C(n, e, i, t) {\n      var r,\n          s = new n(1),\n          o = Math.ceil(t / y + 4);\n\n      for (h = !1;;) {\n        if (i % 2 && Q((s = s.times(e)).d, o) && (r = !0), 0 === (i = m(i / 2))) {\n          i = s.d.length - 1, r && 0 === s.d[i] && ++s.d[i];\n          break;\n        }\n\n        Q((e = e.times(e)).d, o);\n      }\n\n      return h = !0, s;\n    }\n\n    function I(n) {\n      return 1 & n.d[n.d.length - 1];\n    }\n\n    function H(n, e, i) {\n      for (var t, r = new n(e[0]), s = 0; ++s < e.length;) {\n        if (!(t = new n(e[s])).s) {\n          r = t;\n          break;\n        }\n\n        r[i](t) && (r = t);\n      }\n\n      return r;\n    }\n\n    function B(n, e) {\n      var i,\n          t,\n          r,\n          s,\n          o,\n          u,\n          c,\n          f = 0,\n          a = 0,\n          d = 0,\n          l = n.constructor,\n          p = l.rounding,\n          g = l.precision;\n      if (!n.d || !n.d[0] || n.e > 17) return new l(n.d ? n.d[0] ? n.s < 0 ? 0 : 1 / 0 : 1 : n.s ? n.s < 0 ? 0 : n : NaN);\n\n      for (null == e ? (h = !1, c = g) : c = e, u = new l(.03125); n.e > -2;) n = n.times(u), d += 5;\n\n      for (c += t = Math.log(w(2, d)) / Math.LN10 * 2 + 5 | 0, i = s = o = new l(1), l.precision = c;;) {\n        if (s = P(s.times(n), c, 1), i = i.times(++a), D((u = o.plus(Z(s, i, c, 1))).d).slice(0, c) === D(o.d).slice(0, c)) {\n          for (r = d; r--;) o = P(o.times(o), c, 1);\n\n          if (null != e) return l.precision = g, o;\n          if (!(f < 3 && A(o.d, c - t, p, f))) return P(o, l.precision = g, p, h = !0);\n          l.precision = c += 10, i = s = u = new l(1), a = 0, f++;\n        }\n\n        o = u;\n      }\n    }\n\n    function V(n, e) {\n      var i,\n          t,\n          r,\n          s,\n          o,\n          u,\n          c,\n          f,\n          a,\n          d,\n          l,\n          p = 1,\n          g = n,\n          m = g.d,\n          w = g.constructor,\n          v = w.rounding,\n          N = w.precision;\n      if (g.s < 0 || !m || !m[0] || !g.e && 1 == m[0] && 1 == m.length) return new w(m && !m[0] ? -1 / 0 : 1 != g.s ? NaN : m ? 0 : g);\n      if (null == e ? (h = !1, a = N) : a = e, w.precision = a += 10, t = (i = D(m)).charAt(0), !(Math.abs(s = g.e) < 15e14)) return f = T(w, a + 2, N).times(s + \"\"), g = V(new w(t + \".\" + i.slice(1)), a - 10).plus(f), w.precision = N, null == e ? P(g, N, v, h = !0) : g;\n\n      for (; t < 7 && 1 != t || 1 == t && i.charAt(1) > 3;) t = (i = D((g = g.times(n)).d)).charAt(0), p++;\n\n      for (s = g.e, t > 1 ? (g = new w(\"0.\" + i), s++) : g = new w(t + \".\" + i.slice(1)), d = g, c = o = g = Z(g.minus(1), g.plus(1), a, 1), l = P(g.times(g), a, 1), r = 3;;) {\n        if (o = P(o.times(l), a, 1), D((f = c.plus(Z(o, new w(r), a, 1))).d).slice(0, a) === D(c.d).slice(0, a)) {\n          if (c = c.times(2), 0 !== s && (c = c.plus(T(w, a + 2, N).times(s + \"\"))), c = Z(c, new w(p), a, 1), null != e) return w.precision = N, c;\n          if (!A(c.d, a - 10, v, u)) return P(c, w.precision = N, v, h = !0);\n          w.precision = a += 10, f = o = g = Z(d.minus(1), d.plus(1), a, 1), l = P(g.times(g), a, 1), r = u = 1;\n        }\n\n        c = f, r += 2;\n      }\n    }\n\n    function j(n) {\n      return String(n.s * n.s / 0);\n    }\n\n    function $(n, e) {\n      var i, t, r;\n\n      for ((i = e.indexOf(\".\")) > -1 && (e = e.replace(\".\", \"\")), (t = e.search(/e/i)) > 0 ? (i < 0 && (i = t), i += +e.slice(t + 1), e = e.substring(0, t)) : i < 0 && (i = e.length), t = 0; 48 === e.charCodeAt(t); t++);\n\n      for (r = e.length; 48 === e.charCodeAt(r - 1); --r);\n\n      if (e = e.slice(t, r)) {\n        if (r -= t, n.e = i = i - t - 1, n.d = [], t = (i + 1) % y, i < 0 && (t += y), t < r) {\n          for (t && n.d.push(+e.slice(0, t)), r -= y; t < r;) n.d.push(+e.slice(t, t += y));\n\n          e = e.slice(t), t = y - e.length;\n        } else t -= r;\n\n        for (; t--;) e += \"0\";\n\n        n.d.push(+e), h && (n.e > n.constructor.maxE ? (n.d = null, n.e = NaN) : n.e < n.constructor.minE && (n.e = 0, n.d = [0]));\n      } else n.e = 0, n.d = [0];\n\n      return n;\n    }\n\n    function W(n, i) {\n      var t, r, s, o, u, c, f, a, d;\n      if (\"Infinity\" === i || \"NaN\" === i) return +i || (n.s = NaN), n.e = NaN, n.d = null, n;\n      if (N.test(i)) t = 16, i = i.toLowerCase();else if (v.test(i)) t = 2;else {\n        if (!b.test(i)) throw Error(l + i);\n        t = 8;\n      }\n\n      for ((o = i.search(/p/i)) > 0 ? (f = +i.slice(o + 1), i = i.substring(2, o)) : i = i.slice(2), u = (o = i.indexOf(\".\")) >= 0, r = n.constructor, u && (o = (c = (i = i.replace(\".\", \"\")).length) - o, s = C(r, new r(t), o, 2 * o)), o = d = (a = S(i, t, x)).length - 1; 0 === a[o]; --o) a.pop();\n\n      return o < 0 ? new r(0 * n.s) : (n.e = L(a, d), n.d = a, h = !1, u && (n = Z(n, s, 4 * c)), f && (n = n.times(Math.abs(f) < 54 ? w(2, f) : e.pow(2, f))), h = !0, n);\n    }\n\n    function J(n, e, i, t, r) {\n      var s,\n          o,\n          u,\n          c,\n          f = n.precision,\n          a = Math.ceil(f / y);\n\n      for (h = !1, c = i.times(i), u = new n(t);;) {\n        if (o = Z(u.times(c), new n(e++ * e++), f, 1), u = r ? t.plus(o) : t.minus(o), t = Z(o.times(c), new n(e++ * e++), f, 1), void 0 !== (o = u.plus(t)).d[a]) {\n          for (s = a; o.d[s] === u.d[s] && s--;);\n\n          if (-1 == s) break;\n        }\n\n        s = u, u = t, t = o, o = s, 0;\n      }\n\n      return h = !0, o.d.length = a + 1, o;\n    }\n\n    function z(n, e) {\n      for (var i = n; --e;) i *= n;\n\n      return i;\n    }\n\n    function G(n, e) {\n      var i,\n          t = e.s < 0,\n          s = U(n, n.precision, 1),\n          o = s.times(.5);\n      if ((e = e.abs()).lte(o)) return r = t ? 4 : 1, e;\n      if ((i = e.divToInt(s)).isZero()) r = t ? 3 : 2;else {\n        if ((e = e.minus(i.times(s))).lte(o)) return r = I(i) ? t ? 2 : 3 : t ? 4 : 1, e;\n        r = I(i) ? t ? 1 : 4 : t ? 3 : 2;\n      }\n      return e.minus(s).abs();\n    }\n\n    function K(n, e, t, r) {\n      var s,\n          c,\n          f,\n          a,\n          h,\n          d,\n          l,\n          p,\n          g,\n          m = n.constructor,\n          w = void 0 !== t;\n\n      if (w ? (F(t, 1, o), void 0 === r ? r = m.rounding : F(r, 0, 8)) : (t = m.precision, r = m.rounding), n.isFinite()) {\n        for (w ? (s = 2, 16 == e ? t = 4 * t - 3 : 8 == e && (t = 3 * t - 2)) : s = e, (f = (l = R(n)).indexOf(\".\")) >= 0 && (l = l.replace(\".\", \"\"), (g = new m(1)).e = l.length - f, g.d = S(R(g), 10, s), g.e = g.d.length), c = h = (p = S(l, 10, s)).length; 0 == p[--h];) p.pop();\n\n        if (p[0]) {\n          if (f < 0 ? c-- : ((n = new m(n)).d = p, n.e = c, p = (n = Z(n, g, t, r, 0, s)).d, c = n.e, d = i), f = p[t], a = s / 2, d = d || void 0 !== p[t + 1], d = r < 4 ? (void 0 !== f || d) && (0 === r || r === (n.s < 0 ? 3 : 2)) : f > a || f === a && (4 === r || d || 6 === r && 1 & p[t - 1] || r === (n.s < 0 ? 8 : 7)), p.length = t, d) for (; ++p[--t] > s - 1;) p[t] = 0, t || (++c, p.unshift(1));\n\n          for (h = p.length; !p[h - 1]; --h);\n\n          for (f = 0, l = \"\"; f < h; f++) l += u.charAt(p[f]);\n\n          if (w) {\n            if (h > 1) if (16 == e || 8 == e) {\n              for (f = 16 == e ? 4 : 3, --h; h % f; h++) l += \"0\";\n\n              for (h = (p = S(l, s, e)).length; !p[h - 1]; --h);\n\n              for (f = 1, l = \"1.\"; f < h; f++) l += u.charAt(p[f]);\n            } else l = l.charAt(0) + \".\" + l.slice(1);\n            l = l + (c < 0 ? \"p\" : \"p+\") + c;\n          } else if (c < 0) {\n            for (; ++c;) l = \"0\" + l;\n\n            l = \"0.\" + l;\n          } else if (++c > h) for (c -= h; c--;) l += \"0\";else c < h && (l = l.slice(0, c) + \".\" + l.slice(c));\n        } else l = w ? \"0p+0\" : \"0\";\n\n        l = (16 == e ? \"0x\" : 2 == e ? \"0b\" : 8 == e ? \"0o\" : \"\") + l;\n      } else l = j(n);\n\n      return n.s < 0 ? \"-\" + l : l;\n    }\n\n    function Q(n, e) {\n      if (n.length > e) return n.length = e, !0;\n    }\n\n    function X(n) {\n      return new this(n).abs();\n    }\n\n    function Y(n) {\n      return new this(n).acos();\n    }\n\n    function nn(n) {\n      return new this(n).acosh();\n    }\n\n    function en(n, e) {\n      return new this(n).plus(e);\n    }\n\n    function tn(n) {\n      return new this(n).asin();\n    }\n\n    function rn(n) {\n      return new this(n).asinh();\n    }\n\n    function sn(n) {\n      return new this(n).atan();\n    }\n\n    function on(n) {\n      return new this(n).atanh();\n    }\n\n    function un(n, e) {\n      n = new this(n), e = new this(e);\n      var i,\n          t = this.precision,\n          r = this.rounding,\n          s = t + 4;\n      return n.s && e.s ? n.d || e.d ? !e.d || n.isZero() ? (i = e.s < 0 ? U(this, t, r) : new this(0)).s = n.s : !n.d || e.isZero() ? (i = U(this, s, 1).times(.5)).s = n.s : e.s < 0 ? (this.precision = s, this.rounding = 1, i = this.atan(Z(n, e, s, 1)), e = U(this, s, 1), this.precision = t, this.rounding = r, i = n.s < 0 ? i.minus(e) : i.plus(e)) : i = this.atan(Z(n, e, s, 1)) : (i = U(this, s, 1).times(e.s > 0 ? .25 : .75)).s = n.s : i = new this(NaN), i;\n    }\n\n    function cn(n) {\n      return new this(n).cbrt();\n    }\n\n    function fn(n) {\n      return P(n = new this(n), n.e + 1, 2);\n    }\n\n    function an(n) {\n      if (!n || \"object\" != typeof n) throw Error(d + \"Object expected\");\n      var e,\n          i,\n          t,\n          r = !0 === n.defaults,\n          u = [\"precision\", 1, o, \"rounding\", 0, 8, \"toExpNeg\", -s, 0, \"toExpPos\", 0, s, \"maxE\", 0, s, \"minE\", -s, 0, \"modulo\", 0, 9];\n\n      for (e = 0; e < u.length; e += 3) if (i = u[e], r && (this[i] = a[i]), void 0 !== (t = n[i])) {\n        if (!(m(t) === t && t >= u[e + 1] && t <= u[e + 2])) throw Error(l + i + \": \" + t);\n        this[i] = t;\n      }\n\n      if (i = \"crypto\", r && (this[i] = a[i]), void 0 !== (t = n[i])) {\n        if (!0 !== t && !1 !== t && 0 !== t && 1 !== t) throw Error(l + i + \": \" + t);\n\n        if (t) {\n          if (\"undefined\" == typeof crypto || !crypto || !crypto.getRandomValues && !crypto.randomBytes) throw Error(g);\n          this[i] = !0;\n        } else this[i] = !1;\n      }\n\n      return this;\n    }\n\n    function hn(n) {\n      return new this(n).cos();\n    }\n\n    function dn(n) {\n      return new this(n).cosh();\n    }\n\n    function ln(n, e) {\n      return new this(n).div(e);\n    }\n\n    function pn(n) {\n      return new this(n).exp();\n    }\n\n    function gn(n) {\n      return P(n = new this(n), n.e + 1, 3);\n    }\n\n    function mn() {\n      var n,\n          e,\n          i = new this(0);\n\n      for (h = !1, n = 0; n < arguments.length;) if ((e = new this(arguments[n++])).d) i.d && (i = i.plus(e.times(e)));else {\n        if (e.s) return h = !0, new this(1 / 0);\n        i = e;\n      }\n\n      return h = !0, i.sqrt();\n    }\n\n    function wn(n) {\n      return n instanceof e || n && \"[object Decimal]\" === n.name || !1;\n    }\n\n    function vn(n) {\n      return new this(n).ln();\n    }\n\n    function Nn(n, e) {\n      return new this(n).log(e);\n    }\n\n    function bn(n) {\n      return new this(n).log(2);\n    }\n\n    function En(n) {\n      return new this(n).log(10);\n    }\n\n    function xn() {\n      return H(this, arguments, \"lt\");\n    }\n\n    function yn() {\n      return H(this, arguments, \"gt\");\n    }\n\n    function Mn(n, e) {\n      return new this(n).mod(e);\n    }\n\n    function qn(n, e) {\n      return new this(n).mul(e);\n    }\n\n    function On(n, e) {\n      return new this(n).pow(e);\n    }\n\n    function Dn(n) {\n      var e,\n          i,\n          t,\n          r,\n          s = 0,\n          u = new this(1),\n          c = [];\n      if (void 0 === n ? n = this.precision : F(n, 1, o), t = Math.ceil(n / y), this.crypto) {\n        if (crypto.getRandomValues) for (e = crypto.getRandomValues(new Uint32Array(t)); s < t;) (r = e[s]) >= 429e7 ? e[s] = crypto.getRandomValues(new Uint32Array(1))[0] : c[s++] = r % 1e7;else {\n          if (!crypto.randomBytes) throw Error(g);\n\n          for (e = crypto.randomBytes(t *= 4); s < t;) (r = e[s] + (e[s + 1] << 8) + (e[s + 2] << 16) + ((127 & e[s + 3]) << 24)) >= 214e7 ? crypto.randomBytes(4).copy(e, s) : (c.push(r % 1e7), s += 4);\n\n          s = t / 4;\n        }\n      } else for (; s < t;) c[s++] = 1e7 * Math.random() | 0;\n\n      for (t = c[--s], n %= y, t && n && (r = w(10, y - n), c[s] = (t / r | 0) * r); 0 === c[s]; s--) c.pop();\n\n      if (s < 0) i = 0, c = [0];else {\n        for (i = -1; 0 === c[0]; i -= y) c.shift();\n\n        for (t = 1, r = c[0]; r >= 10; r /= 10) t++;\n\n        t < y && (i -= y - t);\n      }\n      return u.e = i, u.d = c, u;\n    }\n\n    function Fn(n) {\n      return P(n = new this(n), n.e + 1, this.rounding);\n    }\n\n    function An(n) {\n      return (n = new this(n)).d ? n.d[0] ? n.s : 0 * n.s : n.s || NaN;\n    }\n\n    function Sn(n) {\n      return new this(n).sin();\n    }\n\n    function Zn(n) {\n      return new this(n).sinh();\n    }\n\n    function Pn(n) {\n      return new this(n).sqrt();\n    }\n\n    function Rn(n, e) {\n      return new this(n).sub(e);\n    }\n\n    function Ln(n) {\n      return new this(n).tan();\n    }\n\n    function Tn(n) {\n      return new this(n).tanh();\n    }\n\n    function Un(n) {\n      return P(n = new this(n), n.e + 1, 1);\n    }\n\n    return (e = function n(e) {\n      var i, t, r;\n\n      function s(n) {\n        var e,\n            i,\n            t,\n            r = this;\n        if (!(r instanceof s)) return new s(n);\n        if (r.constructor = s, n instanceof s) return r.s = n.s, void (h ? !n.d || n.e > s.maxE ? (r.e = NaN, r.d = null) : n.e < s.minE ? (r.e = 0, r.d = [0]) : (r.e = n.e, r.d = n.d.slice()) : (r.e = n.e, r.d = n.d ? n.d.slice() : n.d));\n\n        if (\"number\" == (t = typeof n)) {\n          if (0 === n) return r.s = 1 / n < 0 ? -1 : 1, r.e = 0, void (r.d = [0]);\n\n          if (n < 0 ? (n = -n, r.s = -1) : r.s = 1, n === ~~n && n < 1e7) {\n            for (e = 0, i = n; i >= 10; i /= 10) e++;\n\n            return void (h ? e > s.maxE ? (r.e = NaN, r.d = null) : e < s.minE ? (r.e = 0, r.d = [0]) : (r.e = e, r.d = [n]) : (r.e = e, r.d = [n]));\n          }\n\n          return 0 * n != 0 ? (n || (r.s = NaN), r.e = NaN, void (r.d = null)) : $(r, n.toString());\n        }\n\n        if (\"string\" !== t) throw Error(l + n);\n        return 45 === (i = n.charCodeAt(0)) ? (n = n.slice(1), r.s = -1) : (43 === i && (n = n.slice(1)), r.s = 1), E.test(n) ? $(r, n) : W(r, n);\n      }\n\n      if (s.prototype = O, s.ROUND_UP = 0, s.ROUND_DOWN = 1, s.ROUND_CEIL = 2, s.ROUND_FLOOR = 3, s.ROUND_HALF_UP = 4, s.ROUND_HALF_DOWN = 5, s.ROUND_HALF_EVEN = 6, s.ROUND_HALF_CEIL = 7, s.ROUND_HALF_FLOOR = 8, s.EUCLID = 9, s.config = s.set = an, s.clone = n, s.isDecimal = wn, s.abs = X, s.acos = Y, s.acosh = nn, s.add = en, s.asin = tn, s.asinh = rn, s.atan = sn, s.atanh = on, s.atan2 = un, s.cbrt = cn, s.ceil = fn, s.cos = hn, s.cosh = dn, s.div = ln, s.exp = pn, s.floor = gn, s.hypot = mn, s.ln = vn, s.log = Nn, s.log10 = En, s.log2 = bn, s.max = xn, s.min = yn, s.mod = Mn, s.mul = qn, s.pow = On, s.random = Dn, s.round = Fn, s.sign = An, s.sin = Sn, s.sinh = Zn, s.sqrt = Pn, s.sub = Rn, s.tan = Ln, s.tanh = Tn, s.trunc = Un, void 0 === e && (e = {}), e && !0 !== e.defaults) for (r = [\"precision\", \"rounding\", \"toExpNeg\", \"toExpPos\", \"maxE\", \"minE\", \"modulo\", \"crypto\"], i = 0; i < r.length;) e.hasOwnProperty(t = r[i++]) || (e[t] = this[t]);\n      return s.config(e), s;\n    }(a)).default = e.Decimal = e, c = new e(c), f = new e(f), \"function\" == typeof define && define.amd ? define(function () {\n      return e;\n    }) : \"undefined\" != typeof module && module.exports ? (\"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator && (O[Symbol.for(\"nodejs.util.inspect.custom\")] = O.toString, O[Symbol.toStringTag] = \"Decimal\"), module.exports = e) : (n || (n = \"undefined\" != typeof self && self && self.self == self ? self : window), t = n.Decimal, e.noConflict = function () {\n      return n.Decimal = t, e;\n    }, n.Decimal = e), e;\n  }(this) //    bigDec: require('decimal.js')\n\n});\n\nif (typeof module !== 'undefined') {\n  module.exports = nerdamer;\n}\n\n;\nvar ans = nerdamer('sqrt(3^x)');\nconsole.log(ans.toString());","map":{"version":3,"sources":["C:/Users/brisk/OneDrive/Documents/GitHub/seeciv/my-app/node_modules/nerdamer/nerdamer.core.js"],"names":["nerdamer","imports","version","_","Parser","bigInt","bigDec","set","precision","Groups","PRIMES","CUSTOM_OPERATORS","Settings","callPeekers","init_primes","exclude","suppress_errors","PARSE2NUMBER","SAFE","IMAGINARY","FUNCTION_MODULES","Math","ALLOW_CHARS","USE_MULTICHARACTER_VARS","POWER_OPERATOR","VALIDATION_REGEX","IMPLIED_MULTIPLICATION_REGEX","ALIASES","POSITIVE_MULTIPLIERS","CACHE","SILENCE_WARNINGS","PRECISION","VECTOR","PARENTHESIS","SQRT","ABS","FACTORIAL","DOUBLEFACTORIAL","LONG_PI","LONG_E","PI","E","LOG","LOG10","LOG10_LATEX","MAX_EXP","SCIENTIFIC_MAX_DECIMAL_PLACES","SCIENTIFIC_IGNORE_ZERO_EXPONENTS","roots","x","y","i","j","nthpow","pow","N","P","S","EX","FN","PL","CB","CP","CONST_HASH","EXPRESSIONS","VARS","RESERVED","WARNINGS","err","msg","ErrorObj","Error","customError","name","message","undefined","error","stack","prototype","Object","create","isReserved","value","indexOf","allSame","arr","last","l","length","equals","warn","push","SHOW_WARNINGS","console","validateName","typ","regex","test","InvalidVariableNameError","scientificToDecimal","num","nsign","sign","abs","zero","parts","String","toLowerCase","split","e","pop","coeff_array","slice","Array","join","dec","isPrime","n","q","floor","sqrt","knownVariable","variable","o","isNumber","allNumeric","isFraction","isSymbol","multiplier","toDecimal","obj","Symbol","isExpression","Expression","variables","poly","vars","c","add","isNaN","group","prevgroup","previousGroup","power","symbols","firstObject","args","sort","arraySum","toNumber","sum","parse","Number","separate","symbol","expand","insert","key","sym","clone","each","isConstant","fname","fillHoles","isVector","Vector","isMatrix","Matrix","isSet","Set","isNumericSymbol","isVariableSymbol","isArray","isInt","toString","isNegative","lessThan","stringify","inBrackets","str","stringReplace","from","to","with_str","substr","customType","custom","sameSign","a","b","format","call","arguments","shift","new_str","replace","match","index","arg","range","start","end","step","keys","both","compare","sym1","sym2","scope","comparison","random","block","setFunction","params_array","body","functions","mapped_function","params","arrayMax","max","apply","arrayMin","min","arrayEqual","arr1","arr2","arrayClone","new_array","arrayAddSlices","slices","retval","delta","nroots","unwrapPARENS","toLinear","_roots","toPolarFormArray","evaluate","r","den","p","formula","t","fromArray","root","negate","map","multiply","imaginary","comboSort","combined","na","nb","decompose_fn","fn","wrt","as_obj","ax","stripVar","subtract","divide","nround","s","MAX_VALUE","round","getU","u","v","clearU","indx","hasOwnProperty","even","evenFraction","arrayUnique","item","arrayGetVariables","concat","removeDuplicates","condition","conditionType","seen","temp","reserveNames","remove","indexOrKey","result","splice","setting","f","opt","current_setting","importFunctions","arguments2Array","getCoeffs","info","coeffs","term","contains","coeff","convertToVector","vector","elements","generatePrimes","upto","last_prime","allNumbers","allConstants","isPi","isE","mix","isComposite","isLinear","expanded","DivisionByZero","ParseError","UndefinedError","OutOfFunctionDomainError","MaximumIterationsReached","NerdamerTypeError","ParityError","OperatorError","OutOfRangeError","DimensionError","ValueLimitExceededError","NerdamerValueError","SolveError","InfiniteLoopError","UnexpectedTokenError","exceptions","Math2","csc","sin","sec","cos","cot","tan","acsc","asin","asec","acos","acot","atan","erf","exp","diff","h","derivative","median","values","half","fromContinued","contd","fractions","whole","continuedFraction","absn","ni","done","epsilon","w","d","EPSILON","idx","bigpow","Frac","isInteger","nthroot","gamma","z","g","C","bigfactorial","times","bigLog","quick","k","invert","factorial","is_int","NaN","dfactorial","GCD","QGCD","gcd","LCM","factor","ifactors","ifactor","factors","updateHash","sfactor","lcprime","prime","input","lt","safety","rho","xf","cz","mod","minus","sm","boxfactor","fib","integer_part","simpson","get_value","side","dx","xi","num_integrate","tol","maxdepth","adsimp","fa","fm","fb","V0","depth","state","nanEncountered","f1","f2","sl","sr","s2","m","V1","V2","maxDepthCount","integrate","Ci","n2","log","Si","Ei","Infinity","Shi","Chi","cosh","Li","gamma_incomplete","rect","sinc","tri","A","xk","dk","dk0","d0","powb","dk_dec","gte","xn","ld","same_delta","decimal","sech","csch","sinh","coth","tanh","asinh","acosh","atanh","log10","LOG10E","trunc","ceil","text","option","useGroup","decp","asHash","wrapCondition","asDecimal","valueOf","frac","exec","negative","quotient","digits","passed","prefix","cycle","numer","denom","divmod","remainder","operator","Scientific","om","collectSymbols","txt","pg","pwg","E_TO_EXP","charAt","cv","parens","primeFactors","getExpression","expression_number","asType","expression","text_","latex","LaTeX","dimensions","first_arg","subs","buildFunction","Build","build","isInfinity","isImaginary","prec","isPolynomial","isPoly","sub","for_symbol","operation","otype","callback","eq","gt","greaterThan","lte","numerator","getNum","denominator","getDenom","hasFunction","containsFunction","toTeX","startsWith","isScientific","fromScientific","convert","exponent","removeLeadingZeroes","removeTrailingZeroes","dot_location","zeroes","leadingZeroes","copy","rounded","substring","next_two","ed","SCIENTIFIC_IGNORE_INTS","wholes","simple","Fraction","quickConversion","is_neg","isFrac","nstr","m_dc","simplify","isOne","neg","n1","narr","unshift","qcompare","absEquals","isnegative","lcm","USE_BIG","div","infinity","shell","unwrapSQRT","all","hyp","re","im","theta","realpart","imagpart","trig","getNth","isToNth","nthMultiplier","nthPower","isNth","isSquare","isCube","isSimple","powSimp","powers","mfactors","out_","in_","xt","symfunction","multivariate","exclude_x","toArray","hasFunc","fn_group","same_pow","a_is_unit_multiplier","subbed","find","needle","nargs","isMonomial","isSQRT","check_all","check_symbols","names","multiplyPower","p2","p1","setPower","retainSign","isSymbolic","isInverse","properties","isConversion","isUnit","toUnitMultiplier","keepSign","deep","distributeMultiplier","power_only","is_one","distributeExponent","cp","isImgSymbol","keyForGroup","action","existing","hash","attach","combine","contents","is_parens","fn_name","sort_fn","expand_symbol","collected","isCombination","bin","preprocessors","actions","Slice","upper","lower","Collection","append","getItems","pretty_print","collection","Token","node","node_type","column","type","OPERATOR","operators","FUNCTION","precedence","MAX_PRECEDENCE","leftAssoc","is_prefix","VARIABLE_OR_LITERAL","UNIT","KEYWORD","classes","complex","removeDen","sq","squared","asech","acsch","acoth","phi","atan2","R","I","toPower","dividedBy","plus","getQuadrant","trigh","units","postfix","overloaded","overloadAction","overloadLeftAssoc","vectorFn","brackets","id","is_open","is_close","maps_to","radians","degrees","continued_fraction","scientific","pfactor","matrix","imatrix","cbrt","expandall","determinant","size","transpose","dot","cross","vecget","vecset","vectrim","matget","matset","matgetrow","matsetrow","matgetcol","matsetcol","rationalize","IF","is_in","conjugate","polarform","rectform","union","intersection","difference","intersects","is_subset","print","findFunction","fmodules","fmodule","override","which","with_what","restore","what","extend","force_call","extended","callfunction","allowed_args","fn_settings","num_allowed_args","is_array","min_args","max_args","num_args","error_msg","numericArgs","bigConvert","operator_filter_regex","ostr","filter","RegExp","setOperator","postif","getOperator","aliasOperator","getOperators","getBrackets","prepare_expression","group1","group2","first","before","e_org","g1","g2","initConstants","CONSTANTS","peekers","pre_operator","post_operator","pre_function","post_function","tokenize","trim","col","L","lpos","tokens","scopes","target","open_brackets","has_space","SPACE","EMPTY_STRING","COMMA","MINUS","MULT","addScope","scope_type","new_scope","goUp","get_operator_str","start_at","chunkify","operator_str","_operators","ch","add_token","at","token","add_function","set_last_position","position","adjust_column_position","last_token_is_numeric","is_multiplication","bracket","pair","prev","nxt","is_operator","toRPN","output","prefixes","collapse","destination","next","previous","next_is_operator","last_on_stack","parseRPN","rpn","substitutions","pi","Q","is_comma","fromSet","ans","parent","fn_args","ret","next_is_comma","getter","il","element","rethrowErrors","forEach","Node","left","right","toHTML","indent","tab","repeat","html","tree","location","toObject","expression_string","objectify","chunkAtCommas","chunks","rem_brackets","remove_redundant_powers","next_is_array","next_is_minus","before_last","expression_or_obj","decimals","TeX","cdot","nobj","braces","expr","lb","ub","argSplit","ms","V","M","_symbol","cf","symbol1","symbol2","rows","l2","cols","retnum","retden","is_negative","img","qa","tw","nn","rem","sigfigs","asbig","original","symMinMax","numVal","a_val","b_val","SYMBOLIC_MIN_MAX","getval","aval","bval","base","log_sym","log_base","img_part","sIsConstant","toExponential","quadrant","isFinite","clean","new_den","new_num","expand_denominator","expand_functions","rank","identity","tolerance","col_index","vec1","vec2","mat","set1","set2","testSQRT","testPow","fct","getFunction","addPreprocessor","order","shift_cells","PreprocessorError","getPreprocessors","removePreprocessor","aIsSymbol","bIsSymbol","unit","Unit","aneg","bneg","inf","ap","bp","powEQ","v1","v2","aIsComposite","bIsComposite","h1","h2","PN","PNEQ","valEQ","canIterate","bothPL","bIsMatrix","eachElement","row","toFixed","bnum","bden","a_pow","a_multiplier","ONN","isSymbolP1","isSymbolP2","toEX","isEven","bm","logV","ndiv","ddiv","ps","isMatrixB","isMatrixA","isVectorA","isVectorB","raised","aIsZero","bIsZero","bIsConstant","aIsConstant","bIsInt","nre","nim","abs_b","sgn","aa","_a","_b","a1","log_a","b1","c1","neg_num","nr","tn","evenr","evenp","evennp","_result","isEX","pt","IGNORE_E","comma","percent","assign","function_assign","bool2Symbol","opts","qc","fullConversion","stripSign","nparts","cparts","d1","d2","parser","keep","space","LaTeXArray","rowTeX","m_array","v_array","formatFrac","p_array","greek","alpha","beta","zeta","eta","iota","kappa","lambda","mu","nu","omnikron","sigma","tau","upsilon","chi","psi","omega","Gamma","Delta","Epsilon","Theta","Lambda","Xi","Pi","Sigma","Phi","Psi","Omega","arccos","ker","limsup","arcsin","deg","lg","ln","Pr","sup","arctan","det","hom","lim","LN","dim","liminf","inverted","formatSubscripts","t_varray","den_map","num_map","num_c","den_c","setBrackets","container","counter","isDenom","laTex","combine_power","isBracketed","formatP","tp","merge","mn","md","vn","vd","top","bottom","glue","is_pow","bracketTypes","square","brace","angle","filterTokens","filtered","next_token","raw_tokens","parse_next","get","items","arrayPrefill","val","modulus","eql","toUnitVector","angleFrom","mod1","mod2","product","theta_val","isParallelTo","isAntiparallelTo","isPerpendicularTo","B","magnitude","tex","el","lw","rl","F","zeroMatrix","raw_values","raw","nc","toRightTriangular","isSingular","augment","rr","ki","np","kp","els","divisor","inverse_elements","new_element","fel","nel","nj","canMultiplyFromLeft","sameSize","MM","kj","toVector","newline","to_decimal","row_tex","_union","_intersection","dependencies","_rename","reformat","deps","getProperName","compileDependencies","dep_string","replacements","components","getArgsDeps","arg_array","supplements","ftext","xports","ftext_complex","cc","ft","ftext_function","bn","f_array","alias","Function","LOG_FNS","Utils","groups","PARSER","libExports","fndec","convertToLaTeX","convertFromLaTeX","add_on","getWarnings","setConstant","constant","getConstant","getCore","getEquation","reserved","asArray","clear","equation_number","keep_EXPRESSIONS_fixed","flush","expressions","asObject","asLaTeX","register","core","parent_obj","ref_obj","visible","numargs","validVarName","varname","supported","numEquations","numExpressions","setVar","getVar","clearVars","load","loader","getVars","disallowed","api","linker","replaceFunction","new_num_args","withOperator","htmlTree","addPeeker","removePeeker","BASE","LOG_BASE","MAX_INT","MAX_INT_ARR","smallToArray","LOG_MAX_INT","Integer","radix","parseValue","parseBase","BigInteger","isSmall","SmallInteger","isPrecise","arrayToSmall","compareAbs","createArray","truncate","l_a","l_b","carry","addAny","addSmall","a_l","b_l","borrow","subtractAny","subtractSmall","small","multiplyLong","a_i","b_j","multiplySmall","shiftLeft","multiplyKaratsuba","ac","bd","abcd","useKaratsuba","l1","multiplySmallAndArray","_multiplyBySmall","a_j","divMod1","divisorMostSignificantDigit","quotientDigit","divModSmall","divMod2","part","guess","xlen","highx","highy","check","reverse","divModAny","self","qSign","mSign","over","modPow","isZero","isPositive","isOdd","compareTo","notEquals","neq","greater","lesser","greaterOrEquals","geq","lesserOrEquals","leq","isDivisibleBy","isBasicPrime","millerRabinTest","nPrev","strict","bits","bitLength","logN","isProbablePrime","iterations","randBetween","modInv","newT","one","newR","lastT","lastR","powersOfTwo","powers2Length","highestPower2","shift_isSmall","shiftRight","remQuo","bitwise","xSign","ySign","xRem","not","yRem","xDigit","yDigit","xDivMod","yDivMod","toJSNumber","and","or","xor","LOBMASK_I","LOBMASK_BI","roughLOB","integerLogarithm","tmp","low","high","restricted","digit","absBase","charCodeAt","parseInt","charCode","parseBaseFromArray","toBase","out","toBaseString","zeros","toJSON","parseStringValue","decimalPlace","isValid","parseNumberValue","minusOne","isInstance","module","exports","define","amd","rounding","modulo","toExpNeg","toExpPos","minE","maxE","crypto","O","D","absoluteValue","constructor","comparedTo","cmp","cosine","sd","J","G","cubeRoot","Z","decimalPlaces","dp","dividedToIntegerBy","divToInt","greaterThanOrEqualTo","hyperbolicCosine","hyperbolicSine","hyperbolicTangent","inverseCosine","isNeg","U","inverseHyperbolicCosine","inverseHyperbolicSine","inverseHyperbolicTangent","inverseSine","inverseTangent","isPos","lessThanOrEqualTo","logarithm","T","naturalExponential","naturalLogarithm","negated","sine","squareRoot","tangent","mul","toBinary","K","toDecimalPlaces","toDP","toFraction","toHexadecimal","toHex","toNearest","toOctal","LN10","toPrecision","toSignificantDigits","toSD","truncated","H","$","search","W","X","Y","en","rn","sn","on","un","cn","an","defaults","getRandomValues","randomBytes","hn","dn","pn","gn","wn","Nn","En","yn","Mn","qn","On","Dn","Uint32Array","Fn","An","Sn","Zn","Pn","Rn","Ln","Tn","Un","ROUND_UP","ROUND_DOWN","ROUND_CEIL","ROUND_FLOOR","ROUND_HALF_UP","ROUND_HALF_DOWN","ROUND_HALF_EVEN","ROUND_HALF_CEIL","ROUND_HALF_FLOOR","EUCLID","config","isDecimal","hypot","log2","default","Decimal","iterator","for","toStringTag","window","noConflict"],"mappings":"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","sourcesContent":["/*\r\n * Author : Martin Donk\r\n * Website : http://www.nerdamer.com\r\n * Email : martin.r.donk@gmail.com\r\n * Source : https://github.com/jiggzson/nerdamer\r\n */\r\n\r\n/* global trig, trigh, Infinity, define, arguments2Array, NaN */\r\n//externals ====================================================================\r\n/* BigInterger.js v1.6.40 https://github.com/peterolson/BigInteger.js/blob/master/LICENSE */\r\n//var nerdamerBigInt = typeof nerdamerBigInt !== 'undefined' ? nerdamerBigInt : require(\"big-integer\");\r\n/* big.js v5.2.2 https://github.com/MikeMcl/big.js/LICENCE */\r\n//var nerdamerBigDecimal = typeof nerdamerBigDecimal !== 'undefined' ? nerdamerBigDecimal : require('big.js');\r\n\r\nvar nerdamer = (function (imports) {\r\n    \"use strict\";\r\n\r\n//version ======================================================================\r\n    var version = '1.1.11';\r\n\r\n//inits ========================================================================\r\n    var _ = new Parser(); //nerdamer's parser\r\n\r\n    //import bigInt\r\n    var bigInt = imports.bigInt;\r\n    var bigDec = imports.bigDec;\r\n\r\n    //set the precision to js precision\r\n    bigDec.set({\r\n        precision: 250\r\n    });\r\n\r\n    var Groups = {};\r\n\r\n    //container of pregenerated primes\r\n    var PRIMES = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97, 101, 103, 107, 109, 113\r\n                , 127, 131, 137, 139, 149, 151, 157, 163, 167, 173, 179, 181, 191, 193, 197, 199, 211, 223, 227, 229, 233, 239, 241, 251,\r\n        257, 263, 269, 271, 277, 281, 283, 293, 307, 311, 313, 317, 331, 337, 347, 349, 353, 359, 367, 373, 379, 383, 389, 397,\r\n        401, 409, 419, 421, 431, 433, 439, 443, 449, 457, 461, 463, 467, 479, 487, 491, 499, 503, 509, 521, 523, 541, 547, 557,\r\n        563, 569, 571, 577, 587, 593, 599, 601, 607, 613, 617, 619, 631, 641, 643, 647, 653, 659, 661, 673, 677, 683, 691, 701,\r\n        709, 719, 727, 733, 739, 743, 751, 757, 761, 769, 773, 787, 797, 809, 811, 821, 823, 827, 829, 839, 853, 857, 859, 863,\r\n        877, 881, 883, 887, 907, 911, 919, 929, 937, 941, 947, 953, 967, 971, 977, 983, 991, 997, 1009, 1013, 1019, 1021, 1031,\r\n        1033, 1039, 1049, 1051, 1061, 1063, 1069, 1087, 1091, 1093, 1097, 1103, 1109, 1117, 1123, 1129, 1151, 1153, 1163, 1171,\r\n        1181, 1187, 1193, 1201, 1213, 1217, 1223, 1229, 1231, 1237, 1249, 1259, 1277, 1279, 1283, 1289, 1291, 1297, 1301, 1303,\r\n        1307, 1319, 1321, 1327, 1361, 1367, 1373, 1381, 1399, 1409, 1423, 1427, 1429, 1433, 1439, 1447, 1451, 1453, 1459, 1471,\r\n        1481, 1483, 1487, 1489, 1493, 1499, 1511, 1523, 1531, 1543, 1549, 1553, 1559, 1567, 1571, 1579, 1583, 1597, 1601, 1607,\r\n        1609, 1613, 1619, 1621, 1627, 1637, 1657, 1663, 1667, 1669, 1693, 1697, 1699, 1709, 1721, 1723, 1733, 1741, 1747, 1753,\r\n        1759, 1777, 1783, 1787, 1789, 1801, 1811, 1823, 1831, 1847, 1861, 1867, 1871, 1873, 1877, 1879, 1889, 1901, 1907, 1913, 1931,\r\n        1933, 1949, 1951, 1973, 1979, 1987, 1993, 1997, 1999, 2003, 2011, 2017, 2027, 2029, 2039, 2053, 2063, 2069, 2081, 2083];\r\n\r\n//Settings =====================================================================\r\n    var CUSTOM_OPERATORS = {};\r\n\r\n    var Settings = {\r\n        //Enables/Disables call peekers. False means callPeekers are disabled and true means callPeekers are enabled.\r\n        callPeekers: false,\r\n\r\n        //the max number up to which to cache primes. Making this too high causes performance issues\r\n        init_primes: 1000,\r\n\r\n        exclude: [],\r\n        //If you don't care about division by zero for example then this can be set to true.\r\n        //Has some nasty side effects so choose carefully.\r\n        suppress_errors: false,\r\n        //the global used to invoke the libary to parse to a number. Normally cos(9) for example returns\r\n        //cos(9) for convenience but parse to number will always try to return a number if set to true.\r\n        PARSE2NUMBER: false,\r\n        //this flag forces the a clone to be returned when add, subtract, etc... is called\r\n        SAFE: false,\r\n        //the symbol to use for imaginary symbols\r\n        IMAGINARY: 'i',\r\n        //the modules used to link numeric function holders\r\n        FUNCTION_MODULES: [Math],\r\n        //Allow certain characters\r\n        ALLOW_CHARS: ['π'],\r\n        //Allow nerdamer to convert multi-character variables\r\n        USE_MULTICHARACTER_VARS: true,\r\n        //Allow changing of power operator\r\n        POWER_OPERATOR: '^',\r\n        //The variable validation regex\r\n        //VALIDATION_REGEX: /^[a-z_][a-z\\d\\_]*$/i\r\n        VALIDATION_REGEX: /^[a-z_αAβBγΓδΔϵEζZηHθΘιIκKλΛμMνNξΞoOπΠρPσΣτTυϒϕΦχXψΨωΩ∞][0-9a-z_αAβBγΓδΔϵEζZηHθΘιIκKλΛμMνNξΞoOπΠρPσΣτTυϒϕΦχXψΨωΩ]*$/i,\r\n        // The regex used to determine which characters should be included in implied multiplication\r\n        IMPLIED_MULTIPLICATION_REGEX: /([\\+\\-\\/\\*]*[0-9]+)([a-z_αAβBγΓδΔϵEζZηHθΘιIκKλΛμMνNξΞoOπΠρPσΣτTυϒϕΦχXψΨωΩ]+[\\+\\-\\/\\*]*)/gi,\r\n        //Aliases\r\n        ALIASES: {\r\n            'π': 'pi',\r\n            '∞': 'Infinity'\r\n        },\r\n        POSITIVE_MULTIPLIERS: false,\r\n        //Cached items\r\n        CACHE: {},\r\n        //Print out warnings or not\r\n        SILENCE_WARNINGS: false,\r\n        //Precision\r\n        PRECISION: 21,\r\n        //function mappings\r\n        VECTOR: 'vector',\r\n        PARENTHESIS: 'parens',\r\n        SQRT: 'sqrt',\r\n        ABS: 'abs',\r\n        FACTORIAL: 'factorial',\r\n        DOUBLEFACTORIAL: 'dfactorial',\r\n        //reference pi and e\r\n        LONG_PI: '3.14159265358979323846264338327950288419716939937510582097494459230781640628620899862803482534211706798214' +\r\n                '808651328230664709384460955058223172535940812848111745028410270193852110555964462294895493038196',\r\n        LONG_E: '2.718281828459045235360287471352662497757247093699959574966967627724076630353547594571382178525166427427466' +\r\n                '39193200305992181741359662904357290033429526059563073813232862794349076323382988075319525101901',\r\n        PI: Math.PI,\r\n        E: Math.E,\r\n        LOG: 'log',\r\n        LOG10: 'log10',\r\n        LOG10_LATEX: 'log_{10}',\r\n        MAX_EXP: 200000,\r\n        //The number of scientific place to round to\r\n        SCIENTIFIC_MAX_DECIMAL_PLACES: 14,\r\n        //True if ints should not be converted to\r\n        SCIENTIFIC_IGNORE_ZERO_EXPONENTS: true\r\n    };\r\n\r\n    (function () {\r\n        Settings.CACHE.roots = {};\r\n        var x = 40,\r\n                y = 40;\r\n        for(var i = 2; i <= x; i++) {\r\n            for(var j = 2; j <= y; j++) {\r\n                var nthpow = bigInt(i).pow(j);\r\n                Settings.CACHE.roots[nthpow + '-' + j] = i;\r\n            }\r\n        }\r\n    })();\r\n\r\n    //Add the groups. These have been reorganized as of v0.5.1 to make CP the highest group\r\n    //The groups that help with organizing during parsing. Note that for FN is still a function even\r\n    //when it's raised to a symbol, which typically results in an EX\r\n    var N = Groups.N = 1, // A number\r\n            P = Groups.P = 2, // A number with a rational power e.g. 2^(3/5).\r\n            S = Groups.S = 3, // A single variable e.g. x.\r\n            EX = Groups.EX = 4, // An exponential\r\n            FN = Groups.FN = 5, // A function\r\n            PL = Groups.PL = 6, // A symbol/expression having same name with different powers e.g. 1/x + x^2\r\n            CB = Groups.CB = 7, // A symbol/expression composed of one or more variables through multiplication e.g. x*y\r\n            CP = Groups.CP = 8; // A symbol/expression composed of one variable and any other symbol or number x+1 or x+y\r\n\r\n    var CONST_HASH = Settings.CONST_HASH = '#';\r\n\r\n    var PARENTHESIS = Settings.PARENTHESIS;\r\n\r\n    var SQRT = Settings.SQRT;\r\n\r\n    var ABS = Settings.ABS;\r\n\r\n    var FACTORIAL = Settings.FACTORIAL;\r\n\r\n    var DOUBLEFACTORIAL = Settings.DOUBLEFACTORIAL;\r\n\r\n    //the storage container \"memory\" for parsed expressions\r\n    var EXPRESSIONS = [];\r\n\r\n    //variables\r\n    var VARS = {};\r\n\r\n    //the container used to store all the reserved functions\r\n    var RESERVED = [];\r\n\r\n    var WARNINGS = [];\r\n\r\n    /**\r\n     * Use this when errors are suppressible\r\n     * @param {String} msg\r\n     * @param {object} ErrorObj\r\n     */\r\n    var err = function (msg, ErrorObj) {\r\n        if(!Settings.suppress_errors) {\r\n            if(ErrorObj)\r\n                throw new ErrorObj(msg);\r\n            else\r\n                throw new Error(msg);\r\n        }\r\n    };\r\n\r\n//Utils ========================================================================\r\n    var customError = function (name) {\r\n        var E = function (message) {\r\n            this.name = name;\r\n            this.message = message !== undefined ? message : '';\r\n            var error = new Error(this.message);\r\n            error.name = this.name;\r\n            this.stack = error.stack;\r\n        }; //create an empty error\r\n        E.prototype = Object.create(Error.prototype);\r\n        return E;\r\n    };\r\n\r\n    /**\r\n     * Checks to see if value is one of nerdamer's reserved names\r\n     * @param {String} value\r\n     * @return boolean\r\n     */\r\n    var isReserved = function (value) {\r\n        return RESERVED.indexOf(value) !== -1;\r\n    };\r\n\r\n    /**\r\n     * Checks to see that all symbols in array are the same\r\n     * @param {Symbol[]} arr\r\n     * @returns {bool}\r\n     */\r\n    var allSame = function (arr) {\r\n        var last = arr[0];\r\n        for(var i = 1, l = arr.length; i < l; i++)\r\n            if(!arr[i].equals(last))\r\n                return false;\r\n        return true;\r\n    };\r\n\r\n    /**\r\n     * Used to pass warnings or low severity errors about the library\r\n     * @param msg\r\n     */\r\n    var warn = function (msg) {\r\n        WARNINGS.push(msg);\r\n        if(Settings.SHOW_WARNINGS && console && console.warn) {\r\n            console.warn(msg);\r\n        }\r\n    };\r\n\r\n    /**\r\n     * Enforces rule: \"must start with a letter or underscore and\r\n     * can have any number of underscores, letters, and numbers thereafter.\"\r\n     * @param name The name of the symbol being checked\r\n     * @param {String} typ - The type of symbols that's being validated\r\n     * @throws {Exception}  - Throws an exception on fail\r\n     */\r\n    var validateName = function (name, typ) {\r\n        typ = typ || 'variable';\r\n        if(Settings.ALLOW_CHARS.indexOf(name) !== -1)\r\n            return;\r\n        var regex = Settings.VALIDATION_REGEX;\r\n        if(!(regex.test(name))) {\r\n            throw new InvalidVariableNameError(name + ' is not a valid ' + typ + ' name');\r\n        }\r\n    };\r\n\r\n    /**\r\n     * Convert number from scientific format to decimal format\r\n     * @param {Number} num\r\n     */\r\n    var scientificToDecimal = function (num) {\r\n        var nsign = Math.sign(num);\r\n        //remove the sign\r\n        num = Math.abs(num);\r\n        //if the number is in scientific notation remove it\r\n        if(/\\d+\\.?\\d*e[\\+\\-]*\\d+/i.test(num)) {\r\n            var zero = '0',\r\n                    parts = String(num).toLowerCase().split('e'), //split into coeff and exponent\r\n                    e = parts.pop(), //store the exponential part\r\n                    l = Math.abs(e), //get the number of zeros\r\n                    sign = e / l,\r\n                    coeff_array = parts[0].split('.');\r\n            if(sign === -1) {\r\n                l = l - coeff_array[0].length;\r\n                if(l < 0) {\r\n                    num = coeff_array[0].slice(0, l) + '.' + coeff_array[0].slice(l) + (coeff_array.length === 2 ? coeff_array[1] : '');\r\n                }\r\n                else {\r\n                    num = zero + '.' + new Array(l + 1).join(zero) + coeff_array.join('');\r\n                }\r\n            }\r\n            else {\r\n                var dec = coeff_array[1];\r\n                if(dec)\r\n                    l = l - dec.length;\r\n                if(l < 0) {\r\n                    num = coeff_array[0] + dec.slice(0, l) + '.' + dec.slice(l);\r\n                }\r\n                else {\r\n                    num = coeff_array.join('') + new Array(l + 1).join(zero);\r\n                }\r\n            }\r\n        }\r\n\r\n        return nsign < 0 ? '-' + num : num;\r\n    };\r\n    /**\r\n     * Checks if number is a prime number\r\n     * @param {Number} n - the number to be checked\r\n     */\r\n    var isPrime = function (n) {\r\n        var q = Math.floor(Math.sqrt(n));\r\n        for(var i = 2; i <= q; i++) {\r\n            if(n % i === 0)\r\n                return false;\r\n        }\r\n        return true;\r\n    };\r\n\r\n    /**\r\n     * Generates an object with known variable value for evaluation\r\n     * @param {String} variable\r\n     * @param {any} value Any stringifyable object\r\n     * @returns {Object} \r\n     */\r\n    var knownVariable = function (variable, value) {\r\n        var o = {};\r\n        o[variable] = value;\r\n        return o;\r\n    };\r\n\r\n    /**\r\n     * Checks if n is a number\r\n     * @param {any} n\r\n     */\r\n    var isNumber = function (n) {\r\n        return /^\\d+\\.?\\d*$/.test(n);\r\n    };\r\n\r\n    /**\r\n     * Checks to see if an array contains only numeric values\r\n     * @param {Array} arr\r\n     */\r\n    var allNumeric = function (arr) {\r\n        for(var i = 0; i < arr.length; i++)\r\n            if(!isNumber(arr[i]))\r\n                return false;\r\n        return true;\r\n    };\r\n    /**\r\n     * Checks to see if a number or Symbol is a fraction\r\n     * @param {Number|Symbol} num\r\n     * @returns {boolean}\r\n     */\r\n    var isFraction = function (num) {\r\n        if(isSymbol(num))\r\n            return isFraction(num.multiplier.toDecimal());\r\n        return (num % 1 !== 0);\r\n    };\r\n\r\n    /**\r\n     * Checks to see if the object provided is a Symbol\r\n     * @param {Object} obj\r\n     */\r\n    var isSymbol = function (obj) {\r\n        return (obj instanceof Symbol);\r\n    };\r\n\r\n    /**\r\n     * Checks to see if the object provided is an Expression\r\n     * @param {Object} obj\r\n     */\r\n    var isExpression = function (obj) {\r\n        return (obj instanceof Expression);\r\n    };\r\n\r\n    /**\r\n     * This method traverses the symbol structure and grabs all the variables in a symbol. The variable\r\n     * names are then returned in alphabetical order.\r\n     * @param {Symbol} obj\r\n     * @param {Boolean} poly\r\n     * @param {Object} vars - An object containing the variables. Do not pass this in as it generated\r\n     * automatically. In the future this will be a Collector object.\r\n     * @returns {String[]} - An array containing variable names\r\n     */\r\n    var variables = function (obj, poly, vars) {\r\n        vars = vars || {\r\n            c: [],\r\n            add: function (value) {\r\n                if(this.c.indexOf(value) === -1 && isNaN(value))\r\n                    this.c.push(value);\r\n            }\r\n        };\r\n\r\n        if(isSymbol(obj)) {\r\n            var group = obj.group,\r\n                    prevgroup = obj.previousGroup;\r\n            if(group === EX)\r\n                variables(obj.power, poly, vars);\r\n\r\n            if(group === CP || group === CB || prevgroup === CP || prevgroup === CB) {\r\n                for(var x in obj.symbols) {\r\n                    variables(obj.symbols[x], poly, vars);\r\n                }\r\n            }\r\n            else if(group === S || prevgroup === S) {\r\n                //very crude needs fixing. TODO\r\n                if(!(obj.value === 'e' || obj.value === 'pi' || obj.value === Settings.IMAGINARY))\r\n                    vars.add(obj.value);\r\n            }\r\n            else if(group === PL || prevgroup === PL) {\r\n                variables(firstObject(obj.symbols), poly, vars);\r\n            }\r\n            else if(group === EX) {\r\n                if(!isNaN(obj.value))\r\n                    vars.add(obj.value);\r\n                variables(obj.power, poly, vars);\r\n            }\r\n            else if(group === FN && !poly) {\r\n                for(var i = 0; i < obj.args.length; i++) {\r\n                    variables(obj.args[i], poly, vars);\r\n                }\r\n            }\r\n        }\r\n\r\n        return vars.c.sort();\r\n    };\r\n\r\n    /**\r\n     * Returns the sum of an array\r\n     * @param {Array} arr\r\n     * @param {boolean} toNumber\r\n     * @returns {Symbol}\r\n     */\r\n    var arraySum = function (arr, toNumber) {\r\n        var sum = new Symbol(0);\r\n        for(var i = 0; i < arr.length; i++) {\r\n            var x = arr[i];\r\n            // Convert to symbol if not\r\n            sum = _.add(sum, !isSymbol(x) ? _.parse(x) : x);\r\n        }\r\n\r\n        return toNumber ? Number(sum) : sum;\r\n    };\r\n\r\n    /**\r\n     * Separates out the variables into terms of variabls.\r\n     * e.g. x+y+x*y+sqrt(2)+pi returns\r\n     * {x: x, y: y, x y: x*y, constants: sqrt(2)+pi\r\n     * @param {type} symbol\r\n     * @param {type} o\r\n     * @returns {undefined}\r\n     * @throws {Error} for expontentials\r\n     */\r\n    var separate = function (symbol, o) {\r\n        symbol = _.expand(symbol);\r\n        o = o || {};\r\n        var insert = function (key, sym) {\r\n            if(!o[key])\r\n                o[key] = new Symbol(0);\r\n            o[key] = _.add(o[key], sym.clone());\r\n        };\r\n        symbol.each(function (x) {\r\n            if(x.isConstant('all')) {\r\n                insert('constants', x);\r\n            }\r\n            else if(x.group === S) {\r\n                insert(x.value, x);\r\n            }\r\n            else if(x.group === FN && (x.fname === ABS || x.fname === '')) {\r\n                separate(x.args[0]);\r\n            }\r\n            else if(x.group === EX || x.group === FN) {\r\n                throw new Error('Unable to separate. Term cannot be a function!');\r\n            }\r\n            else {\r\n                insert(variables(x).join(' '), x);\r\n            }\r\n        });\r\n\r\n        return o;\r\n    };\r\n\r\n    /**\r\n     * Fills holes in an array with zero symbol or generates one with n zeroes\r\n     * @param {Array} arr\r\n     * @param {Number} n\r\n     */\r\n    var fillHoles = function (arr, n) {\r\n        n = n || arr.length;\r\n        for(var i = 0; i < n; i++) {\r\n            var sym = arr[i];\r\n            if(!sym)\r\n                arr[i] = new Symbol(0);\r\n        }\r\n        return arr;\r\n    };\r\n\r\n    /**\r\n     *\r\n     * Checks to see if the object provided is a Vector\r\n     * @param {Object} obj\r\n     */\r\n    var isVector = function (obj) {\r\n        return (obj instanceof Vector);\r\n    };\r\n\r\n    /**\r\n     * Checks to see if the object provided is a Matrix\r\n     * @param {Object} obj\r\n     */\r\n    var isMatrix = function (obj) {\r\n        return (obj instanceof Matrix);\r\n    };\r\n\r\n    var isSet = function (obj) {\r\n        return (obj instanceof Set);\r\n    };\r\n\r\n    /**\r\n     * Checks to see if a symbol is in group N\r\n     * @param {Symbol} symbol\r\n     */\r\n    var isNumericSymbol = function (symbol) {\r\n        return symbol.group === N || symbol.group === P;\r\n    };\r\n\r\n    /**\r\n     * Checks to see if a symbol is a variable with no multiplier nor power\r\n     * @param {Symbol} symbol\r\n     */\r\n    var isVariableSymbol = function (symbol) {\r\n        return symbol.group === S && symbol.multiplier.equals(1) && symbol.power.equals(1);\r\n    };\r\n\r\n    /**\r\n     * Checks to see if the object provided is an Array\r\n     * @param {Object} arr\r\n     */\r\n    var isArray = function (arr) {\r\n        return Array.isArray(arr);\r\n    };\r\n\r\n    /**\r\n     * Checks to see if a number is an integer\r\n     * @param {Number} num\r\n     */\r\n    var isInt = function (num) {\r\n        return /^[-+]?\\d+e?\\+?\\d*$/gim.test(num.toString());\r\n    };\r\n\r\n    /**\r\n     * @param {Number|Symbol} obj\r\n     * @returns {boolean}\r\n     */\r\n    var isNegative = function (obj) {\r\n        if(isSymbol(obj)) {\r\n            obj = obj.multiplier;\r\n        }\r\n        return obj.lessThan(0);\r\n    };\r\n    /**\r\n     * Safely stringify object\r\n     * @param o\r\n     */\r\n    var stringify = function (o) {\r\n        if(!o)\r\n            return o;\r\n        return String(o);\r\n    };\r\n\r\n    /**\r\n     * @param {String} str\r\n     * @returns {String} - returns a formatted string surrounded by brackets\r\n     */\r\n    var inBrackets = function (str) {\r\n        return '(' + str + ')';\r\n    };\r\n\r\n    /**\r\n     * A helper function to replace parts of string\r\n     * @param {String} str - The original string\r\n     * @param {Integer} from - The starting index\r\n     * @param {Integer} to - The ending index\r\n     * @param {String} with_str - The replacement string\r\n     * @returns {String} - A formatted string\r\n     */\r\n    var stringReplace = function (str, from, to, with_str) {\r\n        return str.substr(0, from) + with_str + str.substr(to, str.length);\r\n    };\r\n\r\n    /**\r\n     * the Parser uses this to check if it's allowed to convert the obj to type Symbol\r\n     * @param {Object} obj\r\n     * @returns {boolean}\r\n     */\r\n    var customType = function (obj) {\r\n        return obj !== undefined && obj.custom;\r\n    };\r\n\r\n    /**\r\n     * Checks to see if numbers are both negative or are both positive\r\n     * @param {Number} a\r\n     * @param {Number} b\r\n     * @returns {boolean}\r\n     */\r\n    var sameSign = function (a, b) {\r\n        return (a < 0) === (b < 0);\r\n    };\r\n\r\n    /**\r\n     * A helper function to replace multiple occurences in a string. Takes multiple arguments\r\n     * @example format('{0} nice, {0} sweet', 'something')\r\n     * //returns 'something nice, something sweet'\r\n     */\r\n    var format = function () {\r\n        var args = [].slice.call(arguments),\r\n                str = args.shift();\r\n        var new_str = str.replace(/{(\\d+)}/g, function (match, index) {\r\n            var arg = args[index];\r\n            return typeof arg === 'function' ? arg() : arg;\r\n        });\r\n\r\n        return new_str;\r\n    };\r\n\r\n    /**\r\n     * Generates an array with values within a range. Multiplies by a step if provided\r\n     * @param {Number} start\r\n     * @param {Number} end\r\n     * @param {Number} step\r\n     */\r\n    var range = function (start, end, step) {\r\n        var arr = [];\r\n        step = step || 1;\r\n        for(var i = start; i <= end; i++)\r\n            arr.push(i * step);\r\n        return arr;\r\n    };\r\n\r\n    /**\r\n     * Returns an array of all the keys in an array\r\n     * @param {Object} obj\r\n     * @returns {Array}\r\n     */\r\n    var keys = Object.keys;\r\n\r\n    /**\r\n     * Returns the first encountered item in an object. Items do not have a fixed order in objects\r\n     * so only use if you need any first random or if there's only one item in the object\r\n     * @param {Object} obj\r\n     * @param {String} key Return this key as first object\r\n     * @param {Boolean} both\r\n     * @returns {*}\r\n     */\r\n    var firstObject = function (obj, key, both) {\r\n        for(var x in obj)\r\n            break;\r\n        if(key)\r\n            return x;\r\n        if(both)\r\n            return {\r\n                key: x,\r\n                obj: obj[x]\r\n            };\r\n        return obj[x];\r\n    };\r\n\r\n    /**\r\n     * Substitutes out variables for two symbols, parses them to a number and them compares them numerically\r\n     * @param {Symbol} sym1\r\n     * @param {Symbol} sym2\r\n     * @param {String[]} vars - an optional array of variables to use\r\n     * @returns {bool}\r\n     */\r\n    var compare = function (sym1, sym2, vars) {\r\n        var n = 5; //a random number between 1 and 5 is good enough\r\n        var scope = {}; // scope object with random numbers generated using vars\r\n        var comparison;\r\n        for(var i = 0; i < vars.length; i++)\r\n            scope[vars[i]] = new Symbol(Math.floor(Math.random() * n) + 1);\r\n        block('PARSE2NUMBER', function () {\r\n            comparison = _.parse(sym1, scope).equals(_.parse(sym2, scope));\r\n        });\r\n        return comparison;\r\n    };\r\n\r\n    /**\r\n     * Is used to set a user defined function using the function assign operator\r\n     * @param {String} name\r\n     * @param {String[]} params_array\r\n     * @param {String} body\r\n     * @returns {Boolean}\r\n     */\r\n    var setFunction = function (name, params_array, body) {\r\n        validateName(name);\r\n        if(!isReserved(name)) {\r\n            params_array = params_array || variables(_.parse(body));\r\n            // The function gets set to PARSER.mapped function which is just\r\n            // a generic function call.\r\n            _.functions[name] = [_.mapped_function, params_array.length, {\r\n                    name: name,\r\n                    params: params_array,\r\n                    body: body\r\n                }];\r\n\r\n            return body;\r\n        }\r\n        return null;\r\n    };\r\n\r\n    /**\r\n     * Returns the minimum number in an array\r\n     * @param {Array} arr\r\n     * @returns {Number}\r\n     */\r\n    var arrayMax = function (arr) {\r\n        return Math.max.apply(undefined, arr);\r\n    };\r\n\r\n    /**\r\n     * Returns the maximum number in an array\r\n     * @param {Array} arr\r\n     * @returns {Number}\r\n     */\r\n    var arrayMin = function (arr) {\r\n        return Math.min.apply(undefined, arr);\r\n    };\r\n\r\n    /**\r\n     * Checks to see if two arrays are equal\r\n     * @param {Array} arr1 \r\n     * @param {Array} arr2 \r\n     */\r\n    var arrayEqual = function (arr1, arr2) {\r\n        arr1.sort();\r\n        arr2.sort();\r\n\r\n        // The must be of the same length\r\n        if(arr1.length === arr2.length) {\r\n            for(var i = 0; i < arr1.length; i++) {\r\n                // If any two items don't match we're done\r\n                if(arr1[i] !== arr2[i]) {\r\n                    return false;\r\n                }\r\n            }\r\n            // Otherwise they're equal\r\n            return true;\r\n        }\r\n\r\n        return false;\r\n    };\r\n\r\n    /**\r\n     * Clones array with clonable items\r\n     * @param {Array} arr\r\n     * @returns {Array}\r\n     */\r\n    var arrayClone = function (arr) {\r\n        var new_array = [], l = arr.length;\r\n        for(var i = 0; i < l; i++)\r\n            new_array[i] = arr[i].clone();\r\n        return new_array;\r\n    };\r\n\r\n    /**\r\n     * Fills numbers between array values\r\n     * @param {Numbers[]} arr\r\n     * @param {Integer} slices\r\n     */\r\n    var arrayAddSlices = function (arr, slices) {\r\n        slices = slices || 20;\r\n        var retval = [];\r\n        var c, delta, e;\r\n        retval.push(arr[0]); //push the beginning\r\n        for(var i = 0; i < arr.length - 1; i++) {\r\n            c = arr[i];\r\n            delta = arr[i + 1] - c; //get the difference\r\n            e = delta / slices; //chop it up in the desired number of slices\r\n            for(var j = 0; j < slices; j++) {\r\n                c += e; //add the mesh to the last slice\r\n                retval.push(c);\r\n            }\r\n        }\r\n\r\n        return retval;\r\n    };\r\n\r\n    /**\r\n     * Gets nth roots of a number\r\n     * @param {Symbol} symbol\r\n     * @returns {Vector}\r\n     */\r\n    var nroots = function (symbol) {\r\n        var a, b;\r\n\r\n        if(symbol.group === FN && symbol.fname === '') {\r\n            a = Symbol.unwrapPARENS(_.parse(symbol).toLinear());\r\n            b = _.parse(symbol.power);\r\n        }\r\n        else if(symbol.group === P) {\r\n            a = _.parse(symbol.value);\r\n            b = _.parse(symbol.power);\r\n        }\r\n\r\n        if(a && b && (a.group === N) && b.group === N && a.multiplier.isNegative()) {\r\n            var _roots = [];\r\n\r\n            var parts = Symbol.toPolarFormArray(evaluate(symbol));\r\n            var r = parts[0];\r\n\r\n            //var r = _.parse(a).abs().toString();\r\n\r\n            //https://en.wikipedia.org/wiki/De_Moivre%27s_formula\r\n            var x = _.arg(a);\r\n            var n = b.multiplier.den.toString();\r\n            var p = b.multiplier.num.toString();\r\n\r\n            var formula = '(({0})^({1})*(cos({3})+({2})*sin({3})))^({4})';\r\n\r\n            for(var i = 0; i < n; i++) {\r\n                var t = evaluate(_.parse(format(\"(({0})+2*pi*({1}))/({2})\", x, i, n))).multiplier.toDecimal();\r\n                _roots.push(evaluate(_.parse(format(formula, r, n, Settings.IMAGINARY, t, p))));\r\n            }\r\n            return Vector.fromArray(_roots);\r\n        }\r\n        else if(symbol.isConstant(true, true)) {\r\n            var sign = symbol.sign();\r\n            var x = evaluate(symbol.abs());\r\n            var root = _.sqrt(x);\r\n\r\n            var _roots = [root.clone(), root.negate()];\r\n\r\n            if(sign < 0)\r\n                _roots = _roots.map(function (x) {\r\n                    return _.multiply(x, Symbol.imaginary());\r\n                });\r\n\r\n        }\r\n        else {\r\n            _roots = [_.parse(symbol)];\r\n        }\r\n\r\n        return Vector.fromArray(_roots);\r\n    };\r\n\r\n    /**\r\n     * Sorts and array given 2 parameters\r\n     * @param {String} a\r\n     * @param {String} b\r\n     */\r\n    var comboSort = function (a, b) {\r\n        var l = a.length,\r\n                combined = []; //the linker\r\n        for(var i = 0; i < a.length; i++) {\r\n            combined.push([a[i], b[i]]); //create the map\r\n        }\r\n\r\n        combined.sort(function (x, y) {\r\n            return x[0] - y[0];\r\n        });\r\n\r\n        var na = [], nb = [];\r\n\r\n        for(i = 0; i < l; i++) {\r\n            na.push(combined[i][0]);\r\n            nb.push(combined[i][1]);\r\n        }\r\n\r\n        return [na, nb];\r\n    };\r\n    /**\r\n     * TODO: Pick a more descriptive name and better description\r\n     * Breaks a function down into it's parts wrt to a variable, mainly coefficients\r\n     * Example a*x^2+b wrt x\r\n     * @param {Symbol} fn\r\n     * @param {String} wrt\r\n     * @param {bool} as_obj\r\n     */\r\n    var decompose_fn = function (fn, wrt, as_obj) {\r\n        wrt = String(wrt); //convert to string\r\n        var ax, a, x, b;\r\n        if(fn.group === CP) {\r\n            var t = _.expand(fn.clone()).stripVar(wrt);\r\n            ax = _.subtract(fn.clone(), t.clone());\r\n            b = t;\r\n        }\r\n        else\r\n            ax = fn.clone();\r\n        a = ax.stripVar(wrt);\r\n        x = _.divide(ax.clone(), a.clone());\r\n        b = b || new Symbol(0);\r\n        if(as_obj)\r\n            return {\r\n                a: a,\r\n                x: x,\r\n                ax: ax,\r\n                b: b\r\n            };\r\n        return [a, x, ax, b];\r\n    };\r\n    /**\r\n     * Rounds a number up to x decimal places\r\n     * @param {Number} x\r\n     * @param {Number} s\r\n     */\r\n    var nround = function (x, s) {\r\n        if(isInt(x)) {\r\n            if(x >= Number.MAX_VALUE)\r\n                return x.toString();\r\n            return Number(x);\r\n        }\r\n\r\n        s = typeof s === 'undefined' ? 14 : s;\r\n        return Math.round(x * Math.pow(10, s)) / Math.pow(10, s);\r\n    };\r\n\r\n    /**\r\n     * Is used for u-substitution. Gets a suitable u for substitution. If for\r\n     * instance a is used in the symbol then it keeps going down the line until\r\n     * one is found that's not in use. If all letters are taken then it\r\n     * starts appending numbers.\r\n     * IMPORTANT! It assumes that the substitution will be undone\r\n     * beore the user gets to interact with the object again.\r\n     * @param {Symbol} symbol\r\n     */\r\n    var getU = function (symbol) {\r\n        //start with u\r\n        var u = 'u', //start with u\r\n                v = u, //init with u\r\n                c = 0, //postfix number\r\n                vars = variables(symbol);\r\n        //make sure this variable isn't reserved and isn't in the variable list\r\n        while(!(RESERVED.indexOf(v) === - 1 && vars.indexOf(v) === - 1))\r\n            v = u + c++;\r\n        //get an empty slot. It seems easier to just push but the\r\n        //problem is that we may have some which are created by clearU\r\n        for(var i = 0, l = RESERVED.length; i <= l; i++)\r\n            //reserved cannot equals false or 0 so we can safely check for a falsy type\r\n            if(!RESERVED[i]) {\r\n                RESERVED[i] = v; //reserve the variable\r\n                break;\r\n            }\r\n        return v;\r\n    };\r\n\r\n    /**\r\n     * Clears the u variable so it's no longer reserved\r\n     * @param {String} u\r\n     */\r\n    var clearU = function (u) {\r\n        var indx = RESERVED.indexOf(u);\r\n        if(indx !== -1)\r\n            RESERVED[indx] = undefined;\r\n    };\r\n\r\n    /**\r\n     * Loops through each item in object and calls function with item as param\r\n     * @param {Object|Array} obj\r\n     * @param {Function} fn\r\n     */\r\n    var each = function (obj, fn) {\r\n        if(isArray(obj)) {\r\n            var l = obj.length;\r\n            for(var i = 0; i < l; i++)\r\n                fn.call(obj, i);\r\n        }\r\n        else {\r\n            for(var x in obj)\r\n                if(obj.hasOwnProperty(x))\r\n                    fn.call(obj, x);\r\n        }\r\n    };\r\n\r\n    /**\r\n     * Checks to see if a number is an even number\r\n     * @param {Number} num\r\n     * @returns {boolean}\r\n     */\r\n    var even = function (num) {\r\n        return num % 2 === 0;\r\n    };\r\n\r\n    /**\r\n     * Checks to see if a fraction is divisible by 2\r\n     * @param {Number} num\r\n     * @returns {boolean}\r\n     */\r\n    var evenFraction = function (num) {\r\n        return 1 / (num % 1) % 2 === 0;\r\n    };\r\n\r\n    /**\r\n     * Strips duplicates out of an array\r\n     * @param {Array} arr\r\n     */\r\n    var arrayUnique = function (arr) {\r\n        var l = arr.length, a = [];\r\n        for(var i = 0; i < l; i++) {\r\n            var item = arr[i];\r\n            if(a.indexOf(item) === -1)\r\n                a.push(item);\r\n        }\r\n        return a;\r\n    };\r\n\r\n    /**\r\n     * Gets all the variables in an array of Symbols\r\n     * @param {Symbol[]} arr \r\n     */\r\n    var arrayGetVariables = function (arr) {\r\n        var vars = variables(arr[0], null, null, true);\r\n\r\n        //get all variables\r\n        for(var i = 1, l = arr.length; i < l; i++)\r\n            vars = vars.concat(variables(arr[i]));\r\n        //remove duplicates\r\n        vars = arrayUnique(vars).sort();\r\n\r\n        //done\r\n        return vars;\r\n    };\r\n\r\n    /**\r\n     * Removes duplicates from an array. Returns a new array\r\n     * @param {Array} arr\r\n     * @param {Function} condition\r\n     */\r\n    var removeDuplicates = function (arr, condition) {\r\n        var conditionType = typeof condition;\r\n\r\n        if(conditionType !== 'function' || conditionType === 'undefined') {\r\n            condition = function (a, b) {\r\n                return a === b;\r\n            };\r\n        }\r\n\r\n        var seen = [];\r\n\r\n        while(arr.length) {\r\n            var a = arr[0];\r\n            //only one element left so we're done\r\n            if(arr.length === 1) {\r\n                seen.push(a);\r\n                break;\r\n            }\r\n            var temp = [];\r\n            seen.push(a); //we already scanned these\r\n            for(var i = 1; i < arr.length; i++) {\r\n                var b = arr[i];\r\n                //if the number is outside the specified tolerance\r\n                if(!condition(a, b))\r\n                    temp.push(b);\r\n            }\r\n            //start over with the remainder\r\n            arr = temp;\r\n        }\r\n\r\n        return seen;\r\n    };\r\n\r\n    /**\r\n     * Reserves the names in an object so they cannot be used as function names\r\n     * @param {Object} obj\r\n     */\r\n    var reserveNames = function (obj) {\r\n        var add = function (item) {\r\n            if(RESERVED.indexOf(item) === -1)\r\n                RESERVED.push(item);\r\n        };\r\n\r\n        if(typeof obj === 'string')\r\n            add(obj);\r\n        else {\r\n            each(obj, function (x) {\r\n                add(x);\r\n            });\r\n        }\r\n    };\r\n\r\n    /**\r\n     * Removes an item from either an array or an object. If the object is an array, the index must be\r\n     * specified after the array. If it's an object then the key must be specified\r\n     * @param {Object|Array} obj\r\n     * @param {Integer} indexOrKey\r\n     */\r\n    var remove = function (obj, indexOrKey) {\r\n        var result;\r\n        if(isArray(obj)) {\r\n            result = obj.splice(indexOrKey, 1)[0];\r\n        }\r\n        else {\r\n            result = obj[indexOrKey];\r\n            delete obj[indexOrKey];\r\n        }\r\n        return result;\r\n    };\r\n\r\n    /**\r\n     * Creates a temporary block in which one of the global settings is temporarily modified while\r\n     * the function is called. For instance if you want to parse directly to a number rather than have a symbolic\r\n     * answer for a period you would set PARSE2NUMBER to true in the block.\r\n     * @example block('PARSE2NUMBER', function(){//symbol being parsed to number}, true);\r\n     * @param {String} setting - The setting being accessed\r\n     * @param {Function} f\r\n     * @param {boolean} opt - The value of the setting in the block\r\n     * @param {String} obj - The obj of interest. Usually a Symbol but could be any object\r\n     */\r\n    var block = function (setting, f, opt, obj) {\r\n        var current_setting = Settings[setting];\r\n        Settings[setting] = opt === undefined ? true : !!opt;\r\n        var retval = f.call(obj);\r\n        Settings[setting] = current_setting;\r\n        return retval;\r\n    };\r\n\r\n    /**\r\n     * provide a mechanism for accessing functions directly. Not yet complete!!!\r\n     * Some functions will return undefined. This can maybe just remove the\r\n     * function object at some point when all functions are eventually\r\n     * housed in the global function object. Returns ALL parser available\r\n     * functions. Parser.functions may not contain all functions\r\n     */\r\n    var importFunctions = function () {\r\n        var o = {};\r\n        for(var x in _.functions)\r\n            o[x] = _.functions[x][0];\r\n        return o;\r\n    };\r\n\r\n    /**\r\n     * Converts function arguments to an array. Now used by gcd and lcm in Algebra.js :)\r\n     * @param {Array|object} obj\r\n     */\r\n    var arguments2Array = function (obj) {\r\n        return [].slice.call(obj);\r\n    };\r\n\r\n    /**\r\n     * Returns the coefficients of a symbol given a variable. Given ax^2+b^x+c, it divides\r\n     * each nth term by x^n.\r\n     * @param {Symbol} symbol\r\n     * @param {Symbol} wrt\r\n     */\r\n    var getCoeffs = function (symbol, wrt, info) {\r\n        var coeffs = [];\r\n        //we loop through the symbols and stick them in their respective\r\n        //containers e.g. y*x^2 goes to index 2\r\n        symbol.each(function (term) {\r\n            if(term.contains(wrt)) {\r\n                //we want only the coefficient which in this case will be everything but the variable\r\n                //e.g. a*b*x -> a*b if the variable to solve for is x\r\n                var coeff = term.stripVar(wrt),\r\n                        x = _.divide(term.clone(), coeff.clone()),\r\n                        p = x.power.toDecimal();\r\n            }\r\n            else {\r\n                coeff = term;\r\n                p = 0;\r\n            }\r\n            var e = coeffs[p];\r\n            //if it exists just add it to it\r\n            coeffs[p] = e ? _.add(e, coeff) : coeff;\r\n\r\n        }, true);\r\n\r\n        for(var i = 0; i < coeffs.length; i++)\r\n            if(!coeffs[i])\r\n                coeffs[i] = new Symbol(0);\r\n        //fill the holes\r\n        return coeffs;\r\n    };\r\n\r\n    /**\r\n     * As the name states. It forces evaluation of the expression\r\n     * @param {Symbol} symbol\r\n     * @param {Symbol} o\r\n     */\r\n    var evaluate = function (symbol, o) {\r\n        return block('PARSE2NUMBER', function () {\r\n            return _.parse(symbol, o);\r\n        }, true);\r\n    };\r\n\r\n    /**\r\n     * Converts an array to a vector. Consider moving this to Vector.fromArray\r\n     * @param {String[]|String|Symbol|Number|Number[]} x\r\n     */\r\n    var convertToVector = function (x) {\r\n        if(isArray(x)) {\r\n            var vector = new Vector([]);\r\n            for(var i = 0; i < x.length; i++)\r\n                vector.elements.push(convertToVector(x[i]));\r\n            return vector;\r\n        }\r\n        //Ensure that a nerdamer ready object is returned\r\n        if(!isSymbol(x))\r\n            return _.parse(x);\r\n        return x;\r\n    };\r\n\r\n    /**\r\n     * Generates prime numbers up to a specified number\r\n     * @param {Number} upto\r\n     */\r\n    var generatePrimes = function (upto) {\r\n        //get the last prime in the array\r\n        var last_prime = PRIMES[PRIMES.length - 1] || 2;\r\n        //no need to check if we've already encountered the number. Just check the cache.\r\n        for(var i = last_prime; i < upto; i++) {\r\n            if(isPrime(i))\r\n                PRIMES.push(i);\r\n        }\r\n    };\r\n    /**\r\n     * Checks to see if all arguments are numbers\r\n     * @param {object} args\r\n     */\r\n    var allNumbers = function (args) {\r\n        for(var i = 0; i < args.length; i++)\r\n            if(args[i].group !== N)\r\n                return false;\r\n        return true;\r\n    };\r\n    /*\r\n     * Checks if all arguments aren't just all number but if they\r\n     * are constants as well e.g. pi, e.\r\n     * @param {object} args\r\n     */\r\n    var allConstants = function (args) {\r\n        for(var i = 0; i < args.length; i++) {\r\n            if(args[i].isPi() || args[i].isE())\r\n                continue;\r\n            if(!args[i].isConstant(true))\r\n                return false;\r\n        }\r\n        return true;\r\n    };\r\n\r\n    /**\r\n     * Used to multiply two expression in expanded form\r\n     * @param {Symbol} a\r\n     * @param {Symbol} b\r\n     */\r\n    var mix = function (a, b, opt) {\r\n        // Flip them if b is a CP or PL and a is not\r\n        if(b.isComposite() && !a.isComposite() || b.isLinear() && !a.isLinear()) {\r\n            [a, b] = [b, a];\r\n        }\r\n        // A temporary variable to hold the expanded terms\r\n        var t = new Symbol(0);\r\n        if(a.isLinear()) {\r\n            a.each(function (x) {\r\n                // If b is not a PL or a CP then simply multiply it\r\n                if(!b.isComposite()) {\r\n                    var term = _.multiply(_.parse(x), _.parse(b));\r\n                    t = _.add(t, _.expand(term, opt));\r\n                }\r\n                // Otherwise multiply out each term.\r\n                else if(b.isLinear()) {\r\n                    b.each(function (y) {\r\n                        var term = _.multiply(_.parse(x), _.parse(y));\r\n                        var expanded = _.expand(_.parse(term), opt);\r\n                        t = _.add(t, expanded);\r\n                    }, true);\r\n                }\r\n                else {\r\n                    t = _.add(t, _.multiply(x, _.parse(b)));\r\n                }\r\n            }, true);\r\n        }\r\n        else {\r\n            // Just multiply them together\r\n            t = _.multiply(a, b);\r\n        }\r\n\r\n        // The expanded function is now t\r\n        return t;\r\n    };\r\n\r\n//Exceptions ===================================================================\r\n    //Is thrown for division by zero\r\n    var DivisionByZero = customError('DivisionByZero');\r\n    // Is throw if an error occured during parsing\r\n    var ParseError = customError('ParseError');\r\n    // Is thrown if the expression results in undefined\r\n    var UndefinedError = customError('UndefinedError');\r\n    // Is throw input is out of the function domain\r\n    var OutOfFunctionDomainError = customError('OutOfFunctionDomainError');\r\n    // Is throw if a function exceeds x amount of iterations\r\n    var MaximumIterationsReached = customError('MaximumIterationsReached');\r\n    // Is thrown if the parser receives an incorrect type\r\n    var NerdamerTypeError = customError('NerdamerTypeError');\r\n    // Is thrown if bracket parity is not correct\r\n    var ParityError = customError('ParityError');\r\n    // Is thrown if an unexpectd or incorrect operator is encountered\r\n    var OperatorError = customError('OperatorError');\r\n    // Is thrown if an index is out of range.\r\n    var OutOfRangeError = customError('OutOfRangeError');\r\n    // Is thrown if dimensions are incorrect. Mostly for matrices\r\n    var DimensionError = customError('DimensionError');\r\n    // Is thrown if variable name violates naming rule\r\n    var InvalidVariableNameError = customError('InvalidVariableNameError');\r\n    // Is thrown if the limits of the library are exceeded for a function\r\n    // This can be that the function become unstable passed a value\r\n    var ValueLimitExceededError = customError('ValueLimitExceededError');\r\n    // Is throw if the value is an incorrect LH or RH value\r\n    var NerdamerValueError = customError('NerdamerValueError');\r\n    // Is thrown if the value is an incorrect LH or RH value\r\n    var SolveError = customError('SolveError');\r\n    // Is thrown for an infinite loop\r\n    var InfiniteLoopError = customError('InfiniteLoopError');\r\n    // Is thrown if an operator is found when there shouldn't be one\r\n    var UnexpectedTokenError = customError('UnexpectedTokenError');\r\n\r\n    var exceptions = {\r\n        DivisionByZero: DivisionByZero,\r\n        ParseError: ParseError,\r\n        OutOfFunctionDomainError: OutOfFunctionDomainError,\r\n        UndefinedError: UndefinedError,\r\n        MaximumIterationsReached: MaximumIterationsReached,\r\n        NerdamerTypeError: NerdamerTypeError,\r\n        ParityError: ParityError,\r\n        OperatorError: OperatorError,\r\n        OutOfRangeError: OutOfRangeError,\r\n        DimensionError: DimensionError,\r\n        InvalidVariableNameError: InvalidVariableNameError,\r\n        ValueLimitExceededError: ValueLimitExceededError,\r\n        NerdamerValueError: NerdamerValueError,\r\n        SolveError: SolveError,\r\n        InfiniteLoopError: InfiniteLoopError,\r\n        UnexpectedTokenError: UnexpectedTokenError\r\n    };\r\n//Math2 ========================================================================\r\n    //This object holds additional functions for nerdamer. Think of it as an extension of the Math object.\r\n    //I really don't like touching objects which aren't mine hence the reason for Math2. The names of the\r\n    //functions within are pretty self-explanatory.\r\n    //NOTE: DO NOT USE INLINE COMMENTS WITH THE MATH2 OBJECT! THIS BREAK DURING COMPILATION OF BUILDFUNCTION.\r\n    var Math2 = {\r\n        csc: function (x) {\r\n            return 1 / Math.sin(x);\r\n        },\r\n        sec: function (x) {\r\n            return 1 / Math.cos(x);\r\n        },\r\n        cot: function (x) {\r\n            return 1 / Math.tan(x);\r\n        },\r\n        acsc: function (x) {\r\n            return Math.asin(1 / x);\r\n        },\r\n        asec: function (x) {\r\n            return Math.acos(1 / x);\r\n        },\r\n        acot: function (x) {\r\n            return (Math.PI / 2) - Math.atan(x);\r\n        },\r\n        // https://gist.github.com/jiggzson/df0e9ae8b3b06ff3d8dc2aa062853bd8\r\n        erf: function (x) {\r\n            var t = 1 / (1 + 0.5 * Math.abs(x));\r\n            var result = 1 - t * Math.exp(-x * x - 1.26551223 +\r\n                    t * (1.00002368 +\r\n                            t * (0.37409196 +\r\n                                    t * (0.09678418 +\r\n                                            t * (-0.18628806 +\r\n                                                    t * (0.27886807 +\r\n                                                            t * (-1.13520398 +\r\n                                                                    t * (1.48851587 +\r\n                                                                            t * (-0.82215223 +\r\n                                                                                    t * (0.17087277)))))))))\r\n                    );\r\n            return x >= 0 ? result : -result;\r\n        },\r\n        diff: function (f) {\r\n            var h = 0.001;\r\n\r\n            var derivative = function (x) {\r\n                return (f(x + h) - f(x - h)) / (2 * h);\r\n            };\r\n\r\n            return derivative;\r\n        },\r\n        median: function (...values) {\r\n            values.sort(function (a, b) {\r\n                return a - b;\r\n            });\r\n\r\n            var half = Math.floor(values.length / 2);\r\n\r\n            if(values.length % 2)\r\n                return values[half];\r\n\r\n            return (values[half - 1] + values[half]) / 2.0;\r\n        },\r\n        /*\r\n         * Reverses continued fraction calculation\r\n         * @param {obj} contd\r\n         * @returns {Number}\r\n         */\r\n        fromContinued: function (contd) {\r\n            var arr = contd.fractions.slice();\r\n            var e = 1 / arr.pop();\r\n            for(var i = 0, l = arr.length; i < l; i++) {\r\n                e = 1 / (arr.pop() + e);\r\n            }\r\n            return contd.sign * (contd.whole + e);\r\n        },\r\n        /*\r\n         * Calculates continued fractions\r\n         * @param {Number} n\r\n         * @param {Number} x The number of places\r\n         * @returns {Number}\r\n         */\r\n        continuedFraction: function (n, x) {\r\n            x = x || 20;\r\n            var sign = Math.sign(n); /*store the sign*/\r\n            var absn = Math.abs(n); /*get the absolute value of the number*/\r\n            var whole = Math.floor(absn); /*get the whole*/\r\n            var ni = absn - whole; /*subtract the whole*/\r\n            var c = 0; /*the counter to keep track of iterations*/\r\n            var done = false;\r\n            var epsilon = 1e-14;\r\n            var max = 1e7;\r\n            var e, w;\r\n            var retval = {\r\n                whole: whole,\r\n                sign: sign,\r\n                fractions: []\r\n            };\r\n            /*start calculating*/\r\n            while(!done && ni !== 0) {\r\n                /*invert and get the whole*/\r\n                e = 1 / ni;\r\n                w = Math.floor(e);\r\n                if(w > max) {\r\n                    /*this signals that we may have already gone too far*/\r\n                    var d = Math2.fromContinued(retval) - n;\r\n                    if(d <= Number.EPSILON)\r\n                        break;\r\n                }\r\n                /*add to result*/\r\n                retval.fractions.push(w);\r\n                /*move the ni to the decimal*/\r\n                ni = e - w;\r\n                /*ni should always be a decimal. If we have a whole number then we're in the rounding errors*/\r\n                if(ni <= epsilon || c >= x - 1)\r\n                    done = true;\r\n                c++;\r\n            }\r\n            /*cleanup 1/(n+1/1) = 1/(n+1) so just move the last digit one over if it's one*/\r\n            var idx = retval.fractions.length - 1;\r\n            if(retval.fractions[idx] === 1) {\r\n                retval.fractions.pop();\r\n                /*increase the last one by one*/\r\n                retval.fractions[--idx]++;\r\n            }\r\n            return retval;\r\n        },\r\n        bigpow: function (n, p) {\r\n            if(!(n instanceof Frac))\r\n                n = Frac.create(n);\r\n            if(!(p instanceof Frac))\r\n                p = Frac.create(p);\r\n            var retval = new Frac(0);\r\n            if(p.isInteger()) {\r\n                retval.num = n.num.pow(p.toString());\r\n                retval.den = n.den.pow(p.toString());\r\n            }\r\n            else {\r\n                var num = Frac.create(Math.pow(n.num, p.num));\r\n                var den = Frac.create(Math.pow(n.den, p.num));\r\n\r\n                retval.num = Math2.nthroot(num, p.den.toString());\r\n                retval.den = Math2.nthroot(den, p.den);\r\n            }\r\n            return retval;\r\n        },\r\n        //http://stackoverflow.com/questions/15454183/how-to-make-a-function-that-computes-the-factorial-for-numbers-with-decimals\r\n        gamma: function (z) {\r\n            var g = 7;\r\n            var C = [\r\n                0.99999999999980993,\r\n                676.5203681218851,\r\n                -1259.1392167224028,\r\n                771.32342877765313,\r\n                -176.61502916214059,\r\n                12.507343278686905,\r\n                -0.13857109526572012,\r\n                9.9843695780195716e-6,\r\n                1.5056327351493116e-7]\r\n                    ;\r\n\r\n            if(z < 0.5)\r\n                return Math.PI / (Math.sin(Math.PI * z) * Math2.gamma(1 - z));\r\n            else {\r\n                z -= 1;\r\n\r\n                var x = C[0];\r\n                for(var i = 1; i < g + 2; i++)\r\n                    x += C[i] / (z + i);\r\n\r\n                var t = z + g + 0.5;\r\n                return Math.sqrt(2 * Math.PI) * Math.pow(t, (z + 0.5)) * Math.exp(-t) * x;\r\n            }\r\n        },\r\n        //factorial\r\n        bigfactorial: function (x) {\r\n            var retval = new bigInt(1);\r\n            for(var i = 2; i <= x; i++)\r\n                retval = retval.times(i);\r\n            return new Frac(retval);\r\n        },\r\n        //https://en.wikipedia.org/wiki/Logarithm#Calculation\r\n        bigLog: function (x) {\r\n            varr\n            if(CACHE[x]) {\r\n                return Frac.quick.apply(null, CACHE[x].split('/'));\r\n            }\r\n            x = new Frac(x);\r\n            var n = 80;\r\n            var retval = new Frac(0);\r\n            var a = x.subtract(new Frac(1));\r\n            var b = x.add(new Frac(1));\r\n            for(var i = 0; i < n; i++) {\r\n                var t = new Frac(2 * i + 1);\r\n                var k = Math2.bigpow(a.divide(b), t);\r\n                var r = t.clone().invert().multiply(k);\r\n                retval = retval.add(r);\r\n\r\n            }\r\n            return retval.multiply(new Frac(2));\r\n        },\r\n        //the factorial function but using the big library instead\r\n        factorial: function (x) {\r\n            var is_int = x % 1 === 0;\r\n\r\n            /*factorial for negative integers is complex infinity according to Wolfram Alpha*/\r\n            if(is_int && x < 0)\r\n                return NaN;\r\n\r\n            if(!is_int)\r\n                return Math2.gamma(x + 1);\r\n\r\n            var retval = 1;\r\n            for(var i = 2; i <= x; i++)\r\n                retval = retval * i;\r\n            return retval;\r\n        },\r\n        //double factorial\r\n        //http://mathworld.wolfram.com/DoubleFactorial.html\r\n        dfactorial: function (x) {\r\n            if(isInt(x)) {\r\n                var even = x % 2 === 0;\r\n                /* If x = even then n = x/2 else n = (x-1)/2*/\r\n                var n = even ? x / 2 : (x + 1) / 2;\r\n                /*the return value*/\r\n                var r = new Frac(1);\r\n                /*start the loop*/\r\n                if(even)\r\n                    for(var i = 1; i <= n; i++)\r\n                        r = r.multiply(new Frac(2).multiply(new Frac(i)));\r\n                else\r\n                    for(var i = 1; i <= n; i++)\r\n                        r = r.multiply(new Frac(2).multiply(new Frac(i)).subtract(new Frac(1)));\r\n            }\r\n            else {\r\n                /*Not yet extended to bigNum*/\r\n                r = Math.pow(2, (1 + 2 * x - Math.cos(Math.PI * x)) / 4) * Math.pow(Math.PI, (Math.cos(Math.PI * x) - 1) / 4) * Math2.gamma(1 + x / 2);\r\n            }\r\n\r\n            /*done*/\r\n            return r;\r\n        },\r\n        GCD: function () {\r\n            var args = arrayUnique([].slice.call(arguments)\r\n                    .map(function (x) {\r\n                        return Math.abs(x);\r\n                    })).sort(),\r\n                    a = Math.abs(args.shift()),\r\n                    n = args.length;\r\n\r\n            while(n-- > 0) {\r\n                var b = Math.abs(args.shift());\r\n                while(true) {\r\n                    a %= b;\r\n                    if(a === 0) {\r\n                        a = b;\r\n                        break;\r\n                    }\r\n                    b %= a;\r\n                    if(b === 0)\r\n                        break;\r\n                    ;\r\n                }\r\n            }\r\n            return a;\r\n        },\r\n        QGCD: function () {\r\n            var args = [].slice.call(arguments);\r\n            var a = args[0];\r\n            for(var i = 1; i < args.length; i++) {\r\n                var b = args[i];\r\n                var sign = a.isNegative() && b.isNegative() ? -1 : 1;\r\n                a = b.gcd(a);\r\n                if(sign < 0)\r\n                    a.negate();\r\n            }\r\n            return a;\r\n        },\r\n        LCM: function (a, b) {\r\n            return (a * b) / Math2.GCD(a, b);\r\n        },\r\n        //pow but with the handling of negative numbers\r\n        //http://stackoverflow.com/questions/12810765/calculating-cubic-root-for-negative-number\r\n        pow: function (b, e) {\r\n            if(b < 0) {\r\n                if(Math.abs(e) < 1) {\r\n                    /*nth root of a negative number is imaginary when n is even*/\r\n                    if(1 / e % 2 === 0)\r\n                        return NaN;\r\n                    return -Math.pow(Math.abs(b), e);\r\n                }\r\n            }\r\n            return Math.pow(b, e);\r\n        },\r\n        factor: function (n) {\r\n            n = Number(n);\r\n            var sign = Math.sign(n); /*store the sign*/\r\n            /*move the number to absolute value*/\r\n            n = Math.abs(n);\r\n            var ifactors = Math2.ifactor(n);\r\n            var factors = new Symbol();\r\n            factors.symbols = {};\r\n            factors.group = CB;\r\n            for(var x in ifactors) {\r\n                var factor = new Symbol(1);\r\n                factor.group = P; /*cheat a little*/\r\n                factor.value = x;\r\n                factor.power = new Symbol(ifactors[x]);\r\n                factors.symbols[x] = factor;\r\n            }\r\n            factors.updateHash();\r\n\r\n            if(n === 1) {\r\n                factors = new Symbol(n);\r\n            }\r\n\r\n            /*put back the sign*/\r\n            if(sign < 0)\r\n                factors.negate();\r\n\r\n            return factors;\r\n        },\r\n        /**\r\n         * Uses trial division\r\n         * @param {Integer} n - the number being factored\r\n         * @param {object} factors -  the factors object\r\n         * @returns {object}\r\n         */\r\n        sfactor: function (n, factors) {\r\n            factors = factors || {};\r\n            var r = Math.floor(Math.sqrt(n));\r\n            var lcprime = PRIMES[PRIMES.length - 1];\r\n            /*a one-time cost... Hopefully ... And don't bother for more than a million*/\r\n            /*takes too long*/\r\n            if(r > lcprime && n < 1e6)\r\n                generatePrimes(r);\r\n            var l = PRIMES.length;\r\n            for(var i = 0; i < l; i++) {\r\n                var prime = PRIMES[i];\r\n                /*trial division*/\r\n                while(n % prime === 0) {\r\n                    n = n / prime;\r\n                    factors[prime] = (factors[prime] || 0) + 1;\r\n                }\r\n            }\r\n            if(n > 1)\r\n                factors[n] = 1;\r\n            return factors;\r\n        },\r\n        /**\r\n         * Pollard's rho\r\n         * @param {Integer} n\r\n         * @returns {object}\r\n         */\r\n        ifactor: function (n) {\r\n            var input = new bigInt(n);\r\n\r\n            n = String(n);\r\n\r\n            if(n === '0')\r\n                return {'0': 1};\r\n            n = new bigInt(n); /*convert to bigInt for safety*/\r\n            var sign = n.sign ? -1 : 1;\r\n            n = n.abs();\r\n            var factors = {}; /*factor object being returned.*/\r\n            if(n.lt('65536')) { /*less than 2^16 just use trial division*/\r\n                factors = Math2.sfactor(n, factors);\r\n            }\r\n            else {\r\n                var add = function (e) {\r\n                    if(!e.isPrime()) {\r\n                        factors = Math2.sfactor(e, factors);\r\n                    }\r\n                    else\r\n                        factors[e] = (factors[e] || 0) + 1;\r\n                };\r\n\r\n                try {\r\n                    //set a safety\r\n                    var max = 1e3;\r\n                    var safety = 0;\r\n\r\n                    while(!n.abs().equals(1)) {\r\n                        if(n.isPrime()) {\r\n                            add(n);\r\n                            break;\r\n                        }\r\n                        else {\r\n                            function rho(c) {\r\n                                var xf = new bigInt(c),\r\n                                        cz = 2,\r\n                                        x = new bigInt(c),\r\n                                        factor = new bigInt(1);\r\n\r\n                                while(factor.equals(1)) {\r\n                                    for(var i = 0; i <= cz && factor.equals(1); i++) {\r\n                                        //trigger the safety\r\n                                        if(safety++ > max)\r\n                                            throw new Error('stopping');\r\n\r\n                                        x = x.pow(2).add(1).mod(n);\r\n                                        factor = bigInt.gcd(x.minus(xf).abs(), n);\r\n                                    }\r\n\r\n                                    cz = cz * 2;\r\n                                    xf = x;\r\n                                }\r\n                                if(factor.equals(n)) {\r\n                                    return rho(c + 1);\r\n                                }\r\n                                return factor;\r\n                            }\r\n                            var factor = rho(2);\r\n                            add(factor);\r\n                            /*divide out the factor*/\r\n                            n = n.divide(factor);\r\n                        }\r\n                    }\r\n                }\r\n                catch(e) {\r\n                    //reset factors\r\n                    factors = {};\r\n                    add(input);\r\n                }\r\n\r\n            }\r\n\r\n            /*put the sign back*/\r\n            if(sign === -1) {\r\n                var sm = arrayMin(keys(factors)); /*/get the smallest number*/\r\n                factors['-' + sm] = factors[sm];\r\n                delete factors[sm];\r\n            }\r\n\r\n            return factors;\r\n        },\r\n        //factors a number into rectangular box. If sides are primes that this will be\r\n        //their prime factors. e.g. 21 -> (7)(3), 133 -> (7)(19)\r\n        boxfactor: function (n, max) {\r\n            max = max || 200; //stop after this number of iterations\r\n            var c, r,\r\n                    d = Math.floor((5 / 12) * n), //the divisor\r\n                    i = 0, //number of iterations\r\n                    safety = false;\r\n            while(true) {\r\n                c = Math.floor(n / d);\r\n                r = n % d;\r\n                if(r === 0)\r\n                    break; //we're done\r\n                if(safety)\r\n                    return [n, 1];\r\n                d = Math.max(r, d - r);\r\n                i++;\r\n                safety = i > max;\r\n            }\r\n            return [c, d, i];\r\n        },\r\n        fib: function (n) {\r\n            var sign = Math.sign(n);\r\n            n = Math.abs(n);\r\n            sign = even(n) ? sign : Math.abs(sign);\r\n            var a = 0, b = 1, f = 1;\r\n            for(var i = 2; i <= n; i++) {\r\n                f = a + b;\r\n                a = b;\r\n                b = f;\r\n            }\r\n            return f * sign;\r\n        },\r\n        mod: function (x, y) {\r\n            return x % y;\r\n        },\r\n        //http://mathworld.wolfram.com/IntegerPart.html\r\n        integer_part: function (x) {\r\n            var sign = Math.sign(x);\r\n            return sign * Math.floor(Math.abs(x));\r\n        },\r\n        simpson: function (f, a, b, step) {\r\n            var get_value = function (f, x, side) {\r\n                var v = f(x);\r\n                var d = 0.000000000001;\r\n                if(isNaN(v)) {\r\n                    v = f(side === 1 ? x + d : x - d);\r\n                }\r\n                return v;\r\n            };\r\n\r\n            step = step || 0.0001;\r\n            //calculate the number of intervals\r\n            var n = Math.abs(Math.floor((b - a) / step));\r\n            //simpson's rule requires an even number of intervals. If it's not then add 1\r\n            if(n % 2 !== 0)\r\n                n++;\r\n            //get the interval size\r\n            var dx = (b - a) / n;\r\n            //get x0\r\n            var retval = get_value(f, a, 1);\r\n\r\n            //get the middle part 4x1+2x2+4x3 ...\r\n            //but first set a flag to see if it's even or odd.\r\n            //The first one is odd so we start there\r\n            var even = false;\r\n            //get x1\r\n            var xi = a + dx;\r\n            //the coefficient\r\n            var c, k;\r\n            //https://en.wikipedia.org/wiki/Simpson%27s_rule\r\n            for(var i = 1; i < n; i++) {\r\n                c = even ? 2 : 4;\r\n                k = c * get_value(f, xi, 1);\r\n                retval += k;\r\n                //flip the even flag\r\n                even = !even;\r\n                //increment xi\r\n                xi += dx;\r\n            }\r\n\r\n            //add xn\r\n            return (retval + get_value(f, xi, 2)) * (dx / 3);\r\n\r\n        },\r\n        /**\r\n         * https://github.com/scijs/integrate-adaptive-simpson\r\n         * @param {Function} f - the function being integrated\r\n         * @param {Number} a - lower bound\r\n         * @param {Number} b - upper bound\r\n         * @param {Number} tol - step width\r\n         * @param {Number} maxdepth\r\n         * @returns {Number}\r\n         */\r\n        num_integrate: function (f, a, b, tol, maxdepth) {\r\n            if(maxdepth < 0)\r\n                throw new Error('max depth cannot be negative');\r\n\r\n            /* This algorithm adapted from pseudocode in:*/\r\n            /* http://www.math.utk.edu/~ccollins/refs/Handouts/rich.pdf*/\r\n            function adsimp(f, a, b, fa, fm, fb, V0, tol, maxdepth, depth, state) {\r\n                if(state.nanEncountered) {\r\n                    return NaN;\r\n                }\r\n                var h, f1, f2, sl, sr, s2, m, V1, V2, err;\r\n                h = b - a;\r\n                f1 = f(a + h * 0.25);\r\n                f2 = f(b - h * 0.25);\r\n                /* Simple check for NaN:*/\r\n                if(isNaN(f1)) {\r\n                    state.nanEncountered = true;\r\n                    return;\r\n                }\r\n                /* Simple check for NaN:*/\r\n                if(isNaN(f2)) {\r\n                    state.nanEncountered = true;\r\n                    return;\r\n                }\r\n\r\n                sl = h * (fa + 4 * f1 + fm) / 12;\r\n                sr = h * (fm + 4 * f2 + fb) / 12;\r\n                s2 = sl + sr;\r\n                err = (s2 - V0) / 15;\r\n\r\n                if(state.maxDepthCount > 1000 * maxdepth) {\r\n                    return;\r\n                }\r\n\r\n\r\n                if(depth > maxdepth) {\r\n                    state.maxDepthCount++;\r\n                    return s2 + err;\r\n                }\r\n                else if(Math.abs(err) < tol) {\r\n                    return s2 + err;\r\n                }\r\n                else {\r\n                    m = a + h * 0.5;\r\n                    V1 = adsimp(f, a, m, fa, f1, fm, sl, tol * 0.5, maxdepth, depth + 1, state);\r\n                    if(isNaN(V1)) {\r\n                        state.nanEncountered = true;\r\n                        return NaN;\r\n                    }\r\n                    V2 = adsimp(f, m, b, fm, f2, fb, sr, tol * 0.5, maxdepth, depth + 1, state);\r\n\r\n                    if(isNaN(V2)) {\r\n                        state.nanEncountered = true;\r\n                        return NaN;\r\n                    }\r\n\r\n                    return V1 + V2;\r\n                }\r\n            }\r\n\r\n            function integrate(f, a, b, tol, maxdepth) {\r\n                var state = {\r\n                    maxDepthCount: 0,\r\n                    nanEncountered: false\r\n                };\r\n\r\n                if(tol === undefined) {\r\n                    tol = 1e-9;\r\n                }\r\n                if(maxdepth === undefined) {\r\n                    /*Issue #458 - This was lowered because of performance issues. */\r\n                    /*This was suspected from before but is now confirmed with this issue*/\r\n                    maxdepth = 45;\r\n                }\r\n\r\n                var fa = f(a);\r\n                var fm = f(0.5 * (a + b));\r\n                var fb = f(b);\r\n\r\n                var V0 = (fa + 4 * fm + fb) * (b - a) / 6;\r\n\r\n                var result = adsimp(f, a, b, fa, fm, fb, V0, tol, maxdepth, 1, state);\r\n\r\n                if(state.maxDepthCount > 0) {\r\n                    warn('integrate-adaptive-simpson: Warning: maximum recursion depth (' + maxdepth + ') reached ' + state.maxDepthCount + ' times');\r\n                }\r\n\r\n                if(state.nanEncountered) {\r\n                    throw new Error('Function does not converge over interval!');\r\n                }\r\n\r\n                return result;\r\n            }\r\n            var retval;\r\n\r\n            try {\r\n                retval = integrate(f, a, b, tol, maxdepth);\r\n            }\r\n            catch(e) {\r\n                /*fallback to non-adaptive*/\r\n                return Math2.simpson(f, a, b);\r\n            }\r\n            return nround(retval, 12);\r\n        },\r\n        //https://en.wikipedia.org/wiki/Trigonometric_integral\r\n        //CosineIntegral\r\n        Ci: function (x) {\r\n            var n = 20,\r\n                    /*roughly Euler–Mascheroni*/\r\n                    g = 0.5772156649015329,\r\n                    sum = 0;\r\n            for(var i = 1; i < n; i++) {\r\n                /*cache 2n*/\r\n                var n2 = 2 * i;\r\n                sum += (Math.pow(-1, i) * Math.pow(x, n2)) / (n2 * Math2.factorial(n2));\r\n            }\r\n            return Math.log(x) + g + sum;\r\n        },\r\n        /*SineIntegral*/\r\n        Si: function (x) {\r\n            var n = 20,\r\n                    sum = 0;\r\n            for(var i = 0; i < n; i++) {\r\n                var n2 = 2 * i;\r\n                sum += (Math.pow(-1, i) * Math.pow(x, n2 + 1)) / ((n2 + 1) * Math2.factorial(n2 + 1));\r\n            }\r\n            return sum;\r\n        },\r\n        /*ExponentialIntegral*/\r\n        Ei: function (x) {\r\n            if(Number(x) === 0)\r\n                return -Infinity;\r\n            var n = 30,\r\n                    g = 0.5772156649015328606, /*roughly Euler–Mascheroni*/\r\n                    sum = 0;\r\n            for(var i = 1; i < n; i++) {\r\n                sum += Math.pow(x, i) / (i * Math2.factorial(i));\r\n            }\r\n            return g + Math.abs(Math.log(x)) + sum;\r\n        },\r\n        /*Hyperbolic Sine Integral*/\r\n        /*http://mathworld.wolfram.com/Shi.html*/\r\n        Shi: function (x) {\r\n            var n = 30,\r\n                    sum = 0,\r\n                    k, t;\r\n            for(var i = 0; i < n; i++) {\r\n                k = 2 * i;\r\n                t = k + 1;\r\n                sum += Math.pow(x, t) / (t * t * Math2.factorial(k));\r\n            }\r\n            return sum;\r\n        },\r\n        /*the cosine integral function*/\r\n        Chi: function (x) {\r\n            var dx, g, f;\r\n            dx = 0.001;\r\n            g = 0.5772156649015328606;\r\n            f = function (t) {\r\n                return (Math.cosh(t) - 1) / t;\r\n            };\r\n            return Math.log(x) + g + Math2.num_integrate(f, 0.002, x, dx);\r\n        },\r\n        /*the log integral*/\r\n        Li: function (x) {\r\n            return Math2.Ei(Math2.bigLog(x));\r\n        },\r\n        /*the gamma incomplete function*/\r\n        gamma_incomplete: function (n, x) {\r\n            var t = n - 1,\r\n                    sum = 0,\r\n                    x = x || 0;\r\n            for(var i = 0; i < t; i++) {\r\n                sum += Math.pow(x, i) / Math2.factorial(i);\r\n            }\r\n            return Math2.factorial(t) * Math.exp(-x) * sum;\r\n        },\r\n        /*\r\n         * Heaviside step function - Moved from Special.js (originally contributed by Brosnan Yuen)\r\n         * Specification : http://mathworld.wolfram.com/HeavisideStepFunction.html\r\n         * if x > 0 then 1\r\n         * if x == 0 then 1/2\r\n         * if x < 0 then 0\r\n         */\r\n        step: function (x) {\r\n            if(x > 0)\r\n                return 1;\r\n            if(x < 0)\r\n                return 0;\r\n            return 0.5;\r\n        },\r\n        /*\r\n         * Rectangle function - Moved from Special.js (originally contributed by Brosnan Yuen)\r\n         * Specification : http://mathworld.wolfram.com/RectangleFunction.html\r\n         * if |x| > 1/2 then 0\r\n         * if |x| == 1/2 then 1/2\r\n         * if |x| < 1/2 then 1\r\n         */\r\n        rect: function (x) {\r\n            var x = Math.abs(x);\r\n            if(x === 0.5)\r\n                return x;\r\n            if(x > 0.5)\r\n                return 0;\r\n            return 1;\r\n        },\r\n        /*\r\n         * Sinc function - Moved from Special.js (originally contributed by Brosnan Yuen)\r\n         * Specification : http://mathworld.wolfram.com/SincFunction.html\r\n         * if x == 0 then 1\r\n         * otherwise sin(x)/x\r\n         */\r\n        sinc: function (x) {\r\n            if(x.equals(0))\r\n                return 1;\r\n            return Math.sin(x) / x;\r\n        },\r\n        /*\r\n         * Triangle function - Moved from Special.js (originally contributed by Brosnan Yuen)\r\n         * Specification : http://mathworld.wolfram.com/TriangleFunction.html\r\n         * if |x| >= 1 then 0\r\n         * if |x| < then 1-|x|\r\n         */\r\n        tri: function (x) {\r\n            x = Math.abs(x);\r\n            if(x >= 1)\r\n                return 0;\r\n            return 1 - x;\r\n        },\r\n        //https://en.wikipedia.org/wiki/Nth_root_algorithm\r\n        nthroot: function (A, n) {\r\n            /*make sure the input is of type Frac*/\r\n            if(!(A instanceof Frac))\r\n                A = new Frac(A.toString());\r\n            if(!(n instanceof Frac))\r\n                n = new Frac(n.toString());\r\n            if(n.equals(1))\r\n                return A;\r\n            /*begin algorithm*/\r\n            var xk = A.divide(new Frac(2)); /*x0*/\r\n            var e = new Frac(1e-15);\r\n            var dk, dk0, d0;\r\n            var a = n.clone().invert(),\r\n                    b = n.subtract(new Frac(1));\r\n            do {\r\n                var powb = Math2.bigpow(xk, b);\r\n                var dk_dec = a.multiply(A.divide(powb).subtract(xk)).toDecimal(25);\r\n                dk = Frac.create(dk_dec);\r\n                if(d0)\r\n                    break;\r\n\r\n                xk = xk.add(dk);\r\n                /*check to see if there's no change from the last xk*/\r\n                var dk_dec = dk.toDecimal();\r\n                d0 = dk0 ? dk0 === dk_dec : false;\r\n                dk0 = dk_dec;\r\n            }\r\n            while(dk.abs().gte(e))\r\n\r\n            return xk;\r\n        },\r\n        /*https://gist.github.com/jiggzson/0c5b33cbcd7b52b36132b1e96573285f*/\r\n        /*Just the square root function but big :)*/\r\n        sqrt: function (n) {\r\n            if(!(n instanceof Frac))\r\n                n = new Frac(n);\r\n            var xn, d, ld, same_delta;\r\n            var c = 0; /*counter*/\r\n            var done = false;\r\n            var delta = new Frac(1e-20);\r\n            xn = n.divide(new Frac(2));\r\n            var safety = 1000;\r\n            do {\r\n                /*break if we're not converging*/\r\n                if(c > safety)\r\n                    throw new Error('Unable to calculate square root for ' + n);\r\n                xn = xn.add(n.divide(xn)).divide(new Frac(2));\r\n                xn = new Frac(xn.decimal(30));\r\n                /*get the difference from the true square*/\r\n                d = n.subtract(xn.multiply(xn));\r\n                /*if the square of the calculated number is close enough to the number*/\r\n                /*we're getting the square root or the last delta was the same as the new delta*/\r\n                /*then we're done*/\r\n                same_delta = ld ? ld.equals(d) : false;\r\n                if(d.clone().abs().lessThan(delta) || same_delta)\r\n                    done = true;\r\n                /*store the calculated delta*/\r\n                ld = d;\r\n                c++; /*increase the counter*/\r\n            }\r\n            while(!done)\r\n\r\n            return xn;\r\n        }\r\n    };\r\n    //link the Math2 object to Settings.FUNCTION_MODULES\r\n    Settings.FUNCTION_MODULES.push(Math2);\r\n    reserveNames(Math2); //reserve the names in Math2\r\n\r\n\r\n//Polyfills ====================================================================\r\n    //https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/\r\n    Math.sign = Math.sign || function (x) {\r\n        x = +x; // convert to a number\r\n        if(x === 0 || isNaN(x)) {\r\n            return x;\r\n        }\r\n        return x > 0 ? 1 : -1;\r\n    };\r\n\r\n    Math.cosh = Math.cosh || function (x) {\r\n        var y = Math.exp(x);\r\n        return (y + 1 / y) / 2;\r\n    };\r\n\r\n    Math.sech = Math.sech || function (x) {\r\n        return 1 / Math.cosh(x);\r\n    };\r\n\r\n    Math.csch = Math.csch || function (x) {\r\n        return 1 / Math.sinh(x);\r\n    };\r\n\r\n    Math.coth = Math.coth || function (x) {\r\n        return 1 / Math.tanh(x);\r\n    };\r\n\r\n    Math.sinh = Math.sinh || function (x) {\r\n        var y = Math.exp(x);\r\n        return (y - 1 / y) / 2;\r\n    };\r\n\r\n    Math.tanh = Math.tanh || function (x) {\r\n        if(x === Infinity) {\r\n            return 1;\r\n        }\r\n        else if(x === -Infinity) {\r\n            return -1;\r\n        }\r\n        else {\r\n            var y = Math.exp(2 * x);\r\n            return (y - 1) / (y + 1);\r\n        }\r\n    };\r\n\r\n    Math.asinh = Math.asinh || function (x) {\r\n        if(x === -Infinity) {\r\n            return x;\r\n        }\r\n        else {\r\n            return Math.log(x + Math.sqrt(x * x + 1));\r\n        }\r\n    };\r\n\r\n    Math.acosh = Math.acosh || function (x) {\r\n        return Math.log(x + Math.sqrt(x * x - 1));\r\n    };\r\n\r\n    Math.atanh = Math.atanh || function (x) {\r\n        return Math.log((1 + x) / (1 - x)) / 2;\r\n    };\r\n\r\n    Math.log10 = Math.log10 || function (x) {\r\n        return Math.log(x) * Math.LOG10E;\r\n    };\r\n\r\n    Math.trunc = Math.trunc || function (x) {\r\n        if(isNaN(x)) {\r\n            return NaN;\r\n        }\r\n        if(x > 0) {\r\n            return Math.floor(x);\r\n        }\r\n        return Math.ceil(x);\r\n    };\r\n\r\n//Global functions =============================================================\r\n    /**\r\n     * This method will return a hash or a text representation of a Symbol, Matrix, or Vector.\r\n     * If all else fails it *assumes* the object has a toString method and will call that.\r\n     *\r\n     * @param {Object} obj\r\n     * @param {String} option get is as a hash\r\n     * @param {int} useGroup\r\n     * @returns {String}\r\n     */\r\n    function text(obj, option, useGroup, decp) {\r\n        var asHash = option === 'hash',\r\n                //whether to wrap numbers in brackets\r\n                wrapCondition = undefined,\r\n                opt = asHash ? undefined : option,\r\n                asDecimal = opt === 'decimal' || opt === 'decimals';\r\n\r\n        if(asDecimal && typeof decp === 'undefined')\r\n            decp = 16;\r\n\r\n        function toString(obj) {\r\n            switch(option)\r\n            {\r\n                case 'decimals':\r\n                case 'decimal':\r\n                    wrapCondition = wrapCondition || function (str) {\r\n                        return false;\r\n                    };\r\n                    return obj.valueOf();\r\n                case 'recurring':\r\n                    wrapCondition = wrapCondition || function (str) {\r\n                        return str.indexOf(\"'\") !== -1;\r\n                    };\r\n\r\n                    var str = obj.toString();\r\n                    //verify that the string is actually a fraction\r\n                    var frac = /^-?\\d+(?:\\/\\d+)?$/.exec(str);\r\n                    if(frac.length === 0)\r\n                        return str;\r\n\r\n                    //split the fraction into the numerator and denominator\r\n                    var parts = frac[0].split('/');\r\n                    var negative = false;\r\n                    var m = Number(parts[0]);\r\n                    if(m < 0) {\r\n                        m = -m;\r\n                        negative = true;\r\n                    }\r\n                    var n = Number(parts[1]);\r\n                    if(!n)\r\n                        n = 1;\r\n\r\n                    //https://softwareengineering.stackexchange.com/questions/192070/what-is-a-efficient-way-to-find-repeating-decimal#comment743574_192081\r\n                    var quotient = Math.floor(m / n), c = 10 * (m - quotient * n);\r\n                    quotient = quotient.toString() + \".\";\r\n                    while(c && c < n) {\r\n                        c *= 10;\r\n                        quotient += \"0\";\r\n                    }\r\n                    var digits = \"\", passed = [], i = 0;\r\n                    while(true) {\r\n                        if(typeof passed[c] !== 'undefined') {\r\n                            var prefix = digits.slice(0, passed[c]),\r\n                                    cycle = digits.slice(passed[c]),\r\n                                    result = quotient + prefix + \"'\" + cycle + \"'\";\r\n                            return (negative ? \"-\" : \"\") + result.replace(\"'0'\", \"\").replace(/\\.$/, \"\");\r\n                        }\r\n                        var q = Math.floor(c / n), r = c - q * n;\r\n                        passed[c] = i;\r\n                        digits += q.toString();\r\n                        i += 1;\r\n                        c = 10 * r;\r\n                    }\r\n                case 'mixed':\r\n                    wrapCondition = wrapCondition || function (str) {\r\n                        return str.indexOf('/') !== -1;\r\n                    };\r\n\r\n                    var str = obj.toString();\r\n                    //verify that the string is actually a fraction\r\n                    var frac = /^-?\\d+(?:\\/\\d+)?$/.exec(str);\r\n                    if(frac.length === 0)\r\n                        return str;\r\n\r\n                    //split the fraction into the numerator and denominator\r\n                    var parts = frac[0].split('/');\r\n                    var numer = new bigInt(parts[0]);\r\n                    var denom = new bigInt(parts[1]);\r\n                    if(denom.equals(0))\r\n                        denom = new bigInt(1);\r\n\r\n                    //return the quotient plus the remainder\r\n                    var divmod = numer.divmod(denom);\r\n                    var quotient = divmod.quotient;\r\n                    var remainder = divmod.remainder;\r\n                    var operator = parts[0][0] === '-' || quotient.equals(0) || remainder.equals(0) ? '' : '+';\r\n                    return (quotient.equals(0) ? '' : quotient.toString()) + operator + (remainder.equals(0) ? '' : (remainder.toString() + '/' + parts[1]));\r\n                case 'scientific':\r\n                    wrapCondition = wrapCondition || function (str) {\r\n                        return false;\r\n                    }\r\n                    return new Scientific(obj.valueOf()).toString(Settings.SCIENTIFIC_MAX_DECIMAL_PLACES);\r\n                default:\r\n                    wrapCondition = wrapCondition || function (str) {\r\n                        return str.indexOf('/') !== -1;\r\n                    };\r\n\r\n                    return obj.toString();\r\n            }\r\n        }\r\n\r\n        //if the object is a symbol\r\n        if(isSymbol(obj)) {\r\n            var multiplier = '',\r\n                    power = '',\r\n                    sign = '',\r\n                    group = obj.group || useGroup,\r\n                    value = obj.value;\r\n\r\n            //if the value is to be used as a hash then the power and multiplier need to be suppressed\r\n            if(!asHash) {\r\n                //use asDecimal to get the object back as a decimal\r\n                var om = toString(obj.multiplier);\r\n                if(om == '-1' && String(obj.multiplier) === '-1') {\r\n                    sign = '-';\r\n                    om = '1';\r\n                }\r\n                //only add the multiplier if it's not 1\r\n                if(om != '1')\r\n                    multiplier = om;\r\n                //use asDecimal to get the object back as a decimal\r\n                var p = obj.power ? toString(obj.power) : '';\r\n                //only add the multiplier\r\n                if(p != '1') {\r\n                    //is it a symbol\r\n                    if(isSymbol(p)) {\r\n                        power = text(p, opt);\r\n                    }\r\n                    else {\r\n                        power = p;\r\n                    }\r\n                }\r\n            }\r\n\r\n            switch(group) {\r\n                case N:\r\n                    multiplier = '';\r\n                    //round if requested\r\n                    var m = decp && asDecimal ? obj.multiplier.toDecimal(decp) : toString(obj.multiplier);\r\n                    //if it's numerical then all we need is the multiplier\r\n                    value = String(obj.multiplier) == '-1' ? '1' : m;\r\n                    power = '';\r\n                    break;\r\n                case PL:\r\n                    value = obj.collectSymbols().map(function (x) {\r\n                        var txt = text(x, opt, useGroup, decp);\r\n                        if(txt == '0')\r\n                            txt = '';\r\n                        return txt;\r\n                    }).sort().join('+').replace(/\\+\\-/g, '-');\r\n                    break;\r\n                case CP:\r\n                    value = obj.collectSymbols().map(function (x) {\r\n                        var txt = text(x, opt, useGroup, decp);\r\n                        if(txt == '0')\r\n                            txt = '';\r\n                        return txt;\r\n                    }).sort().join('+').replace(/\\+\\-/g, '-');\r\n                    break;\r\n                case CB:\r\n                    value = obj.collectSymbols(function (symbol) {\r\n                        var g = symbol.group;\r\n                        //both groups will already be in brackets if their power is greater than 1\r\n                        //so skip it.\r\n                        if((g === PL || g === CP) && (symbol.power.equals(1) && symbol.multiplier.equals(1))) {\r\n                            return inBrackets(text(symbol, opt));\r\n                        }\r\n                        return text(symbol, opt);\r\n                    }).join('*');\r\n                    break;\r\n                case EX:\r\n                    var pg = obj.previousGroup,\r\n                            pwg = obj.power.group;\r\n\r\n                    //PL are the exception. It's simpler to just collect and set the value\r\n                    if(pg === PL)\r\n                        value = obj.collectSymbols(text, opt).join('+').replace('+-', '-');\r\n                    if(!(pg === N || pg === S || pg === FN) && !asHash) {\r\n                        value = inBrackets(value);\r\n                    }\r\n\r\n                    if((pwg === CP || pwg === CB || pwg === PL || obj.power.multiplier.toString() != '1') && power) {\r\n                        power = inBrackets(power);\r\n                    }\r\n                    break;\r\n            }\r\n\r\n            if(group === FN) {\r\n                value = obj.fname + inBrackets(obj.args.map(function (symbol) {\r\n                    return text(symbol, opt);\r\n                }).join(','));\r\n            }\r\n            //TODO: Needs to be more efficient. Maybe.\r\n            if(group === FN && obj.fname in CUSTOM_OPERATORS) {\r\n                var a = text(obj.args[0]);\r\n                var b = text(obj.args[1]);\r\n                if(obj.args[0].isComposite()) //preserve the brackets\r\n                    a = inBrackets(a);\r\n                if(obj.args[1].isComposite()) //preserve the brackets\r\n                    b = inBrackets(b);\r\n                value = a + CUSTOM_OPERATORS[obj.fname] + b;\r\n            }\r\n            //wrap the power since / is less than ^\r\n            //TODO: introduce method call isSimple\r\n            if(power && group !== EX && wrapCondition(power)) {\r\n                power = inBrackets(power);\r\n            }\r\n\r\n            //the following groups are held together by plus or minus. They can be raised to a power or multiplied\r\n            //by a multiplier and have to be in brackets to preserve the order of precedence\r\n            if(((group === CP || group === PL) && (multiplier && multiplier != '1' || sign === '-'))\r\n                    || ((group === CB || group === CP || group === PL) && (power && power != '1'))\r\n                    || !asHash && group === P && value == -1\r\n                    || obj.fname === PARENTHESIS) {\r\n\r\n                value = inBrackets(value);\r\n            }\r\n\r\n            if(decp && (option === 'decimal' || option === 'decimals' && multiplier)) {\r\n                multiplier = nround(multiplier, decp);\r\n            }\r\n\r\n\r\n            //add the sign back\r\n            var c = sign + multiplier;\r\n\r\n            if(multiplier && wrapCondition(multiplier))\r\n                c = inBrackets(c);\r\n\r\n            if(power < 0)\r\n                power = inBrackets(power);\r\n\r\n            //add the multiplication back\r\n            if(multiplier)\r\n                c = c + '*';\r\n\r\n            if(power) {\r\n                if(value === 'e' && Settings.E_TO_EXP) {\r\n                    return c + 'exp' + inBrackets(power);\r\n                }\r\n                power = Settings.POWER_OPERATOR + power;\r\n            }\r\n\r\n            //this needs serious rethinking. Must fix\r\n            if(group === EX && value.charAt(0) === '-') {\r\n                value = inBrackets(value);\r\n            }\r\n\r\n            var cv = c + value;\r\n\r\n            if(obj.parens) {\r\n                cv = inBrackets(cv);\r\n            }\r\n\r\n            return cv + power;\r\n        }\r\n        else if(isVector(obj)) {\r\n            var l = obj.elements.length,\r\n                    c = [];\r\n            for(var i = 0; i < l; i++)\r\n                c.push(obj.elements[i].text(option));\r\n            return '[' + c.join(',') + ']';\r\n        }\r\n        else {\r\n            try {\r\n                return obj.toString();\r\n            }\r\n            catch(e) {\r\n                return '';\r\n            }\r\n        }\r\n    }\r\n    /**\r\n     * Calculates prime factors for a number. It first checks if the number\r\n     * is a prime number. If it's not then it will calculate all the primes \r\n     * for that number.\r\n     * @param {int} num\r\n     * @returns {Array}\r\n     */\r\n\r\n    function primeFactors(num) {\r\n        if(isPrime(num)) {\r\n            return [num];\r\n        }\r\n\r\n        var l = num, i = 1, factors = [],\r\n                epsilon = 2.2204460492503130808472633361816E-16;\r\n        while(i < l) {\r\n            var quotient = num / i;\r\n            var whole = Math.floor(quotient);\r\n            var remainder = quotient - whole;\r\n\r\n            if(remainder <= epsilon && i > 1) {\r\n                // If the prime wasn't found but calculated then save it and\r\n                // add it as a factor.\r\n                if(isPrime(i)) {\r\n                    if(PRIMES.indexOf(i) === -1) {\r\n                        PRIMES.push(i);\r\n                    }\r\n                    factors.push(i);\r\n                }\r\n\r\n                // Check if the remainder is a prime\r\n                if(isPrime(whole)) {\r\n                    factors.push(whole);\r\n                    break;\r\n                }\r\n\r\n                l = whole;\r\n            }\r\n            i++;\r\n        }\r\n\r\n        return factors.sort(function (a, b) {\r\n            return a - b;\r\n        });\r\n    }\r\n    ;\r\n    primeFactors(314146179365)\r\n//Expression ===================================================================\r\n    /**\r\n     * This is what nerdamer returns. It's sort of a wrapper around the symbol class and\r\n     * provides the user with some useful functions. If you want to provide the user with extra\r\n     * library functions then add them to this class's prototype.\r\n     * @param {Symbol} symbol\r\n     * @returns {Expression} wraps around the Symbol class\r\n     */\r\n    function Expression(symbol) {\r\n        //we don't want arrays wrapped\r\n        this.symbol = symbol;\r\n    }\r\n    /**\r\n     * Returns stored expression at index. For first index use 1 not 0.\r\n     * @param {bool} asType\r\n     * @param {Integer} expression_number\r\n     */\r\n    Expression.getExpression = function (expression_number, asType) {\r\n        if(expression_number === 'last' || !expression_number)\r\n            expression_number = EXPRESSIONS.length;\r\n        if(expression_number === 'first')\r\n            expression_number = 1;\r\n        var index = expression_number - 1,\r\n                expression = EXPRESSIONS[index],\r\n                retval = expression ? new Expression(expression) : expression;\r\n        return retval;\r\n    };\r\n    Expression.prototype = {\r\n        /**\r\n         * Returns the text representation of the expression\r\n         * @param {String} opt - option of formatting numbers\r\n         * @param {Number} n The number of significant figures\r\n         * @returns {String}\r\n         */\r\n        text: function (opt, n) {\r\n            n = n || 19;\r\n            opt = opt || 'decimals';\r\n            if(this.symbol.text_)\r\n                return this.symbol.text_(opt);\r\n\r\n            return text(this.symbol, opt, undefined, n);\r\n        },\r\n        /**\r\n         * Returns the latex representation of the expression\r\n         * @param {String} option - option for formatting numbers\r\n         * @returns {String}\r\n         */\r\n        latex: function (option) {\r\n            if(this.symbol.latex)\r\n                return this.symbol.latex(option);\r\n            return LaTeX.latex(this.symbol, option);\r\n        },\r\n        valueOf: function () {\r\n            return this.symbol.valueOf();\r\n        },\r\n\r\n        /**\r\n         * Evaluates the expression and tries to reduce it to a number if possible.\r\n         * If an argument is given in the form of %{integer} it will evaluate that expression.\r\n         * Other than that it will just use it's own text and reparse\r\n         * @returns {Expression}\r\n         */\r\n        evaluate: function () {\r\n\r\n            // Don't evaluate an empty vector\r\n            if(isVector(this.symbol) && this.symbol.dimensions() === 0) {\r\n                return this;\r\n            }\r\n\r\n            var first_arg = arguments[0], expression, idx = 1;\r\n\r\n            //Enable getting of expressions using the % so for example %1 should get the first expression\r\n            if(typeof first_arg === 'string') {\r\n                expression = (first_arg.charAt(0) === '%') ? Expression.getExpression(first_arg.substr(1)).text() : first_arg;\r\n            }\r\n            else if(first_arg instanceof Expression || isSymbol(first_arg)) {\r\n                expression = first_arg.text();\r\n            }\r\n            else {\r\n                expression = this.symbol.text();\r\n                idx--;\r\n            }\r\n\r\n            var subs = arguments[idx] || {};\r\n\r\n            var retval = new Expression(block('PARSE2NUMBER', function () {\r\n                return _.parse(expression, subs);\r\n            }, true));\r\n\r\n            return retval;\r\n        },\r\n        /**\r\n         * Converts a symbol to a JS function. Pass in an array of variables to use that order instead of\r\n         * the default alphabetical order\r\n         * @param vars {Array}\r\n         */\r\n        buildFunction: function (vars) {\r\n            return Build.build(this.symbol, vars);\r\n        },\r\n        /**\r\n         * Checks to see if the expression is just a plain old number\r\n         * @returns {boolean}\r\n         */\r\n        isNumber: function () {\r\n            return isNumericSymbol(this.symbol);\r\n        },\r\n        /**\r\n         * Checks to see if the expression is infinity\r\n         * @returns {boolean}\r\n         */\r\n        isInfinity: function () {\r\n            return Math.abs(this.symbol.multiplier) === Infinity;\r\n        },\r\n        /**\r\n         * Checks to see if the expression contains imaginary numbers\r\n         * @returns {boolean}\r\n         */\r\n        isImaginary: function () {\r\n            return evaluate(_.parse(this.symbol)).isImaginary();\r\n        },\r\n        /**\r\n         * Returns all the variables in the expression\r\n         * @returns {Array}\r\n         */\r\n        variables: function () {\r\n            return variables(this.symbol);\r\n        },\r\n\r\n        toString: function () {\r\n            try {\r\n                if(isArray(this.symbol))\r\n                    return '[' + this.symbol.toString() + ']';\r\n                return this.symbol.toString();\r\n            }\r\n            catch(e) {\r\n                return '';\r\n            }\r\n        },\r\n        //forces the symbol to be returned as a decimal\r\n        toDecimal: function (prec) {\r\n            Settings.precision = prec;\r\n            var dec = text(this.symbol, 'decimals');\r\n            Settings.precision = undefined;\r\n            return dec;\r\n        },\r\n        //checks to see if the expression is a fraction\r\n        isFraction: function () {\r\n            return isFraction(this.symbol);\r\n        },\r\n        //checks to see if the symbol is a multivariate polynomial\r\n        isPolynomial: function () {\r\n            return this.symbol.isPoly();\r\n        },\r\n        //performs a substitution\r\n        sub: function (symbol, for_symbol) {\r\n            return new Expression(this.symbol.sub(_.parse(symbol), _.parse(for_symbol)));\r\n        },\r\n        operation: function (otype, symbol) {\r\n            if(isExpression(symbol))\r\n                symbol = symbol.symbol;\r\n            else if(!isSymbol(symbol))\r\n                symbol = _.parse(symbol);\r\n            return new Expression(_[otype](this.symbol.clone(), symbol.clone()));\r\n        },\r\n        add: function (symbol) {\r\n            return this.operation('add', symbol);\r\n        },\r\n        subtract: function (symbol) {\r\n            return this.operation('subtract', symbol);\r\n        },\r\n        multiply: function (symbol) {\r\n            return this.operation('multiply', symbol);\r\n        },\r\n        divide: function (symbol) {\r\n            return this.operation('divide', symbol);\r\n        },\r\n        pow: function (symbol) {\r\n            return this.operation('pow', symbol);\r\n        },\r\n        expand: function () {\r\n            return new Expression(_.expand(this.symbol));\r\n        },\r\n        each: function (callback, i) {\r\n            if(this.symbol.each)\r\n                this.symbol.each(callback, i);\r\n            else if(isArray(this.symbol)) {\r\n                for(var i = 0; i < this.symbol.length; i++)\r\n                    callback.call(this.symbol, this.symbol[i], i);\r\n            }\r\n            else\r\n                callback.call(this.symbol);\r\n        },\r\n        eq: function (value) {\r\n            if(!isSymbol(value))\r\n                value = _.parse(value);\r\n            try {\r\n                var d = _.subtract(this.symbol.clone(), value);\r\n                return d.equals(0);\r\n            }\r\n            catch(e) {\r\n                return false;\r\n            }\r\n            ;\r\n        },\r\n        lt: function (value) {\r\n            if(!isSymbol(value))\r\n                value = _.parse(value);\r\n            try {\r\n                var d = evaluate(_.subtract(this.symbol.clone(), value));\r\n                return d.lessThan(0);\r\n            }\r\n            catch(e) {\r\n                return false;\r\n            }\r\n            ;\r\n        },\r\n        gt: function (value) {\r\n            if(!isSymbol(value))\r\n                value = _.parse(value);\r\n            try {\r\n                var d = evaluate(_.subtract(this.symbol.clone(), value));\r\n                return d.greaterThan(0);\r\n            }\r\n            catch(e) {\r\n                return false;\r\n            }\r\n        },\r\n        gte: function (value) {\r\n            return this.gt(value) || this.eq(value);\r\n        },\r\n        lte: function (value) {\r\n            return this.lt(value) || this.eq(value);\r\n        },\r\n\r\n        numerator: function () {\r\n            return new Expression(this.symbol.getNum());\r\n        },\r\n        denominator: function () {\r\n            return new Expression(this.symbol.getDenom());\r\n        },\r\n        hasFunction: function (f) {\r\n            return this.symbol.containsFunction(f);\r\n        },\r\n        contains: function (variable) {\r\n            return this.symbol.contains(variable);\r\n        }\r\n    };\r\n    //Aliases\r\n    Expression.prototype.toTeX = Expression.prototype.latex;\r\n\r\n//Scientific ===================================================================\r\n    function Scientific(num) {\r\n        if(!(this instanceof Scientific))\r\n            return new Scientific(num);\r\n\r\n        num = String(typeof num === 'undefined' ? 0 : num); //convert to a string\r\n\r\n        //remove the sign\r\n        if(num.startsWith('-')) {\r\n            this.sign = -1;\r\n            //remove the sign\r\n            num = num.substr(1, num.length);\r\n        }\r\n        else {\r\n            this.sign = 1;\r\n        }\r\n\r\n        if(Scientific.isScientific(num)) {\r\n            this.fromScientific(num);\r\n        }\r\n        else {\r\n            this.convert(num);\r\n        }\r\n        return this;\r\n    }\r\n\r\n    Scientific.prototype = {\r\n        fromScientific: function (num) {\r\n            var parts = String(num).toLowerCase().split('e');\r\n            this.coeff = parts[0];\r\n            this.exponent = parts[1];\r\n\r\n            return this;\r\n        },\r\n        convert: function (num) {\r\n            //get wholes and decimals\r\n            var parts = num.split('.');\r\n            //make zero go away\r\n            var w = parts[0] || '';\r\n            var d = parts[1] || '';\r\n            //convert zero to blank strings\r\n            w = Scientific.removeLeadingZeroes(w);\r\n            d = Scientific.removeTrailingZeroes(d);\r\n            //find the location of the decimal place which is right after the wholes\r\n            var dot_location = w.length;\r\n            //add them together so we can move the dot\r\n            var n = w + d;\r\n            //find the next number\r\n            var zeroes = Scientific.leadingZeroes(n).length;\r\n            //set the exponent\r\n            this.exponent = dot_location - (zeroes + 1);\r\n            //set the coeff but first remove leading zeroes\r\n            var coeff = Scientific.removeLeadingZeroes(n);\r\n            this.coeff = coeff.charAt(0) + '.' + (coeff.substr(1, coeff.length) || '0');\r\n\r\n            return this;\r\n        },\r\n        round: function (num) {\r\n            var n = this.copy();\r\n\r\n            num = Number(num); //cast to number for safety\r\n            //since we know it guaranteed to be in the format {digit}{optional dot}{optional digits}\r\n            //we can round based on this\r\n            if(num === 0)\r\n                n.coeff = n.coeff.charAt(0);\r\n            else {\r\n                //get up to n-1 digits\r\n                var rounded = this.coeff.substring(0, num + 1);\r\n                //get the next two\r\n                var next_two = this.coeff.substring(num + 1, num + 3);\r\n                //the extra digit\r\n                var ed = next_two.charAt(0);\r\n\r\n                if(next_two.charAt(1) > 4)\r\n                    ed++;\r\n\r\n                n.coeff = rounded + ed;\r\n            }\r\n\r\n            return n;\r\n        },\r\n        copy: function () {\r\n            var n = new Scientific(0);\r\n            n.coeff = this.coeff;\r\n            n.exponent = this.exponent;\r\n            n.sign = this.sign;\r\n            return n;\r\n        },\r\n        toString: function (n) {\r\n            var coeff = typeof n === 'undefined' ? this.coeff : Scientific.round(this.coeff, n);\r\n\r\n            var c;\r\n            if(this.exponent === 0 && Settings.SCIENTIFIC_IGNORE_INTS) {\r\n                c = this.coeff;\r\n            }\r\n            else {\r\n                c = coeff + 'e' + this.exponent;\r\n            }\r\n            return (this.sign === -1 ? '-' : '') + c;\r\n        }\r\n    };\r\n\r\n    Scientific.isScientific = function (num) {\r\n        return /\\d+\\.?\\d*e[\\+\\-]*\\d+/i.test(num);\r\n    };\r\n    Scientific.leadingZeroes = function (num) {\r\n        var match = num.match(/^(0*).*$/);\r\n        return match ? match[1] : '';\r\n    };\r\n    Scientific.removeLeadingZeroes = function (num) {\r\n        var match = num.match(/^0*(.*)$/);\r\n        return match ? match[1] : '';\r\n    };\r\n\r\n    Scientific.removeTrailingZeroes = function (num) {\r\n        var match = num.match(/0*$/);\r\n        return match ? num.substring(0, num.length - match[0].length) : '';\r\n    };\r\n    Scientific.round = function (c, n) {\r\n        var coeff = nround(c, n);\r\n        var m = String(coeff).split('.').pop();\r\n        var d = n - m.length;\r\n        //if we're asking for more significant figures\r\n        if(d > 0) {\r\n            coeff = coeff + (new Array(d + 1).join(0));\r\n        }\r\n        return coeff;\r\n    };\r\n\r\n//Scientific ===================================================================\r\n    /*\r\n     * Javascript has the toExponential method but this allows you to work with string and therefore any number of digits of your choosing\r\n     * For example Scientific('464589498449496467924197545625247695464569568959124568489548454');\r\n     */\r\n\r\n    function Scientific(num) {\r\n        if(!(this instanceof Scientific))\r\n            return new Scientific(num);\r\n\r\n        num = String(typeof num === 'undefined' ? 0 : num); //convert to a string\r\n\r\n        //remove the sign\r\n        if(num.startsWith('-')) {\r\n            this.sign = -1;\r\n            //remove the sign\r\n            num = num.substr(1, num.length);\r\n        }\r\n        else {\r\n            this.sign = 1;\r\n        }\r\n\r\n        if(Scientific.isScientific(num)) {\r\n            this.fromScientific(num);\r\n        }\r\n        else {\r\n            this.convert(num);\r\n        }\r\n        return this;\r\n    }\r\n\r\n    Scientific.prototype = {\r\n        fromScientific: function (num) {\r\n            var parts = String(num).toLowerCase().split('e');\r\n            this.coeff = parts[0];\r\n            this.exponent = parts[1];\r\n\r\n            return this;\r\n        },\r\n        convert: function (num) {\r\n            //get wholes and decimals\r\n            var parts = num.split('.');\r\n            //make zero go away\r\n            var w = parts[0] || '';\r\n            var d = parts[1] || '';\r\n            //convert zero to blank strings\r\n            w = Scientific.removeLeadingZeroes(w);\r\n            d = Scientific.removeTrailingZeroes(d);\r\n            //find the location of the decimal place which is right after the wholes\r\n            var dot_location = w.length;\r\n            //add them together so we can move the dot\r\n            var n = w + d;\r\n            //find the next number\r\n            var zeroes = Scientific.leadingZeroes(n).length;\r\n            //set the exponent\r\n            this.exponent = dot_location - (zeroes + 1);\r\n            //set the coeff but first remove leading zeroes\r\n            var coeff = Scientific.removeLeadingZeroes(n);\r\n            this.coeff = coeff.charAt(0) + '.' + (coeff.substr(1, coeff.length) || '0');\r\n\r\n            //the coeff decimal places\r\n            var dec = this.coeff.split('.')[1] || ''; //if it's undefined or zero it's going to blank\r\n\r\n            this.decp = dec === '0' ? 0 : dec.length;\r\n            //decimals\r\n            this.dec = d;\r\n            //wholes\r\n            this.wholes = w;\r\n\r\n            return this;\r\n        },\r\n        round: function (num) {\r\n            var n = this.copy();\r\n\r\n            num = Number(num); //cast to number for safety\r\n            //since we know it guaranteed to be in the format {digit}{optional dot}{optional digits}\r\n            //we can round based on this\r\n            if(num === 0)\r\n                n.coeff = n.coeff.charAt(0);\r\n            else {\r\n                //get up to n-1 digits\r\n                var rounded = this.coeff.substring(0, num + 1);\r\n                //get the next two\r\n                var next_two = this.coeff.substring(num + 1, num + 3);\r\n                //the extra digit\r\n                var ed = next_two.charAt(0);\r\n\r\n                if(next_two.charAt(1) > 4)\r\n                    ed++;\r\n\r\n                n.coeff = rounded + ed;\r\n            }\r\n\r\n            return n;\r\n        },\r\n        copy: function () {\r\n            var n = new Scientific(0);\r\n            n.coeff = this.coeff;\r\n            n.exponent = this.exponent;\r\n            n.sign = this.sign;\r\n            return n;\r\n        },\r\n        toString: function (n) {\r\n            var retval;\r\n\r\n            if(Settings.SCIENTIFIC_IGNORE_ZERO_EXPONENTS && this.exponent === 0 && this.decp < n) {\r\n                if(this.decp === 0)\r\n                    retval = this.wholes;\r\n                else\r\n                    retval = this.coeff;\r\n            }\r\n            else {\r\n                var coeff = typeof n === 'undefined' ? this.coeff : Scientific.round(this.coeff, Math.min(n, this.decp || 1));\r\n                retval = this.exponent === 0 ? coeff : coeff + 'e' + this.exponent;\r\n            }\r\n\r\n            return (this.sign === -1 ? '-' : '') + retval;\r\n        }\r\n    };\r\n\r\n    Scientific.isScientific = function (num) {\r\n        return /\\d+\\.?\\d*e[\\+\\-]*\\d+/i.test(num);\r\n    };\r\n    Scientific.leadingZeroes = function (num) {\r\n        var match = num.match(/^(0*).*$/);\r\n        return match ? match[1] : '';\r\n    };\r\n    Scientific.removeLeadingZeroes = function (num) {\r\n        var match = num.match(/^0*(.*)$/);\r\n        return match ? match[1] : '';\r\n    };\r\n\r\n    Scientific.removeTrailingZeroes = function (num) {\r\n        var match = num.match(/0*$/);\r\n        return match ? num.substring(0, num.length - match[0].length) : '';\r\n    };\r\n\r\n\r\n//Frac =========================================================================\r\n    function Frac(n) {\r\n        if(n instanceof Frac)\r\n            return n;\r\n        if(n === undefined)\r\n            return this;\r\n        try {\r\n            if(isInt(n)) {\r\n                try {\r\n                    this.num = bigInt(n);\r\n                    this.den = bigInt(1);\r\n                }\r\n                catch(e) {\r\n                    return Frac.simple(n);\r\n                }\r\n            }\r\n            else {\r\n                var frac = n instanceof bigDec ? Fraction.quickConversion(n) : Fraction.convert(n);\r\n                this.num = new bigInt(frac[0]);\r\n                this.den = new bigInt(frac[1]);\r\n            }\r\n        }\r\n        catch(e) {\r\n            return Frac.simple(n);\r\n        }\r\n\r\n    }\r\n    //safe to use with negative numbers or other types\r\n    Frac.create = function (n) {\r\n        if(n instanceof Frac)\r\n            return n;\r\n        n = n.toString();\r\n        var is_neg = n.charAt(0) === '-'; //check if it's negative\r\n        if(is_neg)\r\n            n = n.substr(1, n.length - 1); //remove the sign\r\n        var frac = new Frac(n);\r\n        //put the sign back\r\n        if(is_neg)\r\n            frac.negate();\r\n        return frac;\r\n    };\r\n    Frac.isFrac = function (o) {\r\n        return (o instanceof Frac);\r\n    };\r\n    Frac.quick = function (n, d) {\r\n        var frac = new Frac();\r\n        frac.num = new bigInt(n);\r\n        frac.den = new bigInt(d);\r\n        return frac;\r\n    };\r\n    Frac.simple = function (n) {\r\n        var nstr = String(scientificToDecimal(n)),\r\n                m_dc = nstr.split('.'),\r\n                num = m_dc.join(''),\r\n                den = 1,\r\n                l = (m_dc[1] || '').length;\r\n        for(var i = 0; i < l; i++)\r\n            den += '0';\r\n        var frac = Frac.quick(num, den);\r\n        return frac.simplify();\r\n    };\r\n    Frac.prototype = {\r\n        multiply: function (m) {\r\n            if(this.isOne()) {\r\n                return m.clone();\r\n            }\r\n            if(m.isOne()) {\r\n                return this.clone();\r\n            }\r\n\r\n            var c = this.clone();\r\n            c.num = c.num.multiply(m.num);\r\n            c.den = c.den.multiply(m.den);\r\n\r\n            return c.simplify();\r\n        },\r\n        divide: function (m) {\r\n            if(m.equals(0))\r\n                throw new DivisionByZero('Division by zero not allowed!');\r\n            return this.clone().multiply(m.clone().invert()).simplify();\r\n        },\r\n        subtract: function (m) {\r\n            return this.clone().add(m.clone().neg());\r\n        },\r\n        neg: function () {\r\n            this.num = this.num.multiply(-1);\r\n            return this;\r\n        },\r\n        add: function (m) {\r\n            var n1 = this.den, n2 = m.den, c = this.clone();\r\n            var a = c.num, b = m.num;\r\n            if(n1.equals(n2)) {\r\n                c.num = a.add(b);\r\n            }\r\n            else {\r\n                c.num = a.multiply(n2).add(b.multiply(n1));\r\n                c.den = n1.multiply(n2);\r\n            }\r\n\r\n            return c.simplify();\r\n        },\r\n        mod: function (m) {\r\n            var a = this.clone(),\r\n                    b = m.clone();\r\n            //make their denominators even and return the mod of their numerators\r\n            a.num = a.num.multiply(b.den);\r\n            a.den = a.den.multiply(b.den);\r\n            b.num = b.num.multiply(this.den);\r\n            b.den = b.den.multiply(this.den);\r\n            a.num = a.num.mod(b.num);\r\n            return a.simplify();\r\n        },\r\n        simplify: function () {\r\n            var gcd = bigInt.gcd(this.num, this.den);\r\n\r\n            this.num = this.num.divide(gcd);\r\n            this.den = this.den.divide(gcd);\r\n            return this;\r\n        },\r\n        clone: function () {\r\n            var m = new Frac();\r\n            m.num = new bigInt(this.num);\r\n            m.den = new bigInt(this.den);\r\n            return m;\r\n        },\r\n        decimal: function (prec) {\r\n            var sign = this.num.isNegative() ? '-' : '';\r\n            if(this.num.equals(this.den)) {\r\n                return '1';\r\n            }\r\n            //go plus one for rounding\r\n            prec = prec || Settings.PRECISION;\r\n            prec++;\r\n            var narr = [],\r\n                    n = this.num.abs(),\r\n                    d = this.den;\r\n            for(var i = 0; i < prec; i++) {\r\n                var w = n.divide(d), //divide out whole\r\n                        r = n.subtract(w.multiply(d)); //get remainder\r\n\r\n                narr.push(w);\r\n                if(r.equals(0))\r\n                    break;\r\n                n = r.times(10); //shift one dec place\r\n            }\r\n            var whole = narr.shift();\r\n            if(narr.length === 0) {\r\n                return sign + whole.toString();\r\n            }\r\n\r\n            if(i === prec) {\r\n                var lt = [];\r\n                //get the last two so we can round it\r\n                for(var i = 0; i < 2; i++)\r\n                    lt.unshift(narr.pop());\r\n                //put the last digit back by rounding the last two\r\n                narr.push(Math.round(lt.join('.')));\r\n            }\r\n\r\n            var dec = whole.toString() + '.' + narr.join('');\r\n            return sign + dec;\r\n        },\r\n        toDecimal: function (prec) {\r\n            prec = prec || Settings.PRECISION;\r\n            if(prec) {\r\n                return this.decimal(prec);\r\n            }\r\n            else\r\n                return this.num / this.den;\r\n        },\r\n        qcompare: function (n) {\r\n            return [this.num.multiply(n.den), n.num.multiply(this.den)];\r\n        },\r\n        equals: function (n) {\r\n            if(!isNaN(n))\r\n                n = new Frac(n);\r\n            var q = this.qcompare(n);\r\n\r\n            return q[0].equals(q[1]);\r\n        },\r\n        absEquals: function (n) {\r\n            if(!isNaN(n))\r\n                n = new Frac(n);\r\n            var q = this.qcompare(n);\r\n\r\n            return q[0].abs().equals(q[1]);\r\n        },\r\n        //lazy check to be fixed. Sufficient for now but will cause future problems\r\n        greaterThan: function (n) {\r\n            if(!isNaN(n))\r\n                n = new Frac(n);\r\n            var q = this.qcompare(n);\r\n\r\n            return q[0].gt(q[1]);\r\n        },\r\n        gte: function (n) {\r\n            return this.greaterThan(n) || this.equals(n);\r\n        },\r\n        lte: function (n) {\r\n            return this.lessThan(n) || this.equals(n);\r\n        },\r\n        lessThan: function (n) {\r\n            if(!isNaN(n))\r\n                n = new Frac(n);\r\n            var q = this.qcompare(n);\r\n\r\n            return q[0].lt(q[1]);\r\n        },\r\n        isInteger: function () {\r\n            return this.den.equals(1);\r\n        },\r\n        negate: function () {\r\n            this.num = this.num.multiply(-1);\r\n            return this;\r\n        },\r\n        invert: function () {\r\n            var t = this.den;\r\n            //why invert 0/1? It'll become 1/0 and that's a lie.\r\n            if(!this.num.equals(0)) {\r\n                var isnegative = this.num.isNegative();\r\n                this.den = this.num.abs();\r\n                this.num = t;\r\n                if(isnegative)\r\n                    this.num = this.num.multiply(-1);\r\n            }\r\n\r\n            return this;\r\n        },\r\n        isOne: function () {\r\n            return this.num.equals(1) && this.den.equals(1);\r\n        },\r\n        sign: function () {\r\n            return this.num.isNegative() ? -1 : 1;\r\n        },\r\n        abs: function () {\r\n            this.num = this.num.abs();\r\n            return this;\r\n        },\r\n        gcd: function (f) {\r\n            return Frac.quick(bigInt.gcd(f.num, this.num), bigInt.lcm(f.den, this.den));\r\n        },\r\n        toString: function () {\r\n            return !this.den.equals(1) ? this.num.toString() + '/' + this.den.toString() : this.num.toString();\r\n        },\r\n        valueOf: function () {\r\n//            if(this.num == 24) throw new Error(999)\r\n            if(Settings.USE_BIG)\r\n                return new bigDec(this.num.toString()).div(new bigDec(this.den.toString()));\r\n            return this.num / this.den;\r\n        },\r\n        isNegative: function () {\r\n            return this.toDecimal() < 0;\r\n        }\r\n    };\r\n\r\n//Symbol =======================================================================\r\n    /**\r\n     * All symbols e.g. x, y, z, etc or functions are wrapped in this class. All symbols have a multiplier and a group.\r\n     * All symbols except for \"numbers (group N)\" have a power.\r\n     * @class Primary data type for the Parser.\r\n     * @param {String} obj\r\n     * @returns {Symbol}\r\n     */\r\n    function Symbol(obj) {\r\n        var isInfinity = obj === 'Infinity';\r\n        // This enables the class to be instantiated without the new operator\r\n        if(!(this instanceof Symbol)) {\r\n            return new Symbol(obj);\r\n        }\r\n        // Convert big numbers to a string\r\n        if(obj instanceof bigDec) {\r\n            obj = obj.toString();\r\n        }\r\n        //define numeric symbols\r\n        if(/^(\\-?\\+?\\d+)\\.?\\d*e?\\-?\\+?\\d*/i.test(obj) || obj instanceof bigDec) {\r\n            this.group = N;\r\n            this.value = CONST_HASH;\r\n            this.multiplier = new Frac(obj);\r\n        }\r\n        //define symbolic symbols\r\n        else {\r\n            this.group = S;\r\n            validateName(obj);\r\n            this.value = obj;\r\n            this.multiplier = new Frac(1);\r\n            this.imaginary = obj === Settings.IMAGINARY;\r\n            this.isInfinity = isInfinity;\r\n        }\r\n\r\n        //As of 6.0.0 we switched to infinite precision so all objects have a power\r\n        //Although this is still redundant in constants, it simplifies the logic in\r\n        //other parts so we'll keep it\r\n        this.power = new Frac(1);\r\n\r\n        // Added to silence the strict warning.\r\n        return this;\r\n    }\r\n    /**\r\n     * Returns vanilla imaginary symbol\r\n     * @returns {Symbol}\r\n     */\r\n    Symbol.imaginary = function () {\r\n        var s = new Symbol(Settings.IMAGINARY);\r\n        s.imaginary = true;\r\n        return s;\r\n    };\r\n    /**\r\n     * Return nerdamer's representation of Infinity\r\n     * @param {int} negative -1 to return negative infinity\r\n     * @returns {Symbol}\r\n     */\r\n    Symbol.infinity = function (negative) {\r\n        var v = new Symbol('Infinity');\r\n        if(negative === -1)\r\n            v.negate();\r\n        return v;\r\n    };\r\n    Symbol.shell = function (group, value) {\r\n        var symbol = new Symbol(value);\r\n        symbol.group = group;\r\n        symbol.symbols = {};\r\n        symbol.length = 0;\r\n        return symbol;\r\n    };\r\n    //sqrt(x) -> x^(1/2)\r\n    Symbol.unwrapSQRT = function (symbol, all) {\r\n        var p = symbol.power;\r\n        if(symbol.fname === SQRT && (symbol.isLinear() || all)) {\r\n            var t = symbol.args[0].clone();\r\n            t.power = t.power.multiply(new Frac(1 / 2));\r\n            t.multiplier = t.multiplier.multiply(symbol.multiplier);\r\n            symbol = t;\r\n            if(all)\r\n                symbol.power = p.multiply(new Frac(1 / 2));\r\n        }\r\n\r\n        return symbol;\r\n    };\r\n    Symbol.hyp = function (a, b) {\r\n        a = a || new Symbol(0);\r\n        b = b || new Symbol(0);\r\n        return _.sqrt(_.add(_.pow(a.clone(), new Symbol(2)), _.pow(b.clone(), new Symbol(2))));\r\n    };\r\n    //converts to polar form array\r\n    Symbol.toPolarFormArray = function (symbol) {\r\n        var re, im, r, theta;\r\n        re = symbol.realpart();\r\n        im = symbol.imagpart();\r\n        r = Symbol.hyp(re, im);\r\n        theta = re.equals(0) ? _.parse('pi/2') : _.trig.atan(_.divide(im, re));\r\n        return [r, theta];\r\n    };\r\n    //removes parentheses\r\n    Symbol.unwrapPARENS = function (symbol) {\r\n        if(symbol.fname === '') {\r\n            var r = symbol.args[0];\r\n            r.power = r.power.multiply(symbol.power);\r\n            r.multiplier = r.multiplier.multiply(symbol.multiplier);\r\n            if(symbol.fname === '')\r\n                return Symbol.unwrapPARENS(r);\r\n            return r;\r\n        }\r\n        return symbol;\r\n    };\r\n    //quickly creates a Symbol\r\n    Symbol.create = function (value, power) {\r\n        power = power === undefined ? 1 : power;\r\n        return _.parse('(' + value + ')^(' + power + ')');\r\n    };\r\n    Symbol.prototype = {\r\n        /**\r\n         * Gets nth root accounting for rounding errors\r\n         * @param {Number} n\r\n         * @return {Number}\r\n         */\r\n        getNth: function (n) {\r\n            // First calculate the root\r\n            var root = evaluate(_.pow(_.parse(this.multiplier), _.parse(n).invert()));\r\n            // Round of any errors\r\n            var rounded = _.parse(nround(root));\r\n            // Reverse the root\r\n            var e = evaluate(_.pow(rounded, _.parse(n)));\r\n            // If the rounded root equals the original number then we're good \r\n            if(e.equals(_.parse(this.multiplier))) {\r\n                return rounded;\r\n            }\r\n            // Otherwise return the unrounded version\r\n            return root;\r\n        },\r\n        /**\r\n         * Checks if symbol is to the nth power\r\n         * @returns {Boolean}\r\n         */\r\n        isToNth: function (n) {\r\n            // Start by check in the multiplier for squareness\r\n            // First get the root but round it because currently we still depend \r\n            var root = this.getNth(n);\r\n            var nthMultiplier = isInt(root);\r\n            var nthPower;\r\n\r\n            if(this.group === CB) {\r\n                // Start by assuming that all will be square.\r\n                nthPower = true;\r\n                // All it takes is for one of the symbols to not have an even power\r\n                // e.g. x^n1*y^n2 requires that both n1 and n2 are even\r\n                this.each(function (x) {\r\n                    var isNth = x.isToNth(n);\r\n\r\n                    if(!isNth) {\r\n                        nthPower = false;\r\n                    }\r\n                });\r\n            }\r\n            else {\r\n                // Check if the power is divisible by n if it's not a number.\r\n                nthPower = this.group === N ? true : isInt(_.divide(_.parse(this.power), _.parse(n)));\r\n            }\r\n\r\n            return nthMultiplier && nthPower;\r\n        },\r\n        /**\r\n         * Checks if a symbol is square\r\n         * @return {Boolean}\r\n         */\r\n        isSquare: function () {\r\n            return this.isToNth(2);\r\n        },\r\n        /**\r\n         * Checks if a symbol is cube\r\n         * @return {Boolean}\r\n         */\r\n        isCube: function () {\r\n            return this.isToNth(3);\r\n        },\r\n        /**\r\n         * Checks if a symbol is a bare variable\r\n         * @return {Boolean}\r\n         */\r\n        isSimple: function () {\r\n            return this.power.equals(1) && this.multiplier.equals(1);\r\n        },\r\n        /**\r\n         * Simplifies the power of the symbol\r\n         * @returns {Symbol} a clone of the symbol\r\n         */\r\n        powSimp: function () {\r\n            if(this.group === CB) {\r\n                var powers = [],\r\n                        sign = this.multiplier.sign();\r\n                this.each(function (x) {\r\n                    var p = x.power;\r\n                    //why waste time if I can't do anything anyway\r\n                    if(isSymbol(p) || p.equals(1))\r\n                        return this.clone();\r\n                    powers.push(p);\r\n                });\r\n                var min = new Frac(arrayMin(powers));\r\n\r\n                //handle the coefficient\r\n                //handle the multiplier\r\n                var sign = this.multiplier.sign(),\r\n                        m = this.multiplier.clone().abs(),\r\n                        mfactors = Math2.ifactor(m);\r\n                //if we have a multiplier of 6750 and a min of 2 then the factors are 5^3*5^3*2\r\n                //we can then reduce it to 2*3*5*(15)^2\r\n                var out_ = new Frac(1);\r\n                var in_ = new Frac(1);\r\n\r\n                for(var x in mfactors) {\r\n                    var n = new Frac(mfactors[x]);\r\n                    if(!n.lessThan(min)) {\r\n                        n = n.divide(min).subtract(new Frac(1));\r\n                        in_ = in_.multiply(new Frac(x)); //move the factor inside the bracket\r\n                    }\r\n\r\n                    out_ = out_.multiply(_.parse(inBrackets(x) + '^' + inBrackets(n)).multiplier);\r\n                }\r\n                var t = new Symbol(in_);\r\n                this.each(function (x) {\r\n                    x = x.clone();\r\n                    x.power = x.power.divide(min);\r\n                    t = _.multiply(t, x);\r\n                });\r\n\r\n                var xt = _.symfunction(PARENTHESIS, [t]);\r\n                xt.power = min;\r\n                xt.multiplier = sign < 0 ? out_.negate() : out_;\r\n\r\n                return xt;\r\n            }\r\n            return this.clone();\r\n        },\r\n        /**\r\n         * Checks to see if two functions are of equal value\r\n         * @param {Symbol} symbol\r\n         */\r\n        equals: function (symbol) {\r\n            if(!isSymbol(symbol))\r\n                symbol = new Symbol(symbol);\r\n            return this.value === symbol.value && this.power.equals(symbol.power)\r\n                    && this.multiplier.equals(symbol.multiplier)\r\n                    && this.group === symbol.group;\r\n        },\r\n        abs: function () {\r\n            var e = this.clone();\r\n            e.multiplier.abs();\r\n            return e;\r\n        },\r\n        // Greater than\r\n        gt: function (symbol) {\r\n            if(!isSymbol(symbol))\r\n                symbol = new Symbol(symbol);\r\n            return this.isConstant() && symbol.isConstant() && this.multiplier.greaterThan(symbol.multiplier);\r\n        },\r\n        // Greater than\r\n        gte: function (symbol) {\r\n            if(!isSymbol(symbol))\r\n                symbol = new Symbol(symbol);\r\n            return this.equals(symbol) ||\r\n                    this.isConstant() && symbol.isConstant() && this.multiplier.greaterThan(symbol.multiplier);\r\n        },\r\n        // Less than\r\n        lt: function (symbol) {\r\n            if(!isSymbol(symbol))\r\n                symbol = new Symbol(symbol);\r\n            return this.isConstant() && symbol.isConstant() && this.multiplier.lessThan(symbol.multiplier);\r\n        },\r\n        // Less than\r\n        lte: function (symbol) {\r\n            if(!isSymbol(symbol))\r\n                symbol = new Symbol(symbol);\r\n            return this.equals(symbol) ||\r\n                    this.isConstant() && symbol.isConstant() && this.multiplier.lessThan(symbol.multiplier);\r\n        },\r\n        /**\r\n         * Because nerdamer doesn't group symbols by polynomials but\r\n         * rather a custom grouping method, this has to be\r\n         * reinserted in order to make use of most algorithms. This function\r\n         * checks if the symbol meets the criteria of a polynomial.\r\n         * @param {bool} multivariate\r\n         * @returns {boolean}\r\n         */\r\n        isPoly: function (multivariate) {\r\n            var g = this.group,\r\n                    p = this.power;\r\n            //the power must be a integer so fail if it's not\r\n            if(!isInt(p) || p < 0)\r\n                return false;\r\n            //constants and first orders\r\n            if(g === N || g === S || this.isConstant(true))\r\n                return true;\r\n            var vars = variables(this);\r\n            if(g === CB && vars.length === 1) {\r\n                //the variable is assumed the only one that was found\r\n                var v = vars[0];\r\n                //if no variable then guess what!?!? We're done!!! We have a polynomial.\r\n                if(!v)\r\n                    return true;\r\n                for(var x in this.symbols) {\r\n                    var sym = this.symbols[x];\r\n                    //sqrt(x)\r\n                    if(sym.group === FN && !sym.args[0].isConstant())\r\n                        return false;\r\n                    if(!sym.contains(v) && !sym.isConstant(true))\r\n                        return false;\r\n                }\r\n                return true;\r\n            }\r\n            //PL groups. These only fail if a power is not an int\r\n            //this should handle cases such as x^2*t\r\n            if(this.isComposite() || g === CB && multivariate) {\r\n                //fail if we're not checking for multivariate polynomials\r\n                if(!multivariate && vars.length > 1)\r\n                    return false;\r\n                //loop though the symbols and check if they qualify\r\n                for(var x in this.symbols) {\r\n                    //we've already the symbols if we're not checking for multivariates at this point\r\n                    //so we check the sub-symbols\r\n                    if(!this.symbols[x].isPoly(multivariate))\r\n                        return false;\r\n                }\r\n                return true;\r\n            }\r\n            else\r\n                return false;\r\n\r\n            /*\r\n             //all tests must have passed so we must be dealing with a polynomial\r\n             return true;\r\n             */\r\n        },\r\n        //removes the requested variable from the symbol and returns the remainder\r\n        stripVar: function (x, exclude_x) {\r\n            var retval;\r\n            if((this.group === PL || this.group === S) && this.value === x)\r\n                retval = new Symbol(exclude_x ? 0 : this.multiplier);\r\n            else if(this.group === CB && this.isLinear()) {\r\n                retval = new Symbol(1);\r\n                this.each(function (s) {\r\n                    if(!s.contains(x, true))\r\n                        retval = _.multiply(retval, s.clone());\r\n                });\r\n                retval.multiplier = retval.multiplier.multiply(this.multiplier);\r\n            }\r\n            else if(this.group === CP && !this.isLinear()) {\r\n                retval = new Symbol(this.multiplier);\r\n            }\r\n            else if(this.group === CP && this.isLinear()) {\r\n                retval = new Symbol(0);\r\n                this.each(function (s) {\r\n                    if(!s.contains(x)) {\r\n                        var t = s.clone();\r\n                        t.multiplier = t.multiplier.multiply(this.multiplier);\r\n                        retval = _.add(retval, t);\r\n                    }\r\n                });\r\n                //BIG TODO!!! It doesn't make much sense\r\n                if(retval.equals(0))\r\n                    retval = new Symbol(this.multiplier);\r\n            }\r\n            else if(this.group === EX && this.power.contains(x, true)) {\r\n                retval = new Symbol(this.multiplier);\r\n            }\r\n            else if(this.group === FN && this.contains(x)) {\r\n                retval = new Symbol(this.multiplier);\r\n            }\r\n            else\r\n                //wth? This should technically be the multiplier.\r\n                //Unfortunately this method wasn't very well thought out :`(.\r\n                //should be: retval = new Symbol(this.multiplier);\r\n                //use: ((1+x^2)*sqrt(-1+x^2))^(-1) for correction.\r\n                //this will break a bunch of unit tests so be ready to for the long haul\r\n                retval = this.clone();\r\n\r\n\r\n            return retval;\r\n        },\r\n        //returns symbol in array form with x as base e.g. a*x^2+b*x+c = [c, b, a].\r\n        toArray: function (v, arr) {\r\n            arr = arr || {\r\n                arr: [],\r\n                add: function (x, idx) {\r\n                    var e = this.arr[idx];\r\n                    this.arr[idx] = e ? _.add(e, x) : x;\r\n                }\r\n            };\r\n            var g = this.group;\r\n\r\n            if(g === S && this.contains(v)) {\r\n                arr.add(new Symbol(this.multiplier), this.power);\r\n            }\r\n            else if(g === CB) {\r\n                var a = this.stripVar(v),\r\n                        x = _.divide(this.clone(), a.clone());\r\n                var p = x.isConstant() ? 0 : x.power;\r\n                arr.add(a, p);\r\n            }\r\n            else if(g === PL && this.value === v) {\r\n                this.each(function (x, p) {\r\n                    arr.add(x.stripVar(v), p);\r\n                });\r\n            }\r\n            else if(g === CP) {\r\n                //the logic: they'll be broken into symbols so e.g. (x^2+x)+1 or (a*x^2+b*x+c)\r\n                //each case is handled above\r\n                this.each(function (x) {\r\n                    x.toArray(v, arr);\r\n                });\r\n            }\r\n            else if(this.contains(v)) {\r\n                throw new NerdamerTypeError('Cannot convert to array! Exiting');\r\n            }\r\n            else {\r\n                arr.add(this.clone(), 0); //it's just a constant wrt to v\r\n            }\r\n            //fill the holes\r\n            arr = arr.arr; //keep only the array since we don't need the object anymore\r\n            for(var i = 0; i < arr.length; i++)\r\n                if(!arr[i])\r\n                    arr[i] = new Symbol(0);\r\n            return arr;\r\n        },\r\n        //checks to see if a symbol contans a function\r\n        hasFunc: function (v) {\r\n            var fn_group = this.group === FN || this.group === EX;\r\n            if(fn_group && !v || fn_group && this.contains(v))\r\n                return true;\r\n            if(this.symbols) {\r\n                for(var x in this.symbols) {\r\n                    if(this.symbols[x].hasFunc(v))\r\n                        return true;\r\n                }\r\n            }\r\n            return false;\r\n        },\r\n        sub: function (a, b) {\r\n            a = !isSymbol(a) ? _.parse(a) : a.clone();\r\n            b = !isSymbol(b) ? _.parse(b) : b.clone();\r\n            if(a.group === N || a.group === P)\r\n                err('Cannot substitute a number. Must be a variable');\r\n            var same_pow = false,\r\n                    a_is_unit_multiplier = a.multiplier.equals(1),\r\n                    m = this.multiplier.clone(),\r\n                    retval;\r\n            /*\r\n             * In order to make the substitution the bases have to first match take\r\n             * (x+1)^x -> (x+1)=y || x^2 -> x=y^6\r\n             * In both cases the first condition is that the bases match so we begin there\r\n             * Either both are PL or both are not PL but we cannot have PL and a non-PL group match\r\n             */\r\n            if(this.value === a.value && (this.group !== PL && a.group !== PL || this.group === PL && a.group === PL)) {\r\n                //we cleared the first hurdle but a subsitution may not be possible just yet\r\n                if(a_is_unit_multiplier || a.multiplier.equals(this.multiplier)) {\r\n                    if(a.isLinear()) {\r\n                        retval = b;\r\n                    }\r\n                    else if(a.power.equals(this.power)) {\r\n                        retval = b;\r\n                        same_pow = true;\r\n                    }\r\n                    if(a.multiplier.equals(this.multiplier))\r\n                        m = new Frac(1);\r\n                }\r\n            }\r\n            //the next thing is to handle CB\r\n            else if(this.group === CB || this.previousGroup === CB) {\r\n                retval = new Symbol(1);\r\n                this.each(function (x) {\r\n                    var subbed = _.parse(x.sub(a, b)); //parse it again for safety\r\n                    retval = _.multiply(retval, subbed);\r\n\r\n                });\r\n            }\r\n            else if(this.isComposite()) {\r\n                var symbol = this.clone();\r\n\r\n                if(a.isComposite() && symbol.isComposite() && symbol.isLinear() && a.isLinear()) {\r\n                    var find = function (stack, needle) {\r\n                        for(var x in stack.symbols) {\r\n                            var sym = stack.symbols[x];\r\n                            //if the symbol equals the needle or it's within the sub-symbols we're done\r\n                            if(sym.isComposite() && find(sym, needle) || sym.equals(needle))\r\n                                return true;\r\n                        }\r\n                        return false;\r\n                    };\r\n                    //go fish\r\n                    for(var x in a.symbols) {\r\n                        if(!find(symbol, a.symbols[x]))\r\n                            return symbol.clone();\r\n                    }\r\n                    retval = _.add(_.subtract(symbol.clone(), a), b);\r\n                }\r\n                else {\r\n                    retval = new Symbol(0);\r\n                    symbol.each(function (x) {\r\n                        retval = _.add(retval, x.sub(a, b));\r\n                    });\r\n                }\r\n            }\r\n            else if(this.group === EX) {\r\n                // the parsed value could be a function so parse and sub\r\n                retval = _.parse(this.value).sub(a, b);\r\n            }\r\n            else if(this.group === FN) {\r\n                var nargs = [];\r\n                for(var i = 0; i < this.args.length; i++) {\r\n                    var arg = this.args[i];\r\n                    if(!isSymbol(arg))\r\n                        arg = _.parse(arg);\r\n                    nargs.push(arg.sub(a, b));\r\n                }\r\n                retval = _.symfunction(this.fname, nargs);\r\n            }\r\n            //if we did manage a substitution\r\n            if(retval) {\r\n                if(!same_pow) {\r\n                    //substitute the power\r\n                    var p = this.group === EX ? this.power.sub(a, b) : _.parse(this.power);\r\n                    //now raise the symbol to that power\r\n                    retval = _.pow(retval, p);\r\n                }\r\n\r\n                //transfer the multiplier\r\n                retval.multiplier = retval.multiplier.multiply(m);\r\n\r\n                //done\r\n                return retval;\r\n            }\r\n            //if all else fails\r\n            return this.clone();\r\n        },\r\n        isMonomial: function () {\r\n            if(this.group === S)\r\n                return true;\r\n            if(this.group === CB) {\r\n                for(var x in this.symbols)\r\n                    if(this.symbols[x].group !== S)\r\n                        return false;\r\n            }\r\n            else\r\n                return false;\r\n            return true;\r\n        },\r\n        isPi: function () {\r\n            return this.group === S && this.value === 'pi';\r\n        },\r\n        sign: function () {\r\n            return this.multiplier.sign();\r\n        },\r\n        isE: function () {\r\n            return this.value === 'e';\r\n        },\r\n        isSQRT: function () {\r\n            return this.fname === SQRT;\r\n        },\r\n        isConstant: function (check_all, check_symbols) {\r\n            if(check_symbols && this.group === CB) {\r\n                for(var x in this.symbols) {\r\n                    if(this.symbols[x].isConstant(true))\r\n                        return true;\r\n                }\r\n            }\r\n\r\n            if(check_all === 'functions' && this.isComposite()) {\r\n                var isConstant = true;\r\n\r\n                this.each(function (x) {\r\n                    if(!x.isConstant(check_all, check_symbols)) {\r\n                        isConstant = false;\r\n                    }\r\n                }, true);\r\n\r\n                return isConstant;\r\n            }\r\n\r\n            if(check_all === 'all' && (this.isPi() || this.isE())) {\r\n                return true;\r\n            }\r\n\r\n            if(check_all && this.group === FN) {\r\n                for(var i = 0; i < this.args.length; i++) {\r\n                    if(!this.args[i].isConstant(check_all))\r\n                        return false;\r\n                }\r\n                return true;\r\n            }\r\n\r\n            if(check_all)\r\n                return isNumericSymbol(this);\r\n            return this.value === CONST_HASH;\r\n        },\r\n        //the symbols is imaginary if\r\n        //1. n*i\r\n        //2. a+b*i\r\n        //3. a*i\r\n        isImaginary: function () {\r\n            if(this.imaginary)\r\n                return true;\r\n            else if(this.symbols) {\r\n                for(var x in this.symbols)\r\n                    if(this.symbols[x].isImaginary())\r\n                        return true;\r\n            }\r\n            return false;\r\n        },\r\n        /**\r\n         * Returns the real part of a symbol\r\n         * @returns {Symbol}\r\n         */\r\n        realpart: function () {\r\n            if(this.isConstant()) {\r\n                return this.clone();\r\n            }\r\n            else if(this.imaginary)\r\n                return new Symbol(0);\r\n            else if(this.isComposite()) {\r\n                var retval = new Symbol(0);\r\n                this.each(function (x) {\r\n                    retval = _.add(retval, x.realpart());\r\n                });\r\n                return retval;\r\n            }\r\n            else if(this.isImaginary())\r\n                return new Symbol(0);\r\n            return this.clone();\r\n        },\r\n        /*\r\n         * Return imaginary part of a symbol\r\n         * @returns {Symbol}\r\n         */\r\n        imagpart: function () {\r\n            if(this.group === S && this.isImaginary())\r\n                return new Symbol(this.multiplier);\r\n            if(this.isComposite()) {\r\n                var retval = new Symbol(0);\r\n                this.each(function (x) {\r\n                    retval = _.add(retval, x.imagpart());\r\n                });\r\n                return retval;\r\n            }\r\n            if(this.group === CB)\r\n                return this.stripVar(Settings.IMAGINARY);\r\n            return new Symbol(0);\r\n        },\r\n        isInteger: function () {\r\n            return this.isConstant() && this.multiplier.isInteger();\r\n        },\r\n        isLinear: function (wrt) {\r\n            if(wrt) {\r\n                if(this.isConstant())\r\n                    return true;\r\n                if(this.group === S) {\r\n                    if(this.value === wrt)\r\n                        return this.power.equals(1);\r\n                    else\r\n                        return true;\r\n                }\r\n\r\n                if(this.isComposite() && this.power.equals(1)) {\r\n                    for(var x in this.symbols) {\r\n                        if(!this.symbols[x].isLinear(wrt))\r\n                            return false;\r\n                    }\r\n                    return true;\r\n                }\r\n\r\n                if(this.group === CB && this.symbols[wrt])\r\n                    return this.symbols[wrt].isLinear(wrt);\r\n                return false;\r\n            }\r\n            else\r\n                return this.power.equals(1);\r\n        },\r\n        /**\r\n         * Checks to see if a symbol has a function by a specified name or within a specified list\r\n         * @param {String|String[]} names\r\n         * @returns {Boolean}\r\n         */\r\n        containsFunction: function (names) {\r\n            if(typeof names === 'string')\r\n                names = [names];\r\n            if(this.group === FN && names.indexOf(this.fname) !== -1)\r\n                return true;\r\n            if(this.symbols) {\r\n                for(var x in this.symbols) {\r\n                    if(this.symbols[x].containsFunction(names))\r\n                        return true;\r\n                }\r\n            }\r\n            return false;\r\n        },\r\n        multiplyPower: function (p2) {\r\n            //leave out 1\r\n            if(this.group === N && this.multiplier.equals(1))\r\n                return this;\r\n\r\n            var p1 = this.power;\r\n\r\n            if(this.group !== EX && p2.group === N) {\r\n                var p = p2.multiplier;\r\n                if(this.group === N && !p.isInteger()) {\r\n                    this.convert(P);\r\n                }\r\n\r\n                this.power = p1.equals(1) ? p.clone() : p1.multiply(p);\r\n\r\n                if(this.group === P && isInt(this.power)) {\r\n                    //bring it back to an N\r\n                    this.value = Math.pow(this.value, this.power);\r\n                    this.toLinear();\r\n                    this.convert(N);\r\n                }\r\n            }\r\n            else {\r\n                if(this.group !== EX) {\r\n                    p1 = new Symbol(p1);\r\n                    this.convert(EX);\r\n                }\r\n                this.power = _.multiply(p1, p2);\r\n            }\r\n\r\n            return this;\r\n        },\r\n        setPower: function (p, retainSign) {\r\n            //leave out 1\r\n            if(this.group === N && this.multiplier.equals(1)) {\r\n                return this;\r\n            }\r\n            if(this.group === EX && !isSymbol(p)) {\r\n                this.group = this.previousGroup;\r\n                delete this.previousGroup;\r\n                if(this.group === N) {\r\n                    this.multiplier = new Frac(this.value);\r\n                    this.value = CONST_HASH;\r\n                }\r\n                else\r\n                    this.power = p;\r\n            }\r\n            else {\r\n                var isSymbolic = false;\r\n                if(isSymbol(p)) {\r\n                    if(p.group === N) {\r\n                        //p should be the multiplier instead\r\n                        p = p.multiplier;\r\n\r\n                    }\r\n                    else {\r\n                        isSymbolic = true;\r\n                    }\r\n                }\r\n                var group = isSymbolic ? EX : P;\r\n                this.power = p;\r\n                if(this.group === N && group)\r\n                    this.convert(group, retainSign);\r\n            }\r\n\r\n            return this;\r\n        },\r\n        /**\r\n         * Checks to see if symbol is located in the denominator\r\n         * @returns {boolean}\r\n         */\r\n        isInverse: function () {\r\n            if(this.group === EX)\r\n                return (this.power.multiplier.lessThan(0));\r\n            return this.power < 0;\r\n        },\r\n        /**\r\n         * Make a duplicate of a symbol by copying a predefined list of items.\r\n         * The name 'copy' would probably be a more appropriate name.\r\n         * to a new symbol\r\n         * @param {Symbol} c\r\n         * @returns {Symbol}\r\n         */\r\n        clone: function (c) {\r\n            var clone = c || new Symbol(0),\r\n                    //list of properties excluding power as this may be a symbol and would also need to be a clone.\r\n                    properties = [\r\n                        'value', 'group', 'length', 'previousGroup', 'imaginary', 'fname', 'args', 'isInfinity', 'scientific'],\r\n                    l = properties.length, i;\r\n            if(this.symbols) {\r\n                clone.symbols = {};\r\n                for(var x in this.symbols) {\r\n                    clone.symbols[x] = this.symbols[x].clone();\r\n                }\r\n            }\r\n\r\n            for(i = 0; i < l; i++) {\r\n                if(this[properties[i]] !== undefined) {\r\n                    clone[properties[i]] = this[properties[i]];\r\n                }\r\n            }\r\n\r\n            clone.power = this.power.clone();\r\n            clone.multiplier = this.multiplier.clone();\r\n            //add back the flag to track if this symbol is a conversion symbol\r\n            if(this.isConversion)\r\n                clone.isConversion = this.isConversion;\r\n\r\n            if(this.isUnit)\r\n                clone.isUnit = this.isUnit;\r\n\r\n            return clone;\r\n        },\r\n        /**\r\n         * Converts a symbol multiplier to one.\r\n         * @param {Boolean} keepSign Keep the multiplier as negative if the multiplier is negative and keepSign is true\r\n         * @returns {Symbol}\r\n         */\r\n        toUnitMultiplier: function (keepSign) {\r\n            this.multiplier.num = new bigInt(this.multiplier.num.isNegative() && keepSign ? -1 : 1);\r\n            this.multiplier.den = new bigInt(1);\r\n            return this;\r\n        },\r\n        /**\r\n         * Converts a Symbol's power to one.\r\n         * @returns {Symbol}\r\n         */\r\n        toLinear: function () {\r\n            // Do nothing if it's already linear\r\n            if(this.power.equals(1)) {\r\n                return this;\r\n            }\r\n            this.setPower(new Frac(1));\r\n            return this;\r\n        },\r\n        /**\r\n         * Iterates over all the sub-symbols. If no sub-symbols exist then it's called on itself\r\n         * @param {Function} fn\r\n         * @@param {Boolean} deep If true it will itterate over the sub-symbols their symbols as well\r\n         */\r\n        each: function (fn, deep) {\r\n            if(!this.symbols) {\r\n                fn.call(this, this, this.value);\r\n            }\r\n            else {\r\n                for(var x in this.symbols) {\r\n                    var sym = this.symbols[x];\r\n                    if(sym.group === PL && deep) {\r\n                        for(var y in sym.symbols) {\r\n                            fn.call(x, sym.symbols[y], y);\r\n                        }\r\n                    }\r\n                    else\r\n                        fn.call(this, sym, x);\r\n                }\r\n            }\r\n        },\r\n        /**\r\n         * A numeric value to be returned for Javascript. It will try to\r\n         * return a number as far a possible but in case of a pure symbolic\r\n         * symbol it will just return its text representation\r\n         * @returns {String|Number}\r\n         */\r\n        valueOf: function () {\r\n            if(this.group === N)\r\n                return this.multiplier.valueOf();\r\n            else if(this.power === 0) {\r\n                return 1;\r\n            }\r\n            else if(this.multiplier === 0) {\r\n                return 0;\r\n            }\r\n            else {\r\n                return text(this, 'decimals');\r\n            }\r\n        },\r\n        /**\r\n         * Checks to see if a symbols has a particular variable within it.\r\n         * Pass in true as second argument to include the power of exponentials\r\n         * which aren't check by default.\r\n         * @example var s = _.parse('x+y+z'); s.contains('y');\r\n         * //returns true\r\n         * @param {any} variable\r\n         * @param {boolean} all\r\n         * @returns {boolean}\r\n         */\r\n        contains: function (variable, all) {\r\n            //contains expects a string\r\n            variable = String(variable);\r\n            var g = this.group;\r\n            if(this.value === variable)\r\n                return true;\r\n            if(this.symbols) {\r\n                for(var x in this.symbols) {\r\n                    if(this.symbols[x].contains(variable, all))\r\n                        return true;\r\n                }\r\n            }\r\n            if(g === FN || this.previousGroup === FN) {\r\n                for(var i = 0; i < this.args.length; i++) {\r\n                    if(this.args[i].contains(variable, all))\r\n                        return true;\r\n                }\r\n            }\r\n\r\n            if(g === EX) {\r\n                //exit only if it does\r\n                if(all && this.power.contains(variable, all)) {\r\n                    return true;\r\n                }\r\n                if(this.value === variable)\r\n                    return true;\r\n\r\n            }\r\n\r\n            return this.value === variable;\r\n        },\r\n        /**\r\n         * Negates a symbols\r\n         * @returns {boolean}\r\n         */\r\n        negate: function () {\r\n            this.multiplier.negate();\r\n            if(this.group === CP || this.group === PL)\r\n                this.distributeMultiplier();\r\n            return this;\r\n        },\r\n        /**\r\n         * Inverts a symbol\r\n         * @param {boolean} power_only\r\n         * @param {boolean} all\r\n         * @returns {boolean}\r\n         */\r\n        invert: function (power_only, all) {\r\n            //invert the multiplier\r\n            if(!power_only)\r\n                this.multiplier = this.multiplier.invert();\r\n            //invert the rest\r\n            if(isSymbol(this.power)) {\r\n                this.power.negate();\r\n            }\r\n            else if(this.group === CB && all) {\r\n                this.each(function (x) {\r\n                    return x.invert();\r\n                });\r\n            }\r\n            else {\r\n                if(this.power && this.group !== N)\r\n                    this.power.negate();\r\n            }\r\n            return this;\r\n        },\r\n        /**\r\n         * Symbols of group CP or PL may have the multiplier being carried by\r\n         * the top level symbol at any given time e.g. 2*(x+y+z). This is\r\n         * convenient in many cases, however in some cases the multiplier needs\r\n         * to be carried individually e.g. 2*x+2*y+2*z.\r\n         * This method distributes the multiplier over the entire symbol\r\n         * @param {boolean} all\r\n         * @returns {Symbol}\r\n         */\r\n        distributeMultiplier: function (all) {\r\n            var is_one = all ? this.power.absEquals(1) : this.power.equals(1);\r\n            if(this.symbols && is_one && this.group !== CB && !this.multiplier.equals(1)) {\r\n                for(var x in this.symbols) {\r\n                    var s = this.symbols[x];\r\n                    s.multiplier = s.multiplier.multiply(this.multiplier);\r\n                    s.distributeMultiplier();\r\n                }\r\n                this.toUnitMultiplier();\r\n            }\r\n\r\n            return this;\r\n        },\r\n        /**\r\n         * This method expands the exponent over the entire symbol just like\r\n         * distributeMultiplier\r\n         * @returns {Symbol}\r\n         */\r\n        distributeExponent: function () {\r\n            if(!this.power.equals(1)) {\r\n                var p = this.power;\r\n                for(var x in this.symbols) {\r\n                    var s = this.symbols[x];\r\n                    if(s.group === EX) {\r\n                        s.power = _.multiply(s.power, new Symbol(p));\r\n                    }\r\n                    else {\r\n                        this.symbols[x].power = this.symbols[x].power.multiply(p);\r\n                    }\r\n                }\r\n                this.toLinear();\r\n            }\r\n            return this;\r\n        },\r\n        /**\r\n         * This method will attempt to up-convert or down-convert one symbol\r\n         * from one group to another. Not all symbols are convertible from one\r\n         * group to another however. In that case the symbol will remain\r\n         * unchanged.\r\n         * @param {int} group\r\n         * @param {string} imaginary\r\n         */\r\n        convert: function (group, imaginary) {\r\n            if(group > FN) {\r\n                //make a clone of this symbol;\r\n                var cp = this.clone();\r\n\r\n                //attach a symbols object and upgrade the group\r\n                this.symbols = {};\r\n\r\n                if(group === CB) {\r\n                    //symbol of group CB hold symbols bound together through multiplication\r\n                    //because of commutativity this multiplier can technically be anywhere within the group\r\n                    //to keep track of it however it's easier to always have the top level carry it\r\n                    cp.toUnitMultiplier();\r\n                }\r\n                else {\r\n                    //reset the symbol\r\n                    this.toUnitMultiplier();\r\n                }\r\n\r\n                if(this.group === FN) {\r\n                    cp.args = this.args;\r\n                    delete this.args;\r\n                    delete this.fname;\r\n                }\r\n\r\n                //the symbol may originate from the symbol i but this property no longer holds true\r\n                //after copying\r\n                if(this.isImgSymbol)\r\n                    delete this.isImgSymbol;\r\n\r\n                this.toLinear();\r\n                //attach a clone of this symbol to the symbols object using its proper key\r\n                this.symbols[cp.keyForGroup(group)] = cp;\r\n                this.group = group;\r\n                //objects by default don't have a length property. However, in order to keep track of the number\r\n                //of sub-symbols we have to impliment our own.\r\n                this.length = 1;\r\n            }\r\n            else if(group === EX) {\r\n                //1^x is just one so check and make sure\r\n                if(!(this.group === N && this.multiplier.equals(1))) {\r\n                    if(this.group !== EX)\r\n                        this.previousGroup = this.group;\r\n                    if(this.group === N) {\r\n                        this.value = this.multiplier.num.toString();\r\n                        this.toUnitMultiplier();\r\n                    }\r\n                    //update the hash to reflect the accurate hash\r\n                    else\r\n                        this.value = text(this, 'hash');\r\n\r\n                    this.group = EX;\r\n                }\r\n            }\r\n            else if(group === N) {\r\n                var m = this.multiplier.toDecimal();\r\n                if(this.symbols)\r\n                    this.symbols = undefined;\r\n                new Symbol(this.group === P ? m * Math.pow(this.value, this.power) : m).clone(this);\r\n            }\r\n            else if(group === P && this.group === N) {\r\n                this.value = imaginary ? this.multiplier.num.toString() : Math.abs(this.multiplier.num.toString());\r\n                this.toUnitMultiplier(!imaginary);\r\n                this.group = P;\r\n            }\r\n            return this;\r\n        },\r\n        /**\r\n         * This method is one of the principal methods to make it all possible.\r\n         * It performs cleanup and prep operations whenever a symbols is\r\n         * inserted. If the symbols results in a 1 in a CB (multiplication)\r\n         * group for instance it will remove the redundant symbol. Similarly\r\n         * in a symbol of group PL or CP (symbols glued by multiplication) it\r\n         * will remove any dangling zeroes from the symbol. It will also\r\n         * up-convert or down-convert a symbol if it detects that it's\r\n         * incorrectly grouped. It should be noted that this method is not\r\n         * called directly but rather by the 'attach' method for addition groups\r\n         * and the 'combine' method for multiplication groups.\r\n         * @param {Symbol} symbol\r\n         * @param {String} action\r\n         */\r\n        insert: function (symbol, action) {\r\n            //this check can be removed but saves a lot of aggravation when trying to hunt down\r\n            //a bug. If left, you will instantly know that the error can only be between 2 symbols.\r\n            if(!isSymbol(symbol))\r\n                err('Object ' + symbol + ' is not of type Symbol!');\r\n            if(this.symbols) {\r\n                var group = this.group;\r\n                if(group > FN) {\r\n                    var key = symbol.keyForGroup(group);\r\n                    var existing = key in this.symbols ? this.symbols[key] : false; //check if there's already a symbol there\r\n                    if(action === 'add') {\r\n                        var hash = key;\r\n                        if(existing) {\r\n                            //add them together using the parser\r\n                            this.symbols[hash] = _.add(existing, symbol);\r\n                            //if the addition resulted in a zero multiplier remove it\r\n                            if(this.symbols[hash].multiplier.equals(0)) {\r\n                                delete this.symbols[hash];\r\n                                this.length--;\r\n\r\n                                if(this.length === 0) {\r\n                                    this.convert(N);\r\n                                    this.multiplier = new Frac(0);\r\n                                }\r\n                            }\r\n                        }\r\n                        else {\r\n                            this.symbols[key] = symbol;\r\n                            this.length++;\r\n                        }\r\n                    }\r\n                    else {\r\n                        //check if this is of group P and unwrap before inserting\r\n                        if(symbol.group === P && isInt(symbol.power)) {\r\n                            symbol.convert(N);\r\n                        }\r\n\r\n                        //transfer the multiplier to the upper symbol but only if the symbol numeric\r\n                        if(symbol.group !== EX) {\r\n                            this.multiplier = this.multiplier.multiply(symbol.multiplier);\r\n                            symbol.toUnitMultiplier();\r\n                        }\r\n                        else {\r\n                            symbol.parens = symbol.multiplier.lessThan(0);\r\n                            this.multiplier = this.multiplier.multiply(symbol.multiplier.clone().abs());\r\n                            symbol.toUnitMultiplier(true);\r\n                        }\r\n\r\n                        if(existing) {\r\n                            //remove because the symbol may have changed\r\n                            symbol = _.multiply(remove(this.symbols, key), symbol);\r\n                            if(symbol.isConstant()) {\r\n                                this.multiplier = this.multiplier.multiply(symbol.multiplier);\r\n                                symbol = new Symbol(1); //the dirty work gets done down the line when it detects 1\r\n                            }\r\n\r\n                            this.length--;\r\n                            //clean up\r\n                        }\r\n\r\n                        //don't insert the symbol if it's 1\r\n                        if(!symbol.isOne(true)) {\r\n                            this.symbols[key] = symbol;\r\n                            this.length++;\r\n                        }\r\n                        else if(symbol.multiplier.lessThan(0)) {\r\n                            this.negate(); //put back the sign\r\n                        }\r\n                    }\r\n\r\n                    //clean up\r\n                    if(this.length === 0)\r\n                        this.convert(N);\r\n                    //update the hash\r\n                    if(this.group === CP || this.group === CB) {\r\n                        this.updateHash();\r\n                    }\r\n                }\r\n            }\r\n\r\n            return this;\r\n        },\r\n        //the insert method for addition\r\n        attach: function (symbol) {\r\n            if(isArray(symbol)) {\r\n                for(var i = 0; i < symbol.length; i++)\r\n                    this.insert(symbol[i], 'add');\r\n                return this;\r\n            }\r\n            return this.insert(symbol, 'add');\r\n        },\r\n        //the insert method for multiplication\r\n        combine: function (symbol) {\r\n            if(isArray(symbol)) {\r\n                for(var i = 0; i < symbol.length; i++)\r\n                    this.insert(symbol[i], 'multiply');\r\n                return this;\r\n            }\r\n            return this.insert(symbol, 'multiply');\r\n        },\r\n        /**\r\n         * This method should be called after any major \"surgery\" on a symbol.\r\n         * It updates the hash of the symbol for example if the fname of a\r\n         * function has changed it will update the hash of the symbol.\r\n         */\r\n        updateHash: function () {\r\n            if(this.group === N)\r\n                return;\r\n\r\n            if(this.group === FN) {\r\n                var contents = '',\r\n                        args = this.args,\r\n                        is_parens = this.fname === PARENTHESIS;\r\n                for(var i = 0; i < args.length; i++)\r\n                    contents += (i === 0 ? '' : ',') + text(args[i]);\r\n                var fn_name = is_parens ? '' : this.fname;\r\n                this.value = fn_name + (is_parens ? contents : inBrackets(contents));\r\n            }\r\n            else if(!(this.group === S || this.group === PL)) {\r\n                this.value = text(this, 'hash');\r\n            }\r\n        },\r\n        /**\r\n         * this function defines how every group in stored within a group of\r\n         * higher order think of it as the switchboard for the library. It\r\n         * defines the hashes for symbols.\r\n         * @param {int} group\r\n         */\r\n        keyForGroup: function (group) {\r\n            var g = this.group;\r\n            var key;\r\n\r\n            if(g === N) {\r\n                key = this.value;\r\n            }\r\n            else if(g === S || g === P) {\r\n                if(group === PL)\r\n                    key = this.power.toDecimal();\r\n                else\r\n                    key = this.value;\r\n            }\r\n            else if(g === FN) {\r\n                if(group === PL)\r\n                    key = this.power.toDecimal();\r\n                else\r\n                    key = text(this, 'hash');\r\n            }\r\n            else if(g === PL) {\r\n                //if the order is reversed then we'll assume multiplication\r\n                //TODO: possible future dilemma\r\n                if(group === CB)\r\n                    key = text(this, 'hash');\r\n                else if(group === CP) {\r\n                    if(this.power.equals(1))\r\n                        key = this.value;\r\n                    else\r\n                        key = inBrackets(text(this, 'hash')) + Settings.POWER_OPERATOR + this.power.toDecimal();\r\n                }\r\n                else if(group === PL)\r\n                    key = this.power.toString();\r\n                else\r\n                    key = this.value;\r\n                return key;\r\n            }\r\n            else if(g === CP) {\r\n                if(group === CP) {\r\n                    key = text(this, 'hash');\r\n                }\r\n                if(group === PL)\r\n                    key = this.power.toDecimal();\r\n                else\r\n                    key = this.value;\r\n            }\r\n            else if(g === CB) {\r\n                if(group === PL)\r\n                    key = this.power.toDecimal();\r\n                else\r\n                    key = text(this, 'hash');\r\n            }\r\n            else if(g === EX) {\r\n                if(group === PL)\r\n                    key = text(this.power);\r\n                else\r\n                    key = text(this, 'hash');\r\n            }\r\n\r\n            return key;\r\n        },\r\n        /**\r\n         * Symbols are typically stored in an object which works fine for most\r\n         * cases but presents a problem when the order of the symbols makes\r\n         * a difference. This function simply collects all the symbols and\r\n         * returns them as an array. If a function is supplied then that\r\n         * function is called on every symbol contained within the object.\r\n         * @param {Function} fn\r\n         * @param {Object} opt\r\n         * @param {Function} sort_fn\r\n         * @@param {Boolean} expand_symbol\r\n         * @returns {Array}\r\n         */\r\n        collectSymbols: function (fn, opt, sort_fn, expand_symbol) {\r\n            var collected = [];\r\n            if(!this.symbols)\r\n                collected.push(this);\r\n            else {\r\n                for(var x in this.symbols) {\r\n                    var symbol = this.symbols[x];\r\n                    if(expand_symbol && (symbol.group === PL || symbol.group === CP)) {\r\n                        collected = collected.concat(symbol.collectSymbols());\r\n                    }\r\n                    else\r\n                        collected.push(fn ? fn(symbol, opt) : symbol);\r\n                }\r\n            }\r\n            if(sort_fn === null)\r\n                sort_fn = undefined; //WTF Firefox? Seriously?\r\n\r\n            return collected.sort(sort_fn);//sort hopefully gives us some sort of consistency\r\n        },\r\n        /**\r\n         * Returns the latex representation of the symbol\r\n         * @param {String} option\r\n         * @returns {String}\r\n         */\r\n        latex: function (option) {\r\n            return LaTeX.latex(this, option);\r\n        },\r\n        /**\r\n         * Returns the text representation of a symbol\r\n         * @param {String} option\r\n         * @returns {String}\r\n         */\r\n        text: function (option) {\r\n            return text(this, option);\r\n        },\r\n        /**\r\n         * Checks if the function evaluates to 1. e.g. x^0 or 1 :)\r\n         * @@param {bool} abs Compares the absolute value\r\n         */\r\n        isOne: function (abs) {\r\n            var f = abs ? 'absEquals' : 'equals';\r\n            if(this.group === N)\r\n                return this.multiplier[f](1);\r\n            else\r\n                return this.power.equals(0);\r\n        },\r\n        isComposite: function () {\r\n            var g = this.group,\r\n                    pg = this.previousGroup;\r\n            return g === CP || g === PL || pg === PL || pg === CP;\r\n        },\r\n        isCombination: function () {\r\n            var g = this.group,\r\n                    pg = this.previousGroup;\r\n            return g === CB || pg === CB;\r\n        },\r\n        lessThan: function (n) {\r\n            return this.multiplier.lessThan(n);\r\n        },\r\n        greaterThan: function (n) {\r\n            if(!isSymbol(n)) {\r\n                n = new Symbol(n);\r\n            }\r\n\r\n            // We can't tell for sure if a is greater than be if they're not both numbers\r\n            if(!this.isConstant(true) || !n.isConstant(true)) {\r\n                return false;\r\n            }\r\n\r\n            return this.multiplier.greaterThan(n.multiplier);\r\n        },\r\n        /**\r\n         * Get's the denominator of the symbol if the symbol is of class CB (multiplication)\r\n         * with other classes the symbol is either the denominator or not.\r\n         * Take x^-1+x^-2. If the symbol was to be mixed such as x+x^-2 then the symbol doesn't have have an exclusive\r\n         * denominator and has to be found by looking at the actual symbols themselves.\r\n         */\r\n        getDenom: function () {\r\n            var retval, symbol;\r\n            symbol = this.clone();\r\n            //e.g. 1/(x*(x+1))\r\n            if(this.group === CB && this.power.lessThan(0))\r\n                symbol = _.expand(symbol);\r\n\r\n            //if the symbol already is the denominator... DONE!!!\r\n            if(symbol.power.lessThan(0)) {\r\n                var d = _.parse(symbol.multiplier.den);\r\n                retval = symbol.toUnitMultiplier();\r\n                retval.power.negate();\r\n                retval = _.multiply(d, retval); //put back the coeff\r\n            }\r\n            else if(symbol.group === CB) {\r\n                retval = _.parse(symbol.multiplier.den);\r\n                for(var x in symbol.symbols)\r\n                    if(symbol.symbols[x].power < 0)\r\n                        retval = _.multiply(retval, symbol.symbols[x].clone().invert());\r\n            }\r\n            else\r\n                retval = _.parse(symbol.multiplier.den);\r\n            return retval;\r\n        },\r\n        getNum: function () {\r\n            var retval, symbol;\r\n            symbol = this.clone();\r\n            //e.g. 1/(x*(x+1))\r\n            if(symbol.group === CB && symbol.power.lessThan(0))\r\n                symbol = _.expand(symbol);\r\n            //if the symbol already is the denominator... DONE!!!\r\n            if(symbol.power.greaterThan(0) && symbol.group !== CB) {\r\n                retval = _.multiply(_.parse(symbol.multiplier.num), symbol.toUnitMultiplier());\r\n            }\r\n            else if(symbol.group === CB) {\r\n                retval = _.parse(symbol.multiplier.num);\r\n                symbol.each(function (x) {\r\n                    if(x.power > 0 || x.group === EX && x.power.multiplier > 0) {\r\n                        retval = _.multiply(retval, x.clone());\r\n                    }\r\n                });\r\n            }\r\n            else {\r\n                retval = _.parse(symbol.multiplier.num);\r\n            }\r\n            return retval;\r\n        },\r\n        toString: function () {\r\n            return this.text();\r\n        }\r\n    };\r\n\r\n//Parser =======================================================================\r\n    //Uses modified Shunting-yard algorithm. http://en.wikipedia.org/wiki/Shunting-yard_algorithm\r\n    function Parser() {\r\n        //Point to the local parser instead of the global one\r\n        var _ = this;\r\n        var bin = {};\r\n        var preprocessors = {names: [], actions: []};\r\n\r\n//Parser.classes ===============================================================\r\n        function Slice(upper, lower) {\r\n            this.start = upper;\r\n            this.end = lower;\r\n        }\r\n        ;\r\n        Slice.prototype.isConstant = function () {\r\n            return this.start.isConstant() && this.end.isConstant();\r\n        };\r\n        Slice.prototype.text = function () {\r\n            return text(this.start) + ':' + text(this.end);\r\n        };\r\n\r\n        /**\r\n         * Class used to collect arguments for functions\r\n         * @returns {Parser.Collection}\r\n         */\r\n        function Collection() {\r\n            this.elements = [];\r\n        }\r\n        Collection.prototype.append = function (e) {\r\n            this.elements.push(e);\r\n        };\r\n        Collection.prototype.getItems = function () {\r\n            return this.elements;\r\n        };\r\n        Collection.prototype.toString = function () {\r\n            return _.pretty_print(this.elements);\r\n        };\r\n        Collection.create = function (e) {\r\n            var collection = new Collection();\r\n            if(e)\r\n                collection.append(e);\r\n            return collection;\r\n        };\r\n\r\n        function Token(node, node_type, column) {\r\n            this.type = node_type;\r\n            this.value = node;\r\n            if(column !== undefined)\r\n                this.column = column + 1;\r\n            if(node_type === Token.OPERATOR) {\r\n                //copy everything over from the operator\r\n                var operator = operators[node];\r\n                for(var x in operator)\r\n                    this[x] = operator[x];\r\n\r\n            }\r\n            else if(node_type === Token.FUNCTION) {\r\n                this.precedence = Token.MAX_PRECEDENCE; //leave enough roon\r\n                this.leftAssoc = false;\r\n            }\r\n        }\r\n        Token.prototype.toString = function () {\r\n            return this.value;\r\n        };\r\n        Token.prototype.toString = function () {\r\n            if(this.is_prefix)\r\n                return '`' + this.value;\r\n            return this.value;\r\n        };\r\n        //some constants\r\n        Token.OPERATOR = 'OPERATOR';\r\n        Token.VARIABLE_OR_LITERAL = 'VARIABLE_OR_LITERAL';\r\n        Token.FUNCTION = 'FUNCTION';\r\n        Token.UNIT = 'UNIT';\r\n        Token.KEYWORD = 'KEYWORD';\r\n        Token.MAX_PRECEDENCE = 999;\r\n        //create link to classes\r\n        this.classes = {\r\n            Collection: Collection,\r\n            Slice: Slice,\r\n            Token: Token\r\n        };\r\n//Parser.modules ===============================================================\r\n        //object for functions which handle complex number\r\n        var complex = {\r\n            prec: undefined,\r\n            cos: function (r, i) {\r\n                var re, im;\r\n                re = _.parse(Math.cos(r) * Math.cosh(i));\r\n                im = _.parse(Math.sin(r) * Math.sinh(i));\r\n                return _.subtract(re, _.multiply(im, Symbol.imaginary()));\r\n            },\r\n            sin: function (r, i) {\r\n                var re, im;\r\n                re = _.parse(Math.sin(r) * Math.cosh(i));\r\n                im = _.parse(Math.cos(r) * Math.sinh(i));\r\n                return _.subtract(re, _.multiply(im, Symbol.imaginary()));\r\n            },\r\n            tan: function (r, i) {\r\n                var re, im;\r\n                re = _.parse(Math.sin(2 * r) / (Math.cos(2 * r) + Math.cosh(2 * i)));\r\n                im = _.parse(Math.sinh(2 * i) / (Math.cos(2 * r) + Math.cosh(2 * i)));\r\n                return _.add(re, _.multiply(im, Symbol.imaginary()));\r\n            },\r\n            sec: function (r, i) {\r\n                var t = this.removeDen(this.cos(r, i));\r\n                return _.subtract(t[0], _.multiply(t[1], Symbol.imaginary()));\r\n            },\r\n            csc: function (r, i) {\r\n                var t = this.removeDen(this.sin(r, i));\r\n                return _.add(t[0], _.multiply(t[1], Symbol.imaginary()));\r\n            },\r\n            cot: function (r, i) {\r\n                var t = this.removeDen(this.tan(r, i));\r\n                return _.subtract(t[0], _.multiply(t[1], Symbol.imaginary()));\r\n            },\r\n            acos: function (r, i) {\r\n                var symbol, sq, a, b, c, squared;\r\n                symbol = this.fromArray([r, i]);\r\n                squared = _.pow(symbol.clone(), new Symbol(2));\r\n                sq = _.expand(squared); //z*z\r\n                a = _.multiply(sqrt(_.subtract(new Symbol(1), sq)), Symbol.imaginary());\r\n                b = _.expand(_.add(symbol.clone(), a));\r\n                c = log(b);\r\n                return _.expand(_.multiply(Symbol.imaginary().negate(), c));\r\n            },\r\n            asin: function (r, i) {\r\n                return _.subtract(_.parse('pi/2'), this.acos(r, i));\r\n            },\r\n            atan: function (r, i) {\r\n                // Handle i and -i\r\n                if(r.equals(0) && (i.equals(1) || i.equals(-1))) {\r\n                    // Just copy Wolfram Alpha for now. The parenthesis \r\n                    return _.parse(`${Symbol.infinity()}*${Settings.IMAGINARY}*${i}`);\r\n                }\r\n                var a, b, c, symbol;\r\n                symbol = complex.fromArray([r, i]);\r\n                a = _.expand(_.multiply(Symbol.imaginary(), symbol.clone()));\r\n                b = log(_.expand(_.subtract(new Symbol(1), a.clone())));\r\n                c = log(_.expand(_.add(new Symbol(1), a.clone())));\r\n                return _.expand(_.multiply(_.divide(Symbol.imaginary(), new Symbol(2)), _.subtract(b, c)));\r\n            },\r\n            asec: function (r, i) {\r\n                var d = this.removeDen([r, i]);\r\n                d[1].negate();\r\n                return this.acos.apply(this, d);\r\n            },\r\n            acsc: function (r, i) {\r\n                var d = this.removeDen([r, i]);\r\n                d[1].negate();\r\n                return this.asin.apply(this, d);\r\n            },\r\n            acot: function (r, i) {\r\n                var d = this.removeDen([r, i]);\r\n                d[1].negate();\r\n                return this.atan.apply(this, d);\r\n            },\r\n            //Hyperbolic trig\r\n            cosh: function (r, i) {\r\n                var re, im;\r\n                re = _.parse(Math.cosh(r) * Math.cos(i));\r\n                im = _.parse(Math.sinh(r) * Math.sin(i));\r\n                return _.add(re, _.multiply(im, Symbol.imaginary()));\r\n            },\r\n            sinh: function (r, i) {\r\n                var re, im;\r\n                re = _.parse(Math.sinh(r) * Math.cos(i));\r\n                im = _.parse(Math.cosh(r) * Math.sin(i));\r\n                return _.add(re, _.multiply(im, Symbol.imaginary()));\r\n            },\r\n            tanh: function (r, i) {\r\n                var re, im;\r\n                re = _.parse(Math.sinh(2 * r) / (Math.cos(2 * i) + Math.cosh(2 * r)));\r\n                im = _.parse(Math.sin(2 * i) / (Math.cos(2 * i) + Math.cosh(2 * r)));\r\n                return _.subtract(re, _.multiply(im, Symbol.imaginary()));\r\n            },\r\n            sech: function (r, i) {\r\n                var t = this.removeDen(this.cosh(r, i));\r\n                return _.subtract(t[0], _.multiply(t[1], Symbol.imaginary()));\r\n            },\r\n            csch: function (r, i) {\r\n                var t = this.removeDen(this.sinh(r, i));\r\n                return _.subtract(t[0], _.multiply(t[1], Symbol.imaginary()));\r\n            },\r\n            coth: function (r, i) {\r\n                var t = this.removeDen(this.tanh(r, i));\r\n                return _.add(t[0], _.multiply(t[1], Symbol.imaginary()));\r\n            },\r\n            acosh: function (r, i) {\r\n                var a, b, z;\r\n                z = this.fromArray([r, i]);\r\n                a = sqrt(_.add(z.clone(), new Symbol(1)));\r\n                b = sqrt(_.subtract(z.clone(), new Symbol(1)));\r\n                return _.expand(log(_.add(z, _.expand(_.multiply(a, b)))));\r\n            },\r\n            asinh: function (r, i) {\r\n                var a, z;\r\n                z = this.fromArray([r, i]);\r\n                a = sqrt(_.add(new Symbol(1), _.expand(_.pow(z.clone(), new Symbol(2)))));\r\n                return _.expand(log(_.add(z, a)));\r\n            },\r\n            atanh: function (r, i) {\r\n                var a, b, z;\r\n                z = this.fromArray([r, i]);\r\n                a = log(_.add(z.clone(), new Symbol(1)));\r\n                b = log(_.subtract(new Symbol(1), z));\r\n                return _.expand(_.divide(_.subtract(a, b), new Symbol(2)));\r\n            },\r\n            asech: function (r, i) {\r\n                var t = this.removeDen([r, i]);\r\n                t[1].negate();\r\n                return this.acosh.apply(this, t);\r\n            },\r\n            acsch: function (r, i) {\r\n                var t = this.removeDen([r, i]);\r\n                t[1].negate();\r\n                return this.asinh.apply(this, t);\r\n            },\r\n            acoth: function (r, i) {\r\n                var t = this.removeDen([r, i]);\r\n                t[1].negate();\r\n                return this.atanh.apply(this, t);\r\n            },\r\n            sqrt: function (symbol) {\r\n                var re, im, h, a, d;\r\n                re = symbol.realpart();\r\n                im = symbol.imagpart();\r\n                h = Symbol.hyp(re, im);\r\n                a = _.add(re.clone(), h);\r\n                d = sqrt(_.multiply(new Symbol(2), a.clone()));\r\n                return _.add(_.divide(a.clone(), d.clone()), _.multiply(_.divide(im, d), Symbol.imaginary()));\r\n            },\r\n            log: function (r, i) {\r\n                var re, im, phi;\r\n                re = log(Symbol.hyp(r, i));\r\n                phi = Settings.USE_BIG ? Symbol(bigDec.atan2(i.multiplier.toDecimal(), r.multiplier.toDecimal())) : Math.atan2(i, r);\r\n                im = _.parse(phi);\r\n                return _.add(re, _.multiply(Symbol.imaginary(), im));\r\n            },\r\n            erf(symbol, n) {\r\n                //Do nothing for now. Revisit this in the future.\r\n                return _.symfunction('erf', [symbol]);\r\n\r\n                n = n || 30;\r\n\r\n                var f = function (R, I) {\r\n                    return block('PARSE2NUMBER', function () {\r\n                        var retval = new Symbol(0);\r\n                        for(var i = 0; i < n; i++) {\r\n                            var a, b;\r\n                            a = _.parse(bigDec.exp(bigDec(i).toPower(2).neg().dividedBy(bigDec(n).pow(2).plus(bigDec(R).toPower(2).times(4)))));\r\n                            b = _.parse(format('2*({1})-e^(-(2*{0}*{1}*{2}))*(2*{1}*cosh({2}*{3})-{0}*{3}*sinh({3}*{2}))', Settings.IMAGINARY, R, I, i));\r\n                            retval = _.add(retval, _.multiply(a, b));\r\n                        }\r\n                        return _.multiply(retval, new Symbol(2));\r\n                    }, true);\r\n                };\r\n                var re, im, a, b, c, k;\r\n                re = symbol.realpart();\r\n                im = symbol.imagpart();\r\n\r\n                k = _.parse(format('(e^(-{0}^2))/pi', re));\r\n                a = _.parse(format('(1-e^(-(2*{0}*{1}*{2})))/(2*{1})', Settings.IMAGINARY, re, im));\r\n                b = f(re.toString(), im.toString());\r\n\r\n                return _.add(_.parse(Math2.erf(re.toString())), _.multiply(k, _.add(a, b)));\r\n            },\r\n            removeDen: function (symbol) {\r\n                var den, r, i, re, im;\r\n                if(isArray(symbol)) {\r\n                    r = symbol[0];\r\n                    i = symbol[1];\r\n                }\r\n                else {\r\n                    r = symbol.realpart();\r\n                    i = symbol.imagpart();\r\n                }\r\n\r\n                den = Math.pow(r, 2) + Math.pow(i, 2);\r\n                re = _.parse(r / den);\r\n                im = _.parse(i / den);\r\n                return [re, im];\r\n            },\r\n            fromArray: function (arr) {\r\n                return _.add(arr[0], _.multiply(Symbol.imaginary(), arr[1]));\r\n            },\r\n            evaluate: function (symbol, f) {\r\n                var re, im, sign;\r\n\r\n                sign = symbol.power.sign();\r\n                //remove it from under the denominator\r\n                symbol.power = symbol.power.abs();\r\n                //expand\r\n                if(symbol.power.greaterThan(1))\r\n                    symbol = _.expand(symbol);\r\n                //remove the denominator\r\n                if(sign < 0) {\r\n                    var d = this.removeDen(symbol);\r\n                    re = d[0];\r\n                    im = d[1];\r\n                }\r\n                else {\r\n                    re = symbol.realpart();\r\n                    im = symbol.imagpart();\r\n                }\r\n\r\n                if(re.isConstant('all') && im.isConstant('all'))\r\n                    return this[f].call(this, re, im);\r\n\r\n                return _.symfunction(f, [symbol]);\r\n            }\r\n        };\r\n        //object for functions which handle trig\r\n        var trig = this.trig = {\r\n            //container for trigonometric function\r\n            cos: function (symbol) {\r\n                if(symbol.equals('pi') && symbol.multiplier.den.equals(2))\r\n                    return new Symbol(0);\r\n\r\n                if(Settings.PARSE2NUMBER) {\r\n                    if(symbol.equals(new Symbol(Settings.PI / 2)))\r\n                        return new Symbol(0);\r\n                    if(symbol.isConstant()) {\r\n                        if(Settings.USE_BIG) {\r\n                            return new Symbol(bigDec.cos(symbol.multiplier.toDecimal()));\r\n                        }\r\n\r\n                        return new Symbol(Math.cos(symbol.valueOf()));\r\n                    }\r\n                    if(symbol.isImaginary()) {\r\n                        return complex.evaluate(symbol, 'cos');\r\n                    }\r\n                }\r\n                if(symbol.equals(0))\r\n                    return new Symbol(1);\r\n\r\n                var retval,\r\n                        c = false,\r\n                        q = getQuadrant(symbol.multiplier.toDecimal()),\r\n                        m = symbol.multiplier.abs();\r\n                symbol.multiplier = m;\r\n\r\n                if(symbol.isPi() && symbol.isLinear()) {\r\n                    //return for 1 or -1 for multiples of pi\r\n                    if(isInt(m)) {\r\n                        retval = new Symbol(even(m) ? 1 : -1);\r\n                    }\r\n                    else {\r\n                        var n = Number(m.num), d = Number(m.den);\r\n                        if(d === 2)\r\n                            retval = new Symbol(0);\r\n                        else if(d === 3) {\r\n                            retval = _.parse('1/2');\r\n                            c = true;\r\n                        }\r\n                        else if(d === 4) {\r\n                            retval = _.parse('1/sqrt(2)');\r\n                            c = true;\r\n                        }\r\n                        else if(d === 6) {\r\n                            retval = _.parse('sqrt(3)/2');\r\n                            c = true;\r\n                        }\r\n                        else\r\n                            retval = _.symfunction('cos', [symbol]);\r\n                    }\r\n                }\r\n\r\n                if(c && (q === 2 || q === 3))\r\n                    retval.negate();\r\n\r\n                if(!retval)\r\n                    retval = _.symfunction('cos', [symbol]);\r\n\r\n                return retval;\r\n            },\r\n            sin: function (symbol) {\r\n                if(Settings.PARSE2NUMBER) {\r\n                    if(symbol.isConstant()) {\r\n                        if(symbol % Math.PI === 0) {\r\n                            return new Symbol(0);\r\n                        }\r\n\r\n                        if(Settings.USE_BIG) {\r\n                            return new Symbol(bigDec.sin(symbol.multiplier.toDecimal()));\r\n                        }\r\n\r\n                        return new Symbol(Math.sin(symbol.valueOf()));\r\n                    }\r\n                    if(symbol.isImaginary())\r\n                        return complex.evaluate(symbol, 'sin');\r\n                }\r\n\r\n                if(symbol.equals(0))\r\n                    return new Symbol(0);\r\n\r\n                var retval,\r\n                        c = false,\r\n                        q = getQuadrant(symbol.multiplier.toDecimal()),\r\n                        sign = symbol.multiplier.sign(),\r\n                        m = symbol.multiplier.abs();\r\n                symbol.multiplier = m;\r\n                if(symbol.equals('pi'))\r\n                    retval = new Symbol(0);\r\n                else if(symbol.isPi() && symbol.isLinear()) {\r\n                    //return for 0 for multiples of pi\r\n                    if(isInt(m)) {\r\n                        retval = new Symbol(0);\r\n                    }\r\n                    else {\r\n                        var n = m.num, d = m.den;\r\n                        if(d == 2) {\r\n                            retval = new Symbol(1);\r\n                            c = true;\r\n                        }\r\n                        else if(d == 3) {\r\n                            retval = _.parse('sqrt(3)/2');\r\n                            c = true\r\n                        }\r\n                        else if(d == 4) {\r\n                            retval = _.parse('1/sqrt(2)');\r\n                            c = true;\r\n                        }\r\n                        else if(d == 6) {\r\n                            retval = _.parse('1/2');\r\n                            c = true;\r\n                        }\r\n                        else\r\n                            retval = _.multiply(new Symbol(sign), _.symfunction('sin', [symbol]));\r\n                    }\r\n                }\r\n\r\n                if(!retval)\r\n                    retval = _.multiply(new Symbol(sign), _.symfunction('sin', [symbol]));\r\n\r\n                if(c && (q === 3 || q === 4))\r\n                    retval.negate();\r\n\r\n                return retval;\r\n            },\r\n            tan: function (symbol) {\r\n                if(Settings.PARSE2NUMBER) {\r\n                    if(symbol % Math.PI === 0 && symbol.isLinear()) {\r\n                        return new Symbol(0);\r\n                    }\r\n                    if(symbol.isConstant()) {\r\n                        if(Settings.USE_BIG) {\r\n                            return new Symbol(bigDec.tan(symbol.multiplier.toDecimal()));\r\n                        }\r\n\r\n                        return new Symbol(Math.tan(symbol.valueOf()));\r\n                    }\r\n                    if(symbol.isImaginary())\r\n                        return complex.evaluate(symbol, 'tan');\r\n                }\r\n                var retval,\r\n                        c = false,\r\n                        q = getQuadrant(symbol.multiplier.toDecimal()),\r\n                        m = symbol.multiplier;\r\n\r\n                symbol.multiplier = m;\r\n\r\n                if(symbol.isPi() && symbol.isLinear()) {\r\n                    //return 0 for all multiples of pi\r\n                    if(isInt(m)) {\r\n                        retval = new Symbol(0);\r\n                    }\r\n                    else {\r\n                        var n = m.num, d = m.den;\r\n                        if(d == 2)\r\n                            throw new UndefinedError('tan is undefined for ' + symbol.toString());\r\n                        else if(d == 3) {\r\n                            retval = _.parse('sqrt(3)');\r\n                            c = true;\r\n                        }\r\n                        else if(d == 4) {\r\n                            retval = new Symbol(1);\r\n                            c = true;\r\n                        }\r\n                        else if(d == 6) {\r\n                            retval = _.parse('1/sqrt(3)');\r\n                            c = true;\r\n                        }\r\n                        else\r\n                            retval = _.symfunction('tan', [symbol]);\r\n                    }\r\n                }\r\n\r\n                if(!retval)\r\n                    retval = _.symfunction('tan', [symbol]);\r\n\r\n                if(c && (q === 2 || q === 4))\r\n                    retval.negate();\r\n\r\n                return retval;\r\n            },\r\n            sec: function (symbol) {\r\n                if(Settings.PARSE2NUMBER) {\r\n                    if(symbol.isConstant()) {\r\n                        if(Settings.USE_BIG) {\r\n                            return new Symbol(new bigDec(1).dividedBy(bigDec.cos(symbol.multiplier.toDecimal())));\r\n                        }\r\n\r\n                        return new Symbol(Math2.sec(symbol.valueOf()));\r\n                    }\r\n                    if(symbol.isImaginary())\r\n                        return complex.evaluate(symbol, 'sec');\r\n                    return _.parse(format('1/cos({0})', symbol));\r\n                }\r\n\r\n                var retval,\r\n                        c = false,\r\n                        q = getQuadrant(symbol.multiplier.toDecimal()),\r\n                        m = symbol.multiplier.abs();\r\n                symbol.multiplier = m;\r\n\r\n                if(symbol.isPi() && symbol.isLinear()) {\r\n                    //return for 1 or -1 for multiples of pi\r\n                    if(isInt(m)) {\r\n                        retval = new Symbol(even(m) ? 1 : -1);\r\n                    }\r\n                    else {\r\n                        var n = m.num, d = m.den;\r\n                        if(d == 2)\r\n                            throw new UndefinedError('sec is undefined for ' + symbol.toString());\r\n                        else if(d == 3) {\r\n                            retval = new Symbol(2);\r\n                            c = true;\r\n                        }\r\n                        else if(d == 4) {\r\n                            retval = _.parse('sqrt(2)');\r\n                            c = true;\r\n                        }\r\n                        else if(d == 6) {\r\n                            retval = _.parse('2/sqrt(3)');\r\n                            c = true;\r\n                        }\r\n                        else\r\n                            retval = _.symfunction('sec', [symbol]);\r\n                    }\r\n                }\r\n\r\n                if(c && (q === 2 || q === 3))\r\n                    retval.negate();\r\n\r\n                if(!retval)\r\n                    retval = _.symfunction('sec', [symbol]);\r\n\r\n                return retval;\r\n            },\r\n            csc: function (symbol) {\r\n                if(Settings.PARSE2NUMBER) {\r\n                    if(symbol.isConstant()) {\r\n                        if(Settings.USE_BIG) {\r\n                            return new Symbol(new bigDec(1).dividedBy(bigDec.sin(symbol.multiplier.toDecimal())));\r\n                        }\r\n\r\n                        return new Symbol(Math2.csc(symbol.valueOf()));\r\n                    }\r\n                    if(symbol.isImaginary())\r\n                        return complex.evaluate(symbol, 'csc');\r\n                    return _.parse(format('1/sin({0})', symbol));\r\n                }\r\n\r\n                var retval,\r\n                        c = false,\r\n                        q = getQuadrant(symbol.multiplier.toDecimal()),\r\n                        sign = symbol.multiplier.sign(),\r\n                        m = symbol.multiplier.abs();\r\n\r\n                symbol.multiplier = m;\r\n\r\n                if(symbol.isPi() && symbol.isLinear()) {\r\n                    //return for 0 for multiples of pi\r\n                    if(isInt(m)) {\r\n                        throw new UndefinedError('csc is undefined for ' + symbol.toString());\r\n                    }\r\n                    else {\r\n                        var n = m.num, d = m.den;\r\n                        if(d == 2) {\r\n                            retval = new Symbol(1);\r\n                            c = true;\r\n                        }\r\n                        else if(d == 3) {\r\n                            retval = _.parse('2/sqrt(3)');\r\n                            c = true\r\n                        }\r\n                        else if(d == 4) {\r\n                            retval = _.parse('sqrt(2)');\r\n                            c = true;\r\n                        }\r\n                        else if(d == 6) {\r\n                            retval = new Symbol(2);\r\n                            c = true;\r\n                        }\r\n                        else\r\n                            retval = _.multiply(new Symbol(sign), _.symfunction('csc', [symbol]));\r\n                    }\r\n                }\r\n\r\n                if(!retval)\r\n                    retval = _.multiply(new Symbol(sign), _.symfunction('csc', [symbol]));\r\n\r\n                if(c && (q === 3 || q === 4))\r\n                    retval.negate();\r\n\r\n                return retval;\r\n            },\r\n            cot: function (symbol) {\r\n                if(Settings.PARSE2NUMBER) {\r\n                    if(symbol % (Math.PI/2) === 0) {\r\n                        return new Symbol(0);\r\n                    }\r\n                    if(symbol.isConstant()) {\r\n                        if(Settings.USE_BIG) {\r\n                            return new Symbol(new bigDec(1).dividedBy(bigDec.tan(symbol.multiplier.toDecimal())));\r\n                        }\r\n\r\n                        return new Symbol(Math2.cot(symbol.valueOf()));\r\n                    }\r\n                    if(symbol.isImaginary())\r\n                        return complex.evaluate(symbol, 'cot');\r\n                    return _.parse(format('1/tan({0})', symbol));\r\n                }\r\n                var retval,\r\n                        c = false,\r\n                        q = getQuadrant(symbol.multiplier.toDecimal()),\r\n                        m = symbol.multiplier;\r\n\r\n                symbol.multiplier = m;\r\n\r\n                if(symbol.isPi() && symbol.isLinear()) {\r\n                    //return 0 for all multiples of pi\r\n                    if(isInt(m)) {\r\n                        throw new UndefinedError('cot is undefined for ' + symbol.toString());\r\n                    }\r\n                    else {\r\n                        var n = m.num, d = m.den;\r\n                        if(d == 2)\r\n                            retval = new Symbol(0);\r\n                        else if(d == 3) {\r\n                            retval = _.parse('1/sqrt(3)');\r\n                            c = true;\r\n                        }\r\n                        else if(d == 4) {\r\n                            retval = new Symbol(1);\r\n                            c = true;\r\n                        }\r\n                        else if(d == 6) {\r\n                            retval = _.parse('sqrt(3)');\r\n                            c = true;\r\n                        }\r\n                        else\r\n                            retval = _.symfunction('cot', [symbol]);\r\n                    }\r\n                }\r\n\r\n                if(!retval)\r\n                    retval = _.symfunction('cot', [symbol]);\r\n\r\n                if(c && (q === 2 || q === 4))\r\n                    retval.negate();\r\n\r\n                return retval;\r\n            },\r\n            acos: function (symbol) {\r\n                if(Settings.PARSE2NUMBER) {\r\n                    if(symbol.isConstant()) {\r\n                        // Handle values in the complex domain\r\n                        if(symbol.gt(1) || symbol.lt(-1)) {\r\n                            var x = symbol.toString();\r\n                            return expand(evaluate(`pi/2-asin(${x})`));\r\n                        }\r\n                        // Handle big numbers\r\n                        if(Settings.USE_BIG) {\r\n                            return new Symbol(bigDec.acos(symbol.multiplier.toDecimal()));\r\n                        }\r\n\r\n                        return new Symbol(Math.acos(symbol.valueOf()));\r\n                    }\r\n                    if(symbol.isImaginary())\r\n                        return complex.evaluate(symbol, 'acos');\r\n                }\r\n                return _.symfunction('acos', arguments);\r\n            },\r\n            asin: function (symbol) {\r\n                if(Settings.PARSE2NUMBER) {\r\n                    if(symbol.isConstant()) {\r\n                        // Handle values in the complex domain\r\n                        if(symbol.gt(1) || symbol.lt(-1)) {\r\n                            var i = Settings.IMAGINARY;\r\n                            var x = symbol.multiplier.toDecimal();\r\n                            return expand(evaluate(`${i}*log(sqrt(1-${x}^2)-${i}*${x})`));\r\n                        }\r\n                        // Handle big numbers\r\n                        if(Settings.USE_BIG) {\r\n                            return new Symbol(bigDec.asin(symbol.multiplier.toDecimal()));\r\n                        }\r\n\r\n                        return new Symbol(Math.asin(symbol.valueOf()));\r\n                    }\r\n                    if(symbol.isImaginary())\r\n                        return complex.evaluate(symbol, 'asin');\r\n                }\r\n                return _.symfunction('asin', arguments);\r\n            },\r\n            atan: function (symbol) {\r\n                var retval;\r\n                if(symbol.equals(0))\r\n                    retval = new Symbol(0);\r\n                else if(Settings.PARSE2NUMBER) {\r\n                    if(symbol.isConstant()) {\r\n                        // Handle big numbers\r\n                        if(Settings.USE_BIG) {\r\n                            return new Symbol(bigDec.atan(symbol.multiplier.toDecimal()));\r\n                        }\r\n\r\n                        return new Symbol(Math.atan(symbol.valueOf()));\r\n                    }\r\n                    if(symbol.isImaginary())\r\n                        return complex.evaluate(symbol, 'atan');\r\n                    return _.symfunction('atan', arguments);\r\n                }\r\n                else if(symbol.equals(-1))\r\n                    retval = _.parse('-pi/4');\r\n                else\r\n                    retval = _.symfunction('atan', arguments);\r\n                return retval;\r\n            },\r\n            asec: function (symbol) {\r\n                if(Settings.PARSE2NUMBER) {\r\n                    if(symbol.equals(0)) {\r\n                        throw new OutOfFunctionDomainError('Input is out of the domain of sec!');\r\n                    }\r\n                    if(symbol.isConstant()) {\r\n                        return trig.acos(symbol.invert());\r\n                    }\r\n                    if(symbol.isImaginary()) {\r\n                        return complex.evaluate(symbol, 'asec');\r\n                    }\r\n                }\r\n                return _.symfunction('asec', arguments);\r\n            },\r\n            acsc: function (symbol) {\r\n                if(Settings.PARSE2NUMBER) {\r\n                    if(symbol.isConstant()) {\r\n                        return trig.asin(symbol.invert());\r\n                    }\r\n\r\n                    if(symbol.isImaginary())\r\n                        return complex.evaluate(symbol, 'acsc');\r\n                }\r\n                return _.symfunction('acsc', arguments);\r\n            },\r\n            acot: function (symbol) {\r\n                if(Settings.PARSE2NUMBER) {\r\n                    if(symbol.isConstant()) {\r\n                        return new _.add(_.parse('pi/2'), trig.atan(symbol).negate());\r\n                    }\r\n\r\n                    if(symbol.isImaginary())\r\n                        return complex.evaluate(symbol, 'acot');\r\n                }\r\n                return _.symfunction('acot', arguments);\r\n            },\r\n            atan2: function (a, b) {\r\n                if(a.equals(0) && b.equals(0))\r\n                    throw new UndefinedError('atan2 is undefined for 0, 0');\r\n\r\n                if(Settings.PARSE2NUMBER && a.isConstant() && b.isConstant()) {\r\n                    return new Symbol(Math.atan2(a, b));\r\n                }\r\n                return _.symfunction('atan2', arguments);\r\n            }\r\n        };\r\n        //object for functions which handle hyperbolic trig\r\n        var trigh = this.trigh = {\r\n            //container for hyperbolic trig function\r\n            cosh: function (symbol) {\r\n                var retval;\r\n                if(Settings.PARSE2NUMBER) {\r\n                    if(symbol.isConstant())\r\n                        return new Symbol(Math.cosh(symbol.valueOf()));\r\n                    if(symbol.isImaginary()) {\r\n                        return complex.evaluate(symbol, 'cosh');\r\n                    }\r\n                }\r\n\r\n                return retval = _.symfunction('cosh', arguments);\r\n            },\r\n            sinh: function (symbol) {\r\n                var retval;\r\n                if(Settings.PARSE2NUMBER) {\r\n                    if(symbol.isConstant())\r\n                        return new Symbol(Math.sinh(symbol.valueOf()));\r\n                    if(symbol.isImaginary()) {\r\n                        return complex.evaluate(symbol, 'sinh');\r\n                    }\r\n                }\r\n\r\n                return retval = _.symfunction('sinh', arguments);\r\n            },\r\n            tanh: function (symbol) {\r\n                var retval;\r\n                if(Settings.PARSE2NUMBER) {\r\n                    if(symbol.isConstant())\r\n                        return new Symbol(Math.tanh(symbol.valueOf()));\r\n                    if(symbol.isImaginary()) {\r\n                        return complex.evaluate(symbol, 'tanh');\r\n                    }\r\n                }\r\n\r\n                return retval = _.symfunction('tanh', arguments);\r\n            },\r\n            sech: function (symbol) {\r\n                var retval;\r\n                if(Settings.PARSE2NUMBER) {\r\n                    if(symbol.isConstant()) {\r\n                        return new Symbol(Math.sech(symbol.valueOf()));\r\n                    }\r\n                    if(symbol.isImaginary()) {\r\n                        return complex.evaluate(symbol, 'sech');\r\n                    }\r\n                    return _.parse(format('1/cosh({0})', symbol));\r\n                }\r\n\r\n                return retval = _.symfunction('sech', arguments);\r\n            },\r\n            csch: function (symbol) {\r\n                var retval;\r\n                if(Settings.PARSE2NUMBER) {\r\n                    if(symbol.isConstant())\r\n                        return new Symbol(Math.csch(symbol.valueOf()));\r\n                    if(symbol.isImaginary()) {\r\n                        return complex.evaluate(symbol, 'csch');\r\n                    }\r\n                    return _.parse(format('1/sinh({0})', symbol));\r\n                }\r\n\r\n                return retval = _.symfunction('csch', arguments);\r\n            },\r\n            coth: function (symbol) {\r\n                var retval;\r\n                if(Settings.PARSE2NUMBER) {\r\n                    if(symbol.isConstant())\r\n                        return new Symbol(Math.coth(symbol.valueOf()));\r\n                    if(symbol.isImaginary()) {\r\n                        return complex.evaluate(symbol, 'coth');\r\n                    }\r\n                    return _.parse(format('1/tanh({0})', symbol));\r\n                }\r\n\r\n                return retval = _.symfunction('coth', arguments);\r\n            },\r\n            acosh: function (symbol) {\r\n                var retval;\r\n                if(Settings.PARSE2NUMBER && symbol.isImaginary())\r\n                    retval = complex.evaluate(symbol, 'acosh');\r\n                else if(Settings.PARSE2NUMBER)\r\n                    retval = evaluate(_.parse(format(Settings.LOG + '(({0})+sqrt(({0})^2-1))', symbol.toString())));\r\n                else\r\n                    retval = _.symfunction('acosh', arguments);\r\n                return retval;\r\n            },\r\n            asinh: function (symbol) {\r\n                var retval;\r\n                if(Settings.PARSE2NUMBER && symbol.isImaginary())\r\n                    retval = complex.evaluate(symbol, 'asinh');\r\n                else if(Settings.PARSE2NUMBER)\r\n                    retval = evaluate(_.parse(format(Settings.LOG + '(({0})+sqrt(({0})^2+1))', symbol.toString())));\r\n                else\r\n                    retval = _.symfunction('asinh', arguments);\r\n                return retval;\r\n            },\r\n            atanh: function (symbol) {\r\n                var retval;\r\n                if(Settings.PARSE2NUMBER && symbol.isImaginary())\r\n                    retval = complex.evaluate(symbol, 'atanh');\r\n                else if(Settings.PARSE2NUMBER) {\r\n                    retval = evaluate(_.parse(format('(1/2)*' + Settings.LOG + '((1+({0}))/(1-({0})))', symbol.toString())));\r\n                }\r\n                else\r\n                    retval = _.symfunction('atanh', arguments);\r\n                return retval;\r\n            },\r\n            asech: function (symbol) {\r\n                var retval;\r\n                if(Settings.PARSE2NUMBER && symbol.isImaginary())\r\n                    retval = complex.evaluate(symbol, 'asech');\r\n                else if(Settings.PARSE2NUMBER)\r\n                    retval = evaluate(log(_.add(symbol.clone().invert(), sqrt(_.subtract(_.pow(symbol, new Symbol(-2)), new Symbol(1))))));\r\n                else\r\n                    retval = _.symfunction('asech', arguments);\r\n                return retval;\r\n            },\r\n            acsch: function (symbol) {\r\n                var retval;\r\n                if(Settings.PARSE2NUMBER && symbol.isImaginary())\r\n                    retval = complex.evaluate(symbol, 'acsch');\r\n                else if(Settings.PARSE2NUMBER)\r\n                    retval = evaluate(_.parse(format(Settings.LOG + '((1+sqrt(1+({0})^2))/({0}))', symbol.toString())));\r\n                else\r\n                    retval = _.symfunction('acsch', arguments);\r\n                return retval;\r\n            },\r\n            acoth: function (symbol) {\r\n                var retval;\r\n                if(Settings.PARSE2NUMBER && symbol.isImaginary())\r\n                    retval = complex.evaluate(symbol, 'acoth');\r\n                else if(Settings.PARSE2NUMBER) {\r\n                    if(symbol.equals(1))\r\n                        retval = Symbol.infinity();\r\n                    else\r\n                        retval = evaluate(\r\n                                _.divide(\r\n                                        log(_.divide(_.add(symbol.clone(), new Symbol(1)), _.subtract(symbol.clone(), new Symbol(1)))),\r\n                                        new Symbol(2)));\r\n                }\r\n                else\r\n                    retval = _.symfunction('acoth', arguments);\r\n                return retval;\r\n            }\r\n        };\r\n        //list of supported units\r\n        this.units = {};\r\n        //list all the supported operators\r\n        var operators = {\r\n            '\\\\': {\r\n                precedence: 8,\r\n                operator: '\\\\',\r\n                action: 'slash',\r\n                prefix: true,\r\n                postfix: false,\r\n                leftAssoc: true,\r\n                operation: function (e) {\r\n                    return e; //bypass the slash\r\n                }\r\n            },\r\n            '!!': {\r\n                precedence: 7,\r\n                operator: '!!',\r\n                action: 'dfactorial',\r\n                prefix: false,\r\n                postfix: true,\r\n                leftAssoc: true,\r\n                operation: function (e) {\r\n                    return _.symfunction(Settings.DOUBLEFACTORIAL, [e]); //wrap it in a factorial function\r\n                }\r\n            },\r\n            '!': {\r\n                precedence: 7,\r\n                operator: '!',\r\n                action: 'factorial',\r\n                prefix: false,\r\n                postfix: true,\r\n                leftAssoc: true,\r\n                operation: function (e) {\r\n                    return factorial(e); //wrap it in a factorial function\r\n                }\r\n            },\r\n            '^': {\r\n                precedence: 6,\r\n                operator: '^',\r\n                action: 'pow',\r\n                prefix: false,\r\n                postfix: false,\r\n                leftAssoc: true\r\n            },\r\n            '**': {\r\n                precedence: 6,\r\n                operator: '**',\r\n                action: 'pow',\r\n                prefix: false,\r\n                postfix: false,\r\n                leftAssoc: true\r\n            },\r\n            '%': {\r\n                precedence: 4,\r\n                operator: '%',\r\n                action: 'percent',\r\n                prefix: false,\r\n                postfix: true,\r\n                leftAssoc: true,\r\n                overloaded: true,\r\n                overloadAction: 'mod',\r\n                overloadLeftAssoc: false,\r\n                operation: function (x) {\r\n                    return _.divide(x, new Symbol(100));\r\n                }\r\n            },\r\n            '*': {\r\n                precedence: 4,\r\n                operator: '*',\r\n                action: 'multiply',\r\n                prefix: false,\r\n                postfix: false,\r\n                leftAssoc: false\r\n            },\r\n            '/': {\r\n                precedence: 4,\r\n                operator: '/',\r\n                action: 'divide',\r\n                prefix: false,\r\n                postfix: false,\r\n                leftAssoc: false\r\n            },\r\n            '+': {\r\n                precedence: 3,\r\n                operator: '+',\r\n                action: 'add',\r\n                prefix: true,\r\n                postfix: false,\r\n                leftAssoc: false,\r\n                operation: function (x) {\r\n                    return x;\r\n                }\r\n            },\r\n            'plus': {\r\n                precedence: 3,\r\n                operator: 'plus',\r\n                action: 'add',\r\n                prefix: true,\r\n                postfix: false,\r\n                leftAssoc: false,\r\n                operation: function (x) {\r\n                    return x;\r\n                }\r\n            },\r\n            '-': {\r\n                precedence: 3,\r\n                operator: '-',\r\n                action: 'subtract',\r\n                prefix: true,\r\n                postfix: false,\r\n                leftAssoc: false,\r\n                operation: function (x) {\r\n                    return x.negate();\r\n                }\r\n            },\r\n            '=': {\r\n                precedence: 2,\r\n                operator: '=',\r\n                action: 'equals',\r\n                prefix: false,\r\n                postfix: false,\r\n                leftAssoc: false\r\n            },\r\n            '==': {\r\n                precedence: 1,\r\n                operator: '==',\r\n                action: 'eq',\r\n                prefix: false,\r\n                postfix: false,\r\n                leftAssoc: false\r\n            },\r\n            '<': {\r\n                precedence: 1,\r\n                operator: '<',\r\n                action: 'lt',\r\n                prefix: false,\r\n                postfix: false,\r\n                leftAssoc: false\r\n            },\r\n            '<=': {\r\n                precedence: 1,\r\n                operator: '<=',\r\n                action: 'lte',\r\n                prefix: false,\r\n                postfix: false,\r\n                leftAssoc: false\r\n            },\r\n            '>': {\r\n                precedence: 1,\r\n                operator: '>',\r\n                action: 'gt',\r\n                prefix: false,\r\n                postfix: false,\r\n                leftAssoc: false\r\n            },\r\n            '=>': {\r\n                precedence: 1,\r\n                operator: '=>',\r\n                action: 'gte',\r\n                prefix: false,\r\n                postfix: false,\r\n                leftAssoc: false\r\n            },\r\n            ',': {\r\n                precedence: 0,\r\n                operator: ',',\r\n                action: 'comma',\r\n                prefix: false,\r\n                postfix: false,\r\n                leftAssoc: false\r\n            },\r\n            ':': {\r\n                precedence: 0,\r\n                operator: ',',\r\n                action: 'assign',\r\n                prefix: false,\r\n                postfix: false,\r\n                leftAssoc: false,\r\n                vectorFn: 'slice'\r\n            },\r\n            ':=': {\r\n                precedence: 0,\r\n                operator: ',',\r\n                action: 'function_assign',\r\n                prefix: false,\r\n                postfix: false,\r\n                leftAssoc: true\r\n            }\r\n        };\r\n        //brackets\r\n        var brackets = {\r\n            '(': {\r\n                type: 'round',\r\n                id: 1,\r\n                is_open: true,\r\n                is_close: false\r\n            },\r\n            ')': {\r\n                type: 'round',\r\n                id: 2,\r\n                is_open: false,\r\n                is_close: true\r\n            },\r\n            '[': {\r\n                type: 'square',\r\n                id: 3,\r\n                is_open: true,\r\n                is_close: false,\r\n                maps_to: 'vector'\r\n            },\r\n            ']': {\r\n                type: 'square',\r\n                id: 4,\r\n                is_open: false,\r\n                is_close: true\r\n            },\r\n            '{': {\r\n                type: 'curly',\r\n                id: 5,\r\n                is_open: true,\r\n                is_close: false,\r\n                maps_to: 'Set'\r\n            },\r\n            '}': {\r\n                type: 'curly',\r\n                id: 6,\r\n                is_open: false,\r\n                is_close: true\r\n            }\r\n        };\r\n        // Supported functions.\r\n        // Format: function_name: [mapped_function, number_of_parameters]\r\n        var functions = this.functions = {\r\n            'cos': [trig.cos, 1],\r\n            'sin': [trig.sin, 1],\r\n            'tan': [trig.tan, 1],\r\n            'sec': [trig.sec, 1],\r\n            'csc': [trig.csc, 1],\r\n            'cot': [trig.cot, 1],\r\n            'acos': [trig.acos, 1],\r\n            'asin': [trig.asin, 1],\r\n            'atan': [trig.atan, 1],\r\n            'arccos': [trig.acos, 1],\r\n            'arcsin': [trig.asin, 1],\r\n            'arctan': [trig.atan, 1],\r\n            'asec': [trig.asec, 1],\r\n            'acsc': [trig.acsc, 1],\r\n            'acot': [trig.acot, 1],\r\n            'atan2': [trig.atan2, 2],\r\n            'acoth': [trigh.acoth, 1],\r\n            'asech': [trigh.asech, 1],\r\n            'acsch': [trigh.acsch, 1],\r\n            'sinh': [trigh.sinh, 1],\r\n            'cosh': [trigh.cosh, 1],\r\n            'tanh': [trigh.tanh, 1],\r\n            'asinh': [trigh.asinh, 1],\r\n            'sech': [trigh.sech, 1],\r\n            'csch': [trigh.csch, 1],\r\n            'coth': [trigh.coth, 1],\r\n            'acosh': [trigh.acosh, 1],\r\n            'atanh': [trigh.atanh, 1],\r\n            'log10': [, 1],\r\n            'exp': [exp, 1],\r\n            'radians': [radians, 1],\r\n            'degrees': [degrees, 1],\r\n            'min': [min, -1],\r\n            'max': [max, -1],\r\n            'erf': [, 1],\r\n            'floor': [, 1],\r\n            'ceil': [, 1],\r\n            'trunc': [, 1],\r\n            'Si': [, 1],\r\n            'step': [, 1],\r\n            'rect': [, 1],\r\n            'sinc': [sinc, 1],\r\n            'tri': [, 1],\r\n            'sign': [sign, 1],\r\n            'Ci': [, 1],\r\n            'Ei': [, 1],\r\n            'Shi': [, 1],\r\n            'Chi': [, 1],\r\n            'Li': [, 1],\r\n            'fib': [, 1],\r\n            'fact': [factorial, 1],\r\n            'factorial': [factorial, 1],\r\n            'continued_fraction': [continued_fraction, [1, 2]],\r\n            'dfactorial': [, 1],\r\n            'gamma_incomplete': [, [1, 2]],\r\n            'round': [round, [1, 2]],\r\n            'scientific': [scientific, [1, 2]],\r\n            'mod': [mod, 2],\r\n            'pfactor': [pfactor, 1],\r\n            'vector': [vector, -1],\r\n            'matrix': [matrix, -1],\r\n            'Set': [set, -1],\r\n            'imatrix': [imatrix, -1],\r\n            'parens': [parens, -1],\r\n            'sqrt': [sqrt, 1],\r\n            'cbrt': [cbrt, 1],\r\n            'nthroot': [nthroot, 2],\r\n            'log': [log, [1, 2]],\r\n            'expand': [expandall, 1],\r\n            'abs': [abs, 1],\r\n            'invert': [invert, 1],\r\n            'determinant': [determinant, 1],\r\n            'size': [size, 1],\r\n            'transpose': [transpose, 1],\r\n            'dot': [dot, 2],\r\n            'cross': [cross, 2],\r\n            'vecget': [vecget, 2],\r\n            'vecset': [vecset, 3],\r\n            'vectrim': [vectrim, [1, 2]],\r\n            'matget': [matget, 3],\r\n            'matset': [matset, 4],\r\n            'matgetrow': [matgetrow, 2],\r\n            'matsetrow': [matsetrow, 3],\r\n            'matgetcol': [matgetcol, 2],\r\n            'matsetcol': [matsetcol, 3],\r\n            'rationalize': [rationalize, 1],\r\n            'IF': [IF, 3],\r\n            'is_in': [is_in, 2],\r\n            //imaginary support\r\n            'realpart': [realpart, 1],\r\n            'imagpart': [imagpart, 1],\r\n            'conjugate': [conjugate, 1],\r\n            'arg': [arg, 1],\r\n            'polarform': [polarform, 1],\r\n            'rectform': [rectform, 1],\r\n            'sort': [sort, [1, 2]],\r\n            'integer_part': [, 1],\r\n            'union': [union, 2],\r\n            'contains': [contains, 2],\r\n            'intersection': [intersection, 2],\r\n            'difference': [difference, 2],\r\n            'intersects': [intersects, 2],\r\n            'is_subset': [is_subset, 2],\r\n            //system support\r\n            'print': [print, -1]\r\n        };\r\n\r\n        //error handler\r\n        this.error = err;\r\n        //this function is used to comb through the function modules and find a function given its name\r\n        var findFunction = function (fname) {\r\n            var fmodules = Settings.FUNCTION_MODULES,\r\n                    l = fmodules.length;\r\n            for(var i = 0; i < l; i++) {\r\n                var fmodule = fmodules[i];\r\n                if(fname in fmodule)\r\n                    return fmodule[fname];\r\n            }\r\n            err('The function ' + fname + ' is undefined!');\r\n        };\r\n\r\n        /**\r\n         * This method gives the ability to override operators with new methods.\r\n         * @param {String} which\r\n         * @param {Function} with_what\r\n         */\r\n        this.override = function (which, with_what) {\r\n            if(!bin[which])\r\n                bin[which] = [];\r\n            bin[which].push(this[which]);\r\n            this[which] = with_what;\r\n        };\r\n\r\n        /**\r\n         * Restores a previously overridden operator\r\n         * @param {String} what\r\n         */\r\n        this.restore = function (what) {\r\n            if(this[what])\r\n                this[what] = bin[what].pop();\r\n        };\r\n\r\n        /**\r\n         * This method is supposed to behave similarly to the override method but it does not override\r\n         * the existing function rather it only extends it\r\n         * @param {String} what\r\n         * @param {Function} with_what\r\n         * @param {boolean} force_call\r\n         */\r\n        this.extend = function (what, with_what, force_call) {\r\n            var _ = this,\r\n                    extended = this[what];\r\n            if(typeof extended === 'function' && typeof with_what === 'function') {\r\n                var f = this[what];\r\n                this[what] = function (a, b) {\r\n                    if(isSymbol(a) && isSymbol(b) && !force_call)\r\n                        return f.call(_, a, b);\r\n                    else\r\n                        return with_what.call(_, a, b, f);\r\n                };\r\n            }\r\n        };\r\n\r\n        /**\r\n         * Generates library's representation of a function. It's a fancy way of saying a symbol with\r\n         * a few extras. The most important thing is that that it gives a fname and\r\n         * an args property to the symbols in addition to changing its group to FN\r\n         * @param {String} fn_name\r\n         * @param {Array} params\r\n         * @returns {Symbol}\r\n         */\r\n        this.symfunction = function (fn_name, params) {\r\n            //call the proper function and return the result;\r\n            var f = new Symbol(fn_name);\r\n            f.group = FN;\r\n            if(typeof params === 'object')\r\n                params = [].slice.call(params);//ensure an array\r\n            f.args = params;\r\n            f.fname = fn_name === PARENTHESIS ? '' : fn_name;\r\n            f.updateHash();\r\n            return f;\r\n        };\r\n\r\n        /**\r\n         * An internal function call for the Parser. This will either trigger a real\r\n         * function call if it can do so or just return a symbolic representation of the\r\n         * function using symfunction.\r\n         * @param {String} fn_name\r\n         * @param {Array} args\r\n         * @param {int} allowed_args\r\n         * @returns {Symbol}\r\n         */\r\n        this.callfunction = function (fn_name, args, allowed_args) {\r\n            var fn_settings = functions[fn_name];\r\n\r\n            if(!fn_settings)\r\n                err('Nerdamer currently does not support the function ' + fn_name);\r\n\r\n            var num_allowed_args = fn_settings[1] || allowed_args, //get the number of allowed arguments\r\n                    fn = fn_settings[0], //get the mapped function\r\n                    retval;\r\n            //We want to be able to call apply on the arguments or create a symfunction. Both require\r\n            //an array so make sure to wrap the argument in an array.\r\n            if(!(args instanceof Array))\r\n                args = args !== undefined ? [args] : [];\r\n\r\n            if(num_allowed_args !== -1) {\r\n                var is_array = isArray(num_allowed_args),\r\n                        min_args = is_array ? num_allowed_args[0] : num_allowed_args,\r\n                        max_args = is_array ? num_allowed_args[1] : num_allowed_args,\r\n                        num_args = args.length;\r\n\r\n                var error_msg = fn_name + ' requires a {0} of {1} arguments. {2} provided!';\r\n\r\n                if(num_args < min_args)\r\n                    err(format(error_msg, 'minimum', min_args, num_args));\r\n                if(num_args > max_args)\r\n                    err(format(error_msg, 'maximum', max_args, num_args));\r\n            }\r\n\r\n            /*\r\n             * The following are very important to the how nerdamer constructs functions!\r\n             * Assumption 1 - if fn is undefined then handling of the function is purely numeric. This\r\n             *     enables us to reuse Math, Math2, ..., any function from Settings.FUNCTIONS_MODULES entry\r\n             * Assumption 2 - if fn is defined then that function takes care of EVERYTHING including symbolics\r\n             * Assumption 3 - if the user calls symbolics on a function that returns a numeric value then\r\n             *     they are expecting a symbolic output.\r\n             */\r\n            //check if arguments are all numers\r\n            var numericArgs = allNumbers(args);\r\n            //Big number support. Check if Big number is requested and the arguments are all numeric and, not imaginary\r\n//            if (Settings.USE_BIG && numericArgs) {\r\n//                retval = Big[fn_name].apply(undefined, args);\r\n//            }\r\n//            else {\r\n            if(!fn) {\r\n                //Remember assumption 1. No function defined so it MUST be numeric in nature\r\n                fn = findFunction(fn_name);\r\n                if(Settings.PARSE2NUMBER && numericArgs)\r\n                    retval = bigConvert(fn.apply(fn, args));\r\n                else\r\n                    retval = _.symfunction(fn_name, args);\r\n            }\r\n            else {\r\n                //Remember assumption 2. The function is defined so it MUST handle all aspects including numeric values\r\n                retval = fn.apply(fn_settings[2], args);\r\n            }\r\n//            }\r\n\r\n            return retval;\r\n        };\r\n        /**\r\n         * Build a regex based on the operators currently loaded. These operators are to be ignored when\r\n         * substituting spaces for multiplication\r\n         */\r\n        this.operator_filter_regex = (function () {\r\n            //we only want the operators which are singular since those are the ones\r\n            //that nerdamer uses anyway\r\n            var ostr = '^\\\\' + Object.keys(operators).filter(function (x) {\r\n                if(x.length === 1)\r\n                    return x;\r\n            }).join('\\\\');\r\n            //create a regex which captures all spaces between characters except those\r\n            //have an operator on one end\r\n            return new RegExp('([' + ostr + '])\\\\s+([' + ostr + '])');\r\n        })();\r\n\r\n        /**\r\n         * Replaces nerdamer.setOperator\r\n         * @param {object} operator\r\n         * @param {boolean} shift\r\n         */\r\n        this.setOperator = function (operator, action, shift) {\r\n            var name = operator.operator; //take the name to be the symbol\r\n            operators[name] = operator;\r\n            if(action)\r\n                this[operator.action] = action;\r\n            //make the parser aware of the operator\r\n            _[name] = operator.operation;\r\n            //make the action available to the parser if infix\r\n            if(!operator.action && !(operator.prefix || operator.postif)) {\r\n                operator.action = name;\r\n            }\r\n            //if this operator is exclusive then all successive operators should be shifted\r\n            if(shift === 'over' || shift === 'under') {\r\n                var precedence = operator.precedence;\r\n\r\n                for(var x in operators) {\r\n                    var o = operators[x];\r\n                    var condition = shift === 'over' ? o.precedence >= precedence : o.precedence > precedence;\r\n                    if(condition)\r\n                        o.precedence++;\r\n                }\r\n                ;\r\n            }\r\n        };\r\n\r\n        /**\r\n         * Gets an opererator by its symbol\r\n         * @param {String} operator\r\n         * @returns {Object}\r\n         */\r\n        this.getOperator = function (operator) {\r\n            return operators[operator];\r\n        };\r\n\r\n        this.aliasOperator = function (o, n) {\r\n            var t = {};\r\n            var operator = operators[o];\r\n            //copy everything over to the new operator\r\n            for(var x in operator) {\r\n                t[x] = operator[x];\r\n            }\r\n            //update the symbol\r\n            t.operator = n;\r\n\r\n            this.setOperator(t);\r\n        };\r\n\r\n        /**\r\n         * Returns the list of operators. Caution! Can break parser!\r\n         * @returns {object}\r\n         */\r\n        this.getOperators = function () {\r\n            //will replace this with some cloning action in the future\r\n            return operators;\r\n        };\r\n\r\n        this.getBrackets = function () {\r\n            return brackets;\r\n        };\r\n        /*\r\n         * Preforms preprocessing on the string. Useful for making early modification before\r\n         * sending to the parser\r\n         * @param {String} e\r\n         */\r\n        var prepare_expression = function (e) {\r\n            /*\r\n             * Since variables cannot start with a number, the assumption is made that when this occurs the\r\n             * user intents for this to be a coefficient. The multiplication symbol in then added. The same goes for\r\n             * a side-by-side close and open parenthesis\r\n             */\r\n            e = String(e);\r\n            //apply preprocessors\r\n            for(var i = 0; i < preprocessors.actions.length; i++)\r\n                e = preprocessors.actions[i].call(this, e);\r\n\r\n            //e = e.split(' ').join('');//strip empty spaces\r\n            //replace multiple spaces with one space\r\n            e = e.replace(/\\s+/g, ' ');\r\n\r\n            //only even bother to check if the string contains e. This regex is painfully slow and might need a better solution. e.g. hangs on (0.06/3650))^(365)\r\n            if(/e/gi.test(e)) {\r\n                e = e.replace(/\\-*\\d+\\.*\\d*e\\+?\\-?\\d+/gi, function (x) {\r\n                    return scientificToDecimal(x);\r\n                });\r\n            }\r\n            //replace scientific numbers\r\n\r\n            //allow omission of multiplication after coefficients\r\n            e = e.replace(Settings.IMPLIED_MULTIPLICATION_REGEX, function () {\r\n                var str = arguments[4],\r\n                        group1 = arguments[1],\r\n                        group2 = arguments[2],\r\n                        start = arguments[3],\r\n                        first = str.charAt(start),\r\n                        before = '',\r\n                        d = '*';\r\n                if(!first.match(/[\\+\\-\\/\\*]/))\r\n                    before = str.charAt(start - 1);\r\n                if(before.match(/[a-z]/i))\r\n                    d = '';\r\n                return group1 + d + group2;\r\n            })\r\n                    .replace(/([a-z0-9_]+)/gi, function (match, a) {\r\n                        if(Settings.USE_MULTICHARACTER_VARS === false && !(a in functions)) {\r\n                            if(!isNaN(a))\r\n                                return a;\r\n                            return a.split('').join('*');\r\n                        }\r\n                        return a;\r\n                    })\r\n                    //allow omission of multiplication sign between brackets\r\n                    .replace(/\\)\\(/g, ')*(') || '0';\r\n            //replace x(x+a) with x*(x+a)\r\n            while(true) {\r\n                var e_org = e; //store the original\r\n                e = e.replace(/([a-z0-9_]+)(\\()|(\\))([a-z0-9]+)/gi, function (match, a, b, c, d) {\r\n                    var g1 = a || c,\r\n                            g2 = b || d;\r\n                    if(g1 in functions) //create a passthrough for functions\r\n                        return g1 + g2;\r\n                    return g1 + '*' + g2;\r\n                });\r\n                //if the original equals the replace we're done\r\n                if(e_org === e)\r\n                    break;\r\n            }\r\n            return e;\r\n        };\r\n        //delay setting of constants until Settings is ready\r\n        this.initConstants = function () {\r\n            this.CONSTANTS = {\r\n                E: new Symbol(Settings.E),\r\n                PI: new Symbol(Settings.PI)\r\n            };\r\n        };\r\n        /*\r\n         * Debugging method used to better visualize vector and arrays\r\n         * @param {object} o\r\n         * @returns {String}\r\n         */\r\n        this.pretty_print = function (o) {\r\n            if(Array.isArray(o)) {\r\n                var s = o.map(x => _.pretty_print(x)).join(', ');\r\n                if(o.type === 'vector')\r\n                    return 'vector<' + s + '>';\r\n                return '(' + s + ')';\r\n            }\r\n            return o.toString();\r\n        };\r\n        this.peekers = {\r\n            pre_operator: [],\r\n            post_operator: [],\r\n            pre_function: [],\r\n            post_function: []\r\n        };\r\n\r\n        this.callPeekers = function (name) {\r\n            if(Settings.callPeekers) {\r\n                var peekers = this.peekers[name];\r\n                //remove the first items and stringify\r\n                var args = arguments2Array(arguments).slice(1).map(stringify);\r\n                //call each one of the peekers\r\n                for(var i = 0; i < peekers.length; i++) {\r\n                    peekers[i].apply(null, args);\r\n                }\r\n            }\r\n        };\r\n        /*\r\n         * Tokenizes the string\r\n         * @param {String} e\r\n         * @returns {Token[]}\r\n         */\r\n        this.tokenize = function (e) {\r\n            //cast to String\r\n            e = String(e);\r\n            //remove multiple white spaces and spaces at beginning and end of string\r\n            e = e.trim().replace(/\\s+/g, ' ');\r\n            //remove spaces before and after brackets\r\n            for(var x in brackets) {\r\n                var regex = new RegExp(brackets[x].is_close ? '\\\\s+\\\\' + x : '\\\\' + x + '\\\\s+', 'g');\r\n                e = e.replace(regex, x);\r\n            }\r\n\r\n            var col = 0; //the column position\r\n            var L = e.length; //expression length\r\n            var lpos = 0; //marks beginning of next token\r\n            var tokens = []; //the tokens container\r\n            var scopes = [tokens]; //initiate with the tokens as the highest scope\r\n            var target = scopes[0]; //the target to which the tokens are added. This can swing up or down\r\n            var depth = 0;\r\n            var open_brackets = [];\r\n            var has_space = false; //marks if an open space character was found\r\n            var SPACE = ' ';\r\n            var EMPTY_STRING = '';\r\n            var COMMA = ',';\r\n            var MINUS = '-';\r\n            var MULT = '*';\r\n            //Possible source of bug. Review\r\n            /*\r\n             //gets the next space\r\n             var next_space = function(from) {\r\n             for(var i=from; i<L; i++) {\r\n             if(e.charAt(i) === ' ')\r\n             return i;\r\n             }\r\n             \r\n             return L; //assume the end of the string instead\r\n             };\r\n             */\r\n            /**\r\n             * Adds a scope to tokens\r\n             * @param {String} scope_type\r\n             * @param {int} column\r\n             * @returns {undefined}\r\n             */\r\n            var addScope = function (scope_type, column) {\r\n                var new_scope = []; //create a new scope\r\n                if(scope_type !== undefined) {\r\n                    new_scope.type = scope_type;\r\n                }\r\n                new_scope.column = column; //mark the column of the scope\r\n                scopes.push(new_scope); //add it to the list of scopes\r\n                target.push(new_scope); //add it to the tokens list since now it's a scope\r\n                target = new_scope; //point to it\r\n                depth++; //go down one in scope\r\n            };\r\n            /**\r\n             * Goes up in scope by one\r\n             * @returns {undefined}\r\n             */\r\n            var goUp = function () {\r\n                scopes.pop(); //remove the scope from the scopes stack\r\n                target = scopes[--depth]; //point the above scope\r\n            };\r\n            /**\r\n             * Extracts all the operators from the expression string starting at postion start_at\r\n             * @param {int} start_at\r\n             * @returns {String}\r\n             */\r\n            var get_operator_str = function (start_at) {\r\n                start_at = start_at !== undefined ? start_at : col;\r\n                //mark the end of the operator as the start since we're just going\r\n                //to be walking along the string\r\n                var end = start_at + 1;\r\n                //just keep moving along\r\n                while(e.charAt(end++) in operators) {\r\n                }\r\n                //remember that we started at one position ahead. The beginning operator is what triggered\r\n                //this function to be called in the first place. String.CharAt is zero based so we now\r\n                //have to correct two places. The initial increment + the extra++ at the end of end during\r\n                //the last iteration.\r\n                return e.substring(start_at, end - 1);\r\n            };\r\n            /**\r\n             * Breaks operator up in to several different operators as defined in operators\r\n             * @param {String} operator_str\r\n             * @returns {String[]}\r\n             */\r\n            var chunkify = function (operator_str) {\r\n                var start = col - operator_str.length; //start of operator\r\n                var _operators = [];\r\n                var operator = operator_str.charAt(0);\r\n                //grab the largest possible chunks but start at 2 since we already know\r\n                //that the first character is an operator\r\n\r\n                for(var i = 1, L = operator_str.length; i < L; i++) {\r\n                    var ch = operator_str.charAt(i);\r\n                    var o = operator + ch;\r\n                    //since the operator now is undefined then the last operator\r\n                    //was the largest possible combination.\r\n                    if(!(o in operators)) {\r\n                        _operators.push(new Token(operator, Token.OPERATOR, start + i));\r\n                        operator = ch;\r\n                    }\r\n                    else\r\n                        operator = o;//now the operator is the larger chunk\r\n                }\r\n                //add the last operator\r\n                _operators.push(new Token(operator, Token.OPERATOR, start + i));\r\n                return _operators;\r\n            };\r\n\r\n            /**\r\n             * Is used to add a token to the tokens array. Makes sure that no empty token is added\r\n             * @param {int} at\r\n             * @param {String} token\r\n             * @returns {undefined}\r\n             */\r\n            var add_token = function (at, token) {\r\n                //grab the token if we're not supplied one\r\n                if(token === undefined)\r\n                    token = e.substring(lpos, at);\r\n                //only add it if it's not an empty string\r\n                if(token in _.units)\r\n                    target.push(new Token(token, Token.UNIT, lpos));\r\n                else if(token !== '')\r\n                    target.push(new Token(token, Token.VARIABLE_OR_LITERAL, lpos));\r\n            };\r\n            /**\r\n             * Adds a function to the output\r\n             * @param {String} f\r\n             * @returns {undefined}\r\n             */\r\n            var add_function = function (f) {\r\n                target.push(new Token(f, Token.FUNCTION, lpos));\r\n            };\r\n            /**\r\n             * Tokens are found between operators so this marks the location of where the last token was found\r\n             * @param {int} position\r\n             * @returns {undefined}\r\n             */\r\n            var set_last_position = function (position) {\r\n                lpos = position + 1;\r\n            };\r\n            /**\r\n             * When a operator is found and added, especially a combo operator, then the column location\r\n             * has to be adjusted to the end of the operator\r\n             * @returns {undefined}\r\n             */\r\n            var adjust_column_position = function () {\r\n                lpos = lpos + operator_str.length - 2;\r\n                col = lpos - 1;\r\n            };\r\n            for(; col < L; col++) {\r\n                var ch = e.charAt(col);\r\n                if(ch in operators) {\r\n                    add_token(col);\r\n                    //is the last token numeric?\r\n                    var last_token_is_numeric = target[0] && isNumber(target[0]);\r\n                    //is this character multiplication?\r\n                    var is_multiplication = last_token_is_numeric && ch === MULT;\r\n                    //if we're in a new scope then go up by one but if the space\r\n                    //is right befor an operator then it makes no sense to go up in scope\r\n                    //consider sin -x. The last position = current position at the minus sign\r\n                    //this means that we're going for sin(x) -x which is wrong\r\n                    //Ignore comma since comma is still part of the existing scope.\r\n                    if(has_space && lpos < col && !(ch === COMMA || is_multiplication)) {\r\n                        has_space = false;\r\n                        goUp();\r\n                    }\r\n                    //mark the last position that a\r\n                    set_last_position(col + 1);\r\n                    var operator_str = get_operator_str(col);\r\n\r\n                    adjust_column_position();\r\n                    target.push.apply(target, chunkify(operator_str));\r\n                }\r\n                else if(ch in brackets) {\r\n                    var bracket = brackets[ch];\r\n\r\n                    if(bracket.is_open) {\r\n                        //mark the bracket\r\n                        open_brackets.push([bracket, lpos]);\r\n                        var f = e.substring(lpos, col);\r\n                        if(f in functions) {\r\n                            add_function(f);\r\n                        }\r\n                        else if(f !== '') {\r\n                            //assume multiplication\r\n                            //TODO: Add the multiplication to stack\r\n                            target.push(new Token(f, Token.VARIABLE_OR_LITERAL, lpos));\r\n                        }\r\n                        //go down one in scope\r\n                        addScope(bracket.maps_to, col);\r\n                    }\r\n                    else if(bracket.is_close) {\r\n                        //get the matching bracket\r\n                        var pair = open_brackets.pop();\r\n                        //throw errors accordingly\r\n                        //missing open bracket\r\n                        if(!pair)\r\n                            throw new ParityError('Missing open bracket for bracket at: ' + (col + 1));\r\n                        //incorrect pair\r\n                        else if(pair[0].id !== bracket.id - 1)\r\n                            throw new ParityError('Parity error');\r\n\r\n                        add_token(col);\r\n                        goUp();\r\n                    }\r\n                    set_last_position(col);\r\n                }\r\n                else if(ch === SPACE) {\r\n                    var prev = e.substring(lpos, col); //look back\r\n                    var nxt = e.charAt(col + 1); //look forward\r\n                    if(has_space) {\r\n\r\n                        if(prev in operators) {\r\n                            target.push(new Token(prev, Token.OPERATOR, col));\r\n                        }\r\n                        else {\r\n                            add_token(undefined, prev);\r\n                            //we're at the closing space\r\n                            goUp(); //go up in scope if we're at a space\r\n\r\n                            //assume multiplication if it's not an operator except for minus\r\n                            var is_operator = nxt in operators;\r\n\r\n                            if((is_operator && operators[nxt].value === MINUS) || !is_operator) {\r\n                                target.push(new Token(MULT, Token.OPERATOR, col));\r\n                            }\r\n                        }\r\n                        has_space = false; //remove the space\r\n                    }\r\n                    else {\r\n                        //we're at the closing space\r\n                        //check if it's a function\r\n                        var f = e.substring(lpos, col);\r\n\r\n                        if(f in functions) {\r\n                            //there's no need to go up in scope if the next character is an operator\r\n                            has_space = true; //mark that a space was found\r\n                            add_function(f);\r\n                            addScope();\r\n                        }\r\n                        else if(f in operators) {\r\n                            target.push(new Token(f, Token.OPERATOR, col));\r\n                        }\r\n                        else {\r\n                            add_token(undefined, f);\r\n                            //peek ahead to the next character\r\n                            var nxt = e.charAt(col + 1);\r\n\r\n                            //If it's a number then add the multiplication operator to the stack but make sure that the next character\r\n                            //is not an operator\r\n\r\n                            if(prev !== EMPTY_STRING && nxt !== EMPTY_STRING && !(prev in operators) && !(nxt in operators))\r\n                                target.push(new Token(MULT, Token.OPERATOR, col));\r\n                        }\r\n                        //Possible source of bug. Review\r\n                        /*\r\n                         //space can mean multiplication so add the symbol if the is encountered\r\n                         if(/\\d+|\\d+\\.?\\d*e[\\+\\-]*\\d+/i.test(f)) {\r\n                         var next = e.charAt(col+1);\r\n                         var next_is_operator = next in operators;\r\n                         var ns = next_space(col+1);\r\n                         var next_word = e.substring(col+1, ns);\r\n                         //the next can either be a prefix operator or no operator\r\n                         if((next_is_operator && operators[next].prefix) || !(next_is_operator || next_word in operators))\r\n                         target.push(new Token('*', Token.OPERATOR, col));\r\n                         }\r\n                         */\r\n                    }\r\n                    set_last_position(col); //mark this location\r\n                }\r\n            }\r\n            //check that all brackets were closed\r\n            if(open_brackets.length) {\r\n                var b = open_brackets.pop();\r\n                throw new ParityError('Missing closed bracket for bracket at ' + (b[1] + 1));\r\n            }\r\n            //add the last token\r\n            add_token(col);\r\n\r\n            return tokens;\r\n        };\r\n        /*\r\n         * Puts token array in Reverse Polish Notation\r\n         * @param {Token[]} tokens\r\n         * @returns {Token[]}\r\n         */\r\n        this.toRPN = function (tokens) {\r\n            var fn = tokens.type;\r\n            var l = tokens.length, i;\r\n            var output = [];\r\n            var stack = [];\r\n            var prefixes = [];\r\n            var collapse = function (target, destination) {\r\n                while(target.length)\r\n                    destination.push(target.pop());\r\n            };\r\n            //mark all the prefixes and add them to the stack\r\n            for(i = 0; i < l; i++) {\r\n                var token = tokens[i];\r\n                if(token.type !== Token.OPERATOR)\r\n                    break;\r\n                if(!token.prefix)\r\n                    throw new OperatorError('Not a prefix operator');\r\n                token.is_prefix = true;\r\n                stack.push(token);\r\n            }\r\n            //begin with remaining tokens\r\n            for(; i < l; i++) {\r\n                var e = tokens[i];\r\n                if(e.type === Token.OPERATOR) {\r\n                    var operator = e;\r\n\r\n                    //create the option for the operator being overloaded\r\n                    if(operator.overloaded) {\r\n                        var next = tokens[i + 1];\r\n                        //if it's followed by a number or variable then we assume it's not a postfix operator\r\n                        if(next && next.type === Token.VARIABLE_OR_LITERAL) {\r\n                            operator.postfix = false;\r\n                            //override the original function with the overload function\r\n                            operator.action = operator.overloadAction;\r\n                            operator.leftAssoc = operator.overloadLeftAssoc;\r\n                        }\r\n                    }\r\n\r\n                    //if the stack is not empty\r\n                    while(stack.length) {\r\n                        var last = stack[stack.length - 1];\r\n                        //if (there is an operator at the top of the operator stack with greater precedence)\r\n                        //or (the operator at the top of the operator stack has equal precedence and is left associative)) ~ wikipedia\r\n                        //the !prefixes.length makes sure that the operator on stack isn't prematurely taken fromt he stack.\r\n                        if(!(last.precedence > operator.precedence || !operator.leftAssoc && last.precedence === operator.precedence))\r\n                            break;\r\n                        output.push(stack.pop());\r\n                    }\r\n\r\n                    //change the behavior of the operator if it's a vector and we've been asked to do so\r\n                    if((fn === 'vector' || fn === 'set') && 'vectorFn' in operator)\r\n                        operator.action = operator.vectorFn;\r\n\r\n\r\n                    //if the operator is a postfix operator then we're ready to go since it belongs\r\n                    //to the preceding token. However the output cannot be empty. It must have either\r\n                    //an operator or a variable/literal\r\n                    if(operator.postfix) {\r\n                        var previous = tokens[i - 1];\r\n                        if(!previous)\r\n                            throw new OperatorError(\"Unexpected prefix operator '\" + e.value + \"'! at \" + e.column);\r\n                        else if(previous.type === Token.OPERATOR) {\r\n                            //a postfix can only be followed by a postfix\r\n                            if(!previous.postfix)\r\n                                throw new OperatorError(\"Unexpected prefix operator '\" + previous.value + \"'! at \" + previous.column);\r\n                        }\r\n                    }\r\n                    else {\r\n                        //we must be at an infix so point the operator this\r\n                        do {\r\n                            //the first one is an infix operator all others have to be prefix operators so jump to the end\r\n                            var next = tokens[i + 1]; //take a look ahead\r\n                            var next_is_operator = next ? next.type === Token.OPERATOR : false; //check if it's an operator\r\n                            if(next_is_operator) {\r\n                                //if it's not a prefix operator then it not in the right place\r\n                                if(!next.prefix) {\r\n                                    throw new OperatorError('A prefix operator was expected at ' + next.column);\r\n                                }\r\n                                //mark it as a confirmed prefix\r\n                                next.is_prefix = true;\r\n                                //add it to the prefixes\r\n                                prefixes.push(next);\r\n                                i++;\r\n                            }\r\n                        }\r\n                        while(next_is_operator)\r\n                    }\r\n\r\n                    //if it's a prefix it should be on a special stack called prefixes\r\n                    //we do this to hold on to prefixes because of left associative operators.\r\n                    //they belong to the variable/literal but if placed on either the stack\r\n                    //or output there's no way of knowing this. I might be wrong so I welcome\r\n                    //any discussion about this.\r\n\r\n                    if(operator.is_prefix) //ADD ALL EXCEPTIONS FOR ADDING TO PREFIX STACK HERE. !!!\r\n                        prefixes.push(operator);\r\n                    else\r\n                        stack.push(operator);\r\n                    //move the prefixes to the stack\r\n                    while(prefixes.length) {\r\n                        if(operator.leftAssoc || !operator.leftAssoc && prefixes[prefixes.length - 1].precedence >= operator.precedence) //revisit for commas\r\n                            stack.push(prefixes.pop());\r\n                        else\r\n                            break;\r\n                    }\r\n                }\r\n                else if(e.type === Token.VARIABLE_OR_LITERAL) {\r\n                    //move prefixes to stack at beginning of scope\r\n                    if(output.length === 0)\r\n                        collapse(prefixes, stack);\r\n                    //done with token\r\n                    output.push(e);\r\n                    var last_on_stack = stack[stack.length - 1];\r\n                    //then move all the prefixes to the output\r\n                    if(!last_on_stack || !last_on_stack.leftAssoc)\r\n                        collapse(prefixes, output);\r\n                }\r\n                else if(e.type === Token.FUNCTION) {\r\n                    stack.push(e);\r\n                }\r\n                else if(e.type === Token.UNIT) {\r\n                    //if it's a unit it belongs on the stack since it's tied to the previous token\r\n                    output.push(e);\r\n                }\r\n                //if it's an additonal scope then put that into RPN form\r\n                if(Array.isArray(e)) {\r\n                    output.push(this.toRPN(e));\r\n                    if(e.type)\r\n                        output.push(new Token(e.type, Token.FUNCTION, e.column)); //since it's hidden it needs no column\r\n\r\n                }\r\n            }\r\n            //collapse the remainder of the stack and prefixes to output\r\n            collapse(stack, output);\r\n            collapse(prefixes, output);\r\n\r\n            return output;\r\n        };\r\n        /*\r\n         * Parses the tokens\r\n         * @param {Tokens[]} rpn\r\n         * @param {object} substitutions\r\n         * @returns {Symbol}\r\n         */\r\n        this.parseRPN = function (rpn, substitutions) {\r\n            try {\r\n                //default substitutions\r\n                substitutions = substitutions || {};\r\n                //prepare the substitutions.\r\n                //we first parse them out as-is\r\n                for(var x in substitutions)\r\n                    substitutions[x] = _.parse(substitutions[x], {});\r\n\r\n                //Although technically constants,\r\n                //pi and e are only available when evaluating the expression so add to the subs.\r\n                //Doing this avoids rounding errors\r\n                //link e and pi\r\n                if(Settings.PARSE2NUMBER) {\r\n                    //use the value provided if the individual for some strange reason prefers this.\r\n                    //one reason could be to sub e but not pi or vice versa\r\n                    if(!('e' in substitutions))\r\n                        substitutions.e = new Symbol(Settings.E);\r\n                    if((!('pi' in substitutions)))\r\n                        substitutions.pi = new Symbol(Settings.PI);\r\n                }\r\n\r\n                var Q = [];\r\n                for(var i = 0, l = rpn.length; i < l; i++) {\r\n                    var e = rpn[i];\r\n\r\n                    //Arrays indicate a new scope so parse that out\r\n                    if(Array.isArray(e)) {\r\n                        e = this.parseRPN(e, substitutions);\r\n                    }\r\n\r\n                    if(e) {\r\n                        if(e.type === Token.OPERATOR) {\r\n                            if(e.is_prefix || e.postfix)\r\n                                //resolve the operation assocated with the prefix\r\n                                Q.push(e.operation(Q.pop()));\r\n                            else {\r\n                                var b = Q.pop();\r\n                                var a = Q.pop();\r\n                                //Throw an error if the RH value is empty. This cannot be a postfix since we already checked\r\n                                if(typeof a === 'undefined')\r\n                                    throw new OperatorError(e + ' is not a valid postfix operator at ' + e.column);\r\n\r\n                                var is_comma = e.action === 'comma';\r\n                                //convert Sets to Vectors on all operations at this point. Sets are only recognized functions or individually\r\n                                if(a instanceof Set && !is_comma)\r\n                                    a = Vector.fromSet(a);\r\n\r\n                                if(b instanceof Set && !is_comma)\r\n                                    b = Vector.fromSet(b);\r\n\r\n                                //call all the pre-operators\r\n                                this.callPeekers('pre_operator', a, b, e);\r\n\r\n                                var ans = _[e.action](a, b);\r\n\r\n                                //call all the pre-operators\r\n                                this.callPeekers('post_operator', ans, a, b, e);\r\n\r\n                                Q.push(ans);\r\n                            }\r\n                        }\r\n                        else if(e.type === Token.FUNCTION) {\r\n                            var args = Q.pop();\r\n                            var parent = args.parent; //make a note of the parent\r\n                            if(!(args instanceof Collection))\r\n                                args = Collection.create(args);\r\n                            //the return value may be a vector. If it is then we check\r\n                            //Q to see if there's another vector on the stack. If it is then\r\n                            //we check if has elements. If it does then we know that we're dealing\r\n                            //with an \"getter\" object and return the requested values\r\n\r\n                            //call the function. This is the _.callfunction method in nerdamer\r\n                            //call the function. This is the _.callfunction method in nerdamer\r\n                            var fn_name = e.value;\r\n                            var fn_args = args.getItems();\r\n\r\n                            //call the pre-function peekers\r\n                            this.callPeekers('pre_function', fn_name, fn_args);\r\n\r\n                            var ret = _.callfunction(fn_name, fn_args);\r\n\r\n                            //call the post-function peekers\r\n                            this.callPeekers('post_function', ret, fn_name, fn_args);\r\n\r\n                            var last = Q[Q.length - 1];\r\n                            var next = rpn[i + 1];\r\n                            var next_is_comma = next && next.type === Token.OPERATOR && next.value === ',';\r\n\r\n                            if(!next_is_comma && ret instanceof Vector && last && last.elements && !(last instanceof Collection)) {\r\n                                //remove the item from the queue\r\n                                var item = Q.pop();\r\n\r\n                                var getter = ret.elements[0];\r\n                                //check if it's symbolic. If so put it back and add the item to the stack\r\n                                if(!getter.isConstant()) {\r\n                                    item.getter = getter;\r\n                                    Q.push(item);\r\n                                    Q.push(ret);\r\n                                }\r\n                                else if(getter instanceof Slice) {\r\n                                    //if it's a Slice return the slice\r\n                                    Q.push(Vector.fromArray(item.elements.slice(getter.start, getter.end)));\r\n                                }\r\n                                else {\r\n                                    var index = Number(getter);\r\n                                    var il = item.elements.length;\r\n                                    //support for negative indices\r\n                                    if(index < 0)\r\n                                        index = il + index;\r\n                                    //it it's still out of bounds\r\n                                    if(index < 0 || index >= il) //index should no longer be negative since it's been reset above\r\n                                        //range error\r\n                                        throw new OutOfRangeError('Index out of range ' + (e.column + 1));\r\n\r\n                                    var element = item.elements[index];\r\n                                    //cyclic but we need to mark this for future reference\r\n                                    item.getter = index;\r\n                                    element.parent = item;\r\n\r\n                                    Q.push(element);\r\n                                }\r\n                            }\r\n                            else {\r\n                                //extend the parent reference\r\n                                if(parent)\r\n                                    ret.parent = parent;\r\n                                Q.push(ret);\r\n                            }\r\n\r\n                        }\r\n                        else {\r\n                            var subbed;\r\n                            var v = e.value;\r\n\r\n                            if(v in Settings.ALIASES)\r\n                                e = _.parse(Settings.ALIASES[e]);\r\n                            //wrap it in a symbol if need be\r\n                            else if(e.type === Token.VARIABLE_OR_LITERAL)\r\n                                e = new Symbol(v);\r\n                            else if(e.type === Token.UNIT) {\r\n                                e = new Symbol(v);\r\n                                e.isUnit = true;\r\n                            }\r\n\r\n                            //make substitutions\r\n                            //Always constants first. This avoids the being overridden\r\n                            if(v in _.CONSTANTS) {\r\n                                subbed = e;\r\n                                e = new Symbol(_.CONSTANTS[v]);\r\n                            }\r\n                            //next substitutions. This allows declared variable to be overridden\r\n                            //check if the values match to avoid erasing the multiplier.\r\n                            //Example:/e = 3*a. substutiting a for a will wipe out the multiplier.\r\n                            else if(v in substitutions && v !== substitutions[v].toString()) {\r\n                                subbed = e;\r\n                                e = substitutions[v].clone();\r\n                            }\r\n                            //next declare variables\r\n                            else if(v in VARS) {\r\n                                subbed = e;\r\n                                e = VARS[v].clone();\r\n                            }\r\n                            //make notation of what it was before\r\n                            if(subbed)\r\n                                e.subbed = subbed;\r\n\r\n                            Q.push(e);\r\n                        }\r\n                    }\r\n                }\r\n\r\n                var retval = Q[0];\r\n\r\n                if(['undefined', 'string', 'number'].indexOf(typeof retval) !== -1) {\r\n                    throw new UnexpectedTokenError('Unexpected token!');\r\n                }\r\n\r\n                return retval;\r\n            }\r\n            catch(error) {\r\n                var rethrowErrors = [OutOfFunctionDomainError];\r\n                // Rethrow certain errors in the same class to preserve them\r\n                rethrowErrors.forEach(function (E) {\r\n                    if(error instanceof E) {\r\n                        throw new E(error.message + ': ' + e.column);\r\n                    }\r\n                });\r\n\r\n                throw new ParseError(error.message + ': ' + e.column);\r\n            }\r\n        };\r\n        /**\r\n         * This is the method that triggers the parsing of the string. It generates a parse tree but processes\r\n         * it right away. The operator functions are called when their respective operators are reached. For instance\r\n         * + with cause this.add to be called with the left and right hand values. It works by walking along each\r\n         * character of the string and placing the operators on the stack and values on the output. When an operator\r\n         * having a lower order than the last is reached then the stack is processed from the last operator on the\r\n         * stack.\r\n         * @param {String} token\r\n         */\r\n\r\n        function Node(token) {\r\n            this.type = token.type;\r\n            this.value = token.value;\r\n            //the incoming token may already be a Node type\r\n            this.left = token.left;\r\n            this.right = token.right;\r\n        }\r\n\r\n        Node.prototype.toString = function () {\r\n            var left = this.left ? this.left.toString() + '---' : '';\r\n            var right = this.right ? '---' + this.right.toString() : '';\r\n            return left + '(' + this.value + ')' + right;\r\n        };\r\n\r\n        Node.prototype.toHTML = function (depth, indent) {\r\n            depth = depth || 0;\r\n            indent = typeof indent === 'undefined' ? 4 : indent;\r\n            var tab = function (n) {\r\n                return ' '.repeat(indent * n);\r\n            };\r\n            var html = '';\r\n            var left = this.left ? tab(depth + 1) + '<li>\\n' + this.left.toHTML(depth + 2, indent) + tab(depth + 1) + '</li> \\n' : '';\r\n            var right = this.right ? tab(depth + 1) + '<li>\\n' + this.right.toHTML(depth + 2, indent) + tab(depth + 1) + '</li>\\n' : '';\r\n            var html = tab(depth) + '<div class=\"' + this.type.toLowerCase() + '\"><span>' + this.value + '</span></div>' + tab(depth) + '\\n';\r\n            if(left || right) {\r\n                html += tab(depth) + '<ul>\\n' + left + right + tab(depth) + '</ul>\\n';\r\n            }\r\n            html += '';\r\n            return html;\r\n        };\r\n\r\n        this.tree = function (tokens) {\r\n            var Q = [];\r\n            for(var i = 0; i < tokens.length; i++) {\r\n                var e = tokens[i];\r\n                //Arrays indicate a new scope so parse that out\r\n                if(Array.isArray(e)) {\r\n                    e = this.tree(e);\r\n                    //if it's a comma then it's just arguments\r\n                    Q.push(e);\r\n                    continue;\r\n                }\r\n                if(e.type === Token.OPERATOR) {\r\n                    if(e.is_prefix || e.postfix) {\r\n                        //prefixes go to the left, postfix to the right\r\n                        var location = e.is_prefix ? 'left' : 'right';\r\n                        var last = Q.pop();\r\n                        e = new Node(e);\r\n                        e[location] = last;\r\n                        Q.push(e);\r\n                    }\r\n                    else {\r\n                        e = new Node(e);\r\n                        e.right = Q.pop();\r\n                        e.left = Q.pop();\r\n                        Q.push(e);\r\n                    }\r\n                }\r\n                else if(e.type === Token.FUNCTION) {\r\n                    e = new Node(e);\r\n                    var args = Q.pop();\r\n                    e.right = args;\r\n                    if(e.value === 'object') {\r\n                        //check if Q has a value\r\n                        var last = Q[Q.length - 1];\r\n                        if(last) {\r\n                            while(last.right) {\r\n                                last = last.right;\r\n                            }\r\n                            last.right = e;\r\n                            continue;\r\n                        }\r\n                    }\r\n\r\n                    Q.push(e);\r\n                }\r\n                else {\r\n                    Q.push(new Node(e));\r\n                }\r\n            }\r\n\r\n            return Q[0];\r\n        };\r\n        this.parse = function (e, substitutions) {\r\n            e = prepare_expression(e);\r\n            substitutions = substitutions || {};\r\n            //three passes but easier to debug\r\n            var tokens = this.tokenize(e);\r\n            var rpn = this.toRPN(tokens);\r\n            return this.parseRPN(rpn, substitutions);\r\n        };\r\n        /**\r\n         * TODO: Switch to Parser.tokenize for this method\r\n         * Reads a string into an array of Symbols and operators\r\n         * @param {String} expression_string\r\n         * @returns {Array}\r\n         */\r\n        this.toObject = function (expression_string) {\r\n            var objectify = function (tokens) {\r\n                var output = [];\r\n                for(var i = 0, l = tokens.length; i < l; i++) {\r\n                    var token = tokens[i];\r\n                    var v = token.value;\r\n                    if(token.type === Token.VARIABLE_OR_LITERAL) {\r\n                        output.push(new Symbol(v));\r\n                    }\r\n                    else if(token.type === Token.FUNCTION) {\r\n                        //jump ahead since the next object are the arguments\r\n                        i++;\r\n                        //create a symbolic function and stick it on output\r\n                        var f = _.symfunction(v, objectify(tokens[i]));\r\n                        f.isConversion = true;\r\n                        output.push(f);\r\n                    }\r\n                    else if(token.type === Token.OPERATOR) {\r\n                        output.push(v);\r\n                    }\r\n                    else {\r\n                        output.push(objectify(token));\r\n                    }\r\n                }\r\n\r\n                return output;\r\n            };\r\n            return objectify(_.tokenize(expression_string));\r\n        };\r\n\r\n        // A helper method for toTeX\r\n        var chunkAtCommas = function (arr) {\r\n            var j, k = 0, chunks = [[]];\r\n            for(var j = 0, l = arr.length; j < l; j++) {\r\n                if(arr[j] === ',') {\r\n                    k++;\r\n                    chunks[k] = [];\r\n                }\r\n                else {\r\n                    chunks[k].push(arr[j]);\r\n                }\r\n            }\r\n            return chunks;\r\n        };\r\n\r\n        // Helper method for toTeX\r\n        var rem_brackets = function (str) {\r\n            return str.replace(/^\\\\left\\((.+)\\\\right\\)$/g, function (str, a) {\r\n                if(a)\r\n                    return a;\r\n                return str;\r\n            });\r\n        };\r\n\r\n        var remove_redundant_powers = function (arr) {\r\n            // The filtered array\r\n            var narr = [];\r\n\r\n            while(arr.length) {\r\n                // Remove the element from the front\r\n                var e = arr.shift();\r\n                var next = arr[0];\r\n                var next_is_array = isArray(next);\r\n                var next_is_minus = next === '-';\r\n\r\n                // Remove redundant plusses \r\n                if(e === '^') {\r\n                    if(next === '+') {\r\n                        arr.shift();\r\n                    }\r\n                    else if(next_is_array && next[0] === '+') {\r\n                        next.shift();\r\n                    }\r\n\r\n                    // Remove redundant parentheses\r\n                    if(next_is_array && next.length === 1) {\r\n                        arr.unshift(arr.shift()[0]);\r\n                    }\r\n                }\r\n\r\n                // Check if it's a negative power\r\n                if(e === '^' && (next_is_array && next[0] === '-' || next_is_minus)) {\r\n                    // If so:\r\n                    // - Remove it from the new array, place a one and a division sign in that array and put it back\r\n                    var last = narr.pop();\r\n                    // Check if it's something multiplied by\r\n                    var before = narr[narr.length - 1];\r\n                    var before_last = '1';\r\n\r\n                    if(before === '*') {\r\n                        narr.pop();\r\n                        // For simplicity we just pop it. \r\n                        before_last = narr.pop();\r\n                    }\r\n                    // Implied multiplication\r\n                    else if(isArray(before)) {\r\n                        before_last = narr.pop();\r\n                    }\r\n\r\n                    narr.push(before_last, '/', last, e);\r\n\r\n                    // Remove the negative sign from the power \r\n                    if(next_is_array) {\r\n                        next.shift();\r\n                    }\r\n                    else {\r\n                        arr.shift();\r\n                    }\r\n\r\n                    // Remove it from the array so we don't end up with redundant parentheses if we can\r\n                    if(next_is_array && next.length === 1) {\r\n                        narr.push(arr.shift()[0]);\r\n                    }\r\n                }\r\n                else {\r\n                    narr.push(e);\r\n                }\r\n            }\r\n\r\n            return narr;\r\n        };\r\n        /*\r\n         * Convert expression or object to LaTeX\r\n         * @param {String} expression_or_obj\r\n         * @param {object} opt\r\n         * @returns {String}\r\n         */\r\n        this.toTeX = function (expression_or_obj, opt) {\r\n            opt = opt || {};\r\n            // Add decimal option as per issue #579. Consider passing an object to Latex.latex as option instead of string\r\n            var decimals = opt.decimals === true ? 'decimals' : undefined;\r\n\r\n            var obj = typeof expression_or_obj === 'string' ? this.toObject(expression_or_obj) : expression_or_obj,\r\n                    TeX = [],\r\n                    cdot = typeof opt.cdot === 'undefined' ? '\\\\cdot' : opt.cdot; //set omit cdot to true by default\r\n\r\n            // Remove negative powers as per issue #570\r\n            obj = remove_redundant_powers(obj);\r\n\r\n            if(isArray(obj)) {\r\n                var nobj = [], a, b;\r\n                //first handle ^\r\n                for(var i = 0; i < obj.length; i++) {\r\n                    a = obj[i];\r\n\r\n                    if(obj[i + 1] === '^') {\r\n                        b = obj[i + 2];\r\n                        nobj.push(LaTeX.braces(this.toTeX([a])) + '^' + LaTeX.braces(this.toTeX([b])));\r\n                        i += 2;\r\n                    }\r\n                    else {\r\n                        nobj.push(a);\r\n                    }\r\n                }\r\n                obj = nobj;\r\n            }\r\n\r\n            for(var i = 0, l = obj.length; i < l; i++) {\r\n                var e = obj[i];\r\n\r\n                // Convert * to cdot\r\n                if(e === '*') {\r\n                    e = cdot;\r\n                }\r\n\r\n                if(isSymbol(e)) {\r\n                    if(e.group === FN) {\r\n                        var fname = e.fname, f;\r\n\r\n                        if(fname === SQRT)\r\n                            f = '\\\\sqrt' + LaTeX.braces(this.toTeX(e.args));\r\n                        else if(fname === ABS)\r\n                            f = LaTeX.brackets(this.toTeX(e.args), 'abs');\r\n                        else if(fname === PARENTHESIS)\r\n                            f = LaTeX.brackets(this.toTeX(e.args), 'parens');\r\n                        else if(fname === Settings.LOG10) {\r\n                            f = '\\\\' + Settings.LOG10_LATEX + '\\\\left( ' + this.toTeX(e.args) + '\\\\right)';\r\n                        }\r\n                        else if(fname === 'integrate') {\r\n                            /* Retrive [Expression, x] */\r\n                            var chunks = chunkAtCommas(e.args);\r\n                            /* Build TeX */\r\n                            var expr = LaTeX.braces(this.toTeX(chunks[0])),\r\n                                    dx = this.toTeX(chunks[1]);\r\n                            f = '\\\\int ' + expr + '\\\\, d' + dx;\r\n                        }\r\n                        else if(fname === 'defint') {\r\n                            var chunks = chunkAtCommas(e.args),\r\n                                    expr = LaTeX.braces(this.toTeX(chunks[0])),\r\n                                    dx = this.toTeX(chunks[3]),\r\n                                    lb = this.toTeX(chunks[1]),\r\n                                    ub = this.toTeX(chunks[2]);\r\n                            f = '\\\\int\\\\limits_{' + lb + '}^{' + ub + '} ' + expr + '\\\\, d' + dx;\r\n\r\n                        }\r\n                        else if(fname === 'diff') {\r\n                            var chunks = chunkAtCommas(e.args);\r\n                            var dx = '', expr = LaTeX.braces(this.toTeX(chunks[0]));\r\n                            /* Handle cases: one argument provided, we need to guess the variable, and assume n = 1 */\r\n                            if(chunks.length === 1) {\r\n                                var vars = [];\r\n                                for(j = 0; j < chunks[0].length; j++) {\r\n                                    if(chunks[0][j].group === 3) {\r\n                                        vars.push(chunks[0][j].value);\r\n                                    }\r\n                                }\r\n                                vars.sort();\r\n                                dx = vars.length > 0 ? ('\\\\frac{d}{d ' + vars[0] + '}') : '\\\\frac{d}{d x}';\r\n                            }\r\n                            /* If two arguments, we have expression and variable, we assume n = 1 */\r\n                            else if(chunks.length === 2) {\r\n                                dx = '\\\\frac{d}{d ' + chunks[1] + '}';\r\n                            }\r\n                            /* If we have more than 2 arguments, we assume we've got everything */\r\n                            else {\r\n                                dx = '\\\\frac{d^{' + chunks[2] + '}}{d ' + this.toTeX(chunks[1]) + '^{' + chunks[2] + '}}';\r\n                            }\r\n\r\n                            f = dx + '\\\\left(' + expr + '\\\\right)';\r\n\r\n                        }\r\n                        else if(fname === 'sum' || fname === 'product') {\r\n                            // Split e.args into 4 parts based on locations of , symbols.\r\n                            var argSplit = [[], [], [], []], j = 0, i;\r\n                            for(i = 0; i < e.args.length; i++) {\r\n                                if(e.args[i] === ',') {\r\n                                    j++;\r\n                                    continue;\r\n                                }\r\n                                argSplit[j].push(e.args[i]);\r\n                            }\r\n                            // Then build TeX string.\r\n                            f = (fname === 'sum' ? '\\\\sum_' : '\\\\prod_') + LaTeX.braces(this.toTeX(argSplit[1]) + ' = ' + this.toTeX(argSplit[2]));\r\n                            f += '^' + LaTeX.braces(this.toTeX(argSplit[3])) + LaTeX.braces(this.toTeX(argSplit[0]));\r\n                        }\r\n                        else if(fname === 'limit') {\r\n                            var args = chunkAtCommas(e.args).map(function (x) {\r\n                                if(Array.isArray(x))\r\n                                    return _.toTeX(x.join(''));\r\n                                return _.toTeX(String(x));\r\n                            });\r\n                            f = '\\\\lim_' + LaTeX.braces(args[1] + '\\\\to ' + args[2]) + ' ' + LaTeX.braces(args[0]);\r\n                        }\r\n                        else if(fname === FACTORIAL || fname === DOUBLEFACTORIAL)\r\n                            f = this.toTeX(e.args) + (fname === FACTORIAL ? '!' : '!!');\r\n                        else {\r\n\r\n                            f = LaTeX.latex(e, decimals);\r\n                            //f = '\\\\mathrm'+LaTeX.braces(fname.replace(/_/g, '\\\\_')) + LaTeX.brackets(this.toTeX(e.args), 'parens');\r\n                        }\r\n\r\n                        TeX.push(f);\r\n                    }\r\n                    else {\r\n                        TeX.push(LaTeX.latex(e, decimals));\r\n                    }\r\n                }\r\n                else if(isArray(e)) {\r\n                    TeX.push(LaTeX.brackets(this.toTeX(e)));\r\n                }\r\n                else {\r\n                    if(e === '/')\r\n                        TeX.push(LaTeX.frac(rem_brackets(TeX.pop()), rem_brackets(this.toTeX([obj[++i]]))));\r\n                    else\r\n                        TeX.push(e);\r\n                }\r\n            }\r\n\r\n            return TeX.join(' ');\r\n        };\r\n\r\n//Parser.functions ==============================================================\r\n        /* Although parens is not a \"real\" function it is important in some cases when the\r\n         * symbol must carry parenthesis. Once set you don't have to worry about it anymore\r\n         * as the parser will get rid of it at the first opportunity\r\n         */\r\n        function parens(symbol) {\r\n            if(Settings.PARSE2NUMBER) {\r\n                return symbol;\r\n            }\r\n            return _.symfunction('parens', [symbol]);\r\n        }\r\n\r\n        function abs(symbol) {\r\n\r\n            //|-∞| = ∞\r\n            if(symbol.isInfinity) {\r\n                return Symbol.infinity();\r\n            }\r\n            if(symbol.multiplier.lessThan(0))\r\n                symbol.multiplier.negate();\r\n\r\n            if(symbol.isImaginary()) {\r\n                var re = symbol.realpart();\r\n                var im = symbol.imagpart();\r\n                if(re.isConstant() && im.isConstant())\r\n                    return sqrt(_.add(_.pow(re, new Symbol(2)), _.pow(im, new Symbol(2))));\r\n            }\r\n            else if(isNumericSymbol(symbol) || even(symbol.power)) {\r\n                return symbol;\r\n            }\r\n\r\n            if(symbol.isComposite()) {\r\n                var ms = [];\r\n                symbol.each(function (x) {\r\n                    ms.push(x.multiplier);\r\n                });\r\n                var gcd = Math2.QGCD.apply(null, ms);\r\n                if(gcd.lessThan(0)) {\r\n                    symbol.multiplier = symbol.multiplier.multiply(new Frac(-1));\r\n                    symbol.distributeMultiplier();\r\n                }\r\n            }\r\n\r\n            //convert |n*x| to n*|x|\r\n            var m = _.parse(symbol.multiplier);\r\n            symbol.toUnitMultiplier();\r\n\r\n            return _.multiply(m, _.symfunction(ABS, [symbol]));\r\n        }\r\n        /**\r\n         * The factorial function\r\n         * @param {Symbol} symbol\r\n         * @return {Symbol}\r\n         */\r\n        function factorial(symbol) {\r\n            var retval;\r\n            if(isVector(symbol)) {\r\n                var V = new Vector();\r\n                symbol.each(function (x, i) {\r\n                    //i start at one.\r\n                    V.set(i - 1, factorial(x));\r\n                });\r\n                return V;\r\n            }\r\n            if(isMatrix(symbol)) {\r\n                var M = new Matrix();\r\n                symbol.each(function (x, i, j) {\r\n                    //i start at one.\r\n                    M.set(i, j, factorial(x));\r\n                });\r\n                return M;\r\n            }\r\n            if(Settings.PARSE2NUMBER && symbol.isConstant()) {\r\n                if(isInt(symbol)) {\r\n                    retval = Math2.bigfactorial(symbol);\r\n                }\r\n                else {\r\n                    retval = Math2.gamma(symbol.multiplier.add(new Frac(1)).toDecimal());\r\n                }\r\n\r\n                retval = bigConvert(retval);\r\n                return retval;\r\n            }\r\n            else if(symbol.isConstant()) {\r\n                var den = symbol.getDenom();\r\n                if(den.equals(2)) {\r\n                    var num = symbol.getNum();\r\n                    var a, b, c, n;\r\n\r\n                    if(!symbol.multiplier.isNegative()) {\r\n                        n = _.add(num, new Symbol(1)).multiplier.divide(new Frac(2));\r\n                        a = Math2.bigfactorial(new Frac(2).multiply(n));\r\n                        b = _.pow(new Symbol(4), new Symbol(n)).multiplier.multiply(Math2.bigfactorial(n));\r\n                    }\r\n                    else {\r\n                        n = _.subtract(num.negate(), new Symbol(1)).multiplier.divide(new Frac(2));\r\n                        a = _.pow(new Symbol(-4), new Symbol(n)).multiplier.multiply(Math2.bigfactorial(n));\r\n                        b = Math2.bigfactorial(new Frac(2).multiply(n));\r\n                    }\r\n                    c = a.divide(b);\r\n                    return _.multiply(_.parse('sqrt(pi)'), new Symbol(c));\r\n                }\r\n            }\r\n            return _.symfunction(FACTORIAL, [symbol]);\r\n        }\r\n        ;\r\n        /**\r\n         * Returns the continued fraction of a number\r\n         * @param {Symbol} symbol\r\n         * @param {Symbol} n\r\n         * @returns {Symbol}\r\n         */\r\n        function continued_fraction(symbol, n) {\r\n            var _symbol = evaluate(symbol);\r\n            if(_symbol.isConstant()) {\r\n                var cf = Math2.continuedFraction(_symbol, n);\r\n                //convert the fractions array to a new Vector\r\n                var fractions = Vector.fromArray(cf.fractions.map(function (x) {\r\n                    return new Symbol(x);\r\n                }));\r\n                return Vector.fromArray([new Symbol(cf.sign), new Symbol(cf.whole), fractions]);\r\n            }\r\n            return _.symfunction('continued_fraction', arguments);\r\n        }\r\n        /**\r\n         * Returns the error function\r\n         * @param {Symbol} symbol\r\n         * @returns {Symbol}\r\n         */\r\n        function erf(symbol) {\r\n            var _symbol = evaluate(symbol);\r\n\r\n            if(_symbol.isConstant()) {\r\n                return Math2.erf(_symbol);\r\n            }\r\n            else if(_symbol.isImaginary()) {\r\n                return complex.erf(symbol);\r\n            }\r\n            return _.symfunction('erf', arguments);\r\n        }\r\n        ;\r\n        /**\r\n         * The mod function\r\n         * @param {Symbol} symbol1\r\n         * @param {Symbol} symbol2\r\n         * @returns {Symbol}\r\n         */\r\n        function mod(symbol1, symbol2) {\r\n            if(symbol1.isConstant() && symbol2.isConstant()) {\r\n                var retval = new Symbol(1);\r\n                retval.multiplier = retval.multiplier.multiply(symbol1.multiplier.mod(symbol2.multiplier));\r\n                return retval;\r\n            }\r\n            //try to see if division has remainder of zero\r\n            var r = _.divide(symbol1.clone(), symbol2.clone());\r\n            if(isInt(r))\r\n                return new Symbol(0);\r\n            return _.symfunction('mod', [symbol1, symbol2]);\r\n        }\r\n        /**\r\n         * A branghing function\r\n         * @param {Boolean} condition\r\n         * @param {Symbol} a\r\n         * @param {Symbol} b\r\n         * @returns {Symbol}\r\n         */\r\n        function IF(condition, a, b) {\r\n            if(typeof condition !== 'boolean')\r\n                if(isNumericSymbol(condition))\r\n                    condition = !!Number(condition);\r\n            if(condition)\r\n                return a;\r\n            return b;\r\n        }\r\n        /**\r\n         *\r\n         * @param {Matrix|Vector|Set|Collection} obj\r\n         * @param {Symbol} item\r\n         * @returns {Boolean}\r\n         */\r\n        function is_in(obj, item) {\r\n            if(isMatrix(obj)) {\r\n                for(var i = 0, l = obj.rows(); i < l; i++) {\r\n                    for(var j = 0, l2 = obj.cols(); j < l2; j++) {\r\n                        var element = obj.elements[i][j];\r\n                        if(element.equals(item))\r\n                            return new Symbol(1);\r\n                    }\r\n                }\r\n            }\r\n            else if(obj.elements) {\r\n                for(var i = 0, l = obj.elements.length; i < l; i++) {\r\n                    if(obj.elements[i].equals(item))\r\n                        return new Symbol(1);\r\n                }\r\n            }\r\n\r\n            return new Symbol(0);\r\n        }\r\n\r\n        /**\r\n         * A symbolic extension for sinc\r\n         * @param {Symbol} symbol\r\n         * @returns {Symbol}\r\n         */\r\n        function sinc(symbol) {\r\n            if(Settings.PARSE2NUMBER) {\r\n                if(symbol.isConstant()) {\r\n                    return new Symbol(Math2.sinc(symbol));\r\n                }\r\n                return _.parse(format('sin({0})/({0})', symbol));\r\n            }\r\n            return _.symfunction('sinc', [symbol]);\r\n        }\r\n\r\n        /**\r\n         * A symbolic extension for exp. This will auto-convert all instances of exp(x) to e^x.\r\n         * Thanks @ Happypig375\r\n         * @param {Symbol} symbol\r\n         * @returns {Symbol}\r\n         */\r\n        function exp(symbol) {\r\n            if(symbol.fname === Settings.LOG && symbol.isLinear()) {\r\n                return _.pow(symbol.args[0], Symbol.create(symbol.multiplier));\r\n            }\r\n            return _.parse(format('e^({0})', symbol));\r\n        }\r\n\r\n        /**\r\n         * Converts value degrees to radians\r\n         * @param {Symbol} symbol\r\n         * @returns {Symbol}\r\n         */\r\n        function radians(symbol) {\r\n            return _.parse(format('({0})*pi/180', symbol));\r\n        }\r\n\r\n        /**\r\n         * Converts value from radians to degrees\r\n         * @param {Symbol} symbol\r\n         * @returns {Symbol}\r\n         */\r\n        function degrees(symbol) {\r\n            return _.parse(format('({0})*180/pi', symbol));\r\n        }\r\n\r\n        function nroots(symbol) {\r\n            var a, b;\r\n            if(symbol.group === FN && symbol.fname === '') {\r\n                a = Symbol.unwrapPARENS(_.parse(symbol).toLinear());\r\n                b = _.parse(symbol.power);\r\n            }\r\n            else if(symbol.group === P) {\r\n                a = _.parse(symbol.value);\r\n                b = _.parse(symbol.power);\r\n            }\r\n\r\n            if(a && b && a.group === N && b.group === N) {\r\n                var _roots = [];\r\n                var parts = Symbol.toPolarFormArray(symbol);\r\n                var r = _.parse(a).abs().toString();\r\n                //https://en.wikipedia.org/wiki/De_Moivre%27s_formula\r\n                var x = arg(a).toString();\r\n                var n = b.multiplier.den.toString();\r\n                var p = b.multiplier.num.toString();\r\n\r\n                var formula = \"(({0})^({1})*(cos({3})+({2})*sin({3})))^({4})\";\r\n                for(var i = 0; i < n; i++) {\r\n                    var t = evaluate(_.parse(format(\"(({0})+2*pi*({1}))/({2})\", x, i, n))).multiplier.toDecimal();\r\n                    _roots.push(evaluate(_.parse(format(formula, r, n, Settings.IMAGINARY, t, p))));\r\n                }\r\n                return Vector.fromArray(_roots);\r\n            }\r\n            else if(symbol.isConstant(true)) {\r\n                var sign = symbol.sign();\r\n                var x = evaluate(symbol.abs());\r\n                var root = _.sqrt(x);\r\n\r\n                var _roots = [root.clone(), root.negate()];\r\n\r\n                if(sign < 0)\r\n                    _roots = _roots.map(function (x) {\r\n                        return _.multiply(x, Symbol.imaginary());\r\n                    });\r\n            }\r\n            else {\r\n                _roots = [_.parse(symbol)];\r\n            }\r\n\r\n            return Vector.fromArray(_roots);\r\n        }\r\n\r\n        /**\r\n         * Rationalizes a symbol\r\n         * @param {Symbol} symbol\r\n         * @returns {Symbol}\r\n         */\r\n        function rationalize(symbol) {\r\n            if(symbol.isComposite()) {\r\n                var retval = new Symbol(0);\r\n                var num, den, retnum, retden, a, b, n, d;\r\n                symbol.each(function (x) {\r\n                    num = x.getNum();\r\n                    den = x.getDenom();\r\n                    retnum = retval.getNum();\r\n                    retden = retval.getDenom();\r\n                    a = _.multiply(den, retnum);\r\n                    b = _.multiply(num, retden);\r\n                    n = _.expand(_.add(a, b));\r\n                    d = _.multiply(retden, den);\r\n                    retval = _.divide(n, d);\r\n                }, true);\r\n\r\n                return retval;\r\n            }\r\n            return symbol;\r\n        }\r\n\r\n        /**\r\n         * The square root function\r\n         * @param {Symbol} symbol\r\n         * @returns {Symbol}\r\n         */\r\n        function sqrt(symbol) {\r\n            if(!isSymbol(symbol)) {\r\n                symbol = _.parse(symbol);\r\n            }\r\n            \r\n            // Exit early for EX\r\n            if(symbol.group === EX) {\r\n                return _.symfunction(SQRT, [symbol]);\r\n            }\r\n\r\n            if(symbol.fname === '' && symbol.power.equals(1))\r\n                symbol = symbol.args[0];\r\n\r\n            var is_negative = symbol.multiplier.sign() < 0;\r\n\r\n            if(Settings.PARSE2NUMBER) {\r\n                if(symbol.isConstant() && !is_negative) {\r\n                    return new Symbol(bigDec.sqrt(symbol.multiplier.toDecimal()));\r\n                }\r\n                else if(symbol.isImaginary()) {\r\n                    return complex.sqrt(symbol);\r\n                }\r\n                else if(symbol.group === S) {\r\n                    return _.symfunction('sqrt', [symbol]);\r\n                }\r\n            }\r\n\r\n            var img, retval,\r\n                    isConstant = symbol.isConstant();\r\n\r\n            if(symbol.group === CB && symbol.isLinear()) {\r\n                var m = sqrt(Symbol(symbol.multiplier));\r\n                for(var s in symbol.symbols) {\r\n                    var x = symbol.symbols[s];\r\n                    m = _.multiply(m, sqrt(x));\r\n                }\r\n\r\n                retval = m;\r\n            }\r\n            //if the symbol is already sqrt then it's that symbol^(1/4) and we can unwrap it\r\n            else if(symbol.fname === SQRT) {\r\n                var s = symbol.args[0];\r\n                var ms = symbol.multiplier;\r\n                s.setPower(symbol.power.multiply(new Frac(0.25)));\r\n                retval = s;\r\n                //grab the multiplier\r\n                if(!ms.equals(1))\r\n                    retval = _.multiply(sqrt(_.parse(ms)), retval);\r\n            }\r\n            //if the symbol is a fraction then we don't keep can unwrap it. For instance\r\n            //no need to keep sqrt(x^(1/3))\r\n            else if(!symbol.power.isInteger()) {\r\n                symbol.setPower(symbol.power.multiply(new Frac(0.5)));\r\n                retval = symbol;\r\n            }\r\n            else if(symbol.multiplier < 0 && symbol.group === S) {\r\n                var a = _.parse(symbol.multiplier).negate();\r\n                var b = _.parse(symbol).toUnitMultiplier().negate();\r\n                retval = _.multiply(_.symfunction(Settings.SQRT, [b]), sqrt(a));\r\n            }\r\n            else {\r\n\r\n                //Related to issue #401. Since sqrt(a)*sqrt(b^-1) relates in issues, we'll change the form\r\n                //to sqrt(a)*sqrt(b)^1 for better simplification\r\n                //the sign of the power\r\n                var sign = symbol.power.sign();\r\n                //remove the sign\r\n                symbol.power = symbol.power.abs();\r\n\r\n                //if the symbols is imagary then we place in the imaginary part. We'll return it\r\n                //as a product\r\n                if(isConstant && symbol.multiplier.lessThan(0)) {\r\n                    img = Symbol.imaginary();\r\n                    symbol.multiplier = symbol.multiplier.abs();\r\n                }\r\n\r\n                var q = symbol.multiplier.toDecimal(),\r\n                        qa = Math.abs(q),\r\n                        t = Math.sqrt(qa);\r\n\r\n                var m;\r\n                //it's a perfect square so take the square\r\n                if(isInt(t)) {\r\n                    m = new Symbol(t);\r\n                }\r\n                else if(isInt(q)) {\r\n                    var factors = Math2.ifactor(q);\r\n                    var tw = 1;\r\n                    for(var x in factors) {\r\n                        var n = factors[x],\r\n                                nn = (n - (n % 2)); //get out the whole numbers\r\n                        if(nn) { //if there is a whole number ...\r\n                            var w = Math.pow(x, nn);\r\n                            tw *= Math.pow(x, nn / 2); //add to total wholes\r\n                            q /= w; //reduce the number by the wholes\r\n                        }\r\n                    }\r\n                    m = _.multiply(_.symfunction(SQRT, [new Symbol(q)]), new Symbol(tw));\r\n                }\r\n                else {\r\n                    //reduce the numerator and denominator using prime factorization\r\n                    var c = [new Symbol(symbol.multiplier.num), new Symbol(symbol.multiplier.den)];\r\n                    var r = [new Symbol(1), new Symbol(1)];\r\n                    var sq = [new Symbol(1), new Symbol(1)];\r\n                    for(var i = 0; i < 2; i++) {\r\n                        var n = c[i];\r\n                        //get the prime factors and loop through each.\r\n                        pfactor(n).each(function (x) {\r\n                            x = Symbol.unwrapPARENS(x);\r\n                            var b = x.clone().toLinear();\r\n                            var p = Number(x.power);\r\n                            //We'll consider it safe to use the native Number since 2^1000 is already a pretty huge number\r\n                            var rem = p % 2; //get the remainder. This will be 1 if 3 since sqrt(n^2) = n where n is positive\r\n                            var w = (p - rem) / 2; //get the whole numbers of n/2\r\n                            r[i] = _.multiply(r[i], _.pow(b, new Symbol(w)));\r\n                            sq[i] = _.multiply(sq[i], sqrt(_.pow(b, new Symbol(rem))));\r\n                        });\r\n                    }\r\n                    m = _.divide(_.multiply(r[0], sq[0]), _.multiply(r[1], sq[1]));\r\n                }\r\n\r\n\r\n                //strip the multiplier since we already took the sqrt\r\n                symbol = symbol.toUnitMultiplier(true);\r\n                //if the symbol is one just return one and not the sqrt function\r\n                if(symbol.isOne()) {\r\n                    retval = symbol;\r\n                }\r\n                else if(even(symbol.power.toString())) {\r\n                    //just raise it to the 1/2\r\n                    retval = _.pow(symbol.clone(), new Symbol(0.5));\r\n                }\r\n                else {\r\n                    retval = _.symfunction(SQRT, [symbol]);\r\n                }\r\n\r\n                //put back the sign that was removed earlier\r\n                if(sign < 0)\r\n                    retval.power.negate();\r\n\r\n                if(m)\r\n                    retval = _.multiply(m, retval);\r\n\r\n                if(img)\r\n                    retval = _.multiply(img, retval);\r\n            }\r\n\r\n            if(is_negative && Settings.PARSE2NUMBER)\r\n                return _.parse(retval);\r\n\r\n            return retval;\r\n        }\r\n\r\n        /**\r\n         * The cube root function\r\n         * @param {Symbol} symbol\r\n         * @returns {Symbol}\r\n         */\r\n        function cbrt(symbol) {\r\n            if(!symbol.isConstant(true)) {\r\n                var retval;\r\n\r\n                var n = symbol.power / 3;\r\n                //take the cube root of the multplier\r\n                var m = _.pow(_.parse(symbol.multiplier), new Symbol(1 / 3));\r\n                //strip the multiplier\r\n                var sym = symbol.toUnitMultiplier();\r\n\r\n                //simplify the power\r\n                if(isInt(n)) {\r\n                    retval = _.pow(sym.toLinear(), _.parse(n));\r\n                }\r\n                else {\r\n                    if(sym.group === CB) {\r\n                        retval = new Symbol(1);\r\n                        sym.each(function (x) {\r\n                            retval = _.multiply(retval, cbrt(x));\r\n                        });\r\n                    }\r\n                    else {\r\n                        retval = _.symfunction('cbrt', [sym]);\r\n                    }\r\n                }\r\n\r\n                return _.multiply(m, retval);\r\n            }\r\n            return nthroot(symbol, new Symbol(3));\r\n        }\r\n\r\n        function scientific(symbol, sigfigs) {\r\n            //Just set the flag and keep it moving. Symbol.toString will deal with how to\r\n            //display this\r\n            symbol.scientific = sigfigs || 10;\r\n            return symbol;\r\n        }\r\n\r\n        /**\r\n         *\r\n         * @param {Symbol} num - the number being raised\r\n         * @param {Symbol} p - the exponent\r\n         * @param {type} prec - the precision wanted\r\n         * @param {bool} asbig - true if a bigDecimal is wanted\r\n         * @returns {Symbol}\r\n         */\r\n        function nthroot(num, p, prec, asbig) {\r\n            //clone p and convert to a number if possible\r\n            p = evaluate(_.parse(p));\r\n\r\n            //cannot calculate if p = 0. nthroot(0, 0) => 0^(1/0) => undefined\r\n            if(p.equals(0)) {\r\n                throw new UndefinedError('Unable to calculate nthroots of zero');\r\n            }\r\n\r\n            //Stop computation if it negative and even since we have an imaginary result\r\n            if(num < 0 && even(p))\r\n                throw new Error('Cannot calculate nthroot of negative number for even powers');\r\n\r\n            //return non numeric values unevaluated\r\n            if(!num.isConstant(true)) {\r\n                return _.symfunction('nthroot', arguments);\r\n            }\r\n\r\n            //evaluate numeric values\r\n            if(num.group !== N) {\r\n                num = evaluate(num);\r\n            }\r\n\r\n            //default is to return a big value\r\n            if(typeof asbig === 'undefined')\r\n                asbig = true;\r\n\r\n            prec = prec || 25;\r\n\r\n            var sign = num.sign();\r\n            var retval;\r\n            var ans;\r\n\r\n            if(sign < 0) {\r\n                num = abs(num); //remove the sign\r\n            }\r\n\r\n            if(isInt(num) && p.isConstant()) {\r\n\r\n                if(num < 18446744073709551616) {\r\n                    //2^64\r\n                    ans = Frac.create(Math.pow(num, 1 / p));\r\n                }\r\n                else {\r\n                    ans = Math2.nthroot(num, p);\r\n                }\r\n\r\n                var retval;\r\n                if(asbig) {\r\n                    retval = new Symbol(ans);\r\n                }\r\n                retval = new Symbol(ans.toDecimal(prec));\r\n\r\n                return _.multiply(new Symbol(sign), retval);\r\n            }\r\n        }\r\n\r\n        function pfactor(symbol) {\r\n            //Fix issue #458 | nerdamer(\"sqrt(1-(3.3333333550520926e-7)^2)\").evaluate().text()\r\n            //More Big Number issues >:(\r\n            if(symbol.greaterThan(9.999999999998891e+41) || symbol.equals(-1))\r\n                return symbol;\r\n            //Fix issue #298\r\n            if(symbol.equals(Math.PI))\r\n                return new Symbol(Math.PI);\r\n            //evaluate the symbol to merge constants\r\n            symbol = evaluate(symbol.clone());\r\n\r\n            if(symbol.isConstant()) {\r\n                var retval = new Symbol(1);\r\n                var m = symbol.toString();\r\n                if(isInt(m)) {\r\n                    var factors = Math2.ifactor(m);\r\n                    for(var factor in factors) {\r\n                        var p = factors[factor];\r\n                        retval = _.multiply(retval, _.symfunction('parens', [new Symbol(factor).setPower(new Frac(p))]));\r\n                    }\r\n                }\r\n                else {\r\n                    var n = pfactor(new Symbol(symbol.multiplier.num));\r\n                    var d = pfactor(new Symbol(symbol.multiplier.den));\r\n                    retval = _.multiply(_.symfunction('parens', [n]), _.symfunction('parens', [d]).invert());\r\n                }\r\n            }\r\n            else\r\n                retval = _.symfunction('pfactor', arguments);\r\n            return retval;\r\n        }\r\n\r\n        /**\r\n         * Get's the real part of a complex number. Return number if real\r\n         * @param {Symbol} symbol\r\n         * @returns {Symbol}\r\n         */\r\n        function realpart(symbol) {\r\n            return symbol.realpart();\r\n        }\r\n\r\n        /**\r\n         * Get's the imaginary part of a complex number\r\n         * @param {Symbol} symbol\r\n         * @returns {Symbol}\r\n         */\r\n        function imagpart(symbol) {\r\n            return symbol.imagpart();\r\n        }\r\n\r\n        /**\r\n         * Computes the conjugate of a complex number\r\n         * @param {Symbol} symbol\r\n         * @returns {Symbol}\r\n         */\r\n        function conjugate(symbol) {\r\n            var re = symbol.realpart();\r\n            var im = symbol.imagpart();\r\n            return _.add(re, _.multiply(im.negate(), Symbol.imaginary()));\r\n        }\r\n\r\n        /**\r\n         * Returns the arugment of a complex number\r\n         * @param {Symbol} symbol\r\n         * @returns {Symbol}\r\n         */\r\n        function arg(symbol) {\r\n            var re = symbol.realpart();\r\n            var im = symbol.imagpart();\r\n            if(re.isConstant() && im.isConstant())\r\n                return new Symbol(Math.atan2(im, re));\r\n            return _.symfunction('atan2', [im, re]);\r\n        }\r\n\r\n        /**\r\n         * Returns the arugment of a complex number\r\n         * @param {Symbol} symbol\r\n         * @returns {Symbol}\r\n         */\r\n        function arg(symbol) {\r\n            var re = symbol.realpart();\r\n            var im = symbol.imagpart();\r\n            if(re.isConstant() && im.isConstant()) {\r\n                if(im.equals(0) && re.equals(-1)) {\r\n                    return _.parse('pi');\r\n                }\r\n                else if(im.equals(1) && re.equals(0)) {\r\n                    return _.parse('pi/2');\r\n                }\r\n                else if(im.equals(1) && re.equals(1)) {\r\n                    return _.parse('pi/4');\r\n                }\r\n                return new Symbol(Math.atan2(im, re));\r\n            }\r\n            return _.symfunction('atan2', [im, re]);\r\n        }\r\n\r\n        /**\r\n         * Returns the polarform of a complex number\r\n         * @param {Symbol} symbol\r\n         * @returns {Symbol}\r\n         */\r\n        function polarform(symbol) {\r\n            var p, r, e, theta;\r\n            p = Symbol.toPolarFormArray(symbol);\r\n            theta = p[1];\r\n            r = p[0];\r\n            e = _.parse(format('e^({0}*({1}))', Settings.IMAGINARY, theta));\r\n            return _.multiply(r, e);\r\n        }\r\n\r\n        /**\r\n         * Returns the rectangular form of a complex number. Does not work for symbolic coefficients\r\n         * @param {Symbol} symbol\r\n         * @returns {Symbol}\r\n         */\r\n        function rectform(symbol) {\r\n            //TODO: e^((i*pi)/4)\r\n            var original = symbol.clone();\r\n            try {\r\n                var f, p, q, s, h, d, n;\r\n                f = decompose_fn(symbol, 'e', true);\r\n                p = _.divide(f.x.power, Symbol.imaginary());\r\n                q = evaluate(trig.tan(p));\r\n                s = _.pow(f.a, new Symbol(2));\r\n                d = q.getDenom(true);\r\n                n = q.getNum();\r\n                h = Symbol.hyp(n, d);\r\n                //check\r\n                if(h.equals(f.a)) {\r\n                    return _.add(d, _.multiply(Symbol.imaginary(), n));\r\n                }\r\n                else {\r\n                    return original;\r\n                }\r\n            }\r\n            catch(e) {\r\n                return original;\r\n            }\r\n        }\r\n\r\n        function symMinMax(f, args) {\r\n            args.map(function (x) {\r\n                x.numVal = evaluate(x).multiplier;\r\n            });\r\n            var l, a, b, a_val, b_val;\r\n            while(true) {\r\n                l = args.length;\r\n                if(l < 2)\r\n                    return args[0];\r\n                a = args.pop();\r\n                b = args[l - 2];\r\n                if(f === 'min' ? a.numVal < b.numVal : a.numVal > b.numVal) {\r\n                    args.pop();\r\n                    args.push(a);\r\n                }\r\n            }\r\n        }\r\n\r\n        /**\r\n         * Returns maximum of a set of numbers\r\n         * @returns {Symbol}\r\n         */\r\n        function max() {\r\n            var args = [].slice.call(arguments);\r\n            if(allSame(args))\r\n                return args[0];\r\n            if(allNumbers(args))\r\n                return new Symbol(Math.max.apply(null, args));\r\n            if(Settings.SYMBOLIC_MIN_MAX && allConstants(args))\r\n                return symMinMax('max', args);\r\n            return _.symfunction('max', args);\r\n        }\r\n\r\n        /**\r\n         * Returns minimum of a set of numbers\r\n         * @returns {Symbol}\r\n         */\r\n        function min() {\r\n            var args = [].slice.call(arguments);\r\n            if(allSame(args))\r\n                return args[0];\r\n            if(allNumbers(args))\r\n                return new Symbol(Math.min.apply(null, args));\r\n            if(Settings.SYMBOLIC_MIN_MAX && allConstants(args))\r\n                return symMinMax('min', args);\r\n            return _.symfunction('min', args);\r\n        }\r\n\r\n        /**\r\n         * Returns the sign of a number\r\n         * @param {Symbol} x\r\n         * @returns {Symbol}\r\n         */\r\n        function sign(x) {\r\n            if(x.isConstant(true))\r\n                return new Symbol(Math.sign(evaluate(x)));\r\n            return _.symfunction('sign', arguments);\r\n        }\r\n\r\n        function sort(symbol, opt) {\r\n            opt = opt ? opt.toString() : 'asc';\r\n            var getval = function (e) {\r\n                if(e.group === N)\r\n                    return e.multiplier;\r\n                if(e.group === FN) {\r\n                    if(e.fname === '')\r\n                        return getval(e.args[0]);\r\n                    return e.fname;\r\n                }\r\n                if(e.group === S)\r\n                    return e.power;\r\n\r\n                return e.value;\r\n            };\r\n            var symbols = isVector(symbol) ? symbol.elements : symbol.collectSymbols();\r\n            return new Vector(symbols.sort(function (a, b) {\r\n                var aval = getval(a),\r\n                        bval = getval(b);\r\n                if(opt === 'desc')\r\n                    return bval - aval;\r\n                return aval - bval;\r\n            }));\r\n        }\r\n\r\n        /**\r\n         * The log function\r\n         * @param {Symbol} symbol\r\n         * @param {Symbol} base\r\n         * @returns {Symbol}\r\n         */\r\n        function log(symbol, base) {\r\n\r\n            if(symbol.equals(1)) {\r\n                return new Symbol(0);\r\n            }\r\n\r\n            var retval;\r\n\r\n            if(symbol.fname === SQRT && symbol.multiplier.equals(1)) {\r\n                retval = _.divide(log(symbol.args[0]), new Symbol(2));\r\n\r\n                if(symbol.power.sign() < 0) {\r\n                    retval.negate();\r\n                }\r\n\r\n                // Exit early\r\n                return retval;\r\n            }\r\n\r\n            //log(0) is undefined so complain\r\n            if(symbol.equals(0)) {\r\n                throw new UndefinedError(Settings.LOG + '(0) is undefined!');\r\n            }\r\n\r\n            //deal with imaginary values\r\n            if(symbol.isImaginary()) {\r\n                return complex.evaluate(symbol, Settings.LOG);\r\n            }\r\n\r\n            if(symbol.isConstant() && typeof base !== 'undefined' && base.isConstant()) {\r\n                var log_sym = Math.log(symbol);\r\n                var log_base = Math.log(base);\r\n                retval = new Symbol(log_sym / log_base);\r\n            }\r\n            else if(symbol.group === EX && symbol.power.multiplier.lessThan(0) || symbol.power.toString() === '-1') {\r\n                symbol.power.negate();\r\n                //move the negative outside but keep the positive inside :)\r\n                retval = log(symbol).negate();\r\n            }\r\n            else if(symbol.value === 'e' && symbol.multiplier.equals(1)) {\r\n                var p = symbol.power;\r\n                retval = isSymbol(p) ? p : new Symbol(p);\r\n            }\r\n            else if(symbol.group === FN && symbol.fname === 'exp') {\r\n                var s = symbol.args[0];\r\n                if(symbol.multiplier.equals(1))\r\n                    retval = _.multiply(s, new Symbol(symbol.power));\r\n                else\r\n                    retval = _.symfunction(Settings.LOG, [symbol]);\r\n            }\r\n            else if(Settings.PARSE2NUMBER && isNumericSymbol(symbol)) {\r\n                // Parse for safety.\r\n                symbol = _.parse(symbol);\r\n\r\n                var img_part;\r\n                if(symbol.multiplier.lessThan(0)) {\r\n                    symbol.negate();\r\n                    img_part = _.multiply(new Symbol(Math.PI), new Symbol('i'));\r\n                }\r\n\r\n                retval = new Symbol(Math.log(symbol.multiplier.toDecimal()));\r\n\r\n                if(img_part) {\r\n                    retval = _.add(retval, img_part);\r\n                }\r\n\r\n            }\r\n            else {\r\n                var s;\r\n                if(!symbol.power.equals(1) && !symbol.contains('e')) {\r\n                    s = symbol.group === EX ? symbol.power : new Symbol(symbol.power);\r\n                    symbol.toLinear();\r\n                }\r\n                //log(a,a) = 1 since the base is allowed to be changed.\r\n                //This was pointed out by Happypig375 in issue #280\r\n                if(arguments.length > 1 && allSame(arguments)) {\r\n                    retval = new Symbol(1);\r\n                }\r\n                else {\r\n                    retval = _.symfunction(Settings.LOG, arguments);\r\n                }\r\n\r\n                if(s)\r\n                    retval = _.multiply(s, retval);\r\n            }\r\n\r\n            return retval;\r\n        }\r\n\r\n        /**\r\n         * Round a number up to s decimal places\r\n         * @param {Number} x\r\n         * @param {int} s - the number of decimal places\r\n         * @returns {undefined}\r\n         */\r\n        function round(x, s) {\r\n            var sIsConstant = s && s.isConstant() || typeof s === 'undefined';\r\n            if(x.isConstant() && sIsConstant) {\r\n                var v, e, exp, retval;\r\n                v = x;\r\n                //round the coefficient of then number but not the actual decimal value\r\n                //we know this because a negative number was passed\r\n                if(s && s.lessThan(0)) {\r\n                    s = abs(s);\r\n                    //convert the number to exponential form\r\n                    e = Number(x).toExponential().toString().split('e');\r\n                    //point v to the coefficient of then number\r\n                    v = e[0];\r\n                    //set the expontent\r\n                    exp = e[1];\r\n                }\r\n                //round the number to the requested precision\r\n                retval = new Symbol(nround(v, Number(s || 0)));\r\n                //if there's a exponent then put it back\r\n                return _.multiply(retval, _.pow(new Symbol(10), new Symbol(exp || 0)))\r\n            }\r\n\r\n\r\n            return _.symfunction('round', arguments);\r\n        }\r\n\r\n        /**\r\n         * Gets the quadrant of the trig function\r\n         * @param {Frac} m\r\n         * @returns {Int}\r\n         */\r\n        function getQuadrant(m) {\r\n            var v = m % 2, quadrant;\r\n\r\n            if(v < 0)\r\n                v = 2 + v; //put it in terms of pi\r\n\r\n            if(v >= 0 && v <= 0.5)\r\n                quadrant = 1;\r\n            else if(v > 0.5 && v <= 1)\r\n                quadrant = 2;\r\n            else if(v > 1 && v <= 1.5)\r\n                quadrant = 3;\r\n            else\r\n                quadrant = 4;\r\n            return quadrant;\r\n        }\r\n\r\n        /*\r\n         * Serves as a bridge between numbers and bigNumbers\r\n         * @param {Frac|Number} n\r\n         * @returns {Symbol}\r\n         */\r\n        function bigConvert(n) {\r\n            if(!isFinite(n)) {\r\n                var sign = Math.sign(n);\r\n                var r = new Symbol(String(Math.abs(n)));\r\n                r.multiplier = r.multiplier.multiply(new Frac(sign));\r\n                return r;\r\n            }\r\n            if(isSymbol(n))\r\n                return n;\r\n            if(typeof n === 'number') {\r\n                try {\r\n                    n = Frac.simple(n);\r\n                }\r\n                catch(e) {\r\n                    n = new Frac(n);\r\n                }\r\n            }\r\n\r\n            var symbol = new Symbol(0);\r\n            symbol.multiplier = n;\r\n            return symbol;\r\n        }\r\n        ;\r\n\r\n        function clean(symbol) {\r\n            // handle functions with numeric values\r\n            // handle denominator within denominator\r\n            // handle trig simplifications\r\n            var g = symbol.group, retval;\r\n            //Now let's get to work\r\n            if(g === CP) {\r\n                var num = symbol.getNum(),\r\n                        den = symbol.getDenom() || new Symbol(1),\r\n                        p = Number(symbol.power),\r\n                        factor = new Symbol(1);\r\n                if(Math.abs(p) === 1) {\r\n                    den.each(function (x) {\r\n                        if(x.group === CB) {\r\n                            factor = _.multiply(factor, clean(x.getDenom()));\r\n                        }\r\n                        else if(x.power.lessThan(0)) {\r\n                            factor = _.multiply(factor, clean(x.clone().toUnitMultiplier()));\r\n                        }\r\n                    });\r\n\r\n                    var new_den = new Symbol(0);\r\n                    //now divide out the factor and add to new den\r\n                    den.each(function (x) {\r\n                        new_den = _.add(_.divide(x, factor.clone()), new_den);\r\n                    });\r\n\r\n                    factor.invert(); //invert so it can be added to the top\r\n                    var new_num;\r\n                    if(num.isComposite()) {\r\n                        new_num = new Symbol(0);\r\n                        num.each(function (x) {\r\n                            new_num = _.add(_.multiply(clean(x), factor.clone()), new_num);\r\n                        });\r\n                    }\r\n                    else\r\n                        new_num = _.multiply(factor, num);\r\n\r\n                    retval = _.divide(new_num, new_den);\r\n                }\r\n            }\r\n            else if(g === CB) {\r\n                retval = new Symbol(1);\r\n                symbol.each(function (x) {\r\n                    retval = _.multiply(retval, _.clean(x));\r\n                });\r\n            }\r\n            else if(g === FN) {\r\n                if(symbol.args.length === 1 && symbol.args[0].isConstant())\r\n                    retval = block('PARSE2NUMBER', function () {\r\n                        return _.parse(symbol);\r\n                    }, true);\r\n            }\r\n\r\n            if(!retval)\r\n                retval = symbol;\r\n\r\n            return retval;\r\n        }\r\n\r\n        /**\r\n         * A wrapper for the expand function\r\n         * @param {Symbol} symbol\r\n         * @returns {Symbol}\r\n         */\r\n        function expandall(symbol, opt) {\r\n            opt = opt || {\r\n                expand_denominator: true,\r\n                expand_functions: true\r\n            };\r\n            return expand(symbol, opt);\r\n        }\r\n        /**\r\n         * Expands a symbol\r\n         * @param symbol\r\n         */\r\n        // Old expand\r\n        function expand(symbol, opt) {\r\n            if(Array.isArray(symbol)) {\r\n                return symbol.map(function (x) {\r\n                    return expand(x, opt);\r\n                });\r\n            }\r\n            opt = opt || {};\r\n            //deal with parenthesis\r\n            if(symbol.group === FN && symbol.fname === '') {\r\n                var f = expand(symbol.args[0], opt);\r\n                var x = expand(_.pow(f, _.parse(symbol.power)), opt);\r\n                return _.multiply(_.parse(symbol.multiplier), x).distributeMultiplier();\r\n            }\r\n            // We can expand these groups so no need to waste time. Just return and be done.\r\n            if([N, P, S].indexOf(symbol.group) !== -1) {\r\n                return symbol; //nothing to do\r\n            }\r\n\r\n            var original = symbol.clone();\r\n\r\n            // Set up a try-catch block. If anything goes wrong then we simply return the original symbol\r\n            try {\r\n                // Store the power and multiplier\r\n                var m = symbol.multiplier.toString();\r\n                var p = Number(symbol.power);\r\n                var retval = symbol;\r\n\r\n                // Handle (a+b)^2 | (x+x^2)^2\r\n                if(symbol.isComposite() && isInt(symbol.power) && symbol.power > 0) {\r\n                    var n = p - 1;\r\n                    // Strip the expression of it's multiplier and power. We'll call it f. The power will be p and the multiplier m.\r\n                    var f = new Symbol(0);\r\n\r\n                    symbol.each(function (x) {\r\n                        f = _.add(f, expand(_.parse(x), opt));\r\n                    });\r\n\r\n                    var expanded = _.parse(f);\r\n\r\n                    for(var i = 0; i < n; i++) {\r\n                        expanded = mix(expanded, f, opt);\r\n                    }\r\n\r\n                    retval = _.multiply(_.parse(m), expanded).distributeMultiplier();\r\n                }\r\n                else if(symbol.group === FN && opt.expand_functions === true) {\r\n                    var args = [];\r\n                    // Expand function the arguments\r\n                    symbol.args.forEach(function (x) {\r\n                        args.push(expand(x, opt));\r\n                    });\r\n                    // Put back the power and multiplier\r\n                    retval = _.pow(_.symfunction(symbol.fname, args), _.parse(symbol.power));\r\n                    retval = _.multiply(retval, _.parse(symbol.multiplier));\r\n                }\r\n                else if(symbol.isComposite() && isInt(symbol.power) && symbol.power < 0 && opt.expand_denominator === true) {\r\n                    // Invert it. Expand it and then re-invert it.\r\n                    symbol = symbol.invert();\r\n                    retval = expand(symbol, opt);\r\n                    retval.invert();\r\n                }\r\n                else if(symbol.group === CB) {\r\n                    var rank = function (s) {\r\n                        switch(s.group) {\r\n                            case CP:\r\n                                return 0;\r\n                            case PL:\r\n                                return 1;\r\n                            case CB:\r\n                                return 2;\r\n                            case FN:\r\n                                return 3;\r\n                            default:\r\n                                return 4;\r\n                        }\r\n                    };\r\n                    // Consider (a+b)(c+d). The result will be (a*c+a*d)+(b*c+b*d).\r\n                    // We start by moving collecting the symbols. We want others>FN>CB>PL>CP\r\n                    var symbols = symbol.collectSymbols().sort(function (a, b) {\r\n                        return rank(b) - rank(a);\r\n                    })\r\n                            // Distribute the power to each symbol and expand\r\n                            .map(function (s) {\r\n                                var x = _.pow(s, _.parse(p));\r\n                                var e = expand(x, opt);\r\n                                return e;\r\n                            });\r\n\r\n                    var f = symbols.pop();\r\n\r\n                    // If the first symbols isn't a composite then we're done\r\n                    if(f.isComposite() && f.isLinear()) {\r\n                        symbols.forEach(function (s) {\r\n                            f = mix(f, s, opt);\r\n                        });\r\n\r\n                        // If f is of group PL or CP then we can expand some more\r\n                        if(f.isComposite()) {\r\n                            if(f.power > 1) {\r\n                                f = expand(_.pow(f, _.parse(f.power)), opt);\r\n                            }\r\n                            // Put back the multiplier\r\n                            retval = _.multiply(_.parse(m), f).distributeMultiplier();\r\n                            ;\r\n                        }\r\n                        else {\r\n                            // Everything is expanded at this point so if it's still a CB\r\n                            // then just return the symbol\r\n                            retval = f;\r\n                        }\r\n                    }\r\n                    else {\r\n                        // Just multiply back in the expanded form of each\r\n                        retval = f;\r\n                        symbols.forEach(function (s) {\r\n                            retval = _.multiply(retval, s);\r\n                        });\r\n                        // Put back the multiplier\r\n                        retval = _.multiply(retval, _.parse(m)).distributeMultiplier();\r\n                    }\r\n\r\n                    // TODO: This exists solely as a quick fix for sqrt(11)*sqrt(33) not simplifying.\r\n                    if(retval.group === CB) {\r\n                        retval = _.parse(retval);\r\n                    }\r\n                }\r\n                else {\r\n                    // Otherwise just return the expression\r\n                    retval = symbol;\r\n                }\r\n                // Final cleanup and return\r\n                return retval;\r\n            }\r\n            catch(e) {\r\n                return original;\r\n            }\r\n\r\n            return original;\r\n        }\r\n\r\n        /**\r\n         * Returns an identity matrix of nxn\r\n         * @param {Number} n\r\n         * @returns {Matrix}\r\n         */\r\n        function imatrix(n) {\r\n            return Matrix.identity(n);\r\n        }\r\n\r\n        /**\r\n         * Retrieves and item from a vector\r\n         * @param {Vector} vector\r\n         * @param {Number} index\r\n         * @returns {Vector|Symbol}\r\n         */\r\n        function vecget(vector, index) {\r\n            if(index.isConstant() && isInt(index))\r\n                return vector.elements[index];\r\n            return _.symfunction('vecget', arguments);\r\n        }\r\n\r\n        /**\r\n         * Removes duplicates from a vector\r\n         * @param {Vector} vector\r\n         * @param {Number} tolerance\r\n         * @returns {Vector}\r\n         */\r\n        function vectrim(vector, tolerance) {\r\n            tolerance = typeof tolerance === 'undefined' ? 1e-14 : tolerance;\r\n\r\n            vector = vector.clone();\r\n\r\n            tolerance = Number(tolerance);\r\n            //place algebraic solutions first\r\n            vector.elements.sort(function (a, b) {\r\n                return b.group - a.group;\r\n            });\r\n            //depending on the start point we may have duplicates so we need to clean those up a bit.\r\n            //start by creating an object with the solution and the numeric value. This way we don't destroy algebraic values\r\n            vector.elements = removeDuplicates(vector.elements, function (a, b) {\r\n                var diff = Number(_.subtract(evaluate(a), evaluate(b)).abs());\r\n                return diff <= tolerance;\r\n            });\r\n\r\n            return vector;\r\n        }\r\n\r\n        /**\r\n         * Set a value for a vector at a given index\r\n         * @param {Vector} vector\r\n         * @param {Number} index\r\n         * @param {Symbol} value\r\n         * @returns {Vector}\r\n         */\r\n        function vecset(vector, index, value) {\r\n            if(!index.isConstant)\r\n                return _.symfunction('vecset', arguments);\r\n            vector.elements[index] = value;\r\n            return vector;\r\n        }\r\n\r\n        function matget(matrix, i, j) {\r\n            if(i.isConstant() && j.isConstant())\r\n                return matrix.elements[i][j];\r\n            return _.symfunction('matget', arguments);\r\n        }\r\n\r\n        function matgetrow(matrix, i) {\r\n            if(i.isConstant())\r\n                return new Matrix(matrix.elements[i]);\r\n            return _.symfunction('matgetrow', arguments);\r\n        }\r\n\r\n        function matsetrow(matrix, i, x) {\r\n            //handle symbolics\r\n            if(!i.isConstant())\r\n                return _.symfunction('matsetrow', arguments);\r\n            if(matrix.elements[i].length !== x.elements.length)\r\n                throw new DimensionError('Matrix row must match row dimensions!');\r\n            var M = matrix.clone();\r\n            M.elements[i] = x.clone().elements;\r\n            return M;\r\n        }\r\n\r\n        function matgetcol(matrix, col_index) {\r\n            //handle symbolics\r\n            if(!col_index.isConstant())\r\n                return _.symfunction('matgetcol', arguments);\r\n            col_index = Number(col_index);\r\n            var M = Matrix.fromArray([]);\r\n            matrix.each(function (x, i, j) {\r\n                if(j === col_index) {\r\n                    M.elements.push([x.clone()]);\r\n                }\r\n            });\r\n            return M;\r\n        }\r\n\r\n        function matsetcol(matrix, j, col) {\r\n            //handle symbolics\r\n            if(!j.isConstant())\r\n                return _.symfunction('matsetcol', arguments);\r\n            j = Number(j);\r\n            if(matrix.rows() !== col.elements.length)\r\n                throw new DimensionError('Matrix columns must match number of columns!');\r\n            col.each(function (x, i) {\r\n                matrix.set(i - 1, j, x.elements[0].clone());\r\n            });\r\n            return matrix;\r\n        }\r\n\r\n\r\n        function matset(matrix, i, j, value) {\r\n            matrix.elements[i][j] = value;\r\n            return matrix;\r\n        }\r\n\r\n        //the constructor for vectors\r\n        function vector() {\r\n            return new Vector([].slice.call(arguments));\r\n        }\r\n\r\n        //the constructor for matrices\r\n        function matrix() {\r\n            return Matrix.fromArray(arguments);\r\n        }\r\n\r\n        //the constructor for sets\r\n        function set() {\r\n            return Set.fromArray(arguments);\r\n        }\r\n\r\n        function determinant(symbol) {\r\n            if(isMatrix(symbol)) {\r\n                return symbol.determinant();\r\n            }\r\n            return symbol;\r\n        }\r\n\r\n        function size(symbol) {\r\n            var retval;\r\n            if(isMatrix(symbol))\r\n                retval = [new Symbol(symbol.cols()), new Symbol(symbol.rows())];\r\n            else if(isVector(symbol) || isSet(symbol))\r\n                retval = new Symbol(symbol.elements.length);\r\n            else\r\n                err('size expects a matrix or a vector');\r\n            return retval;\r\n        }\r\n\r\n        function dot(vec1, vec2) {\r\n            if(isVector(vec1) && isVector(vec2))\r\n                return vec1.dot(vec2);\r\n            err('function dot expects 2 vectors');\r\n        }\r\n\r\n        function cross(vec1, vec2) {\r\n            if(isVector(vec1) && isVector(vec2))\r\n                return vec1.cross(vec2);\r\n            err('function cross expects 2 vectors');\r\n        }\r\n\r\n        function transpose(mat) {\r\n            if(isMatrix(mat))\r\n                return mat.transpose();\r\n            err('function transpose expects a matrix');\r\n        }\r\n\r\n        function invert(mat) {\r\n            if(isMatrix(mat))\r\n                return mat.invert();\r\n            err('invert expects a matrix');\r\n        }\r\n\r\n        //basic set functions\r\n        function union(set1, set2) {\r\n            return set1.union(set2);\r\n        }\r\n\r\n        function intersection(set1, set2) {\r\n            return set1.intersection(set2);\r\n        }\r\n\r\n        function contains(set1, e) {\r\n            return set1.contains(e);\r\n        }\r\n\r\n        function difference(set1, set2) {\r\n            return set1.difference(set2);\r\n        }\r\n\r\n        function intersects(set1, set2) {\r\n            return new Symbol(Number(set1.intersects(set2)));\r\n        }\r\n\r\n        function is_subset(set1, set2) {\r\n            return new Symbol(Number(set1.is_subset(set2)));\r\n        }\r\n\r\n        function print() {\r\n            arguments2Array(arguments).map(function (x) {\r\n                console.log(x.toString());\r\n            });\r\n        }\r\n\r\n        function testSQRT(symbol) {\r\n            //wrap the symbol in sqrt. This eliminates one more check down the line.\r\n            if(!isSymbol(symbol.power) && symbol.power.absEquals(0.5)) {\r\n                var sign = symbol.power.sign();\r\n                //don't devide the power directly. Notice the use of toString. This makes it possible\r\n                //to use a bigNumber library in the future\r\n                var retval = sqrt(symbol.group === P ? new Symbol(symbol.value) : symbol.toLinear());\r\n                //place back the sign of the power\r\n                if(sign < 0)\r\n                    retval.invert();\r\n                return retval;\r\n            }\r\n            return symbol;\r\n        }\r\n\r\n        //try to reduce a symbol by pulling its power\r\n        function testPow(symbol) {\r\n            if(symbol.group === P) {\r\n                var v = symbol.value;\r\n\r\n                var fct = primeFactors(v)[0];\r\n\r\n                //safety\r\n                if(!fct) {\r\n                    warn('Unable to compute prime factors. This should not happen. Please review and report.');\r\n                    return symbol;\r\n                }\r\n\r\n                var n = new Frac(Math.log(v) / Math.log(fct)),\r\n                        p = n.multiply(symbol.power);\r\n\r\n                //we don't want a more complex number than before\r\n                if(p.den > symbol.power.den)\r\n                    return symbol;\r\n\r\n                if(isInt(p))\r\n                    symbol = Symbol(Math.pow(fct, p));\r\n                else\r\n                    symbol = new Symbol(fct).setPower(p);\r\n            }\r\n\r\n            return symbol;\r\n        }\r\n\r\n        //Link the functions to the parse so they're available outside of the library.\r\n        //This is strictly for convenience and may be deprecated.\r\n        this.expand = expand;\r\n        this.round = round;\r\n        this.clean = clean;\r\n        this.sqrt = sqrt;\r\n        this.cbrt = cbrt;\r\n        this.abs = abs;\r\n        this.log = log;\r\n        this.rationalize = rationalize;\r\n        this.nthroot = nthroot;\r\n        this.arg = arg;\r\n        this.conjugate = conjugate;\r\n        this.imagpart = imagpart;\r\n        this.realpart = realpart;\r\n\r\n        //TODO:\r\n        //Utilize the function below instead of the linked function\r\n        this.getFunction = function (name) {\r\n            return functions[name][0];\r\n        };\r\n\r\n//Parser.methods ===============================================================\r\n        this.addPreprocessor = function (name, action, order, shift_cells) {\r\n            var names = preprocessors.names;\r\n            var actions = preprocessors.actions;\r\n            if((typeof action !== 'function')) //the person probably forgot to specify a name\r\n                throw new PreprocessorError('Incorrect parameters. Function expected!');\r\n            if(!order) {\r\n                names.push(name);\r\n                actions.push(action);\r\n            }\r\n            else {\r\n                if(shift_cells) {\r\n                    names.splice(order, 0, name);\r\n                    actions.splice(order, 0, action);\r\n                }\r\n                else {\r\n                    names[order] = name;\r\n                    actions[order] = action;\r\n                }\r\n            }\r\n        };\r\n\r\n        this.getPreprocessors = function () {\r\n            var preprocessors = {};\r\n            for(var i = 0, l = preprocessors.names.length; i < l; i++) {\r\n                var name = preprocessors.names[i];\r\n                preprocessors[name] = {\r\n                    order: i,\r\n                    action: preprocessors.actions[i]\r\n                };\r\n            }\r\n            return preprocessors;\r\n        };\r\n\r\n        this.removePreprocessor = function (name, shift_cells) {\r\n            var i = preprocessors.names.indexOf(name);\r\n            if(shift_cells) {\r\n                remove(preprocessors.names, i);\r\n                remove(preprocessors.actions, i);\r\n            }\r\n            else {\r\n                preprocessors.names[i] = undefined;\r\n                preprocessors.actions[i] = undefined;\r\n            }\r\n        };\r\n\r\n        //The loader for functions which are not part of Math2\r\n        this.mapped_function = function () {\r\n            var subs = {},\r\n                    params = this.params;\r\n\r\n            for(var i = 0; i < params.length; i++) {\r\n                subs[params[i]] = String(arguments[i]);\r\n            }\r\n\r\n            return _.parse(this.body, subs);\r\n        };\r\n        /**\r\n         * Adds two symbols\r\n         * @param {Symbol} a\r\n         * @param {Symbol} b\r\n         * @returns {Symbol}\r\n         */\r\n        this.add = function (a, b) {\r\n            var aIsSymbol = isSymbol(a),\r\n                    bIsSymbol = isSymbol(b);\r\n            //we're dealing with two symbols\r\n            if(aIsSymbol && bIsSymbol) {\r\n                //forward the adding of symbols with units to the Unit module\r\n                if(a.unit || b.unit) {\r\n                    return _.Unit.add(a, b);\r\n                }\r\n                //handle Infinity\r\n                //https://www.encyclopediaofmath.org/index.php/Infinity\r\n                if(a.isInfinity || b.isInfinity) {\r\n                    var aneg = a.multiplier.lessThan(0),\r\n                            bneg = b.multiplier.lessThan(0);\r\n\r\n                    if(a.isInfinity && b.isInfinity && aneg !== bneg) {\r\n                        throw new UndefinedError('(' + a + ')+(' + b + ') is not defined!');\r\n                    }\r\n\r\n                    var inf = Symbol.infinity();\r\n                    if(bneg)\r\n                        inf.negate();\r\n                    return inf;\r\n                }\r\n\r\n                if(a.isComposite() && a.isLinear() && b.isComposite() && b.isLinear()) {\r\n                    a.distributeMultiplier();\r\n                    b.distributeMultiplier();\r\n                    // Fix for issue #606\r\n                    if(b.length > a.length && a.group === b.group) {\r\n                        [a, b] = [b, a];\r\n                    }\r\n                }\r\n                \r\n                //no need to waste time on zeroes\r\n                if(a.multiplier.equals(0))\r\n                    return b;\r\n                if(b.multiplier.equals(0))\r\n                    return a;\r\n\r\n                if(a.isConstant() && b.isConstant() && Settings.PARSE2NUMBER) {\r\n                    var result = new Symbol(a.multiplier.add(b.multiplier).toDecimal(Settings.PRECISION));\r\n                    return result;\r\n                }\r\n\r\n                var g1 = a.group,\r\n                        g2 = b.group,\r\n                        ap = a.power.toString(),\r\n                        bp = b.power.toString();\r\n\r\n                //always keep the greater group on the left.\r\n                if(g1 < g2 || (g1 === g2 && ap > bp && bp > 0)) {\r\n                    return this.add(b, a);\r\n                }\r\n\r\n                /*note to self: Please don't forget about this dilemma ever again. In this model PL and CB goes crazy\r\n                 * because it doesn't know which one to prioritize. */\r\n                //correction to PL dilemma\r\n                if(g1 === CB && g2 === PL && a.value === b.value) {\r\n                    //swap\r\n                    var t = a;\r\n                    a = b;\r\n                    b = t;\r\n                    g1 = a.group;\r\n                    g2 = b.group;\r\n                    ap = a.power.toString();\r\n                    bp = b.power.toString();\r\n                }\r\n\r\n                var powEQ = ap === bp,\r\n                        v1 = a.value,\r\n                        v2 = b.value,\r\n                        aIsComposite = a.isComposite(),\r\n                        bIsComposite = b.isComposite(),\r\n                        h1, h2, result;\r\n\r\n                if(aIsComposite)\r\n                    h1 = text(a, 'hash');\r\n                if(bIsComposite)\r\n                    h2 = text(b, 'hash');\r\n\r\n                if(g1 === CP && g2 === CP && b.isLinear() && !a.isLinear() && h1 !== h2) {\r\n                    return this.add(b, a);\r\n                }\r\n\r\n                //PL & PL should compare hashes and not values e.g. compare x+x^2 with x+x^3 and not x with x\r\n                if(g1 === PL && g2 === PL) {\r\n                    v1 = h1;\r\n                    v2 = h2;\r\n                }\r\n\r\n                var PN = g1 === P && g2 === N,\r\n                        PNEQ = a.value === b.multiplier.toString(),\r\n                        valEQ = (v1 === v2 || h1 === h2 && h1 !== undefined || (PN && PNEQ));\r\n\r\n                //equal values, equal powers\r\n                if(valEQ && powEQ && g1 === g2) {\r\n                    //make sure to convert N to something P can work with\r\n                    if(PN)\r\n                        b = b.convert(P);//CL\r\n\r\n                    //handle PL\r\n                    if(g1 === PL && (g2 === S || g2 === P)) {\r\n                        a.distributeMultiplier();\r\n                        result = a.attach(b);\r\n                    }\r\n                    else {\r\n                        result = a;//CL\r\n                        if(a.multiplier.isOne() && b.multiplier.isOne() && g1 === CP && a.isLinear() && b.isLinear()) {\r\n                            for(var s in b.symbols) {\r\n                                var x = b.symbols[s];\r\n                                result.attach(x);\r\n                            }\r\n                        }\r\n                        else\r\n                            result.multiplier = result.multiplier.add(b.multiplier);\r\n                    }\r\n                }\r\n                //equal values uneven powers\r\n                else if(valEQ && g1 !== PL) {\r\n                    //break the tie for e.g. (x+1)+((x+1)^2+(x+1)^3)\r\n                    if(g1 === CP && g2 === PL) {\r\n                        b.insert(a, 'add');\r\n                        result = b;\r\n                    }\r\n                    else {\r\n                        result = Symbol.shell(PL).attach([a, b]);\r\n                        //update the hash\r\n                        result.value = g1 === PL ? h1 : v1;\r\n                    }\r\n                }\r\n                else if(aIsComposite && a.isLinear()) {\r\n                    var canIterate = g1 === g2,\r\n                            bothPL = g1 === PL && g2 === PL;\r\n\r\n                    //we can only iterate group PL if they values match\r\n                    if(bothPL)\r\n                        canIterate = a.value === b.value;\r\n                    //distribute the multiplier over the entire symbol\r\n                    a.distributeMultiplier();\r\n\r\n                    if(b.isComposite() && b.isLinear() && canIterate) {\r\n                        b.distributeMultiplier();\r\n                        //CL\r\n                        for(var s in b.symbols) {\r\n                            var x = b.symbols[s];\r\n                            a.attach(x);\r\n                        }\r\n                        result = a;\r\n                    }\r\n                    //handle cases like 2*(x+x^2)^2+2*(x+x^2)^3+4*(x+x^2)^2\r\n                    else if(bothPL && a.value !== h2 || g1 === PL && !valEQ) {\r\n                        result = Symbol.shell(CP).attach([a, b]);\r\n                        result.updateHash();\r\n\r\n                    }\r\n                    else {\r\n                        result = a.attach(b);\r\n                    }\r\n                }\r\n                else {\r\n                    if(g1 === FN && a.fname === SQRT && g2 !== EX && b.power.equals(0.5)) {\r\n                        var m = b.multiplier.clone();\r\n                        b = sqrt(b.toUnitMultiplier().toLinear());\r\n                        b.multiplier = m;\r\n                    }\r\n                    //fix for issue #3 and #159\r\n                    if(a.length === 2 && b.length === 2 && even(a.power) && even(b.power)) {\r\n                        result = _.add(expand(a), expand(b));\r\n                    }\r\n                    else {\r\n                        result = Symbol.shell(CP).attach([a, b]);\r\n                        result.updateHash();\r\n                    }\r\n                }\r\n\r\n                if(result.multiplier.equals(0))\r\n                    result = new Symbol(0);\r\n\r\n                //make sure to remove unnecessary wraps\r\n                if(result.length === 1) {\r\n                    var m = result.multiplier;\r\n                    result = firstObject(result.symbols);\r\n                    result.multiplier = result.multiplier.multiply(m);\r\n                }\r\n\r\n                return result;\r\n            }\r\n            else {\r\n                //keep symbols to the right\r\n                if(bIsSymbol && !aIsSymbol) {\r\n                    var t = a;\r\n                    a = b;\r\n                    b = t; //swap\r\n                    t = bIsSymbol;\r\n                    bIsSymbol = aIsSymbol;\r\n                    aIsSymbol = t;\r\n                }\r\n\r\n                var bIsMatrix = isMatrix(b);\r\n\r\n                if(aIsSymbol && bIsMatrix) {\r\n                    var M = new Matrix();\r\n                    b.eachElement(function (e, i, j) {\r\n                        M.set(i, j, _.add(a.clone(), e));\r\n                    });\r\n\r\n                    b = M\r\n                }\r\n                else {\r\n                    if(isMatrix(a) && bIsMatrix) {\r\n                        b = a.add(b);\r\n                    }\r\n                    else if(aIsSymbol && isVector(b)) {\r\n                        b.each(function (x, i) {\r\n                            i--;\r\n                            b.elements[i] = _.add(a.clone(), b.elements[i]);\r\n                        });\r\n                    }\r\n                    else {\r\n                        if(isVector(a) && isVector(b)) {\r\n                            b.each(function (x, i) {\r\n                                i--;\r\n                                b.elements[i] = _.add(a.elements[i], b.elements[i]);\r\n                            });\r\n                        }\r\n                        else if(isVector(a) && isMatrix(b)) {\r\n                            //try to convert a to a matrix\r\n                            return _.add(b, a);\r\n                        }\r\n                        else if(isMatrix(a) && isVector(b)) {\r\n                            if(b.elements.length === a.rows()) {\r\n                                var M = new Matrix(), l = a.cols();\r\n                                b.each(function (e, i) {\r\n                                    var row = [];\r\n                                    for(var j = 0; j < l; j++) {\r\n                                        row.push(_.add(a.elements[i - 1][j].clone(), e.clone()));\r\n                                    }\r\n                                    M.elements.push(row);\r\n                                });\r\n                                return M;\r\n                            }\r\n                            else\r\n                                err('Dimensions must match!');\r\n                        }\r\n                    }\r\n                }\r\n                return b;\r\n            }\r\n\r\n        };\r\n        /**\r\n         * Gets called when the parser finds the - operator. Not the prefix operator. See this.add\r\n         * @param {Symbol} a\r\n         * @param {Symbol} b\r\n         * @returns {Symbol}\r\n         */\r\n        this.subtract = function (a, b) {\r\n            var aIsSymbol = aIsSymbol = isSymbol(a),\r\n                    bIsSymbol = isSymbol(b), t;\r\n\r\n            if(aIsSymbol && bIsSymbol) {\r\n                if(a.unit || b.unit) {\r\n                    return _.Unit.subtract(a, b);\r\n                }\r\n                return this.add(a, b.negate());\r\n            }\r\n            else {\r\n                if(bIsSymbol && isVector(a)) {\r\n                    b = a.map(function (x) {\r\n                        return _.subtract(x, b.clone());\r\n                    });\r\n                }\r\n                else if(aIsSymbol && isVector(b)) {\r\n                    b = b.map(function (x) {\r\n                        return _.subtract(a.clone(), x);\r\n                    });\r\n                }\r\n                else if(isVector(a) && isVector(b)) {\r\n                    if(a.dimensions() === b.dimensions())\r\n                        b = a.subtract(b);\r\n                    else\r\n                        _.error('Unable to subtract vectors. Dimensions do not match.');\r\n                }\r\n                else if(isMatrix(a) && isVector(b)) {\r\n                    if(b.elements.length === a.rows()) {\r\n                        var M = new Matrix(), l = a.cols();\r\n                        b.each(function (e, i) {\r\n                            var row = [];\r\n                            for(var j = 0; j < l; j++) {\r\n                                row.push(_.subtract(a.elements[i - 1][j].clone(), e.clone()));\r\n                            }\r\n                            M.elements.push(row);\r\n                        });\r\n                        return M;\r\n                    }\r\n                    else\r\n                        err('Dimensions must match!');\r\n                }\r\n                else if(isVector(a) && isMatrix(b)) {\r\n                    var M = b.clone().negate();\r\n                    return _.add(M, a);\r\n                }\r\n                else if(isMatrix(a) && isMatrix(b)) {\r\n                    b = a.subtract(b);\r\n                }\r\n                else if(isMatrix(a) && bIsSymbol) {\r\n                    var M = new Matrix();\r\n                    a.each(function (x, i, j) {\r\n                        M.set(i, j, _.subtract(x, b.clone()));\r\n                    });\r\n                    b = M;\r\n                }\r\n                else if(aIsSymbol && isMatrix(b)) {\r\n                    var M = new Matrix();\r\n                    b.each(function (x, i, j) {\r\n                        M.set(i, j, _.subtract(a.clone(), x));\r\n                    });\r\n                    b = M;\r\n                }\r\n                return b;\r\n            }\r\n        };\r\n        /**\r\n         * Gets called when the parser finds the * operator. See this.add\r\n         * @param {Symbol} a\r\n         * @param {Symbol} b\r\n         * @returns {Symbol}\r\n         */\r\n        this.multiply = function (a, b) {\r\n            var aIsSymbol = isSymbol(a),\r\n                    bIsSymbol = isSymbol(b);\r\n            //we're dealing with function assignment here\r\n            if(aIsSymbol && b instanceof Collection) {\r\n                b.elements.push(a);\r\n                return b;\r\n            }\r\n            if(aIsSymbol && bIsSymbol) {\r\n                //if it has a unit then add it and return it right away.\r\n                if(b.isUnit) {\r\n                    var result = a.clone();\r\n                    a.unit = b;\r\n                    return result;\r\n                }\r\n                \r\n                //if it has units then just forward that problem to the unit module\r\n                if(a.unit || b.unit) {\r\n                    return _.Unit.multiply(a, b);\r\n                }\r\n\r\n                //handle Infinty\r\n                if(a.isInfinity || b.isInfinity) {\r\n                    if(a.equals(0) || b.equals(0))\r\n                        throw new UndefinedError(a + '*' + b + ' is undefined!');\r\n                    //x/infinity\r\n                    if(b.power.lessThan(0)) {\r\n                        if(!a.isInfinity) {\r\n                            return new Symbol(0);\r\n                        }\r\n                        else {\r\n                            throw new UndefinedError('Infinity/Infinity is not defined!');\r\n                        }\r\n                    }\r\n\r\n                    var sign = a.multiplier.multiply(b.multiplier).sign(),\r\n                            inf = Symbol.infinity();\r\n                    if(a.isConstant() || b.isConstant() || (a.isInfinity && b.isInfinity)) {\r\n                        if(sign < 0)\r\n                            inf.negate();\r\n\r\n                        return inf;\r\n                    }\r\n                }\r\n                //the quickies\r\n                if(a.isConstant() && b.isConstant() && Settings.PARSE2NUMBER) {\r\n                    var t = new bigDec(a.multiplier.toDecimal()).times(new bigDec(b.multiplier.toDecimal())).toFixed();\r\n                    var retval = new Symbol(t);\r\n                    return retval;\r\n                }\r\n\r\n                //don't waste time\r\n                if(a.isOne()) {\r\n                    return b.clone();\r\n                }\r\n                if(b.isOne()) {\r\n                    return a.clone();\r\n                }\r\n\r\n                if(a.multiplier.equals(0) || b.multiplier.equals(0))\r\n                    return new Symbol(0);\r\n\r\n                if(b.group > a.group && !(b.group === CP))\r\n                    return this.multiply(b, a);\r\n                //correction for PL/CB dilemma\r\n                if(a.group === CB && b.group === PL && a.value === b.value) {\r\n                    var t = a;\r\n                    a = b;\r\n                    b = t;//swap\r\n                }\r\n\r\n                var g1 = a.group,\r\n                        g2 = b.group,\r\n                        bnum = b.multiplier.num,\r\n                        bden = b.multiplier.den;\r\n\r\n                if(g1 === FN && a.fname === SQRT && !b.isConstant() && a.args[0].value === b.value && !a.args[0].multiplier.lessThan(0)) {\r\n                    //unwrap sqrt\r\n                    var a_pow = a.power;\r\n                    var a_multiplier = _.parse(a.multiplier);\r\n                    a = _.multiply(a_multiplier, a.args[0].clone());\r\n                    a.setPower(new Frac(0.5).multiply(a_pow));\r\n                    g1 = a.group;\r\n                }\r\n                //simplify n/sqrt(n). Being very specific\r\n                else if(g1 === FN && a.fname === SQRT && a.multiplier.equals(1) && a.power.equals(-1) && b.isConstant() && a.args[0].equals(b)) {\r\n                    a = _.symfunction(SQRT, [b.clone()]);\r\n                    b = new Symbol(1);\r\n                }\r\n                ;\r\n\r\n                var v1 = a.value,\r\n                        v2 = b.value,\r\n                        sign = new Frac(a.sign()),\r\n                        //since P is just a morphed version of N we need to see if they relate\r\n                        ONN = (g1 === P && g2 === N && b.multiplier.equals(a.value)),\r\n                        //don't multiply the multiplier of b since that's equal to the value of a\r\n                        m = ONN ? new Frac(1).multiply(a.multiplier).abs() : a.multiplier.multiply(b.multiplier).abs(),\r\n                        result = a.clone().toUnitMultiplier();\r\n                b = b.clone().toUnitMultiplier(true);\r\n\r\n                //further simplification of sqrt\r\n                if(g1 === FN && g2 === FN) {\r\n                    var u = a.args[0].clone();\r\n                    var v = b.args[0].clone();\r\n                    if(a.fname === SQRT && b.fname === SQRT && a.isLinear() && b.isLinear()) {\r\n\r\n                        var q = _.divide(u, v).invert();\r\n                        if(q.gt(1) && isInt(q)) {\r\n                            //b contains a factor a which can be moved to a\r\n                            result = _.multiply(a.args[0].clone(), sqrt(q.clone()));\r\n                            b = new Symbol(1);\r\n                        }\r\n                    }\r\n                    //simplify factorial but only if\r\n                    //1 - It's division so b will have a negative power\r\n                    //2 - We're not dealing with factorials of numbers\r\n                    else if(a.fname === FACTORIAL && b.fname === FACTORIAL && !u.isConstant() && !v.isConstant() && b.power < 0) {\r\n                        //assume that n = positive\r\n                        var d = _.subtract(u.clone(), v.clone());\r\n\r\n                        //if it's not numeric then we don't know if we can simplify so just return\r\n                        if(d.isConstant()) {\r\n\r\n                            //there will never be a case where d == 0 since this will already have\r\n                            //been handled at the beginning of this function\r\n                            t = new Symbol(1);\r\n                            if(d < 0) {\r\n                                //If d is negative then the numerator is larger so expand that\r\n                                for(var i = 0, n = Math.abs(d); i <= n; i++) {\r\n                                    var s = _.add(u.clone(), new Symbol(i));\r\n                                    t = _.multiply(t, s);\r\n                                }\r\n\r\n                                result = _.multiply(_.pow(u, new Symbol(a.power)), _.pow(t, new Symbol(b.power)));\r\n\r\n                                b = new Symbol(1);\r\n                            }\r\n                            else {\r\n                                //Otherwise the denominator is larger so expand that\r\n                                for(var i = 0, n = Math.abs(d); i <= n; i++) {\r\n                                    var s = _.add(v.clone(), new Symbol(i));\r\n                                    t = _.multiply(t, s);\r\n                                }\r\n\r\n                                result = _.multiply(_.pow(t, new Symbol(a.power)), _.pow(v, new Symbol(b.power)));\r\n\r\n                                b = new Symbol(1);\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n\r\n\r\n                //if both are PL then their hashes have to match\r\n                if(v1 === v2 && g1 === PL && g1 === g2) {\r\n                    v1 = a.text('hash');\r\n                    v2 = b.text('hash');\r\n                }\r\n\r\n                //same issue with (x^2+1)^x*(x^2+1)\r\n                //EX needs an exception when multiplying because it needs to recognize\r\n                //that (x+x^2)^x has the same hash as (x+x^2). The latter is kept as x\r\n                if(g2 === EX && b.previousGroup === PL && g1 === PL) {\r\n                    v1 = text(a, 'hash', EX);\r\n                }\r\n\r\n                if((v1 === v2 || ONN) && !(g1 === PL && (g2 === S || g2 === P || g2 === FN)) && !(g1 === PL && g2 === CB)) {\r\n                    var p1 = a.power,\r\n                            p2 = b.power,\r\n                            isSymbolP1 = isSymbol(p1),\r\n                            isSymbolP2 = isSymbol(p2),\r\n                            toEX = (isSymbolP1 || isSymbolP2);\r\n                    //TODO: this needs cleaning up\r\n                    if(g1 === PL && g2 !== PL && b.previousGroup !== PL && p1.equals(1)) {\r\n                        result = new Symbol(0);\r\n                        a.each(function (x) {\r\n                            result = _.add(result, _.multiply(x, b.clone()));\r\n                        }, true);\r\n                    }\r\n                    else {\r\n                        //add the powers\r\n                        result.power = toEX ? _.add(\r\n                                !(isSymbol(p1)) ? new Symbol(p1) : p1,\r\n                                !(isSymbol(p2)) ? new Symbol(p2) : p2\r\n                                ) : (g1 === N /*don't add powers for N*/ ? p1 : p1.add(p2));\r\n\r\n                        //eliminate zero power values and convert them to numbers\r\n                        if(result.power.equals(0))\r\n                            result = result.convert(N);\r\n\r\n                        //properly convert to EX\r\n                        if(toEX)\r\n                            result.convert(EX);\r\n\r\n                        //take care of imaginaries\r\n                        if(a.imaginary && b.imaginary) {\r\n                            var isEven = even(result.power % 2);\r\n                            if(isEven) {\r\n                                result = new Symbol(1);\r\n                                m.negate();\r\n                            }\r\n                        }\r\n\r\n                        //cleanup: this causes the LaTeX generator to get confused as to how to render the symbol\r\n                        if(result.group !== EX && result.previousGroup)\r\n                            result.previousGroup = undefined;\r\n                        //the sign for b is floating around. Remember we are assuming that the odd variable will carry\r\n                        //the sign but this isn't true if they're equals symbols\r\n                        result.multiplier = result.multiplier.multiply(b.multiplier);\r\n                    }\r\n                }\r\n                else if(g1 === CB && a.isLinear()) {\r\n                    if(g2 === CB)\r\n                        b.distributeExponent();\r\n                    if(g2 === CB && b.isLinear()) {\r\n                        for(var s in b.symbols) {\r\n                            var x = b.symbols[s];\r\n                            result = result.combine(x);\r\n                        }\r\n                        result.multiplier = result.multiplier.multiply(b.multiplier);\r\n                    }\r\n                    else {\r\n                        result.combine(b);\r\n                    }\r\n                }\r\n                else {\r\n                    //the multiplier was already handled so nothing left to do\r\n                    if(g1 !== N) {\r\n                        if(g1 === CB) {\r\n                            result.distributeExponent();\r\n                            result.combine(b);\r\n                        }\r\n                        else if(!b.isOne()) {\r\n                            var bm = b.multiplier.clone();\r\n                            b.toUnitMultiplier();\r\n                            result = Symbol.shell(CB).combine([result, b]);\r\n                            //transfer the multiplier to the outside\r\n                            result.multiplier = result.multiplier.multiply(bm);\r\n                        }\r\n                    }\r\n                    else {\r\n                        result = b.clone().toUnitMultiplier();\r\n                    }\r\n                }\r\n\r\n                if(result.group === P) {\r\n                    var logV = Math.log(result.value),\r\n                            n1 = Math.log(bnum) / logV,\r\n                            n2 = Math.log(bden) / logV,\r\n                            ndiv = m.num / bnum,\r\n                            ddiv = m.den / bden;\r\n                    //we don't want to divide by zero no do we? Strange things happen.\r\n                    if(n1 !== 0 && isInt(n1) && isInt(ndiv)) {\r\n                        result.power = result.power.add(new Frac(n1));\r\n                        m.num /= bnum; //BigInt? Keep that in mind for the future.\r\n                    }\r\n                    if(n2 !== 0 && isInt(n2) && isInt(ddiv)) {\r\n                        result.power = result.power.subtract(new Frac(n2));\r\n                        m.den /= bden; //BigInt? Keep that in mind for the future.\r\n                    }\r\n                }\r\n\r\n                //unpack CB if length is only one\r\n                if(result.length === 1) {\r\n                    var t = result.multiplier;\r\n                    //transfer the multiplier\r\n                    result = firstObject(result.symbols);\r\n                    result.multiplier = result.multiplier.multiply(t);\r\n                }\r\n\r\n                //reduce square root\r\n                var ps = result.power.toString();\r\n                if(even(ps) && result.fname === SQRT) {\r\n                    //grab the sign of the symbol\r\n                    sign = sign * result.sign();\r\n                    var p = result.power;\r\n                    result = result.args[0];\r\n                    result = _.multiply(new Symbol(m), _.pow(result, new Symbol(p.divide(new Frac(2)))));\r\n                    //flip it back to the correct sign\r\n                    if(sign < 0)\r\n                        result.negate()\r\n                }\r\n                else {\r\n                    result.multiplier = result.multiplier.multiply(m).multiply(sign);\r\n                    if(result.group === CP && result.isImaginary())\r\n                        result.distributeMultiplier();\r\n                }\r\n\r\n                //back convert group P to a simpler group N if possible\r\n                if(result.group === P && isInt(result.power.toDecimal()))\r\n                    result = result.convert(N);\r\n\r\n                return result;\r\n            }\r\n            else {\r\n                //****** Matrices & Vector *****//\r\n                if(bIsSymbol && !aIsSymbol) { //keep symbols to the right\r\n                    t = a;\r\n                    a = b;\r\n                    b = t; //swap\r\n                    t = bIsSymbol;\r\n                    bIsSymbol = aIsSymbol;\r\n                    aIsSymbol = t;\r\n                }\r\n\r\n                var isMatrixB = isMatrix(b), isMatrixA = isMatrix(a);\r\n                if(aIsSymbol && isMatrixB) {\r\n                    var M = new Matrix();\r\n                    b.eachElement(function (e, i, j) {\r\n                        M.set(i, j, _.multiply(a.clone(), e));\r\n                    });\r\n\r\n                    b = M;\r\n                }\r\n                else {\r\n                    if(isMatrixA && isMatrixB) {\r\n                        b = a.multiply(b);\r\n                    }\r\n                    else if(aIsSymbol && isVector(b)) {\r\n                        b.each(function (x, i) {\r\n                            i--;\r\n                            b.elements[i] = _.multiply(a.clone(), b.elements[i]);\r\n                        });\r\n                    }\r\n                    else {\r\n                        if(isVector(a) && isVector(b)) {\r\n                            b.each(function (x, i) {\r\n                                i--;\r\n                                b.elements[i] = _.multiply(a.elements[i], b.elements[i]);\r\n                            });\r\n                        }\r\n                        else if(isVector(a) && isMatrix(b)) {\r\n                            //try to convert a to a matrix\r\n                            return this.multiply(b, a);\r\n                        }\r\n                        else if(isMatrix(a) && isVector(b)) {\r\n                            if(b.elements.length === a.rows()) {\r\n                                var M = new Matrix(), l = a.cols();\r\n                                b.each(function (e, i) {\r\n                                    var row = [];\r\n                                    for(var j = 0; j < l; j++) {\r\n                                        row.push(_.multiply(a.elements[i - 1][j].clone(), e.clone()));\r\n                                    }\r\n                                    M.elements.push(row);\r\n                                });\r\n                                return M;\r\n                            }\r\n                            else\r\n                                err('Dimensions must match!');\r\n                        }\r\n                    }\r\n                }\r\n\r\n                return b;\r\n            }\r\n        };\r\n        /**\r\n         * Gets called when the parser finds the / operator. See this.add\r\n         * @param {Symbol} a\r\n         * @param {Symbol} b\r\n         * @returns {Symbol}\r\n         */\r\n        this.divide = function (a, b) {\r\n            var aIsSymbol = isSymbol(a),\r\n                    bIsSymbol = isSymbol(b);\r\n\r\n            if(aIsSymbol && bIsSymbol) {\r\n                //forward to Unit division\r\n                if(a.unit || b.unit) {\r\n                    return _.Unit.divide(a, b);\r\n                }\r\n                var result;\r\n                if(b.equals(0))\r\n                    throw new DivisionByZero('Division by zero not allowed!');\r\n\r\n                if(a.isConstant() && b.isConstant()) {\r\n                    result = a.clone();\r\n                    result.multiplier = result.multiplier.divide(b.multiplier);\r\n                }\r\n                else {\r\n                    b.invert();\r\n                    result = _.multiply(a, b);\r\n                }\r\n                return result;\r\n            }\r\n            else {\r\n                //******* Vectors & Matrices *********//\r\n                var isVectorA = isVector(a), isVectorB = isVector(b);\r\n                if(aIsSymbol && isVectorB) {\r\n                    b = b.map(function (x) {\r\n                        return _.divide(a.clone(), x);\r\n                    });\r\n                }\r\n                else if(isVectorA && bIsSymbol) {\r\n                    b = a.map(function (x) {\r\n                        return _.divide(x, b.clone());\r\n                    });\r\n                }\r\n                else if(isVectorA && isVectorB) {\r\n                    if(a.dimensions() === b.dimensions()) {\r\n                        b = b.map(function (x, i) {\r\n                            return _.divide(a.elements[--i], x);\r\n                        });\r\n                    }\r\n                    else\r\n                        _.error('Cannot divide vectors. Dimensions do not match!');\r\n                }\r\n                else {\r\n                    var isMatrixA = isMatrix(a), isMatrixB = isMatrix(b);\r\n                    if(isMatrixA && bIsSymbol) {\r\n                        var M = new Matrix();\r\n                        a.eachElement(function (x, i, j) {\r\n                            M.set(i, j, _.divide(x, b.clone()));\r\n                        });\r\n                        b = M;\r\n                    }\r\n                    else if(aIsSymbol && isMatrixB) {\r\n                        var M = new Matrix();\r\n                        b.eachElement(function (x, i, j) {\r\n                            M.set(i, j, _.divide(a.clone(), x));\r\n                        });\r\n                        b = M;\r\n                    }\r\n                    else if(isMatrixA && isMatrixB) {\r\n                        var M = new Matrix();\r\n                        if(a.rows() === b.rows() && a.cols() === b.cols()) {\r\n                            a.eachElement(function (x, i, j) {\r\n                                M.set(i, j, _.divide(x, b.elements[i][j]));\r\n                            });\r\n                            b = M;\r\n                        }\r\n                        else {\r\n                            _.error('Dimensions do not match!');\r\n                        }\r\n                    }\r\n                    else if(isMatrixA && isVectorB) {\r\n                        if(a.cols() === b.dimensions()) {\r\n                            var M = new Matrix();\r\n                            a.eachElement(function (x, i, j) {\r\n                                M.set(i, j, _.divide(x, b.elements[i].clone()));\r\n                            });\r\n                            b = M;\r\n                        }\r\n                        else {\r\n                            _.error('Unable to divide matrix by vector.');\r\n                        }\r\n                    }\r\n                }\r\n                return b;\r\n            }\r\n        };\r\n        /**\r\n         * Gets called when the parser finds the ^ operator. See this.add\r\n         * @param {Symbol} a\r\n         * @param {Symbol} b\r\n         * @returns {Symbol}\r\n         */\r\n        this.pow = function (a, b) {\r\n            var aIsSymbol = isSymbol(a),\r\n                    bIsSymbol = isSymbol(b);\r\n            if(aIsSymbol && bIsSymbol) {\r\n                //it has units then it's the Unit module's problem\r\n                if(a.unit || b.unit) {\r\n                    return _.Unit.pow(a, b);\r\n                }\r\n                \r\n                // Handle abs\r\n                if(a.group === FN && a.fname === ABS && even(b)) {\r\n                    var m = a.multiplier.clone();\r\n                    var raised = _.pow(a.args[0], b);\r\n                    raised.multiplier = m;\r\n                    return raised;\r\n                }\r\n                \r\n                // Handle infinity\r\n                if(a.isInfinity || b.isInfinity) {\r\n                    if(a.isInfinity && b.isInfinity)\r\n                        throw new UndefinedError('(' + a + ')^(' + b + ') is undefined!');\r\n\r\n                    if(a.isConstant() && b.isInfinity) {\r\n                        if(a.equals(0)) {\r\n                            if(b.lessThan(0))\r\n                                throw new UndefinedError('0^Infinity is undefined!');\r\n                            return new Symbol(0);\r\n                        }\r\n                        if(a.equals(1))\r\n                            throw new UndefinedError('1^' + b.toString() + ' is undefined!');\r\n                        //a^-oo\r\n                        if(b.lessThan(0))\r\n                            return new Symbol(0);\r\n                        //a^oo\r\n                        if(!a.lessThan(0))\r\n                            return Symbol.infinity();\r\n                    }\r\n\r\n                    if(a.isInfinity && b.isConstant()) {\r\n                        if(b.equals(0))\r\n                            throw new UndefinedError(a + '^0 is undefined!');\r\n                        if(b.lessThan(0))\r\n                            return new Symbol(0);\r\n                        return _.multiply(Symbol.infinity(), _.pow(new Symbol(a.sign()), b.clone()));\r\n                    }\r\n                }\r\n\r\n                var aIsZero = a.equals(0);\r\n                var bIsZero = b.equals(0);\r\n                if(aIsZero && bIsZero)\r\n                    throw new UndefinedError('0^0 is undefined!');\r\n\r\n                // Return 0 right away if possible\r\n                if(aIsZero && b.isConstant() && b.multiplier.greaterThan(0))\r\n                    return new Symbol(0);\r\n\r\n                if(bIsZero)\r\n                    return new Symbol(1);\r\n\r\n                var bIsConstant = b.isConstant(),\r\n                        aIsConstant = a.isConstant(),\r\n                        bIsInt = b.isInteger(),\r\n                        m = a.multiplier,\r\n                        result = a.clone();\r\n\r\n                // 0^0, 1/0, etc. Complain.\r\n                if(aIsConstant && bIsConstant && a.equals(0) && b.lessThan(0))\r\n                    throw new UndefinedError('Division by zero is not allowed!');\r\n\r\n                // Compute imaginary numbers right away\r\n                if(Settings.PARSE2NUMBER && aIsConstant && bIsConstant && a.sign() < 0 && evenFraction(b)) {\r\n                    var k, re, im;\r\n                    k = Math.PI * b;\r\n                    re = new Symbol(Math.cos(k));\r\n                    im = _.multiply(Symbol.imaginary(), new Symbol(Math.sin(k)));\r\n                    return _.add(re, im);\r\n                }\r\n\r\n                // Imaginary number under negative nthroot or to the n\r\n                if(Settings.PARSE2NUMBER && a.isImaginary() && bIsConstant && isInt(b) && !b.lessThan(0)) {\r\n                    var re, im, r, theta, nre, nim, phi;\r\n                    re = a.realpart();\r\n                    im = a.imagpart();\r\n                    if(re.isConstant('all') && im.isConstant('all')) {\r\n                        phi = Settings.USE_BIG ? Symbol(bigDec.atan2(i.multiplier.toDecimal(), r.multiplier.toDecimal()).times(b.toString())) : Math.atan2(im, re) * b;\r\n                        theta = new Symbol(phi);\r\n                        r = _.pow(Symbol.hyp(re, im), b);\r\n                        nre = _.multiply(r.clone(), _.trig.cos(theta.clone()));\r\n                        nim = _.multiply(r, _.trig.sin(theta));\r\n                        return _.add(nre, _.multiply(Symbol.imaginary(), nim));\r\n                    }\r\n                }\r\n\r\n                // Take care of the symbolic part\r\n                result.toUnitMultiplier();\r\n                //simpifly sqrt\r\n                if(result.group === FN && result.fname === SQRT && !bIsConstant) {\r\n                    var s = result.args[0];\r\n                    s.multiplyPower(new Symbol(0.5));\r\n                    s.multiplier.multiply(result.multiplier);\r\n                    s.multiplyPower(b);\r\n                    result = s;\r\n                }\r\n                else {\r\n                    var sign = m.sign();\r\n                    //handle cases such as (-a^3)^(1/4)\r\n                    if(evenFraction(b) && sign < 0) {\r\n                        // Swaperoo\r\n                        // First put the sign back on the symbol\r\n                        result.negate();\r\n                        // Wrap it in brackets\r\n                        result = _.symfunction(PARENTHESIS, [result]);\r\n                        // Move the sign back the exterior and let nerdamer handle the rest\r\n                        result.negate();\r\n                    }\r\n\r\n                    result.multiplyPower(b);\r\n                }\r\n\r\n                if(aIsConstant && bIsConstant && Settings.PARSE2NUMBER) {\r\n                    var c;\r\n                    //remove the sign\r\n                    if(sign < 0) {\r\n                        a.negate();\r\n                        if(b.multiplier.den.equals(2))\r\n                            //we know that the numerator has to be odd and therefore it's i\r\n                            c = new Symbol(Settings.IMAGINARY);\r\n                        else if(isInt(b.multiplier)) {\r\n                            if(even(b.multiplier))\r\n                                c = new Symbol(1);\r\n                            else\r\n                                c = new Symbol(-1);\r\n                        }\r\n                        else if(!even(b.multiplier.den)) {\r\n                            c = new Symbol(Math.pow(sign, b.multiplier.num));\r\n                        }\r\n                        else {\r\n                            c = _.pow(_.symfunction(PARENTHESIS, [new Symbol(sign)]), b.clone());\r\n                        }\r\n                    }\r\n\r\n                    result = new Symbol(Math.pow(a.multiplier.toDecimal(), b.multiplier.toDecimal()));\r\n\r\n                    //result = new Symbol(Math2.bigpow(a.multiplier, b.multiplier));\r\n                    //put the back sign\r\n                    if(c)\r\n                        result = _.multiply(result, c);\r\n                }\r\n                else if(bIsInt && !m.equals(1)) {\r\n                    var abs_b = b.abs();\r\n                    // Provide fall back to JS until big number implementation is improved\r\n                    if(abs_b.gt(Settings.MAX_EXP)) {\r\n                        if(b.sign() < 0)\r\n                            return new Symbol(0);\r\n                        return Symbol.infinity();\r\n                    }\r\n                    else {\r\n                        var p = b.multiplier.toDecimal();\r\n                        var sgn = Math.sign(p);\r\n                        p = Math.abs(p);\r\n                        var multiplier = new Frac(1);\r\n                        multiplier.num = m.num.pow(p);\r\n                        multiplier.den = m.den.pow(p);\r\n                        if(sgn < 0)\r\n                            multiplier.invert();\r\n                        //multiplying is justified since after mulltiplyPower if it was of group P it will now be of group N\r\n                        result.multiplier = result.multiplier.multiply(multiplier);\r\n                    }\r\n                }\r\n                else {\r\n                    var sign = a.sign();\r\n                    if(b.isConstant() && a.isConstant() && !b.multiplier.den.equals(1) && sign < 0) {\r\n                        //we know the sign is negative so if the denominator for b == 2 then it's i\r\n                        if(b.multiplier.den.equals(2)) {\r\n                            var i = new Symbol(Settings.IMAGINARY);\r\n                            a.negate();//remove the sign\r\n                            //if the power is negative then i is negative\r\n                            if(b.lessThan(0)) {\r\n                                i.negate();\r\n                                b.negate();//remove the sign from the power\r\n                            }\r\n                            //pull the power normally and put back the imaginary\r\n                            result = _.multiply(_.pow(a, b), i);\r\n                        }\r\n                        else {\r\n                            var aa = a.clone();\r\n                            aa.multiplier.negate();\r\n                            result = _.pow(_.symfunction(PARENTHESIS, [new Symbol(sign)]), b.clone());\r\n                            var _a = _.pow(new Symbol(aa.multiplier.num), b.clone());\r\n                            var _b = _.pow(new Symbol(aa.multiplier.den), b.clone());\r\n                            var r = _.divide(_a, _b);\r\n                            result = _.multiply(result, r);\r\n                        }\r\n                    }\r\n                    else if(Settings.PARSE2NUMBER && b.isImaginary()) {\r\n                        //4^(i + 2) = e^(- (2 - 4 i) π n + (2 + i) log(4))\r\n\r\n                        var re = b.realpart();\r\n                        var im = b.imagpart();\r\n                        /*\r\n                         if(b.group === CP && false) {\r\n                         var ex = _.pow(a.clone(), re);\r\n                         var xi = _.multiply(_.multiply(ex.clone(), trig.sin(im.clone())), Symbol.imaginary());\r\n                         var xa = _.multiply(trig.cos(im), ex);\r\n                         result = _.add(xi, xa);\r\n                         }\r\n                         else {\r\n                         */\r\n                        var aa = a.clone().toLinear();\r\n                        var a1 = _.pow(aa.clone(), re);\r\n                        var log_a = log(aa.clone());\r\n                        var b1 = trig.cos(_.multiply(im.clone(), log_a));\r\n                        var c1 = _.multiply(trig.sin(_.multiply(im, log(aa))), Symbol.imaginary());\r\n                        result = _.multiply(a1, _.add(b1, c1));\r\n                        result = _.expand(_.parse(result));\r\n                        /*\r\n                         }   \r\n                         */\r\n                    }\r\n                    else {\r\n                        //b is a symbol\r\n                        var neg_num = a.group === N && sign < 0,\r\n                            num = testSQRT(new Symbol(neg_num ? m.num : Math.abs(m.num)).setPower(b.clone())),\r\n                            den = testSQRT(new Symbol(m.den).setPower(b.clone()).invert());\r\n\r\n                        //eliminate imaginary if possible\r\n                        if(a.imaginary) {\r\n                            if(bIsInt) {\r\n                                var s, p, n;\r\n                                s = Math.sign(b);\r\n                                p = abs(b);\r\n                                n = p % 4;\r\n                                result = new Symbol(even(n) ? -1 : Settings.IMAGINARY);\r\n                                if(n === 0 || s < 0 && (n === 1) || s > 0 && (n === 3)) {\r\n                                    result.negate();\r\n                                }\r\n                            }\r\n                            else {\r\n                                //assume i = sqrt(-1) -> (-1)^(1/2)\r\n                                var nr = b.multiplier.multiply(Frac.quick(1, 2)),\r\n                                        //the denominator denotes the power so raise to it. It will turn positive it round\r\n                                        tn = Math.pow(-1, nr.num);\r\n                                result = even(nr.den) ? new Symbol(-1).setPower(nr, true) : new Symbol(tn);\r\n                            }\r\n                        }\r\n                        //ensure that the sign is carried by the symbol and not the multiplier\r\n                        //this enables us to check down the line if the multiplier can indeed be transferred\r\n                        if(sign < 0 && !neg_num)\r\n                            result.negate();\r\n\r\n                        //retain the absolute value\r\n                        if(bIsConstant && a.group !== EX) {\r\n                            var evenr = even(b.multiplier.den),\r\n                                    evenp = even(a.power),\r\n                                    n = result.power.toDecimal(),\r\n                                    evennp = even(n);\r\n                            if(evenr && evenp && !evennp) {\r\n                                if(n === 1)\r\n                                    result = _.symfunction(ABS, [result]);\r\n                                else if(!isInt(n)) {\r\n                                    var p = result.power;\r\n                                    result = _.symfunction(ABS, [result.toLinear()]).setPower(p);\r\n                                }\r\n                                else {\r\n                                    result = _.multiply(_.symfunction(ABS, [result.clone().toLinear()]),\r\n                                            result.clone().setPower(new Frac(n - 1)));\r\n                                }\r\n                                //quick workaround. Revisit\r\n                                if(Settings.POSITIVE_MULTIPLIERS && result.fname === ABS)\r\n                                    result = result.args[0];\r\n                            }\r\n                        }\r\n                        //multiply out sqrt\r\n                        if(b.equals(2) && result.group === CB) {\r\n                            var _result = new Symbol(1);\r\n                            result.each(function (sym) {\r\n                                _result = _.multiply(_result, _.pow(sym, b));\r\n                            });\r\n                            result = _result;\r\n                        }\r\n                    }\r\n                }\r\n\r\n                result = testSQRT(result);\r\n\r\n                // Don't multiply until we've tested the remaining symbol\r\n                if(num && den) {\r\n                    result = _.multiply(result, testPow(_.multiply(num, den)));\r\n                }\r\n\r\n                // Reduce square root\r\n                if(result.fname === SQRT) {\r\n                    var isEX = result.group === EX;\r\n                    var t = isEX ? result.power.multiplier.toString() : result.power.toString();\r\n                    if(even(t)) {\r\n                        var pt = isEX ? _.divide(result.power, new Symbol(2)) : new Symbol(result.power.divide(new Frac(2))),\r\n                                m = result.multiplier;\r\n                        result = _.pow(result.args[0], pt);\r\n                        result.multiplier = result.multiplier.multiply(m);\r\n                    }\r\n                }\r\n                // Detect Euler's identity\r\n                else if(!Settings.IGNORE_E && result.isE() && result.group === EX && result.power.contains('pi')\r\n                        && result.power.contains(Settings.IMAGINARY) && b.group === CB) {\r\n                    var theta = b.stripVar(Settings.IMAGINARY);\r\n                    result = _.add(trig.cos(theta), _.multiply(Symbol.imaginary(), trig.sin(theta)));\r\n                }\r\n\r\n                return result;\r\n            }\r\n            else {\r\n                if(isVector(a) && bIsSymbol) {\r\n                    a = a.map(function (x) {\r\n                        return _.pow(x, b.clone());\r\n                    });\r\n                }\r\n                else if(isMatrix(a) && bIsSymbol) {\r\n                    var M = new Matrix();\r\n                    a.eachElement(function (x, i, j) {\r\n                        M.set(i, j, _.pow(x, b.clone()));\r\n                    });\r\n                    a = M;\r\n                }\r\n                else if(aIsSymbol && isMatrix(b)) {\r\n                    var M = new Matrix();\r\n                    b.eachElement(function (x, i, j) {\r\n                        M.set(i, j, _.pow(a.clone(), x));\r\n                    });\r\n                    a = M;\r\n                }\r\n                return a;\r\n            }\r\n        };\r\n        // Gets called when the parser finds the , operator.\r\n        // Commas return a Collector object which is roughly an array\r\n        this.comma = function (a, b) {\r\n            if(!(a instanceof Collection))\r\n                a = Collection.create(a);\r\n            a.append(b);\r\n            return a;\r\n        };\r\n        // Link to modulus\r\n        this.mod = function (a, b) {\r\n            return mod(a, b);\r\n        };\r\n        // Used to slice elements from arrays\r\n        this.slice = function (a, b) {\r\n            return new Slice(a, b);\r\n        };\r\n        // The equality setter\r\n        this.equals = function (a, b) {\r\n            // Equality can only be set for group S so complain it's not\r\n            if(a.group !== S && !a.isLinear())\r\n                err('Cannot set equality for ' + a.toString());\r\n            VARS[a.value] = b.clone();\r\n            return b;\r\n        };\r\n        // Percent\r\n        this.percent = function (a) {\r\n            return _.divide(a, new Symbol(100));\r\n        };\r\n        // Set variable\r\n        this.assign = function (a, b) {\r\n            if(a instanceof Collection && b instanceof Collection) {\r\n                a.elements.map(function (x, i) {\r\n                    return _.assign(x, b.elements[i]);\r\n                });\r\n                return Vector.fromArray(b.elements);\r\n            }\r\n            if(a.parent) {\r\n                // It's referring to the parent instead. The current item can be discarded\r\n                var e = a.parent;\r\n                e.elements[e.getter] = b;\r\n                delete e.getter;\r\n                return e;\r\n            }\r\n\r\n            if(a.group !== S)\r\n                throw new NerdamerValueError('Cannot complete operation. Incorrect LH value for ' + a);\r\n            VARS[a.value] = b;\r\n            return b;\r\n        };\r\n        this.function_assign = function (a, b) {\r\n            var f = a.elements.pop();\r\n            return setFunction(f, a.elements, b);\r\n        };\r\n        // Function to quickly convert bools to Symbols\r\n        var bool2Symbol = function (x) {\r\n            return new Symbol(x === true ? 1 : 0);\r\n        };\r\n        //check for equality\r\n        this.eq = function (a, b) {\r\n            return bool2Symbol(a.equals(b));\r\n        };\r\n        //checks for greater than\r\n        this.gt = function (a, b) {\r\n            return bool2Symbol(a.gt(b));\r\n        };\r\n        //checks for greater than equal\r\n        this.gte = function (a, b) {\r\n            return bool2Symbol(a.gte(b));\r\n        };\r\n        //checks for less than\r\n        this.lt = function (a, b) {\r\n            return bool2Symbol(a.lt(b));\r\n        };\r\n        //checks for less than equal\r\n        this.lte = function (a, b) {\r\n            return bool2Symbol(a.lte(b));\r\n        };\r\n        // wraps the factorial\r\n        this.factorial = function (a) {\r\n            return this.symfunction(FACTORIAL, [a]);\r\n        };\r\n        // wraps the double factorial\r\n        this.dfactorial = function (a) {\r\n            return this.symfunction(DOUBLEFACTORIAL, [a]);\r\n        };\r\n    }\r\n    ;\r\n\r\n    /* \"STATIC\" */\r\n    // converts a number to a fraction.\r\n    var Fraction = {\r\n        /**\r\n         * Converts a decimal to a fraction\r\n         * @param {number} value\r\n         * @param {object} opts\r\n         * @returns {Array} - an array containing the denominator and the numerator\r\n         */\r\n        convert: function (value, opts) {\r\n            var frac;\r\n            if(value === 0) {\r\n                frac = [0, 1];\r\n            }\r\n            else {\r\n                if(value < 1e-6 || value > 1e20) {\r\n                    var qc = this.quickConversion(Number(value));\r\n                    if(qc[1] <= 1e20) {\r\n                        var abs = Math.abs(value);\r\n                        var sign = value / abs;\r\n                        frac = this.fullConversion(abs.toFixed((qc[1] + '').length - 1));\r\n                        frac[0] = frac[0] * sign;\r\n                    }\r\n                    else {\r\n                        frac = qc;\r\n                    }\r\n                }\r\n                else {\r\n                    frac = this.fullConversion(value);\r\n                }\r\n            }\r\n            return frac;\r\n        },\r\n        /**\r\n         * If the fraction is too small or too large this gets called instead of fullConversion method\r\n         * @param {number} dec\r\n         * @returns {Array} - an array containing the denominator and the numerator\r\n         */\r\n        quickConversion: function (value) {\r\n            var stripSign = function (s) {\r\n                // Explicitely convert to a string\r\n                if(typeof s !== 'string') {\r\n                    s = s.toString();\r\n                }\r\n\r\n                var sign = '';\r\n\r\n                // Remove and store the sign\r\n                var start = s.charAt(0);\r\n                if(start === '-') {\r\n                    s = s.substr(1, s.length);\r\n                    sign = '-';\r\n                }\r\n                else if(start === '+') {\r\n                    // Just remove the plus sign\r\n                    s = s.substr(1, s.length);\r\n                }\r\n\r\n                return {\r\n                    sign: sign,\r\n                    value: s\r\n                };\r\n            };\r\n\r\n\r\n            function convert(value) {\r\n                // Explicitely convert to a decimal\r\n                if(Scientific.isScientific(value)) {\r\n                    value = scientificToDecimal(value);\r\n                }\r\n\r\n                // Split the value into the sign and the value\r\n                var nparts = stripSign(value);\r\n\r\n                // Split it at the decimal. We'll refer to it as the coeffient parts\r\n                var cparts = nparts.value.split('.');\r\n\r\n                // Combine the entire number by removing leading zero and adding the decimal part\r\n                // This would be teh same as moving the decimal point to the end\r\n                var num;\r\n                // We're dealing with integers\r\n                if(cparts.length === 1) {\r\n                    num = cparts[0];\r\n                }\r\n                else {\r\n                    num = cparts[0] + cparts[1];\r\n                }\r\n                var n = cparts[1] ? cparts[1].length : 0;\r\n                // Generate the padding for the zeros\r\n                var den = `1${'0'.repeat(n)}`;\r\n\r\n                if(num !== '0') {\r\n                    num = num.replace(/^0+/, '');\r\n                }\r\n                return [nparts.sign + num, den];\r\n            }\r\n\r\n            return convert(value);\r\n        },\r\n        /**\r\n         * Returns a good approximation of a fraction. This method gets called by convert\r\n         * http://mathforum.org/library/drmath/view/61772.html\r\n         * Decimal To Fraction Conversion - A Simpler Version\r\n         * Dr Peterson\r\n         * @param {number} dec\r\n         * @returns {Array} - an array containing the denominator and the numerator\r\n         */\r\n        fullConversion: function (dec) {\r\n            var done = false;\r\n            // you can adjust the epsilon to a larger number if you don't need very high precision\r\n            var n1 = 0, d1 = 1, n2 = 1, d2 = 0, n = 0, q = dec, epsilon = 1e-16;\r\n            while(!done) {\r\n                n++;\r\n                if(n > 10000) {\r\n                    done = true;\r\n                }\r\n                var a = Math.floor(q);\r\n                var num = n1 + a * n2;\r\n                var den = d1 + a * d2;\r\n                var e = (q - a);\r\n                if(e < epsilon) {\r\n                    done = true;\r\n                }\r\n                q = 1 / e;\r\n                n1 = n2;\r\n                d1 = d2;\r\n                n2 = num;\r\n                d2 = den;\r\n                if(Math.abs(num / den - dec) < epsilon || n > 30) {\r\n                    done = true;\r\n                }\r\n            }\r\n            return [num, den];\r\n        }\r\n    };\r\n    //Depends on Fraction\r\n\r\n    //The latex generator\r\n    var LaTeX = {\r\n        parser: (function () {\r\n            // create a parser and strip it from everything except the items that you need\r\n            var keep = ['classes', 'setOperator', 'getOperators', 'getBrackets', 'tokenize', 'toRPN', 'tree', 'units'];\r\n            var parser = new Parser();\r\n            for(var x in parser) {\r\n                if(keep.indexOf(x) === -1)\r\n                    delete parser[x];\r\n            }\r\n            // declare the operators\r\n            parser.setOperator({\r\n                precedence: 8,\r\n                operator: '\\\\',\r\n                action: 'slash',\r\n                prefix: true,\r\n                postfix: false,\r\n                leftAssoc: true,\r\n                operation: function (e) {\r\n                    return e; // bypass the slash\r\n                }\r\n            });\r\n            parser.setOperator({\r\n                precedence: 8,\r\n                operator: '\\\\,',\r\n                action: 'slash_comma',\r\n                prefix: true,\r\n                postfix: false,\r\n                leftAssoc: true,\r\n                operation: function (e) {\r\n                    return e; // bypass the slash\r\n                }\r\n            });\r\n            // have braces not map to anything. We want them to be return as-is\r\n            var brackets = parser.getBrackets();\r\n            brackets['{'].maps_to = undefined;\r\n            return parser;\r\n        })(),\r\n        space: '~',\r\n        dot: ' \\\\cdot ',\r\n        // grab a list of supported functions but remove the excluded ones found in exclFN\r\n\r\n        latex: function (symbol, option) {\r\n            // it might be an array\r\n            if(symbol.clone) {\r\n                symbol = symbol.clone(); // leave original as-is\r\n            }\r\n            if(symbol instanceof _.classes.Collection)\r\n                symbol = symbol.elements;\r\n\r\n            if(isArray(symbol)) {\r\n                var LaTeXArray = [];\r\n                for(var i = 0; i < symbol.length; i++) {\r\n                    var sym = symbol[i];\r\n                    //This way I can generate LaTeX on an array of strings.\r\n                    if(!isSymbol(sym))\r\n                        sym = _.parse(sym);\r\n                    LaTeXArray.push(this.latex(sym, option));\r\n                }\r\n                return this.brackets(LaTeXArray.join(', '), 'square');\r\n            }\r\n\r\n            else if(isMatrix(symbol)) {\r\n                var TeX = '\\\\begin{pmatrix}\\n';\r\n                for(var i = 0; i < symbol.elements.length; i++) {\r\n                    var rowTeX = [],\r\n                            e = symbol.elements[i];\r\n                    for(var j = 0; j < e.length; j++) {\r\n                        rowTeX.push(this.latex(e[j], option));\r\n                    }\r\n                    TeX += rowTeX.join(' & ');\r\n                    if(i < symbol.elements.length - 1) {\r\n                        TeX += '\\\\\\\\\\n';\r\n                    }\r\n                }\r\n                TeX += '\\\\end{pmatrix}';\r\n                return TeX;\r\n            }\r\n\r\n            else if(isVector(symbol)) {\r\n                var TeX = '\\\\left[';\r\n                for(var i = 0; i < symbol.elements.length; i++) {\r\n                    TeX += this.latex(symbol.elements[i], option) + ' ' + (i !== symbol.elements.length - 1 ? ',\\\\,' : '');\r\n                }\r\n                TeX += '\\\\right]';\r\n                return TeX;\r\n            }\r\n\r\n            else if(isSet(symbol)) {\r\n                var TeX = '\\\\{';\r\n                for(var i = 0; i < symbol.elements.length; i++) {\r\n                    TeX += this.latex(symbol.elements[i], option) + ' ' + (i !== symbol.elements.length - 1 ? ',\\\\,' : '');\r\n                }\r\n                TeX += '\\\\}';\r\n                return TeX;\r\n            }\r\n\r\n            symbol = symbol.clone();\r\n\r\n            var decimal = (option === 'decimal' || option === 'decimals'),\r\n                    power = symbol.power,\r\n                    invert = isNegative(power),\r\n                    negative = symbol.multiplier.lessThan(0);\r\n\r\n            if(symbol.group === P && decimal) {\r\n                return String(symbol.multiplier.toDecimal() * Math.pow(symbol.value, symbol.power.toDecimal()));\r\n            }\r\n            else {\r\n                symbol.multiplier = symbol.multiplier.abs();\r\n\r\n                // if the user wants the result in decimal format then return it as such by placing it at the top part\r\n                var m_array;\r\n\r\n                if(decimal) {\r\n                    var m = String(symbol.multiplier.toDecimal());\r\n                    // if(String(m) === '1' && !decimal) m = '';\r\n                    m_array = [m, ''];\r\n                }\r\n                else {\r\n                    m_array = [symbol.multiplier.num, symbol.multiplier.den];\r\n                }\r\n                // get the value as a two part array\r\n                var v_array = this.value(symbol, invert, option, negative),\r\n                        p;\r\n                // make it all positive since we know whether to push the power to the numerator or denominator already.\r\n                if(invert)\r\n                    power.negate();\r\n                // the power is simple since it requires no additional formatting. We can get it to a\r\n                // string right away. pass in true to neglect unit powers\r\n                if(decimal) {\r\n                    p = isSymbol(power) ? LaTeX.latex(power, option) : String(power.toDecimal());\r\n                    if(String(p) === '1')\r\n                        p = '';\r\n                }\r\n                // get the latex representation\r\n                else if(isSymbol(power))\r\n                    p = this.latex(power, option);\r\n                // get it as a fraction\r\n                else\r\n                    p = this.formatFrac(power, true);\r\n                // use this array to specify if the power is getting attached to the top or the bottom\r\n                var p_array = ['', ''],\r\n                        // stick it to the top or the bottom. If it's negative then the power gets placed on the bottom\r\n                        index = invert ? 1 : 0;\r\n                p_array[index] = p;\r\n\r\n                // special case group P and decimal\r\n                var retval = (negative ? '-' : '') + this.set(m_array, v_array, p_array, symbol.group === CB);\r\n\r\n                return retval.replace(/\\+\\-/gi, '-');\r\n            }\r\n\r\n        },\r\n        // greek mapping\r\n        greek: {\r\n            alpha: '\\\\alpha',\r\n            beta: '\\\\beta',\r\n            gamma: '\\\\gamma',\r\n            delta: '\\\\delta',\r\n            epsilon: '\\\\epsilon',\r\n            zeta: '\\\\zeta',\r\n            eta: '\\\\eta',\r\n            theta: '\\\\theta',\r\n            iota: '\\\\iota',\r\n            kappa: '\\\\kappa',\r\n            lambda: '\\\\lambda',\r\n            mu: '\\\\mu',\r\n            nu: '\\\\nu',\r\n            xi: '\\\\xi',\r\n            omnikron: '\\\\omnikron',\r\n            pi: '\\\\pi',\r\n            rho: '\\\\rho',\r\n            sigma: '\\\\sigma',\r\n            tau: '\\\\tau',\r\n            upsilon: '\\\\upsilon',\r\n            phi: '\\\\phi',\r\n            chi: '\\\\chi',\r\n            psi: '\\\\psi',\r\n            omega: '\\\\omega',\r\n            Gamma: '\\\\Gamma',\r\n            Delta: '\\\\Delta',\r\n            Epsilon: '\\\\Epsilon',\r\n            Theta: '\\\\Theta',\r\n            Lambda: '\\\\Lambda',\r\n            Xi: '\\\\Xi',\r\n            Pi: '\\\\Pi',\r\n            Sigma: '\\\\Sigma',\r\n            Phi: '\\\\Phi',\r\n            Psi: '\\\\Psi',\r\n            Omega: '\\\\Omega'\r\n        },\r\n        symbols: {\r\n            arccos: '\\\\arccos',\r\n            cos: '\\\\cos',\r\n            csc: '\\\\csc',\r\n            exp: '\\\\exp',\r\n            ker: '\\\\ker',\r\n            limsup: '\\\\limsup',\r\n            min: '\\\\min',\r\n            sinh: '\\\\sinh',\r\n            arcsin: '\\\\arcsin',\r\n            cosh: '\\\\cosh',\r\n            deg: '\\\\deg',\r\n            gcd: '\\\\gcd',\r\n            lg: '\\\\lg',\r\n            ln: '\\\\ln',\r\n            Pr: '\\\\Pr',\r\n            sqrt: '\\\\sqrt',\r\n            sup: '\\\\sup',\r\n            arctan: '\\\\arctan',\r\n            cot: '\\\\cot',\r\n            det: '\\\\det',\r\n            hom: '\\\\hom',\r\n            lim: '\\\\lim',\r\n            log: '\\\\log',\r\n            LN: '\\\\LN',\r\n            sec: '\\\\sec',\r\n            tan: '\\\\tan',\r\n            arg: '\\\\arg',\r\n            coth: '\\\\coth',\r\n            dim: '\\\\dim',\r\n            inf: '\\\\inf',\r\n            liminf: '\\\\liminf',\r\n            max: '\\\\max',\r\n            sin: '\\\\sin',\r\n            tanh: '\\\\tanh'\r\n        },\r\n        // get the raw value of the symbol as an array\r\n        value: function (symbol, inverted, option, negative) {\r\n            var group = symbol.group,\r\n                    previousGroup = symbol.previousGroup,\r\n                    v = ['', ''],\r\n                    index = inverted ? 1 : 0;\r\n            /*if(group === N) // do nothing since we want to return top & bottom blank; */\r\n            if(symbol.isInfinity) {\r\n                v[index] = '\\\\infty';\r\n            }\r\n            else if(group === S || group === P || previousGroup === S || previousGroup === P || previousGroup === N) {\r\n                var value = this.formatSubscripts(symbol.value);\r\n                if(value.replace)\r\n                    value = value.replace(/(.+)_$/, '$1\\\\_');\r\n                // split it so we can check for instances of alpha as well as alpha_b\r\n                var t_varray = String(value).split('_');\r\n                var greek = this.greek[t_varray[0]];\r\n                if(greek) {\r\n                    t_varray[0] = greek;\r\n                    value = t_varray.join('_');\r\n                }\r\n                var symbol = this.symbols[t_varray[0]];\r\n                if(symbol) {\r\n                    t_varray[0] = symbol;\r\n                    value = t_varray.join('_');\r\n                }\r\n                v[index] = value;\r\n            }\r\n            else if(group === FN || previousGroup === FN) {\r\n                var name,\r\n                        input = [],\r\n                        fname = symbol.fname;\r\n                // collect the arguments\r\n                for(var i = 0; i < symbol.args.length; i++) {\r\n                    var arg = symbol.args[i], item;\r\n                    if(typeof arg === 'string')\r\n                        item = arg;\r\n                    else {\r\n                        item = this.latex(arg, option);\r\n                    }\r\n                    input.push(item);\r\n                }\r\n\r\n                if(fname === SQRT) {\r\n                    v[index] = '\\\\sqrt' + this.braces(input.join(','));\r\n                }\r\n                else if(fname === ABS) {\r\n                    v[index] = this.brackets(input.join(','), 'abs');\r\n                }\r\n                else if(fname === PARENTHESIS) {\r\n                    v[index] = this.brackets(input.join(','), 'parens');\r\n                }\r\n                else if(fname === 'limit') {\r\n                    v[index] = ' \\\\lim\\\\limits_{' + input[1] + ' \\\\to ' + input[2] + '} ' + input[0];\r\n                }\r\n                else if(fname === 'integrate') {\r\n                    v[index] = '\\\\int' + this.braces(input[0]) + this.braces('d' + input[1]);\r\n                }\r\n                else if(fname === 'defint') {\r\n                    v[index] = '\\\\int\\\\limits_' + this.braces(input[1]) + '^' + this.braces(input[2]) + ' ' + input[0] + ' d' + input[3];\r\n                }\r\n                else if(fname === FACTORIAL || fname === DOUBLEFACTORIAL) {\r\n                    var arg = symbol.args[0];\r\n                    if(arg.power.equals(1) && (arg.isComposite() || arg.isCombination())) {\r\n                        input[0] = this.brackets(input[0]);\r\n                    }\r\n                    v[index] = input[0] + (fname === FACTORIAL ? '!' : '!!');\r\n                }\r\n                else if(fname === 'floor') {\r\n                    v[index] = '\\\\left \\\\lfloor' + this.braces(input[0]) + '\\\\right \\\\rfloor';\r\n                }\r\n                else if(fname === 'ceil') {\r\n                    v[index] = '\\\\left \\\\lceil' + this.braces(input[0]) + '\\\\right \\\\rceil';\r\n                }\r\n                // capture log(a, b)\r\n                else if(fname === Settings.LOG && input.length > 1) {\r\n                    v[index] = '\\\\mathrm' + this.braces(Settings.LOG) + '_' + this.braces(input[1]) + this.brackets(input[0]);\r\n                }\r\n                // capture log(a, b)\r\n                else if(fname === Settings.LOG10) {\r\n                    v[index] = '\\\\mathrm' + this.braces(Settings.LOG) + '_' + this.braces(10) + this.brackets(input[0]);\r\n                }\r\n                else if(fname === 'sum') {\r\n                    var a = input[0],\r\n                            b = input[1],\r\n                            c = input[2],\r\n                            d = input[3];\r\n                    v[index] = '\\\\sum\\\\limits_{' + this.braces(b) + '=' + this.braces(c) + '}^' + this.braces(d) + ' ' + this.braces(a) + '';\r\n                }\r\n                else if(fname === 'product') {\r\n                    var a = input[0],\r\n                            b = input[1],\r\n                            c = input[2],\r\n                            d = input[3];\r\n                    v[index] = '\\\\prod\\\\limits_{' + this.braces(b) + '=' + this.braces(c) + '}^' + this.braces(d) + ' ' + this.braces(a) + '';\r\n                }\r\n                else if(fname === 'nthroot') {\r\n                    v[index] = '\\\\sqrt[' + input[1] + ']' + this.braces(input[0]);\r\n                }\r\n                else if(fname === 'mod') {\r\n                    v[index] = input[0] + ' \\\\bmod ' + input[1];\r\n                }\r\n                else if(fname === 'realpart') {\r\n                    v[index] = '\\\\operatorname{Re}' + this.brackets(input[0]);\r\n                }\r\n                else if(fname === 'imagpart') {\r\n                    v[index] = '\\\\operatorname{Im}' + this.brackets(input[0]);\r\n                }\r\n                else {\r\n                    var name = fname !== '' ? '\\\\mathrm' + this.braces(fname.replace(/_/g, '\\\\_')) : '';\r\n                    if(symbol.isConversion)\r\n                        v[index] = name + this.brackets(input.join(''), 'parens');\r\n                    else\r\n                        v[index] = name + this.brackets(input.join(','), 'parens');\r\n                }\r\n            }\r\n            else if(symbol.isComposite()) {\r\n                var collected = symbol.collectSymbols().sort(\r\n                        group === CP || previousGroup === CP ?\r\n                        function (a, b) {\r\n                            return b.group - a.group;\r\n                        } :\r\n                        function (a, b) {\r\n                            var x = isSymbol(a.power) ? -1 : a.power;\r\n                            var y = isSymbol(b.power) ? -1 : b.power;\r\n                            return y - x;\r\n                        }\r\n                ),\r\n                        symbols = [],\r\n                        l = collected.length;\r\n                for(var i = 0; i < l; i++) {\r\n                    symbols.push(LaTeX.latex(collected[i], option));\r\n                }\r\n                var value = symbols.join('+');\r\n\r\n                v[index] = !(symbol.isLinear() && symbol.multiplier.equals(1)) || negative ? this.brackets(value, 'parens') : value;\r\n            }\r\n            else if(group === CB || previousGroup === EX || previousGroup === CB) {\r\n                if(group === CB)\r\n                    symbol.distributeExponent();\r\n                // This almost feels a little like cheating but I need to know if I should be wrapping the symbol\r\n                // in brackets or not. We'll do this by checking the value of the numerator and then comparing it\r\n                // to whether the symbol value is \"simple\" or not.\r\n                var denominator = [],\r\n                        numerator = [];\r\n                // Generate a profile\r\n                var den_map = [], num_map = [], num_c = 0, den_c = 0;\r\n                var setBrackets = function (container, map, counter) {\r\n                    if(counter > 1 && map.length > 0) {\r\n                        var l = map.length;\r\n                        for(var i = 0; i < l; i++) {\r\n                            var idx = map[i], item = container[idx];\r\n                            if(!(/^\\\\left\\(.+\\\\right\\)\\^\\{.+\\}$/g.test(item) || /^\\\\left\\(.+\\\\right\\)$/g.test(item))) {\r\n                                container[idx] = LaTeX.brackets(item, 'parens');\r\n                            }\r\n                        }\r\n                    }\r\n                    return container;\r\n                };\r\n\r\n                // Generate latex for each of them\r\n                symbol.each(function (x) {\r\n                    var isDenom = isNegative(x.power),\r\n                            laTex;\r\n\r\n                    if(isDenom) {\r\n                        laTex = LaTeX.latex(x.invert(), option);\r\n                        den_c++;\r\n                        if(x.isComposite()) {\r\n                            if(symbol.multiplier.den != 1 && Math.abs(x.power) == 1)\r\n                                laTex = LaTeX.brackets(laTex, 'parens');\r\n                            den_map.push(denominator.length); // make a note of where the composite was found\r\n                        }\r\n\r\n                        denominator.push(laTex);\r\n                    }\r\n                    else {\r\n                        laTex = LaTeX.latex(x, option);\r\n                        num_c++;\r\n                        if(x.isComposite()) {\r\n                            if(symbol.multiplier.num != 1 && Math.abs(x.power) == 1)\r\n                                laTex = LaTeX.brackets(laTex, 'parens');\r\n                            num_map.push(numerator.length);   // make a note of where the composite was found\r\n                        }\r\n                        numerator.push(laTex);\r\n                    }\r\n                });\r\n\r\n                // Apply brackets\r\n                setBrackets(numerator, num_map, num_c);\r\n                v[0] = numerator.join(this.dot); // collapse the numerator into one string\r\n\r\n                setBrackets(denominator, den_map, den_c);\r\n                v[1] = denominator.join(this.dot);\r\n            }\r\n\r\n            return v;\r\n        },\r\n        set: function (m, v, p, combine_power) {\r\n            var isBracketed = function (v) {\r\n                return /^\\\\left\\(.+\\\\right\\)$/.test(v);\r\n            };\r\n            // format the power if it exists\r\n            if(p)\r\n                p = this.formatP(p);\r\n            // group CB will have to be wrapped since the power applies to both it's numerator and denominator\r\n            if(combine_power) {\r\n                // POSSIBLE BUG: If powers for group CB format wrong, investigate this since I might have overlooked something\r\n                // the assumption is that in every case the denonimator should be empty when dealing with CB. I can't think\r\n                // of a case where this isn't true\r\n                var tp = p[0];\r\n                p[0] = ''; // temporarily make p blank\r\n            }\r\n\r\n            // merge v and p. Not that v MUST be first since the order matters\r\n            v = this.merge(v, p);\r\n            var mn = m[0], md = m[1], vn = v[0], vd = v[1];\r\n            // filters\r\n            // if the top has a variable but the numerator is one drop it\r\n            if(vn && Number(mn) === 1)\r\n                mn = '';\r\n            // if denominator is 1 drop it always\r\n            if(Number(md) === 1)\r\n                md = '';\r\n            // prepare the top portion but check that it's not already bracketed. If it is then leave out the cdot\r\n            var top = this.join(mn, vn, !isBracketed(vn) ? this.dot : '');\r\n\r\n            // prepare the bottom portion but check that it's not already bracketed. If it is then leave out the cdot\r\n            var bottom = this.join(md, vd, !isBracketed(vd) ? this.dot : '');\r\n            // format the power if it exists\r\n            // make it a fraction if both top and bottom exists\r\n            if(top && bottom) {\r\n                var frac = this.frac(top, bottom);\r\n                if(combine_power && tp)\r\n                    frac = this.brackets(frac) + tp;\r\n                return frac;\r\n            }\r\n            // otherwise only the top exists so return that\r\n            else\r\n                return top;\r\n        },\r\n        merge: function (a, b) {\r\n            var r = [];\r\n            for(var i = 0; i < 2; i++)\r\n                r[i] = a[i] + b[i];\r\n            return r;\r\n        },\r\n        // joins together two strings if both exist\r\n        join: function (n, d, glue) {\r\n            if(!n && !d)\r\n                return '';\r\n            if(n && !d)\r\n                return n;\r\n            if(d && !n)\r\n                return d;\r\n            return n + glue + d;\r\n        },\r\n        /**\r\n         * Places subscripts in braces for proper formatting\r\n         * @param {String} v\r\n         * @returns {String}\r\n         */\r\n        formatSubscripts: function (v) {\r\n            // Split it at the underscore\r\n            var arr = v.toString().split('_');\r\n\r\n            var name = '';\r\n\r\n            // Loop over all entries except the first one\r\n            while(arr.length > 1) {\r\n                // Wrap all in braces except for the last one\r\n                if(arr.length > 0) {\r\n                    name = '_' + this.braces(arr.pop() + name);\r\n                }\r\n            }\r\n\r\n            return arr[0] + name;\r\n        },\r\n        formatP: function (p_array) {\r\n            for(var i = 0; i < 2; i++) {\r\n                var p = p_array[i];\r\n                if(p)\r\n                    p_array[i] = '^' + this.braces(p);\r\n            }\r\n            return p_array;\r\n        },\r\n        /**\r\n         * formats the fractions accordingly.\r\n         * @param {Frac} f\r\n         * @param {bool} is_pow\r\n         */\r\n        formatFrac: function (f, is_pow) {\r\n            var n = f.num.toString(),\r\n                    d = f.den.toString();\r\n            // no need to have x^1\r\n            if(is_pow && n === '1' && d === '1')\r\n                return '';\r\n            // no need to have x/1\r\n            if(d === '1')\r\n                return n;\r\n            return this.frac(n, d);\r\n        },\r\n        frac: function (n, d) {\r\n            return '\\\\frac' + this.braces(n) + this.braces(d);\r\n        },\r\n        braces: function (e) {\r\n            return '{' + e + '}';\r\n        },\r\n        brackets: function (e, typ) {\r\n            typ = typ || 'parens';\r\n            var bracketTypes = {\r\n                parens: ['(', ')'],\r\n                square: ['[', ']'],\r\n                brace: ['{', '}'],\r\n                abs: ['|', '|'],\r\n                angle: ['\\\\langle', '\\\\rangle']\r\n            };\r\n            var bracket = bracketTypes[typ];\r\n            return '\\\\left' + bracket[0] + e + '\\\\right' + bracket[1];\r\n        },\r\n        /**\r\n         * Removes extreneous tokens\r\n         * @param {Tokens[]} tokens\r\n         * @returns {Tokens[]}\r\n         */\r\n        filterTokens: function (tokens) {\r\n            var filtered = [];\r\n\r\n            // Copy over the type of the scope\r\n            if(isArray(tokens)) {\r\n                filtered.type = tokens.type;\r\n            }\r\n\r\n            // the items that need to be disposed\r\n            var d = ['\\\\', 'left', 'right', 'big', 'Big', 'large', 'Large'];\r\n            for(var i = 0, l = tokens.length; i < l; i++) {\r\n                var token = tokens[i];\r\n                var next_token = tokens[i + 1];\r\n                if(token.value === '\\\\' && next_token.value === '\\\\') {\r\n                    filtered.push(token);\r\n                }\r\n                else if(isArray(token)) {\r\n                    filtered.push(LaTeX.filterTokens(token));\r\n                }\r\n                else if(d.indexOf(token.value) === -1) {\r\n                    filtered.push(token);\r\n                }\r\n            }\r\n            return filtered;\r\n        },\r\n        /*\r\n         * Parses tokens from LaTeX string. Does not do any error checking\r\n         * @param {Tokens[]} rpn\r\n         * @returns {String}\r\n         */\r\n        parse: function (raw_tokens) {\r\n            var i, l;\r\n            var retval = '';\r\n            var tokens = this.filterTokens(raw_tokens);\r\n            var replace = {\r\n                'cdot': '',\r\n                'times': '',\r\n                'infty': 'Infinity'\r\n            };\r\n            // get the next token\r\n            var next = function (n) {\r\n                return tokens[(typeof n === 'undefined' ? ++i : i += n)];\r\n            };\r\n            var parse_next = function () {\r\n                return LaTeX.parse(next());\r\n            };\r\n            var get = function (token) {\r\n                if(token in replace) {\r\n                    return replace[token];\r\n                }\r\n                // A quirk with implicit multiplication forces us to check for *\r\n                if(token === '*' && tokens[i + 1].value === '&') {\r\n                    next(2); // skip this and the &\r\n                    return ',';\r\n                }\r\n\r\n                if(token === '&') {\r\n                    next();\r\n                    return ','; // Skip the *\r\n                }\r\n                // If it's the end of a row, return the row separator\r\n                if(token === '\\\\') {\r\n                    return '],[';\r\n                }\r\n                return token;\r\n            };\r\n\r\n            // start parsing the tokens\r\n            for(i = 0, l = tokens.length; i < l; i++) {\r\n                var token = tokens[i];\r\n                // fractions\r\n                if(token.value === 'frac') {\r\n                    // parse and wrap it in brackets\r\n                    var n = parse_next();\r\n                    var d = parse_next();\r\n                    retval += n + '/' + d;\r\n                }\r\n                else if(token.value in LaTeX.symbols) {\r\n                    if(token.value === SQRT && tokens[i + 1].type === 'vector' && tokens[i + 2].type === 'Set') {\r\n                        var base = parse_next();\r\n                        var expr = parse_next();\r\n                        retval += (expr + '^' + inBrackets('1/' + base));\r\n                    }\r\n                    else {\r\n                        retval += token.value + parse_next();\r\n                    }\r\n                }\r\n                else if(token.value === 'int') {\r\n                    var f = parse_next();\r\n                    // skip the comma\r\n                    i++;\r\n                    // get the variable of integration\r\n                    var dx = next().value;\r\n                    dx = get(dx.substring(1, dx.length));\r\n                    retval += 'integrate' + inBrackets(f + ',' + dx);\r\n                }\r\n                else if(token.value === 'mathrm') {\r\n                    var f = tokens[++i][0].value;\r\n                    retval += f + parse_next();\r\n                }\r\n                // sum and product\r\n                else if(token.value === 'sum_' || token.value === 'prod_') {\r\n                    var fn = token.value === 'sum_' ? 'sum' : 'product';\r\n                    var nxt = next();\r\n                    i++; // skip the caret\r\n                    var end = parse_next();\r\n                    var f = parse_next();\r\n                    retval += fn + inBrackets([f, get(nxt[0]), get(nxt[2]), get(end)].join(','));\r\n                }\r\n                else if(token.value === 'lim_') {\r\n                    var nxt = next();\r\n                    retval += 'limit' + inBrackets([parse_next(), get(nxt[0]), get(nxt[2])].join(','));\r\n                }\r\n                else if(token.value === 'begin') {\r\n                    var nxt = next();\r\n                    if(Array.isArray(nxt)) {\r\n                        var v = nxt[0].value;\r\n                        if(v === 'matrix') {\r\n                            // Start a matrix\r\n                            retval += 'matrix([';\r\n                        }\r\n                    }\r\n                }\r\n                else if(token.value === 'end') {\r\n                    var nxt = next();\r\n                    if(Array.isArray(nxt)) {\r\n                        var v = nxt[0].value;\r\n                        if(v === 'matrix') {\r\n                            // End a matrix\r\n                            retval += '])';\r\n                        }\r\n                    }\r\n                }\r\n                else {\r\n                    if(Array.isArray(token)) {\r\n                        retval += get(LaTeX.parse(token));\r\n                    }\r\n                    else {\r\n                        retval += get(token.value.toString());\r\n                    }\r\n                }\r\n            }\r\n\r\n            return inBrackets(retval);\r\n        }\r\n    };\r\n//Vector =======================================================================\r\n    function Vector(v) {\r\n        if(isVector(v))\r\n            this.elements = v.items.slice(0);\r\n        else if(isArray(v))\r\n            this.elements = v.slice(0);\r\n        else\r\n            this.elements = [].slice.call(arguments);\r\n    }\r\n    /*\r\n     * Generates a pre-filled array\r\n     * @param {type} n\r\n     * @param {type} val\r\n     * @returns {unresolved}\r\n     */\r\n    Vector.arrayPrefill = function (n, val) {\r\n        var a = [];\r\n        val = val || 0;\r\n        for(var i = 0; i < n; i++)\r\n            a[i] = val;\r\n        return a;\r\n    };\r\n    /**\r\n     * Generate a vector from and array\r\n     * @param {type} a\r\n     * @returns {unresolved}\r\n     */\r\n    Vector.fromArray = function (a) {\r\n        var v = new Vector();\r\n        v.elements = a;\r\n        return v;\r\n    };\r\n\r\n    /**\r\n     * Convert a Set to a Vector\r\n     * @param {Set} set\r\n     * @returns {Vector}\r\n     */\r\n    Vector.fromSet = function (set) {\r\n        return Vector.fromArray(set.elements);\r\n    };\r\n\r\n    //Ported from Sylvester.js\r\n    Vector.prototype = {\r\n        custom: true,\r\n        // Returns element i of the vector\r\n        e: function (i) {\r\n            return (i < 1 || i > this.elements.length) ? null : this.elements[i - 1];\r\n        },\r\n\r\n        set: function (i, val) {\r\n            if(!isSymbol(val))\r\n                val = new Symbol(val);\r\n            this.elements[i] = val;\r\n        },\r\n\r\n        // Returns the number of elements the vector has\r\n        dimensions: function () {\r\n            return this.elements.length;\r\n        },\r\n\r\n        // Returns the modulus ('length') of the vector\r\n        modulus: function () {\r\n            return block('SAFE', function () {\r\n                return _.pow((this.dot(this.clone())), new Symbol(0.5));\r\n            }, undefined, this);\r\n        },\r\n\r\n        // Returns true iff the vector is equal to the argument\r\n        eql: function (vector) {\r\n            var n = this.elements.length;\r\n            var V = vector.elements || vector;\r\n            if(n !== V.length) {\r\n                return false;\r\n            }\r\n            do {\r\n                if(Math.abs(_.subtract(this.elements[n - 1], V[n - 1]).valueOf()) > PRECISION) {\r\n                    return false;\r\n                }\r\n            }\r\n            while(--n);\r\n            return true;\r\n        },\r\n\r\n        // Returns a clone of the vector\r\n        clone: function () {\r\n            var V = new Vector(),\r\n                    l = this.elements.length;\r\n            for(var i = 0; i < l; i++) {\r\n                //Rule: all items within the vector must have a clone method.\r\n                V.elements.push(this.elements[i].clone());\r\n            }\r\n            if(this.getter) {\r\n                V.getter = this.getter.clone();\r\n            }\r\n            return V;\r\n        },\r\n\r\n        // Maps the vector to another vector according to the given function\r\n        map: function (fn) {\r\n            var elements = [];\r\n            this.each(function (x, i) {\r\n                elements.push(fn(x, i));\r\n            });\r\n\r\n            return new Vector(elements);\r\n        },\r\n\r\n        // Calls the iterator for each element of the vector in turn\r\n        each: function (fn) {\r\n            var n = this.elements.length, k = n, i;\r\n            do {\r\n                i = k - n;\r\n                fn(this.elements[i], i + 1);\r\n            }\r\n            while(--n);\r\n        },\r\n\r\n        // Returns a new vector created by normalizing the receiver\r\n        toUnitVector: function () {\r\n            return block('SAFE', function () {\r\n                var r = this.modulus();\r\n                if(r.valueOf() === 0) {\r\n                    return this.clone();\r\n                }\r\n                return this.map(function (x) {\r\n                    return _.divide(x, r);\r\n                });\r\n            }, undefined, this);\r\n        },\r\n\r\n        // Returns the angle between the vector and the argument (also a vector)\r\n        angleFrom: function (vector) {\r\n            return block('SAFE', function () {\r\n                var V = vector.elements || vector;\r\n                var n = this.elements.length;\r\n                if(n !== V.length) {\r\n                    return null;\r\n                }\r\n                var dot = new Symbol(0), mod1 = new Symbol(0), mod2 = new Symbol(0);\r\n                // Work things out in parallel to save time\r\n                this.each(function (x, i) {\r\n                    dot = _.add(dot, _.multiply(x, V[i - 1]));\r\n                    mod1 = _.add(mod1, _.multiply(x, x));// will not conflict in safe block\r\n                    mod2 = _.add(mod2, _.multiply(V[i - 1], V[i - 1]));// will not conflict in safe block\r\n                });\r\n                mod1 = _.pow(mod1, new Symbol(0.5));\r\n                mod2 = _.pow(mod2, new Symbol(0.5));\r\n                var product = _.multiply(mod1, mod2);\r\n                if(product.valueOf() === 0) {\r\n                    return null;\r\n                }\r\n                var theta = _.divide(dot, product);\r\n                var theta_val = theta.valueOf();\r\n                if(theta_val < -1) {\r\n                    theta = -1;\r\n                }\r\n                if(theta_val > 1) {\r\n                    theta = 1;\r\n                }\r\n                return new Symbol(Math.acos(theta));\r\n            }, undefined, this);\r\n        },\r\n\r\n        // Returns true iff the vector is parallel to the argument\r\n        isParallelTo: function (vector) {\r\n            var angle = this.angleFrom(vector).valueOf();\r\n            return (angle === null) ? null : (angle <= PRECISION);\r\n        },\r\n\r\n        // Returns true iff the vector is antiparallel to the argument\r\n        isAntiparallelTo: function (vector) {\r\n            var angle = this.angleFrom(vector).valueOf();\r\n            return (angle === null) ? null : (Math.abs(angle - Math.PI) <= PRECISION);\r\n        },\r\n\r\n        // Returns true iff the vector is perpendicular to the argument\r\n        isPerpendicularTo: function (vector) {\r\n            var dot = this.dot(vector);\r\n            return (dot === null) ? null : (Math.abs(dot) <= PRECISION);\r\n        },\r\n\r\n        // Returns the result of adding the argument to the vector\r\n        add: function (vector) {\r\n            return block('SAFE', function () {\r\n                var V = vector.elements || vector;\r\n                if(this.elements.length !== V.length) {\r\n                    return null;\r\n                }\r\n                return this.map(function (x, i) {\r\n                    return _.add(x, V[i - 1]);\r\n                });\r\n            }, undefined, this);\r\n        },\r\n\r\n        // Returns the result of subtracting the argument from the vector\r\n        subtract: function (vector) {\r\n            return block('SAFE', function () {\r\n                var V = vector.elements || vector;\r\n                if(this.elements.length !== V.length) {\r\n                    return null;\r\n                }\r\n                return this.map(function (x, i) {\r\n                    return _.subtract(x, V[i - 1]);\r\n                });\r\n            }, undefined, this);\r\n        },\r\n\r\n        // Returns the result of multiplying the elements of the vector by the argument\r\n        multiply: function (k) {\r\n            return this.map(function (x) {\r\n                return x.clone() * k.clone();\r\n            });\r\n        },\r\n\r\n        x: function (k) {\r\n            return this.multiply(k);\r\n        },\r\n\r\n        // Returns the scalar product of the vector with the argument\r\n        // Both vectors must have equal dimensionality\r\n        dot: function (vector) {\r\n            return block('SAFE', function () {\r\n                var V = vector.elements || vector;\r\n                var product = new Symbol(0), n = this.elements.length;\r\n                if(n !== V.length) {\r\n                    return null;\r\n                }\r\n                do {\r\n                    product = _.add(product, _.multiply(this.elements[n - 1], V[n - 1]));\r\n                }\r\n                while(--n);\r\n                return product;\r\n            }, undefined, this);\r\n        },\r\n\r\n        // Returns the vector product of the vector with the argument\r\n        // Both vectors must have dimensionality 3\r\n        cross: function (vector) {\r\n            var B = vector.elements || vector;\r\n            if(this.elements.length !== 3 || B.length !== 3) {\r\n                return null;\r\n            }\r\n            var A = this.elements;\r\n            return block('SAFE', function () {\r\n                return new Vector([\r\n                    _.subtract(_.multiply(A[1], B[2]), _.multiply(A[2], B[1])),\r\n                    _.subtract(_.multiply(A[2], B[0]), _.multiply(A[0], B[2])),\r\n                    _.subtract(_.multiply(A[0], B[1]), _.multiply(A[1], B[0]))\r\n                ]);\r\n            }, undefined, this);\r\n        },\r\n\r\n        // Returns the (absolute) largest element of the vector\r\n        max: function () {\r\n            var m = 0, n = this.elements.length, k = n, i;\r\n            do {\r\n                i = k - n;\r\n                if(Math.abs(this.elements[i].valueOf()) > Math.abs(m.valueOf())) {\r\n                    m = this.elements[i];\r\n                }\r\n            }\r\n            while(--n);\r\n            return m;\r\n        },\r\n        magnitude: function () {\r\n            var magnitude = new Symbol(0);\r\n            this.each(function (e) {\r\n                magnitude = _.add(magnitude, _.pow(e, new Symbol(2)));\r\n            });\r\n            return _.sqrt(magnitude);\r\n        },\r\n        // Returns the index of the first match found\r\n        indexOf: function (x) {\r\n            var index = null, n = this.elements.length, k = n, i;\r\n            do {\r\n                i = k - n;\r\n                if(index === null && this.elements[i].valueOf() === x.valueOf()) {\r\n                    index = i + 1;\r\n                }\r\n            }\r\n            while(--n);\r\n            return index;\r\n        },\r\n        text: function (x) {\r\n            return text(this);\r\n        },\r\n        toString: function () {\r\n            return this.text();\r\n        },\r\n        latex: function (option) {\r\n            var tex = [];\r\n            for(var i = 0; i < this.elements.length; i++) {\r\n                tex.push(LaTeX.latex.call(LaTeX, this.elements[i], option));\r\n            }\r\n            return '[' + tex.join(', ') + ']';\r\n        }\r\n    };\r\n\r\n//Matrix =======================================================================\r\n    function Matrix() {\r\n        var m = arguments,\r\n                l = m.length, i, el = [];\r\n        if(isMatrix(m)) { // if it's a matrix then make a clone\r\n            for(i = 0; i < l; i++) {\r\n                el.push(m[i].slice(0));\r\n            }\r\n        }\r\n        else {\r\n            var row, lw, rl;\r\n            for(i = 0; i < l; i++) {\r\n                row = m[i];\r\n                if(isVector(row))\r\n                    row = row.elements;\r\n                if(!isArray(row))\r\n                    row = [row];\r\n                rl = row.length;\r\n                if(lw && lw !== rl)\r\n                    err('Unable to create Matrix. Row dimensions do not match!');\r\n                el.push(row);\r\n                lw = rl;\r\n            }\r\n        }\r\n        this.elements = el;\r\n    }\r\n    Matrix.identity = function (n) {\r\n        var m = new Matrix();\r\n        for(var i = 0; i < n; i++) {\r\n            m.elements.push([]);\r\n            for(var j = 0; j < n; j++) {\r\n                m.set(i, j, i === j ? new Symbol(1) : new Symbol(0));\r\n            }\r\n        }\r\n        return m;\r\n    };\r\n    Matrix.fromArray = function (arr) {\r\n        function F(args) {\r\n            return Matrix.apply(this, args);\r\n        }\r\n        F.prototype = Matrix.prototype;\r\n\r\n        return new F(arr);\r\n    };\r\n    Matrix.zeroMatrix = function (rows, cols) {\r\n        var m = new Matrix();\r\n        for(var i = 0; i < rows; i++) {\r\n            m.elements.push(Vector.arrayPrefill(cols, new Symbol(0)));\r\n        }\r\n        return m;\r\n    };\r\n    Matrix.prototype = {\r\n        // needs be true to let the parser know not to try to cast it to a symbol\r\n        custom: true,\r\n        get: function (row, column) {\r\n            if(!this.elements[row])\r\n                return undefined;\r\n            return this.elements[row][column];\r\n        },\r\n        map: function (f, raw_values) {\r\n            var M = new Matrix();\r\n            this.each(function (e, i, j) {\r\n                M.set(i, j, f.call(M, e), raw_values);\r\n            });\r\n            return M;\r\n        },\r\n        set: function (row, column, value, raw) {\r\n            if(!this.elements[row])\r\n                this.elements[row] = [];\r\n            this.elements[row][column] = raw ? value : (isSymbol(value) ? value : new Symbol(value));\r\n        },\r\n        cols: function () {\r\n            return this.elements[0].length;\r\n        },\r\n        rows: function () {\r\n            return this.elements.length;\r\n        },\r\n        row: function (n) {\r\n            if(!n || n > this.cols())\r\n                return [];\r\n            return this.elements[n - 1];\r\n        },\r\n        col: function (n) {\r\n            var nr = this.rows(),\r\n                    col = [];\r\n            if(n > this.cols() || !n)\r\n                return col;\r\n            for(var i = 0; i < nr; i++) {\r\n                col.push(this.elements[i][n - 1]);\r\n            }\r\n            return col;\r\n        },\r\n        eachElement: function (fn) {\r\n            var nr = this.rows(),\r\n                    nc = this.cols(), i, j;\r\n            for(i = 0; i < nr; i++) {\r\n                for(j = 0; j < nc; j++) {\r\n                    fn.call(this, this.elements[i][j], i, j);\r\n                }\r\n            }\r\n        },\r\n        // ported from Sylvester.js\r\n        determinant: function () {\r\n            if(!this.isSquare()) {\r\n                return null;\r\n            }\r\n            var M = this.toRightTriangular();\r\n            var det = M.elements[0][0], n = M.elements.length - 1, k = n, i;\r\n            do {\r\n                i = k - n + 1;\r\n                det = _.multiply(det, M.elements[i][i]);\r\n            }\r\n            while(--n);\r\n            return det;\r\n        },\r\n        isSquare: function () {\r\n            return this.elements.length === this.elements[0].length;\r\n        },\r\n        isSingular: function () {\r\n            return this.isSquare() && this.determinant() === 0;\r\n        },\r\n        augment: function (m) {\r\n            var r = this.rows(), rr = m.rows();\r\n            if(r !== rr)\r\n                err(\"Cannot augment matrix. Rows don't match.\");\r\n            for(var i = 0; i < r; i++) {\r\n                this.elements[i] = this.elements[i].concat(m.elements[i]);\r\n            }\r\n\r\n            return this;\r\n        },\r\n        clone: function () {\r\n            var r = this.rows(), c = this.cols(),\r\n                    m = new Matrix();\r\n            for(var i = 0; i < r; i++) {\r\n                m.elements[i] = [];\r\n                for(var j = 0; j < c; j++) {\r\n                    var symbol = this.elements[i][j];\r\n                    m.elements[i][j] = isSymbol(symbol) ? symbol.clone() : symbol;\r\n                }\r\n            }\r\n            return m;\r\n        },\r\n        // ported from Sylvester.js\r\n        invert: function () {\r\n            if(!this.isSquare())\r\n                err('Matrix is not square!');\r\n            return block('SAFE', function () {\r\n                var ni = this.elements.length, ki = ni, i, j;\r\n                var imatrix = Matrix.identity(ni);\r\n                var M = this.augment(imatrix).toRightTriangular();\r\n                var np, kp = M.elements[0].length, p, els, divisor;\r\n                var inverse_elements = [], new_element;\r\n                // Matrix is non-singular so there will be no zeros on the diagonal\r\n                // Cycle through rows from last to first\r\n                do {\r\n                    i = ni - 1;\r\n                    // First, normalise diagonal elements to 1\r\n                    els = [];\r\n                    np = kp;\r\n                    inverse_elements[i] = [];\r\n                    divisor = M.elements[i][i];\r\n                    do {\r\n                        p = kp - np;\r\n                        new_element = _.divide(M.elements[i][p], divisor.clone());\r\n                        els.push(new_element);\r\n                        // Shuffle of the current row of the right hand side into the results\r\n                        // array as it will not be modified by later runs through this loop\r\n                        if(p >= ki) {\r\n                            inverse_elements[i].push(new_element);\r\n                        }\r\n                    }\r\n                    while(--np);\r\n                    M.elements[i] = els;\r\n                    // Then, subtract this row from those above it to\r\n                    // give the identity matrix on the left hand side\r\n                    for(j = 0; j < i; j++) {\r\n                        els = [];\r\n                        np = kp;\r\n                        do {\r\n                            p = kp - np;\r\n                            els.push(_.subtract(M.elements[j][p].clone(), _.multiply(M.elements[i][p].clone(), M.elements[j][i].clone())));\r\n                        }\r\n                        while(--np);\r\n                        M.elements[j] = els;\r\n                    }\r\n                }\r\n                while(--ni);\r\n                return Matrix.fromArray(inverse_elements);\r\n            }, undefined, this);\r\n        },\r\n        // ported from Sylvester.js\r\n        toRightTriangular: function () {\r\n            return block('SAFE', function () {\r\n                var M = this.clone(), els, fel, nel,\r\n                        n = this.elements.length, k = n, i, np, kp = this.elements[0].length, p;\r\n                do {\r\n                    i = k - n;\r\n                    fel = M.elements[i][i];\r\n                    if(fel.valueOf() === 0) {\r\n                        for(var j = i + 1; j < k; j++) {\r\n                            nel = M.elements[j][i];\r\n                            if(nel && nel.valueOf() !== 0) {\r\n                                els = [];\r\n                                np = kp;\r\n                                do {\r\n                                    p = kp - np;\r\n                                    els.push(_.add(M.elements[i][p].clone(), M.elements[j][p].clone()));\r\n                                }\r\n                                while(--np);\r\n                                M.elements[i] = els;\r\n                                break;\r\n                            }\r\n                        }\r\n                    }\r\n                    var fel = M.elements[i][i];\r\n                    if(fel.valueOf() !== 0) {\r\n                        for(j = i + 1; j < k; j++) {\r\n                            var multiplier = _.divide(M.elements[j][i].clone(), M.elements[i][i].clone());\r\n                            els = [];\r\n                            np = kp;\r\n                            do {\r\n                                p = kp - np;\r\n                                // Elements with column numbers up to an including the number\r\n                                // of the row that we're subtracting can safely be set straight to\r\n                                // zero, since that's the point of this routine and it avoids having\r\n                                // to loop over and correct rounding errors later\r\n                                els.push(p <= i ? new Symbol(0) :\r\n                                        _.subtract(M.elements[j][p].clone(), _.multiply(M.elements[i][p].clone(), multiplier.clone())));\r\n                            }\r\n                            while(--np);\r\n                            M.elements[j] = els;\r\n                        }\r\n                    }\r\n                }\r\n                while(--n);\r\n\r\n                return M;\r\n            }, undefined, this);\r\n        },\r\n        transpose: function () {\r\n            var rows = this.elements.length, cols = this.elements[0].length;\r\n            var M = new Matrix(), ni = cols, i, nj, j;\r\n\r\n            do {\r\n                i = cols - ni;\r\n                M.elements[i] = [];\r\n                nj = rows;\r\n                do {\r\n                    j = rows - nj;\r\n                    M.elements[i][j] = this.elements[j][i].clone();\r\n                }\r\n                while(--nj);\r\n            }\r\n            while(--ni);\r\n            return M;\r\n        },\r\n        // Returns true if the matrix can multiply the argument from the left\r\n        canMultiplyFromLeft: function (matrix) {\r\n            var l = isMatrix(matrix) ? matrix.elements.length : matrix.length;\r\n            // this.columns should equal matrix.rows\r\n            return (this.elements[0].length === l);\r\n        },\r\n        sameSize: function (matrix) {\r\n            return this.rows() === matrix.rows() && this.cols() === matrix.cols();\r\n        },\r\n        multiply: function (matrix) {\r\n            return block('SAFE', function () {\r\n                var M = matrix.elements || matrix;\r\n                if(!this.canMultiplyFromLeft(M)) {\r\n                    if(this.sameSize(matrix)) {\r\n                        var MM = new Matrix();\r\n                        var rows = this.rows();\r\n                        for(var i = 0; i < rows; i++) {\r\n                            var e = _.multiply(new Vector(this.elements[i]), new Vector(matrix.elements[i]));\r\n                            MM.elements[i] = e.elements;\r\n                        }\r\n                        return MM;\r\n                    }\r\n                    return null;\r\n                }\r\n                var ni = this.elements.length, ki = ni, i, nj, kj = M[0].length, j;\r\n                var cols = this.elements[0].length, elements = [], sum, nc, c;\r\n                do {\r\n                    i = ki - ni;\r\n                    elements[i] = [];\r\n                    nj = kj;\r\n                    do {\r\n                        j = kj - nj;\r\n                        sum = new Symbol(0);\r\n                        nc = cols;\r\n                        do {\r\n                            c = cols - nc;\r\n                            sum = _.add(sum, _.multiply(this.elements[i][c], M[c][j]));\r\n                        }\r\n                        while(--nc);\r\n                        elements[i][j] = sum;\r\n                    }\r\n                    while(--nj);\r\n                }\r\n                while(--ni);\r\n                return Matrix.fromArray(elements);\r\n            }, undefined, this);\r\n        },\r\n        add: function (matrix, callback) {\r\n            var M = new Matrix();\r\n            if(this.sameSize(matrix)) {\r\n                this.eachElement(function (e, i, j) {\r\n                    var result = _.add(e.clone(), matrix.elements[i][j].clone());\r\n                    if(callback) {\r\n                        result = callback.call(M, result, e, matrix.elements[i][j]);\r\n                    }\r\n                    M.set(i, j, result);\r\n                });\r\n            }\r\n            return M;\r\n        },\r\n        subtract: function (matrix, callback) {\r\n            var M = new Matrix();\r\n            if(this.sameSize(matrix)) {\r\n                this.eachElement(function (e, i, j) {\r\n                    var result = _.subtract(e.clone(), matrix.elements[i][j].clone());\r\n                    if(callback) {\r\n                        result = callback.call(M, result, e, matrix.elements[i][j]);\r\n                    }\r\n                    M.set(i, j, result);\r\n                });\r\n            }\r\n            return M;\r\n        },\r\n        negate: function () {\r\n            this.each(function (e) {\r\n                return e.negate();\r\n            });\r\n            return this;\r\n        },\r\n        toVector: function () {\r\n            if(this.rows() === 1 || this.cols() === 1) {\r\n                var v = new Vector();\r\n                v.elements = this.elements;\r\n                return v;\r\n            }\r\n            return this;\r\n        },\r\n        toString: function (newline, to_decimal) {\r\n            var l = this.rows(),\r\n                    s = [];\r\n            newline = newline === undefined ? '\\n' : newline;\r\n            for(var i = 0; i < l; i++) {\r\n                s.push('[' + this.elements[i].map(function (x) {\r\n                    var v = to_decimal ? x.multiplier.toDecimal() : x.toString();\r\n                    return x !== undefined ? v : '';\r\n                }).join(',') + ']');\r\n            }\r\n            return 'matrix' + inBrackets(s.join(','));\r\n        },\r\n        text: function () {\r\n            return 'matrix(' + this.elements.toString('') + ')';\r\n        },\r\n        latex: function (option) {\r\n            var cols = this.cols(), elements = this.elements;\r\n            return format('\\\\begin{vmatrix}{0}\\\\end{vmatrix}', function () {\r\n                var tex = [];\r\n                for(var row in elements) {\r\n                    var row_tex = [];\r\n                    for(var i = 0; i < cols; i++) {\r\n                        row_tex.push(LaTeX.latex.call(LaTeX, elements[row][i], option));\r\n                    }\r\n                    tex.push(row_tex.join(' & '));\r\n                }\r\n                return tex.join(' \\\\cr ');\r\n            });\r\n        }\r\n    };\r\n    // aliases\r\n    Matrix.prototype.each = Matrix.prototype.eachElement;\r\n\r\n\r\n    function Set(set) {\r\n        this.elements = [];\r\n        // if the first object isn't an array, convert it to one.\r\n        if(!isVector(set))\r\n            set = Vector.fromArray(arguments);\r\n\r\n        if(set) {\r\n            var elements = set.elements;\r\n            for(var i = 0, l = elements.length; i < l; i++) {\r\n                this.add(elements[i]);\r\n            }\r\n        }\r\n    }\r\n\r\n    Set.fromArray = function (arr) {\r\n        function F(args) {\r\n            return Set.apply(this, args);\r\n        }\r\n        F.prototype = Set.prototype;\r\n\r\n        return new F(arr);\r\n    };\r\n\r\n    Set.prototype = {\r\n        add: function (x) {\r\n            if(!this.contains(x))\r\n                this.elements.push(x.clone());\r\n        },\r\n        contains: function (x) {\r\n            for(var i = 0; i < this.elements.length; i++) {\r\n                var e = this.elements[i];\r\n                if(x.equals(e))\r\n                    return true;\r\n            }\r\n            return false;\r\n        },\r\n        each: function (f) {\r\n            var elements = this.elements;\r\n            var set = new Set();\r\n            for(var i = 0, l = elements.length; i < l; i++) {\r\n                var e = elements[i];\r\n                f.call(this, e, set, i);\r\n            }\r\n            return set;\r\n        },\r\n        clone: function () {\r\n            var set = new Set();\r\n            this.each(function (e) {\r\n                set.add(e.clone());\r\n            });\r\n            return set;\r\n        },\r\n        union: function (set) {\r\n            var _union = this.clone();\r\n            set.each(function (e) {\r\n                _union.add(e);\r\n            });\r\n\r\n            return _union;\r\n        },\r\n        difference: function (set) {\r\n            var diff = this.clone();\r\n            set.each(function (e) {\r\n                diff.remove(e);\r\n            });\r\n            return diff;\r\n        },\r\n        remove: function (element) {\r\n            for(var i = 0, l = this.elements.length; i < l; i++) {\r\n                var e = this.elements[i];\r\n                if(e.equals(element)) {\r\n                    remove(this.elements, i);\r\n                    return true;\r\n                }\r\n            }\r\n            return false;\r\n        },\r\n        intersection: function (set) {\r\n            var _intersection = new Set();\r\n            var A = this;\r\n            set.each(function (e) {\r\n                if(A.contains(e)) {\r\n                    _intersection.add(e);\r\n                }\r\n                ;\r\n            });\r\n\r\n            return _intersection;\r\n        },\r\n        intersects: function (set) {\r\n            return this.intersection(set).elements.length > 0;\r\n        },\r\n        is_subset: function (set) {\r\n            var elements = set.elements;\r\n            for(var i = 0, l = elements.length; i < l; i++) {\r\n                if(!this.contains(elements[i])) {\r\n                    return false;\r\n                }\r\n            }\r\n            return true;\r\n        },\r\n        toString: function () {\r\n            return '{' + this.elements.join(',') + '}';\r\n        }\r\n    };\r\n\r\n//build ========================================================================\r\n    var Build = {\r\n        dependencies: {\r\n            _rename: {\r\n                'Math2.factorial': 'factorial'\r\n            },\r\n            factorial: {\r\n                'Math2.gamma': Math2.gamma\r\n            },\r\n            gamma_incomplete: {\r\n                'Math2.factorial': Math2.factorial\r\n            },\r\n            Li: {\r\n                'Math2.Ei': Math2.Ei,\r\n                'Math2.bigLog': Math2.bigLog,\r\n                'Frac': Frac\r\n            },\r\n            Ci: {\r\n                'Math2.factorial': Math2.factorial\r\n            },\r\n            Ei: {\r\n                'Math2.factorial': Math2.factorial\r\n            },\r\n            Si: {\r\n                'Math2.factorial': Math2.factorial\r\n            },\r\n            Shi: {\r\n                'Math2.factorial': Math2.factorial\r\n            },\r\n            Chi: {\r\n                'isInt': isInt,\r\n                'nround': nround,\r\n                'Math2.num_integrate': Math2.num_integrate\r\n            },\r\n            factor: {\r\n                'Math2.ifactor': Math2.ifactor,\r\n                'Symbol': Symbol\r\n            },\r\n            num_integrate: {\r\n                'Math2.simpson': Math2.simpson,\r\n                'nround': nround\r\n            },\r\n            fib: {\r\n                'even': even\r\n            }\r\n        },\r\n        /* Some functions need to be made numeric safe. Build checks if there's a\r\n         * reformat option and calls that instead when compiling the function string.\r\n         */\r\n        reformat: {\r\n            // this simply extends the build function\r\n            diff: function (symbol, deps) {\r\n                var v = symbol.args[1].toString();\r\n                var f = 'var f = ' + Build.build(symbol.args[0].toString(), [v]) + ';';\r\n                deps[1] += 'var diff = ' + Math2.diff.toString() + ';';\r\n                deps[1] += f;\r\n\r\n                return ['diff(f)(' + v + ')', deps];\r\n            }\r\n        },\r\n        getProperName: function (f) {\r\n            var map = {\r\n                continued_fraction: 'continuedFraction'\r\n            };\r\n            return map[f] || f;\r\n        },\r\n        // assumes that dependences are at max 2 levels\r\n        compileDependencies: function (f, deps) {\r\n            // grab the predefined dependiences\r\n            var dependencies = Build.dependencies[f];\r\n\r\n            // the dependency string\r\n            var dep_string = deps && deps[1] ? deps[1] : '';\r\n\r\n            // the functions to be replaced\r\n            var replacements = deps && deps[0] ? deps[0] : {};\r\n\r\n            // loop through them and add them to the list\r\n            for(var x in dependencies) {\r\n                if(typeof dependencies[x] === 'object')\r\n                    continue; // skip object\r\n                var components = x.split('.'); //Math.f becomes f\r\n                // if the function isn't part of an object then reference the function itself\r\n                dep_string += 'var ' + (components.length > 1 ? components[1] : components[0]) + '=' + dependencies[x] + ';';\r\n                replacements[x] = components.pop();\r\n            }\r\n\r\n            return [replacements, dep_string];\r\n        },\r\n        getArgsDeps: function (symbol, dependencies) {\r\n            var args = symbol.args;\r\n            for(var i = 0; i < args.length; i++) {\r\n                symbol.args[i].each(function (x) {\r\n                    if(x.group === FN)\r\n                        dependencies = Build.compileDependencies(x.fname, dependencies);\r\n                });\r\n            }\r\n            return dependencies;\r\n        },\r\n        build: function (symbol, arg_array) {\r\n            symbol = block('PARSE2NUMBER', function () {\r\n                return _.parse(symbol);\r\n            }, true);\r\n            var args = variables(symbol);\r\n            var supplements = [];\r\n            var dependencies = [];\r\n            var ftext = function (symbol, xports) {\r\n                //Fix for #545 - Parentheses confuse build.\r\n                if(symbol.fname === '') {\r\n                    symbol = Symbol.unwrapPARENS(symbol);\r\n                }\r\n                xports = xports || [];\r\n                var c = [],\r\n                        group = symbol.group,\r\n                        prefix = '';\r\n\r\n                var ftext_complex = function (group) {\r\n                    var d = group === CB ? '*' : '+',\r\n                            cc = [];\r\n\r\n                    for(var x in symbol.symbols) {\r\n                        var sym = symbol.symbols[x],\r\n                                ft = ftext(sym, xports)[0];\r\n                        // wrap it in brackets if it's group PL or CP\r\n                        if(sym.isComposite())\r\n                            ft = inBrackets(ft);\r\n                        cc.push(ft);\r\n                    }\r\n                    var retval = cc.join(d);\r\n                    retval = retval && !symbol.multiplier.equals(1) ? inBrackets(retval) : retval;\r\n                    return retval;\r\n                },\r\n                        ftext_function = function (bn) {\r\n                            var retval;\r\n                            if(bn in Math)\r\n                                retval = 'Math.' + bn;\r\n                            else {\r\n                                bn = Build.getProperName(bn);\r\n                                if(supplements.indexOf(bn) === -1) { // make sure you're not adding the function twice\r\n                                    //Math2 functions aren't part of the standard javascript\r\n                                    //Math library and must be exported.\r\n                                    xports.push('var ' + bn + ' = ' + Math2[bn].toString() + '; ');\r\n                                    supplements.push(bn);\r\n                                }\r\n                                retval = bn;\r\n                            }\r\n                            retval = retval + inBrackets(symbol.args.map(function (x) {\r\n                                return ftext(x, xports)[0];\r\n                            }).join(','));\r\n\r\n                            return retval;\r\n                        };\r\n\r\n                // the multiplier\r\n                if(group === N)\r\n                    c.push(symbol.multiplier.toDecimal());\r\n                else if(symbol.multiplier.equals(-1))\r\n                    prefix = '-';\r\n                else if(!symbol.multiplier.equals(1))\r\n                    c.push(symbol.multiplier.toDecimal());\r\n                // the value\r\n                var value;\r\n\r\n                if(group === S || group === P)\r\n                    value = symbol.value;\r\n                else if(group === FN) {\r\n                    dependencies = Build.compileDependencies(symbol.fname, dependencies);\r\n                    dependencies = Build.getArgsDeps(symbol, dependencies);\r\n                    if(Build.reformat[symbol.fname]) {\r\n                        var components = Build.reformat[symbol.fname](symbol, dependencies);\r\n                        dependencies = components[1];\r\n                        value = components[0];\r\n                    }\r\n                    else {\r\n                        value = ftext_function(symbol.fname);\r\n                    }\r\n\r\n                }\r\n                else if(group === EX) {\r\n                    var pg = symbol.previousGroup;\r\n                    if(pg === N || pg === S)\r\n                        value = symbol.value;\r\n                    else if(pg === FN) {\r\n                        value = ftext_function(symbol.fname);\r\n                        dependencies = Build.compileDependencies(symbol.fname, dependencies);\r\n                        dependencies = Build.getArgsDeps(symbol, dependencies);\r\n                    }\r\n                    else\r\n                        value = ftext_complex(symbol.previousGroup);\r\n                }\r\n                else {\r\n                    value = ftext_complex(symbol.group);\r\n                }\r\n\r\n                if(symbol.group !== N && !symbol.power.equals(1)) {\r\n                    var pow = ftext(_.parse(symbol.power));\r\n                    xports.push(pow[1]);\r\n                    value = 'Math.pow' + inBrackets(value + ',' + pow[0]);\r\n                }\r\n\r\n                if(value)\r\n                    c.push(prefix + value);\r\n\r\n                return [c.join('*'), xports.join('').replace(/\\n+\\s+/g, ' ')];\r\n            };\r\n            if(arg_array) {\r\n                // Fix for issue #546\r\n                // Disable argument checking since it's a bit presumptuous.\r\n                // Consider f(x) = 5; If I explicitely pass in an argument array contain x \r\n                // this check will fail and complain since the function doesn't contain x.\r\n                /*\r\n                 for (var i = 0; i < args.length; i++) {\r\n                 var arg = args[i];\r\n                 if (arg_array.indexOf(arg) === -1)\r\n                 err(arg + ' not found in argument array');\r\n                 }\r\n                 */\r\n                args = arg_array;\r\n            }\r\n\r\n            var f_array = ftext(symbol);\r\n\r\n            // make all the substitutions;\r\n            for(var x in dependencies[0]) {\r\n                var alias = dependencies[0][x];\r\n                f_array[1] = f_array[1].replace(x, alias);\r\n                dependencies[1] = dependencies[1].replace(x, alias);\r\n            }\r\n\r\n            var f = new Function(args, (dependencies[1] || '') + f_array[1] + ' return ' + f_array[0] + ';');\r\n\r\n            return f;\r\n        }\r\n    };\r\n\r\n\r\n//finalize =====================================================================\r\n    /* FINALIZE */\r\n    (function () {\r\n        reserveNames(_.CONSTANTS);\r\n        reserveNames(_.functions);\r\n        _.initConstants();\r\n        //bug fix for error but needs to be revisited\r\n        if(!_.error)\r\n            _.error = err;\r\n\r\n        //Store the log and log10 functions\r\n        Settings.LOG_FNS = {\r\n            log: _.functions['log'],\r\n            log10: _.functions['log10']\r\n        };\r\n\r\n    })();\r\n\r\n    /* END FINALIZE */\r\n\r\n//Core =========================================================================\r\n    var Utils = {\r\n        allSame: allSame,\r\n        allNumeric: allNumeric,\r\n        arguments2Array: arguments2Array,\r\n        arrayAddSlices: arrayAddSlices,\r\n        arrayClone: arrayClone,\r\n        arrayMax: arrayMax,\r\n        arrayMin: arrayMin,\r\n        arrayEqual: arrayEqual,\r\n        arrayUnique: arrayUnique,\r\n        arrayGetVariables: arrayGetVariables,\r\n        arraySum: arraySum,\r\n        block: block,\r\n        build: Build.build,\r\n        clearU: clearU,\r\n        comboSort: comboSort,\r\n        compare: compare,\r\n        convertToVector: convertToVector,\r\n        customError: customError,\r\n        customType: customType,\r\n        decompose_fn: decompose_fn,\r\n        each: each,\r\n        evaluate: evaluate,\r\n        even: even,\r\n        evenFraction: evenFraction,\r\n        fillHoles: fillHoles,\r\n        firstObject: firstObject,\r\n        format: format,\r\n        generatePrimes: generatePrimes,\r\n        getCoeffs: getCoeffs,\r\n        getU: getU,\r\n        importFunctions: importFunctions,\r\n        inBrackets: inBrackets,\r\n        isArray: isArray,\r\n        isExpression: isExpression,\r\n        isFraction: isFraction,\r\n        isInt: isInt,\r\n        isMatrix: isMatrix,\r\n        isNegative: isNegative,\r\n        isNumericSymbol: isNumericSymbol,\r\n        isPrime: isPrime,\r\n        isReserved: isReserved,\r\n        isSymbol: isSymbol,\r\n        isVariableSymbol: isVariableSymbol,\r\n        isVector: isVector,\r\n        keys: keys,\r\n        knownVariable: knownVariable,\r\n        nroots: nroots,\r\n        remove: remove,\r\n        reserveNames: reserveNames,\r\n        range: range,\r\n        round: nround,\r\n        sameSign: sameSign,\r\n        scientificToDecimal: scientificToDecimal,\r\n        separate: separate,\r\n        stringReplace: stringReplace,\r\n        text: text,\r\n        validateName: validateName,\r\n        variables: variables,\r\n        warn: warn\r\n    };\r\n\r\n    //This contains all the parts of nerdamer and enables nerdamer's internal functions\r\n    //to be used.\r\n    var C = {\r\n        groups: Groups,\r\n        Symbol: Symbol,\r\n        Expression: Expression,\r\n        Frac: Frac,\r\n        Vector: Vector,\r\n        Matrix: Matrix,\r\n        Parser: Parser,\r\n        Scientific: Scientific,\r\n        Fraction: Fraction,\r\n        Math2: Math2,\r\n        LaTeX: LaTeX,\r\n        Utils: Utils,\r\n        PARSER: _,\r\n        PARENTHESIS: PARENTHESIS,\r\n        Settings: Settings,\r\n        err: err,\r\n        bigInt: bigInt,\r\n        bigDec: bigDec,\r\n        exceptions: exceptions\r\n    };\r\n\r\n//libExports ===================================================================\r\n    /**\r\n     *\r\n     * @param {String} expression the expression to be evaluated\r\n     * @param {Object} subs the object containing the variable values\r\n     * @param {Integer} location a specific location in the equation list to\r\n     * insert the evaluated expression\r\n     * @param {String} option additional options\r\n     * @returns {Expression}\r\n     */\r\n    var libExports = function (expression, subs, option, location) {\r\n        // Initiate the numer flag\r\n        var numer = false;\r\n\r\n        // Is the user declaring a function?\r\n        var fndec = /^([a-z_][a-z\\d\\_]*)\\(([a-z_,\\s]*)\\):=(.+)$/gi.exec(expression);\r\n        if(fndec)\r\n            return nerdamer.setFunction(fndec[1], fndec[2].split(','), fndec[3]);\r\n\r\n        // var variable, fn, args;\r\n        // Convert any expression passed in to a string\r\n        if(expression instanceof Expression)\r\n            expression = expression.toString();\r\n\r\n        // Convert it to an array for simplicity\r\n        if(!isArray(option)) {\r\n            option = typeof option === 'undefined' ? [] : [option];\r\n        }\r\n\r\n        option.forEach(function (o) {\r\n            // Turn on the numer flag if requested\r\n            if(o === 'numer') {\r\n                numer = true;\r\n                return;\r\n            }\r\n            // Wrap it in a function if requested. This only holds true for\r\n            // functions that take a single argument which is the expression\r\n            var f = _.functions[option];\r\n            // If there's a function and it takes a single argument, then wrap\r\n            // the expression in it\r\n            if(f && f[1] === 1) {\r\n                expression = `${o}(${expression})`;\r\n            }\r\n        });\r\n\r\n        var e = block('PARSE2NUMBER', function () {\r\n            return _.parse(expression, subs);\r\n        }, numer || Settings.PARSE2NUMBER);\r\n\r\n        if(location) {\r\n            EXPRESSIONS[location - 1] = e;\r\n        }\r\n        else {\r\n            EXPRESSIONS.push(e);\r\n        }\r\n\r\n        return new Expression(e);\r\n    };\r\n    /**\r\n     * Converts expression into rpn form\r\n     * @param {String} expression\r\n     * @returns {Token[]}\r\n     */\r\n    libExports.rpn = function (expression) {\r\n        return _.tokenize(_.toRPN(expression));\r\n    };\r\n\r\n    /**\r\n     * Generates LaTeX from expression string\r\n     * @param {String} e\r\n     * @param {object} opt\r\n     * @returns {String}\r\n     */\r\n    libExports.convertToLaTeX = function (e, opt) {\r\n        return _.toTeX(e, opt);\r\n    };\r\n\r\n    /**\r\n     * Converts latex to text - Very very very basic at the moment\r\n     * @param {String} e\r\n     * @returns {String}\r\n     */\r\n    libExports.convertFromLaTeX = function (e) {\r\n        var txt = LaTeX.parse(_.tokenize(e));\r\n        return new Expression(_.parse(txt));\r\n    };\r\n\r\n    /**\r\n     * Get the version of nerdamer or a loaded add-on\r\n     * @param {String} add_on - The add-on being checked\r\n     * @returns {String} returns the version of nerdamer\r\n     */\r\n    libExports.version = function (add_on) {\r\n        if(add_on) {\r\n            try {\r\n                return C[add_on].version;\r\n            }\r\n            catch(e) {\r\n                return \"No module named \" + add_on + \" found!\";\r\n            }\r\n        }\r\n        return version;\r\n    };\r\n\r\n    /**\r\n     * Get nerdamer generated warnings\r\n     * @returns {String[]}\r\n     */\r\n    libExports.getWarnings = function () {\r\n        return WARNINGS;\r\n    };\r\n\r\n    /**\r\n     *\r\n     * @param {String} constant The name of the constant to be set\r\n     * @param {mixed} value The value of the constant\r\n     * @returns {Object} Returns the nerdamer object\r\n     */\r\n    libExports.setConstant = function (constant, value) {\r\n        validateName(constant);\r\n        if(!isReserved(constant)) {\r\n            //fix for issue #127\r\n            if(value === 'delete' || value === '') {\r\n                delete _.CONSTANTS[constant];\r\n            }\r\n            else {\r\n                if(isNaN(value))\r\n                    throw new NerdamerTypeError('Constant must be a number!');\r\n                _.CONSTANTS[constant] = value;\r\n            }\r\n        }\r\n        return this;\r\n    };\r\n\r\n    /**\r\n     * Returns the value of a previously set constant\r\n     * @param {type} constant\r\n     * @returns {String}\r\n     */\r\n    libExports.getConstant = function (constant) {\r\n        return String(_.constant[constant]);\r\n    };\r\n\r\n    /**\r\n     *\r\n     * @param {String} name The name of the function\r\n     * @param {Array} params_array A list containing the parameter name of the functions\r\n     * @param {String} body The body of the function\r\n     * @returns {Boolean} returns true if succeeded and falls on fail\r\n     * @example nerdamer.setFunction('f',['x'], 'x^2+2');\r\n     */\r\n    libExports.setFunction = setFunction;\r\n\r\n    /**\r\n     *\r\n     * @returns {C} Exports the nerdamer core functions and objects\r\n     */\r\n    libExports.getCore = function () {\r\n        return C;\r\n    };\r\n\r\n    libExports.getExpression = libExports.getEquation = Expression.getExpression;\r\n\r\n    /**\r\n     *\r\n     * @param {Boolean} asArray The returned names are returned as an array if this is set to true;\r\n     * @returns {String|Array}\r\n     */\r\n    libExports.reserved = function (asArray) {\r\n        if(asArray) {\r\n            return RESERVED;\r\n        }\r\n        return RESERVED.join(', ');\r\n    };\r\n\r\n    /**\r\n     *\r\n     * @param {Integer} equation_number the number of the equation to clear.\r\n     * If 'all' is supplied then all equations are cleared\r\n     * @param {Boolean} keep_EXPRESSIONS_fixed use true if you don't want to keep EXPRESSIONS length fixed\r\n     * @returns {Object} Returns the nerdamer object\r\n     */\r\n    libExports.clear = function (equation_number, keep_EXPRESSIONS_fixed) {\r\n        if(equation_number === 'all') {\r\n            EXPRESSIONS = [];\r\n        }\r\n        else if(equation_number === 'last') {\r\n            EXPRESSIONS.pop();\r\n        }\r\n        else if(equation_number === 'first') {\r\n            EXPRESSIONS.shift();\r\n        }\r\n        else {\r\n            var index = !equation_number ? EXPRESSIONS.length : equation_number - 1;\r\n            keep_EXPRESSIONS_fixed === true ? EXPRESSIONS[index] = undefined : remove(EXPRESSIONS, index);\r\n        }\r\n        return this;\r\n    };\r\n\r\n    /**\r\n     * Alias for nerdamer.clear('all')\r\n     */\r\n    libExports.flush = function () {\r\n        this.clear('all');\r\n        return this;\r\n    };\r\n\r\n    /**\r\n     *\r\n     * @param {Boolean} asObject\r\n     * @param {Boolean} asLaTeX\r\n     * @param {String|String[]} option\r\n     * @returns {Array}\r\n     */\r\n    libExports.expressions = function (asObject, asLaTeX, option) {\r\n        var result = asObject ? {} : [];\r\n        for(var i = 0; i < EXPRESSIONS.length; i++) {\r\n            var eq = asLaTeX ? LaTeX.latex(EXPRESSIONS[i], option) : text(EXPRESSIONS[i], option);\r\n            asObject ? result[i + 1] = eq : result.push(eq);\r\n        }\r\n        return result;\r\n    };\r\n\r\n    //the method for registering modules\r\n    libExports.register = function (obj) {\r\n        var core = this.getCore();\r\n\r\n        if(isArray(obj)) {\r\n            for(var i = 0; i < obj.length; i++) {\r\n                if(obj)\r\n                    this.register(obj[i]);\r\n            }\r\n        }\r\n        else if(obj && Settings.exclude.indexOf(obj.name) === -1) {\r\n            //make sure all the dependencies are available\r\n            if(obj.dependencies) {\r\n                for(var i = 0; i < obj.dependencies.length; i++)\r\n                    if(!core[obj.dependencies[i]])\r\n                        throw new Error(format('{0} requires {1} to be loaded!', obj.name, obj.dependencies[i]));\r\n            }\r\n            //if no parent object is provided then the function does not have an address and cannot be called directly\r\n            var parent_obj = obj.parent,\r\n                    fn = obj.build.call(core); //call constructor to get function\r\n            if(parent_obj) {\r\n                if(!core[parent_obj])\r\n                    core[obj.parent] = {};\r\n\r\n                var ref_obj = parent_obj === 'nerdamer' ? this : core[parent_obj];\r\n                //attach the function to the core\r\n                ref_obj[obj.name] = fn;\r\n            }\r\n            if(obj.visible)\r\n                _.functions[obj.name] = [fn, obj.numargs]; //make the function available\r\n\r\n        }\r\n    };\r\n\r\n    /**\r\n     * @param {String} name variable name\r\n     * @returns {boolean} validates if the profided string is a valid variable name\r\n     */\r\n    libExports.validateName = validateName;\r\n\r\n    /**\r\n     * @param {String} varname variable name\r\n     * @returns {boolean} validates if the profided string is a valid variable name\r\n     */\r\n    libExports.validVarName = function (varname) {\r\n        try {\r\n            validateName(varname);\r\n            return RESERVED.indexOf(varname) === -1;\r\n        }\r\n        catch(e) {\r\n            return false;\r\n        }\r\n    };\r\n\r\n    /**\r\n     *\r\n     * @returns {Array} Array of functions currently supported by nerdamer\r\n     */\r\n    libExports.supported = function () {\r\n        return keys(_.functions);\r\n    };\r\n\r\n    /**\r\n     *\r\n     * @returns {Number} The number equations/expressions currently loaded\r\n     */\r\n    libExports.numEquations = libExports.numExpressions = function () {\r\n        return EXPRESSIONS.length;\r\n    };\r\n    /* END EXPORTS */\r\n\r\n    /**\r\n     *\r\n     * @param {String} v variable to be set\r\n     * @param {String} val value of variable. This can be a variable expression or number\r\n     * @returns {Object} Returns the nerdamer object\r\n     */\r\n    libExports.setVar = function (v, val) {\r\n        validateName(v);\r\n        //check if it's not already a constant\r\n        if(v in _.CONSTANTS)\r\n            err('Cannot set value for constant ' + v);\r\n        if(val === 'delete' || val === '')\r\n            delete VARS[v];\r\n        else {\r\n            VARS[v] = isSymbol(val) ? val : _.parse(val);\r\n        }\r\n        return this;\r\n    };\r\n\r\n    /**\r\n     * Returns the value of a set variable\r\n     * @param {type} v\r\n     * @returns {varies}\r\n     */\r\n    libExports.getVar = function (v) {\r\n        return VARS[v];\r\n    };\r\n    /**\r\n     * Clear the variables from the VARS object\r\n     * @returns {Object} Returns the nerdamer object\r\n     */\r\n    libExports.clearVars = function () {\r\n        VARS = {};\r\n        return this;\r\n    };\r\n\r\n    /**\r\n     *\r\n     * @param {Function} loader\r\n     * @returns {nerdamer}\r\n     */\r\n    libExports.load = function (loader) {\r\n        loader.call(this);\r\n        return this;\r\n    };\r\n\r\n    /**\r\n     * @param {String} output - output format. Can be 'object' (just returns the VARS object), 'text' or 'latex'. Default: 'text'\r\n     * @param {String|String[]} option\r\n     * @returns {Object} Returns an object with the variables\r\n     */\r\n    libExports.getVars = function (output, option) {\r\n        output = output || 'text';\r\n        var variables = {};\r\n        if(output === 'object')\r\n            variables = VARS;\r\n        else {\r\n            for(var v in VARS) {\r\n                if(output === 'latex') {\r\n                    variables[v] = VARS[v].latex(option);\r\n                }\r\n                else if(output === 'text') {\r\n                    variables[v] = VARS[v].text(option);\r\n                }\r\n            }\r\n        }\r\n        return variables;\r\n    };\r\n\r\n    /**\r\n     * Set the value of a setting\r\n     * @param {String} setting The setting to be changed\r\n     * @param {boolean} value\r\n     */\r\n    libExports.set = function (setting, value) {\r\n        //current options:\r\n        //PARSE2NUMBER, suppress_errors\r\n        if(typeof setting === 'object')\r\n            for(var x in setting) {\r\n                libExports.set(x, setting[x]);\r\n            }\r\n\r\n        var disallowed = ['SAFE'];\r\n        if(disallowed.indexOf(setting) !== -1)\r\n            err('Cannot modify setting: ' + setting);\r\n\r\n        if(setting === 'PRECISION') {\r\n            bigDec.set({precision: value});\r\n            Settings.PRECISION = value;\r\n\r\n            // Avoid that nerdamer puts out garbage after 21 decimal place\r\n            if(value > 21) {\r\n                this.set('USE_BIG', true);\r\n            }\r\n        }\r\n        else if(setting === 'USE_LN' && value === true) {\r\n            //set log as LN\r\n            Settings.LOG = 'LN';\r\n            //set log10 as log\r\n            Settings.LOG10 = 'log';\r\n            //point the functions in the right direction\r\n            _.functions['log'] = Settings.LOG_FNS.log10; //log is now log10\r\n            //the log10 function must be explicitly set\r\n            _.functions['log'][0] = function (x) {\r\n                if(x.isConstant())\r\n                    return new Symbol(Math.log10(x));\r\n                return _.symfunction(Settings.LOG10, [x]);\r\n            };\r\n            _.functions['LN'] = Settings.LOG_FNS.log; //LN is now log\r\n\r\n            //remove log10\r\n            delete _.functions['log10'];\r\n        }\r\n        else\r\n            Settings[setting] = value;\r\n    };\r\n\r\n    /**\r\n     * Get the value of a setting\r\n     * @param {type} setting\r\n     * @returns {undefined}\r\n     */\r\n    libExports.get = function (setting) {\r\n        return Settings[setting];\r\n    };\r\n\r\n    /**\r\n     * This functions makes internal functions available externally\r\n     * @param {bool} override Override the functions when calling api if it exists\r\n     */\r\n    libExports.api = function (override) {\r\n        //Map internal functions to external ones\r\n        var linker = function (fname) {\r\n            return function () {\r\n                var args = [].slice.call(arguments);\r\n                for(var i = 0; i < args.length; i++)\r\n                    args[i] = _.parse(args[i]);\r\n                return new Expression(block('PARSE2NUMBER', function () {\r\n                    return _.callfunction(fname, args);\r\n                }));\r\n            };\r\n        };\r\n        //perform the mapping\r\n        for(var x in _.functions)\r\n            if(!(x in libExports) || override)\r\n                libExports[x] = linker(x);\r\n    };\r\n\r\n    libExports.replaceFunction = function (name, fn, num_args) {\r\n        var existing = _.functions[name];\r\n        var new_num_args = typeof num_args === 'undefined' ? existing[1] : num_args;\r\n        _.functions[name] = [fn.call(undefined, existing[0], C), new_num_args];\r\n    };\r\n\r\n    libExports.setOperator = function (operator, shift) {\r\n        _.setOperator(operator, shift);\r\n    };\r\n\r\n    libExports.getOperator = function (operator) {\r\n        return _.getOperator(operator);\r\n    };\r\n\r\n    libExports.aliasOperator = function (operator, withOperator) {\r\n        _.aliasOperator(operator, withOperator);\r\n    };\r\n\r\n    libExports.tree = function (expression) {\r\n        return _.tree(_.toRPN(_.tokenize(expression)));\r\n    };\r\n\r\n    libExports.htmlTree = function (expression, indent) {\r\n        var tree = this.tree(expression);\r\n\r\n        return '<div class=\"tree\">\\n' +\r\n                '    <ul>\\n' +\r\n                '        <li>\\n' +\r\n                tree.toHTML(3, indent) + '\\n' +\r\n                '        </li>\\n' +\r\n                '    </ul>\\n' +\r\n                '</div>';\r\n    };\r\n\r\n    libExports.addPeeker = function (name, f) {\r\n        if(_.peekers[name])\r\n            _.peekers[name].push(f);\r\n    };\r\n\r\n    libExports.removePeeker = function (name, f) {\r\n        remove(_.peekers[name], f);\r\n    };\r\n\r\n    libExports.parse = function (e) {\r\n        return String(e).split(';').map(function (x) {\r\n            return _.parse(x);\r\n        });\r\n    };\r\n\r\n    libExports.api();\r\n\r\n    return libExports; //Done\r\n//imports ======================================================================\r\n})({\r\n    //https://github.com/peterolson/BigInteger.js\r\n    bigInt: (function(){\r\n        var bigInt=function(undefined){\"use strict\";var BASE=1e7,LOG_BASE=7,MAX_INT=9007199254740992,MAX_INT_ARR=smallToArray(MAX_INT),LOG_MAX_INT=Math.log(MAX_INT);function Integer(v,radix){if(typeof v===\"undefined\")return Integer[0];if(typeof radix!==\"undefined\")return+radix===10?parseValue(v):parseBase(v,radix);return parseValue(v)}function BigInteger(value,sign){this.value=value;this.sign=sign;this.isSmall=false}BigInteger.prototype=Object.create(Integer.prototype);function SmallInteger(value){this.value=value;this.sign=value<0;this.isSmall=true}SmallInteger.prototype=Object.create(Integer.prototype);function isPrecise(n){return-MAX_INT<n&&n<MAX_INT}function smallToArray(n){if(n<1e7)return[n];if(n<1e14)return[n%1e7,Math.floor(n/1e7)];return[n%1e7,Math.floor(n/1e7)%1e7,Math.floor(n/1e14)]}function arrayToSmall(arr){trim(arr);var length=arr.length;if(length<4&&compareAbs(arr,MAX_INT_ARR)<0){switch(length){case 0:return 0;case 1:return arr[0];case 2:return arr[0]+arr[1]*BASE;default:return arr[0]+(arr[1]+arr[2]*BASE)*BASE}}return arr}function trim(v){var i=v.length;while(v[--i]===0);v.length=i+1}function createArray(length){var x=new Array(length);var i=-1;while(++i<length){x[i]=0}return x}function truncate(n){if(n>0)return Math.floor(n);return Math.ceil(n)}function add(a,b){var l_a=a.length,l_b=b.length,r=new Array(l_a),carry=0,base=BASE,sum,i;for(i=0;i<l_b;i++){sum=a[i]+b[i]+carry;carry=sum>=base?1:0;r[i]=sum-carry*base}while(i<l_a){sum=a[i]+carry;carry=sum===base?1:0;r[i++]=sum-carry*base}if(carry>0)r.push(carry);return r}function addAny(a,b){if(a.length>=b.length)return add(a,b);return add(b,a)}function addSmall(a,carry){var l=a.length,r=new Array(l),base=BASE,sum,i;for(i=0;i<l;i++){sum=a[i]-base+carry;carry=Math.floor(sum/base);r[i]=sum-carry*base;carry+=1}while(carry>0){r[i++]=carry%base;carry=Math.floor(carry/base)}return r}BigInteger.prototype.add=function(v){var n=parseValue(v);if(this.sign!==n.sign){return this.subtract(n.negate())}var a=this.value,b=n.value;if(n.isSmall){return new BigInteger(addSmall(a,Math.abs(b)),this.sign)}return new BigInteger(addAny(a,b),this.sign)};BigInteger.prototype.plus=BigInteger.prototype.add;SmallInteger.prototype.add=function(v){var n=parseValue(v);var a=this.value;if(a<0!==n.sign){return this.subtract(n.negate())}var b=n.value;if(n.isSmall){if(isPrecise(a+b))return new SmallInteger(a+b);b=smallToArray(Math.abs(b))}return new BigInteger(addSmall(b,Math.abs(a)),a<0)};SmallInteger.prototype.plus=SmallInteger.prototype.add;function subtract(a,b){var a_l=a.length,b_l=b.length,r=new Array(a_l),borrow=0,base=BASE,i,difference;for(i=0;i<b_l;i++){difference=a[i]-borrow-b[i];if(difference<0){difference+=base;borrow=1}else borrow=0;r[i]=difference}for(i=b_l;i<a_l;i++){difference=a[i]-borrow;if(difference<0)difference+=base;else{r[i++]=difference;break}r[i]=difference}for(;i<a_l;i++){r[i]=a[i]}trim(r);return r}function subtractAny(a,b,sign){var value;if(compareAbs(a,b)>=0){value=subtract(a,b)}else{value=subtract(b,a);sign=!sign}value=arrayToSmall(value);if(typeof value===\"number\"){if(sign)value=-value;return new SmallInteger(value)}return new BigInteger(value,sign)}function subtractSmall(a,b,sign){var l=a.length,r=new Array(l),carry=-b,base=BASE,i,difference;for(i=0;i<l;i++){difference=a[i]+carry;carry=Math.floor(difference/base);difference%=base;r[i]=difference<0?difference+base:difference}r=arrayToSmall(r);if(typeof r===\"number\"){if(sign)r=-r;return new SmallInteger(r)}return new BigInteger(r,sign)}BigInteger.prototype.subtract=function(v){var n=parseValue(v);if(this.sign!==n.sign){return this.add(n.negate())}var a=this.value,b=n.value;if(n.isSmall)return subtractSmall(a,Math.abs(b),this.sign);return subtractAny(a,b,this.sign)};BigInteger.prototype.minus=BigInteger.prototype.subtract;SmallInteger.prototype.subtract=function(v){var n=parseValue(v);var a=this.value;if(a<0!==n.sign){return this.add(n.negate())}var b=n.value;if(n.isSmall){return new SmallInteger(a-b)}return subtractSmall(b,Math.abs(a),a>=0)};SmallInteger.prototype.minus=SmallInteger.prototype.subtract;BigInteger.prototype.negate=function(){return new BigInteger(this.value,!this.sign)};SmallInteger.prototype.negate=function(){var sign=this.sign;var small=new SmallInteger(-this.value);small.sign=!sign;return small};BigInteger.prototype.abs=function(){return new BigInteger(this.value,false)};SmallInteger.prototype.abs=function(){return new SmallInteger(Math.abs(this.value))};function multiplyLong(a,b){var a_l=a.length,b_l=b.length,l=a_l+b_l,r=createArray(l),base=BASE,product,carry,i,a_i,b_j;for(i=0;i<a_l;++i){a_i=a[i];for(var j=0;j<b_l;++j){b_j=b[j];product=a_i*b_j+r[i+j];carry=Math.floor(product/base);r[i+j]=product-carry*base;r[i+j+1]+=carry}}trim(r);return r}function multiplySmall(a,b){var l=a.length,r=new Array(l),base=BASE,carry=0,product,i;for(i=0;i<l;i++){product=a[i]*b+carry;carry=Math.floor(product/base);r[i]=product-carry*base}while(carry>0){r[i++]=carry%base;carry=Math.floor(carry/base)}return r}function shiftLeft(x,n){var r=[];while(n-- >0)r.push(0);return r.concat(x)}function multiplyKaratsuba(x,y){var n=Math.max(x.length,y.length);if(n<=30)return multiplyLong(x,y);n=Math.ceil(n/2);var b=x.slice(n),a=x.slice(0,n),d=y.slice(n),c=y.slice(0,n);var ac=multiplyKaratsuba(a,c),bd=multiplyKaratsuba(b,d),abcd=multiplyKaratsuba(addAny(a,b),addAny(c,d));var product=addAny(addAny(ac,shiftLeft(subtract(subtract(abcd,ac),bd),n)),shiftLeft(bd,2*n));trim(product);return product}function useKaratsuba(l1,l2){return-.012*l1-.012*l2+15e-6*l1*l2>0}BigInteger.prototype.multiply=function(v){var n=parseValue(v),a=this.value,b=n.value,sign=this.sign!==n.sign,abs;if(n.isSmall){if(b===0)return Integer[0];if(b===1)return this;if(b===-1)return this.negate();abs=Math.abs(b);if(abs<BASE){return new BigInteger(multiplySmall(a,abs),sign)}b=smallToArray(abs)}if(useKaratsuba(a.length,b.length))return new BigInteger(multiplyKaratsuba(a,b),sign);return new BigInteger(multiplyLong(a,b),sign)};BigInteger.prototype.times=BigInteger.prototype.multiply;function multiplySmallAndArray(a,b,sign){if(a<BASE){return new BigInteger(multiplySmall(b,a),sign)}return new BigInteger(multiplyLong(b,smallToArray(a)),sign)}SmallInteger.prototype._multiplyBySmall=function(a){if(isPrecise(a.value*this.value)){return new SmallInteger(a.value*this.value)}return multiplySmallAndArray(Math.abs(a.value),smallToArray(Math.abs(this.value)),this.sign!==a.sign)};BigInteger.prototype._multiplyBySmall=function(a){if(a.value===0)return Integer[0];if(a.value===1)return this;if(a.value===-1)return this.negate();return multiplySmallAndArray(Math.abs(a.value),this.value,this.sign!==a.sign)};SmallInteger.prototype.multiply=function(v){return parseValue(v)._multiplyBySmall(this)};SmallInteger.prototype.times=SmallInteger.prototype.multiply;function square(a){var l=a.length,r=createArray(l+l),base=BASE,product,carry,i,a_i,a_j;for(i=0;i<l;i++){a_i=a[i];carry=0-a_i*a_i;for(var j=i;j<l;j++){a_j=a[j];product=2*(a_i*a_j)+r[i+j]+carry;carry=Math.floor(product/base);r[i+j]=product-carry*base}r[i+l]=carry}trim(r);return r}BigInteger.prototype.square=function(){return new BigInteger(square(this.value),false)};SmallInteger.prototype.square=function(){var value=this.value*this.value;if(isPrecise(value))return new SmallInteger(value);return new BigInteger(square(smallToArray(Math.abs(this.value))),false)};function divMod1(a,b){var a_l=a.length,b_l=b.length,base=BASE,result=createArray(b.length),divisorMostSignificantDigit=b[b_l-1],lambda=Math.ceil(base/(2*divisorMostSignificantDigit)),remainder=multiplySmall(a,lambda),divisor=multiplySmall(b,lambda),quotientDigit,shift,carry,borrow,i,l,q;if(remainder.length<=a_l)remainder.push(0);divisor.push(0);divisorMostSignificantDigit=divisor[b_l-1];for(shift=a_l-b_l;shift>=0;shift--){quotientDigit=base-1;if(remainder[shift+b_l]!==divisorMostSignificantDigit){quotientDigit=Math.floor((remainder[shift+b_l]*base+remainder[shift+b_l-1])/divisorMostSignificantDigit)}carry=0;borrow=0;l=divisor.length;for(i=0;i<l;i++){carry+=quotientDigit*divisor[i];q=Math.floor(carry/base);borrow+=remainder[shift+i]-(carry-q*base);carry=q;if(borrow<0){remainder[shift+i]=borrow+base;borrow=-1}else{remainder[shift+i]=borrow;borrow=0}}while(borrow!==0){quotientDigit-=1;carry=0;for(i=0;i<l;i++){carry+=remainder[shift+i]-base+divisor[i];if(carry<0){remainder[shift+i]=carry+base;carry=0}else{remainder[shift+i]=carry;carry=1}}borrow+=carry}result[shift]=quotientDigit}remainder=divModSmall(remainder,lambda)[0];return[arrayToSmall(result),arrayToSmall(remainder)]}function divMod2(a,b){var a_l=a.length,b_l=b.length,result=[],part=[],base=BASE,guess,xlen,highx,highy,check;while(a_l){part.unshift(a[--a_l]);trim(part);if(compareAbs(part,b)<0){result.push(0);continue}xlen=part.length;highx=part[xlen-1]*base+part[xlen-2];highy=b[b_l-1]*base+b[b_l-2];if(xlen>b_l){highx=(highx+1)*base}guess=Math.ceil(highx/highy);do{check=multiplySmall(b,guess);if(compareAbs(check,part)<=0)break;guess--}while(guess);result.push(guess);part=subtract(part,check)}result.reverse();return[arrayToSmall(result),arrayToSmall(part)]}function divModSmall(value,lambda){var length=value.length,quotient=createArray(length),base=BASE,i,q,remainder,divisor;remainder=0;for(i=length-1;i>=0;--i){divisor=remainder*base+value[i];q=truncate(divisor/lambda);remainder=divisor-q*lambda;quotient[i]=q|0}return[quotient,remainder|0]}function divModAny(self,v){var value,n=parseValue(v);var a=self.value,b=n.value;var quotient;if(b===0)throw new Error(\"Cannot divide by zero\");if(self.isSmall){if(n.isSmall){return[new SmallInteger(truncate(a/b)),new SmallInteger(a%b)]}return[Integer[0],self]}if(n.isSmall){if(b===1)return[self,Integer[0]];if(b==-1)return[self.negate(),Integer[0]];var abs=Math.abs(b);if(abs<BASE){value=divModSmall(a,abs);quotient=arrayToSmall(value[0]);var remainder=value[1];if(self.sign)remainder=-remainder;if(typeof quotient===\"number\"){if(self.sign!==n.sign)quotient=-quotient;return[new SmallInteger(quotient),new SmallInteger(remainder)]}return[new BigInteger(quotient,self.sign!==n.sign),new SmallInteger(remainder)]}b=smallToArray(abs)}var comparison=compareAbs(a,b);if(comparison===-1)return[Integer[0],self];if(comparison===0)return[Integer[self.sign===n.sign?1:-1],Integer[0]];if(a.length+b.length<=200)value=divMod1(a,b);else value=divMod2(a,b);quotient=value[0];var qSign=self.sign!==n.sign,mod=value[1],mSign=self.sign;if(typeof quotient===\"number\"){if(qSign)quotient=-quotient;quotient=new SmallInteger(quotient)}else quotient=new BigInteger(quotient,qSign);if(typeof mod===\"number\"){if(mSign)mod=-mod;mod=new SmallInteger(mod)}else mod=new BigInteger(mod,mSign);return[quotient,mod]}BigInteger.prototype.divmod=function(v){var result=divModAny(this,v);return{quotient:result[0],remainder:result[1]}};SmallInteger.prototype.divmod=BigInteger.prototype.divmod;BigInteger.prototype.divide=function(v){return divModAny(this,v)[0]};SmallInteger.prototype.over=SmallInteger.prototype.divide=BigInteger.prototype.over=BigInteger.prototype.divide;BigInteger.prototype.mod=function(v){return divModAny(this,v)[1]};SmallInteger.prototype.remainder=SmallInteger.prototype.mod=BigInteger.prototype.remainder=BigInteger.prototype.mod;BigInteger.prototype.pow=function(v){var n=parseValue(v),a=this.value,b=n.value,value,x,y;if(b===0)return Integer[1];if(a===0)return Integer[0];if(a===1)return Integer[1];if(a===-1)return n.isEven()?Integer[1]:Integer[-1];if(n.sign){return Integer[0]}if(!n.isSmall)throw new Error(\"The exponent \"+n.toString()+\" is too large.\");if(this.isSmall){if(isPrecise(value=Math.pow(a,b)))return new SmallInteger(truncate(value))}x=this;y=Integer[1];while(true){if(b&1===1){y=y.times(x);--b}if(b===0)break;b/=2;x=x.square()}return y};SmallInteger.prototype.pow=BigInteger.prototype.pow;BigInteger.prototype.modPow=function(exp,mod){exp=parseValue(exp);mod=parseValue(mod);if(mod.isZero())throw new Error(\"Cannot take modPow with modulus 0\");var r=Integer[1],base=this.mod(mod);while(exp.isPositive()){if(base.isZero())return Integer[0];if(exp.isOdd())r=r.multiply(base).mod(mod);exp=exp.divide(2);base=base.square().mod(mod)}return r};SmallInteger.prototype.modPow=BigInteger.prototype.modPow;function compareAbs(a,b){if(a.length!==b.length){return a.length>b.length?1:-1}for(var i=a.length-1;i>=0;i--){if(a[i]!==b[i])return a[i]>b[i]?1:-1}return 0}BigInteger.prototype.compareAbs=function(v){var n=parseValue(v),a=this.value,b=n.value;if(n.isSmall)return 1;return compareAbs(a,b)};SmallInteger.prototype.compareAbs=function(v){var n=parseValue(v),a=Math.abs(this.value),b=n.value;if(n.isSmall){b=Math.abs(b);return a===b?0:a>b?1:-1}return-1};BigInteger.prototype.compare=function(v){if(v===Infinity){return-1}if(v===-Infinity){return 1}var n=parseValue(v),a=this.value,b=n.value;if(this.sign!==n.sign){return n.sign?1:-1}if(n.isSmall){return this.sign?-1:1}return compareAbs(a,b)*(this.sign?-1:1)};BigInteger.prototype.compareTo=BigInteger.prototype.compare;SmallInteger.prototype.compare=function(v){if(v===Infinity){return-1}if(v===-Infinity){return 1}var n=parseValue(v),a=this.value,b=n.value;if(n.isSmall){return a==b?0:a>b?1:-1}if(a<0!==n.sign){return a<0?-1:1}return a<0?1:-1};SmallInteger.prototype.compareTo=SmallInteger.prototype.compare;BigInteger.prototype.equals=function(v){return this.compare(v)===0};SmallInteger.prototype.eq=SmallInteger.prototype.equals=BigInteger.prototype.eq=BigInteger.prototype.equals;BigInteger.prototype.notEquals=function(v){return this.compare(v)!==0};SmallInteger.prototype.neq=SmallInteger.prototype.notEquals=BigInteger.prototype.neq=BigInteger.prototype.notEquals;BigInteger.prototype.greater=function(v){return this.compare(v)>0};SmallInteger.prototype.gt=SmallInteger.prototype.greater=BigInteger.prototype.gt=BigInteger.prototype.greater;BigInteger.prototype.lesser=function(v){return this.compare(v)<0};SmallInteger.prototype.lt=SmallInteger.prototype.lesser=BigInteger.prototype.lt=BigInteger.prototype.lesser;BigInteger.prototype.greaterOrEquals=function(v){return this.compare(v)>=0};SmallInteger.prototype.geq=SmallInteger.prototype.greaterOrEquals=BigInteger.prototype.geq=BigInteger.prototype.greaterOrEquals;BigInteger.prototype.lesserOrEquals=function(v){return this.compare(v)<=0};SmallInteger.prototype.leq=SmallInteger.prototype.lesserOrEquals=BigInteger.prototype.leq=BigInteger.prototype.lesserOrEquals;BigInteger.prototype.isEven=function(){return(this.value[0]&1)===0};SmallInteger.prototype.isEven=function(){return(this.value&1)===0};BigInteger.prototype.isOdd=function(){return(this.value[0]&1)===1};SmallInteger.prototype.isOdd=function(){return(this.value&1)===1};BigInteger.prototype.isPositive=function(){return!this.sign};SmallInteger.prototype.isPositive=function(){return this.value>0};BigInteger.prototype.isNegative=function(){return this.sign};SmallInteger.prototype.isNegative=function(){return this.value<0};BigInteger.prototype.isUnit=function(){return false};SmallInteger.prototype.isUnit=function(){return Math.abs(this.value)===1};BigInteger.prototype.isZero=function(){return false};SmallInteger.prototype.isZero=function(){return this.value===0};BigInteger.prototype.isDivisibleBy=function(v){var n=parseValue(v);var value=n.value;if(value===0)return false;if(value===1)return true;if(value===2)return this.isEven();return this.mod(n).equals(Integer[0])};SmallInteger.prototype.isDivisibleBy=BigInteger.prototype.isDivisibleBy;function isBasicPrime(v){var n=v.abs();if(n.isUnit())return false;if(n.equals(2)||n.equals(3)||n.equals(5))return true;if(n.isEven()||n.isDivisibleBy(3)||n.isDivisibleBy(5))return false;if(n.lesser(49))return true}function millerRabinTest(n,a){var nPrev=n.prev(),b=nPrev,r=0,d,t,i,x;while(b.isEven())b=b.divide(2),r++;next:for(i=0;i<a.length;i++){if(n.lesser(a[i]))continue;x=bigInt(a[i]).modPow(b,n);if(x.equals(Integer[1])||x.equals(nPrev))continue;for(d=r-1;d!=0;d--){x=x.square().mod(n);if(x.isUnit())return false;if(x.equals(nPrev))continue next}return false}return true}BigInteger.prototype.isPrime=function(strict){var isPrime=isBasicPrime(this);if(isPrime!==undefined)return isPrime;var n=this.abs();var bits=n.bitLength();if(bits<=64)return millerRabinTest(n,[2,325,9375,28178,450775,9780504,1795265022]);var logN=Math.log(2)*bits;var t=Math.ceil(strict===true?2*Math.pow(logN,2):logN);for(var a=[],i=0;i<t;i++){a.push(bigInt(i+2))}return millerRabinTest(n,a)};SmallInteger.prototype.isPrime=BigInteger.prototype.isPrime;BigInteger.prototype.isProbablePrime=function(iterations){var isPrime=isBasicPrime(this);if(isPrime!==undefined)return isPrime;var n=this.abs();var t=iterations===undefined?5:iterations;for(var a=[],i=0;i<t;i++){a.push(bigInt.randBetween(2,n.minus(2)))}return millerRabinTest(n,a)};SmallInteger.prototype.isProbablePrime=BigInteger.prototype.isProbablePrime;BigInteger.prototype.modInv=function(n){var t=bigInt.zero,newT=bigInt.one,r=parseValue(n),newR=this.abs(),q,lastT,lastR;while(!newR.equals(bigInt.zero)){q=r.divide(newR);lastT=t;lastR=r;t=newT;r=newR;newT=lastT.subtract(q.multiply(newT));newR=lastR.subtract(q.multiply(newR))}if(!r.equals(1))throw new Error(this.toString()+\" and \"+n.toString()+\" are not co-prime\");if(t.compare(0)===-1){t=t.add(n)}if(this.isNegative()){return t.negate()}return t};SmallInteger.prototype.modInv=BigInteger.prototype.modInv;BigInteger.prototype.next=function(){var value=this.value;if(this.sign){return subtractSmall(value,1,this.sign)}return new BigInteger(addSmall(value,1),this.sign)};SmallInteger.prototype.next=function(){var value=this.value;if(value+1<MAX_INT)return new SmallInteger(value+1);return new BigInteger(MAX_INT_ARR,false)};BigInteger.prototype.prev=function(){var value=this.value;if(this.sign){return new BigInteger(addSmall(value,1),true)}return subtractSmall(value,1,this.sign)};SmallInteger.prototype.prev=function(){var value=this.value;if(value-1>-MAX_INT)return new SmallInteger(value-1);return new BigInteger(MAX_INT_ARR,true)};var powersOfTwo=[1];while(2*powersOfTwo[powersOfTwo.length-1]<=BASE)powersOfTwo.push(2*powersOfTwo[powersOfTwo.length-1]);var powers2Length=powersOfTwo.length,highestPower2=powersOfTwo[powers2Length-1];function shift_isSmall(n){return(typeof n===\"number\"||typeof n===\"string\")&&+Math.abs(n)<=BASE||n instanceof BigInteger&&n.value.length<=1}BigInteger.prototype.shiftLeft=function(n){if(!shift_isSmall(n)){throw new Error(String(n)+\" is too large for shifting.\")}n=+n;if(n<0)return this.shiftRight(-n);var result=this;if(result.isZero())return result;while(n>=powers2Length){result=result.multiply(highestPower2);n-=powers2Length-1}return result.multiply(powersOfTwo[n])};SmallInteger.prototype.shiftLeft=BigInteger.prototype.shiftLeft;BigInteger.prototype.shiftRight=function(n){var remQuo;if(!shift_isSmall(n)){throw new Error(String(n)+\" is too large for shifting.\")}n=+n;if(n<0)return this.shiftLeft(-n);var result=this;while(n>=powers2Length){if(result.isZero()||result.isNegative()&&result.isUnit())return result;remQuo=divModAny(result,highestPower2);result=remQuo[1].isNegative()?remQuo[0].prev():remQuo[0];n-=powers2Length-1}remQuo=divModAny(result,powersOfTwo[n]);return remQuo[1].isNegative()?remQuo[0].prev():remQuo[0]};SmallInteger.prototype.shiftRight=BigInteger.prototype.shiftRight;function bitwise(x,y,fn){y=parseValue(y);var xSign=x.isNegative(),ySign=y.isNegative();var xRem=xSign?x.not():x,yRem=ySign?y.not():y;var xDigit=0,yDigit=0;var xDivMod=null,yDivMod=null;var result=[];while(!xRem.isZero()||!yRem.isZero()){xDivMod=divModAny(xRem,highestPower2);xDigit=xDivMod[1].toJSNumber();if(xSign){xDigit=highestPower2-1-xDigit}yDivMod=divModAny(yRem,highestPower2);yDigit=yDivMod[1].toJSNumber();if(ySign){yDigit=highestPower2-1-yDigit}xRem=xDivMod[0];yRem=yDivMod[0];result.push(fn(xDigit,yDigit))}var sum=fn(xSign?1:0,ySign?1:0)!==0?bigInt(-1):bigInt(0);for(var i=result.length-1;i>=0;i-=1){sum=sum.multiply(highestPower2).add(bigInt(result[i]))}return sum}BigInteger.prototype.not=function(){return this.negate().prev()};SmallInteger.prototype.not=BigInteger.prototype.not;BigInteger.prototype.and=function(n){return bitwise(this,n,function(a,b){return a&b})};SmallInteger.prototype.and=BigInteger.prototype.and;BigInteger.prototype.or=function(n){return bitwise(this,n,function(a,b){return a|b})};SmallInteger.prototype.or=BigInteger.prototype.or;BigInteger.prototype.xor=function(n){return bitwise(this,n,function(a,b){return a^b})};SmallInteger.prototype.xor=BigInteger.prototype.xor;var LOBMASK_I=1<<30,LOBMASK_BI=(BASE&-BASE)*(BASE&-BASE)|LOBMASK_I;function roughLOB(n){var v=n.value,x=typeof v===\"number\"?v|LOBMASK_I:v[0]+v[1]*BASE|LOBMASK_BI;return x&-x}function integerLogarithm(value,base){if(base.compareTo(value)<=0){var tmp=integerLogarithm(value,base.square(base));var p=tmp.p;var e=tmp.e;var t=p.multiply(base);return t.compareTo(value)<=0?{p:t,e:e*2+1}:{p:p,e:e*2}}return{p:bigInt(1),e:0}}BigInteger.prototype.bitLength=function(){var n=this;if(n.compareTo(bigInt(0))<0){n=n.negate().subtract(bigInt(1))}if(n.compareTo(bigInt(0))===0){return bigInt(0)}return bigInt(integerLogarithm(n,bigInt(2)).e).add(bigInt(1))};SmallInteger.prototype.bitLength=BigInteger.prototype.bitLength;function max(a,b){a=parseValue(a);b=parseValue(b);return a.greater(b)?a:b}function min(a,b){a=parseValue(a);b=parseValue(b);return a.lesser(b)?a:b}function gcd(a,b){a=parseValue(a).abs();b=parseValue(b).abs();if(a.equals(b))return a;if(a.isZero())return b;if(b.isZero())return a;var c=Integer[1],d,t;while(a.isEven()&&b.isEven()){d=Math.min(roughLOB(a),roughLOB(b));a=a.divide(d);b=b.divide(d);c=c.multiply(d)}while(a.isEven()){a=a.divide(roughLOB(a))}do{while(b.isEven()){b=b.divide(roughLOB(b))}if(a.greater(b)){t=b;b=a;a=t}b=b.subtract(a)}while(!b.isZero());return c.isUnit()?a:a.multiply(c)}function lcm(a,b){a=parseValue(a).abs();b=parseValue(b).abs();return a.divide(gcd(a,b)).multiply(b)}function randBetween(a,b){a=parseValue(a);b=parseValue(b);var low=min(a,b),high=max(a,b);var range=high.subtract(low).add(1);if(range.isSmall)return low.add(Math.floor(Math.random()*range));var length=range.value.length-1;var result=[],restricted=true;for(var i=length;i>=0;i--){var top=restricted?range.value[i]:BASE;var digit=truncate(Math.random()*top);result.unshift(digit);if(digit<top)restricted=false}result=arrayToSmall(result);return low.add(typeof result===\"number\"?new SmallInteger(result):new BigInteger(result,false))}var parseBase=function(text,base){var length=text.length;var i;var absBase=Math.abs(base);for(var i=0;i<length;i++){var c=text[i].toLowerCase();if(c===\"-\")continue;if(/[a-z0-9]/.test(c)){if(/[0-9]/.test(c)&&+c>=absBase){if(c===\"1\"&&absBase===1)continue;throw new Error(c+\" is not a valid digit in base \"+base+\".\")}else if(c.charCodeAt(0)-87>=absBase){throw new Error(c+\" is not a valid digit in base \"+base+\".\")}}}if(2<=base&&base<=36){if(length<=LOG_MAX_INT/Math.log(base)){var result=parseInt(text,base);if(isNaN(result)){throw new Error(c+\" is not a valid digit in base \"+base+\".\")}return new SmallInteger(parseInt(text,base))}}base=parseValue(base);var digits=[];var isNegative=text[0]===\"-\";for(i=isNegative?1:0;i<text.length;i++){var c=text[i].toLowerCase(),charCode=c.charCodeAt(0);if(48<=charCode&&charCode<=57)digits.push(parseValue(c));else if(97<=charCode&&charCode<=122)digits.push(parseValue(c.charCodeAt(0)-87));else if(c===\"<\"){var start=i;do{i++}while(text[i]!==\">\");digits.push(parseValue(text.slice(start+1,i)))}else throw new Error(c+\" is not a valid character\")}return parseBaseFromArray(digits,base,isNegative)};function parseBaseFromArray(digits,base,isNegative){var val=Integer[0],pow=Integer[1],i;for(i=digits.length-1;i>=0;i--){val=val.add(digits[i].times(pow));pow=pow.times(base)}return isNegative?val.negate():val}function stringify(digit){if(digit<=35){return\"0123456789abcdefghijklmnopqrstuvwxyz\".charAt(digit)}return\"<\"+digit+\">\"}function toBase(n,base){base=bigInt(base);if(base.isZero()){if(n.isZero())return{value:[0],isNegative:false};throw new Error(\"Cannot convert nonzero numbers to base 0.\")}if(base.equals(-1)){if(n.isZero())return{value:[0],isNegative:false};if(n.isNegative())return{value:[].concat.apply([],Array.apply(null,Array(-n)).map(Array.prototype.valueOf,[1,0])),isNegative:false};var arr=Array.apply(null,Array(+n-1)).map(Array.prototype.valueOf,[0,1]);arr.unshift([1]);return{value:[].concat.apply([],arr),isNegative:false}}var neg=false;if(n.isNegative()&&base.isPositive()){neg=true;n=n.abs()}if(base.equals(1)){if(n.isZero())return{value:[0],isNegative:false};return{value:Array.apply(null,Array(+n)).map(Number.prototype.valueOf,1),isNegative:neg}}var out=[];var left=n,divmod;while(left.isNegative()||left.compareAbs(base)>=0){divmod=left.divmod(base);left=divmod.quotient;var digit=divmod.remainder;if(digit.isNegative()){digit=base.minus(digit).abs();left=left.next()}out.push(digit.toJSNumber())}out.push(left.toJSNumber());return{value:out.reverse(),isNegative:neg}}function toBaseString(n,base){var arr=toBase(n,base);return(arr.isNegative?\"-\":\"\")+arr.value.map(stringify).join(\"\")}BigInteger.prototype.toArray=function(radix){return toBase(this,radix)};SmallInteger.prototype.toArray=function(radix){return toBase(this,radix)};BigInteger.prototype.toString=function(radix){if(radix===undefined)radix=10;if(radix!==10)return toBaseString(this,radix);var v=this.value,l=v.length,str=String(v[--l]),zeros=\"0000000\",digit;while(--l>=0){digit=String(v[l]);str+=zeros.slice(digit.length)+digit}var sign=this.sign?\"-\":\"\";return sign+str};SmallInteger.prototype.toString=function(radix){if(radix===undefined)radix=10;if(radix!=10)return toBaseString(this,radix);return String(this.value)};BigInteger.prototype.toJSON=SmallInteger.prototype.toJSON=function(){return this.toString()};BigInteger.prototype.valueOf=function(){return parseInt(this.toString(),10)};BigInteger.prototype.toJSNumber=BigInteger.prototype.valueOf;SmallInteger.prototype.valueOf=function(){return this.value};SmallInteger.prototype.toJSNumber=SmallInteger.prototype.valueOf;function parseStringValue(v){if(isPrecise(+v)){var x=+v;if(x===truncate(x))return new SmallInteger(x);throw new Error(\"Invalid integer: \"+v)}var sign=v[0]===\"-\";if(sign)v=v.slice(1);var split=v.split(/e/i);if(split.length>2)throw new Error(\"Invalid integer: \"+split.join(\"e\"));if(split.length===2){var exp=split[1];if(exp[0]===\"+\")exp=exp.slice(1);exp=+exp;if(exp!==truncate(exp)||!isPrecise(exp))throw new Error(\"Invalid integer: \"+exp+\" is not a valid exponent.\");var text=split[0];var decimalPlace=text.indexOf(\".\");if(decimalPlace>=0){exp-=text.length-decimalPlace-1;text=text.slice(0,decimalPlace)+text.slice(decimalPlace+1)}if(exp<0)throw new Error(\"Cannot include negative exponent part for integers\");text+=new Array(exp+1).join(\"0\");v=text}var isValid=/^([0-9][0-9]*)$/.test(v);if(!isValid)throw new Error(\"Invalid integer: \"+v);var r=[],max=v.length,l=LOG_BASE,min=max-l;while(max>0){r.push(+v.slice(min,max));min-=l;if(min<0)min=0;max-=l}trim(r);return new BigInteger(r,sign)}function parseNumberValue(v){if(isPrecise(v)){if(v!==truncate(v))throw new Error(v+\" is not an integer.\");return new SmallInteger(v)}return parseStringValue(v.toString())}function parseValue(v){if(typeof v===\"number\"){return parseNumberValue(v)}if(typeof v===\"string\"){return parseStringValue(v)}return v}for(var i=0;i<1e3;i++){Integer[i]=new SmallInteger(i);if(i>0)Integer[-i]=new SmallInteger(-i)}Integer.one=Integer[1];Integer.zero=Integer[0];Integer.minusOne=Integer[-1];Integer.max=max;Integer.min=min;Integer.gcd=gcd;Integer.lcm=lcm;Integer.isInstance=function(x){return x instanceof BigInteger||x instanceof SmallInteger};Integer.randBetween=randBetween;Integer.fromArray=function(digits,base,isNegative){return parseBaseFromArray(digits.map(parseValue),parseValue(base||10),isNegative)};return Integer}();if(typeof module!==\"undefined\"&&module.hasOwnProperty(\"exports\")){module.exports=bigInt}if(typeof define===\"function\"&&define.amd){define(\"big-integer\",[],function(){return bigInt})}\r\n        return bigInt;\r\n    })(),\r\n    /*\r\n     *  decimal.js v10.2.1\r\n     *  An arbitrary-precision Decimal type for JavaScript.\r\n     *  https://github.com/MikeMcl/decimal.js\r\n     *  Copyright (c) 2020 Michael Mclaughlin <M8ch88l@gmail.com>\r\n     *  MIT Licence\r\n     */\r\n    bigDec: function(n){\"use strict\";var e,i,t,r,s=9e15,o=1e9,u=\"0123456789abcdef\",c=\"2.3025850929940456840179914546843642076011014886287729760333279009675726096773524802359972050895982983419677840422862486334095254650828067566662873690987816894829072083255546808437998948262331985283935053089653777326288461633662222876982198867465436674744042432743651550489343149393914796194044002221051017141748003688084012647080685567743216228355220114804663715659121373450747856947683463616792101806445070648000277502684916746550586856935673420670581136429224554405758925724208241314695689016758940256776311356919292033376587141660230105703089634572075440370847469940168269282808481184289314848524948644871927809676271275775397027668605952496716674183485704422507197965004714951050492214776567636938662976979522110718264549734772662425709429322582798502585509785265383207606726317164309505995087807523710333101197857547331541421808427543863591778117054309827482385045648019095610299291824318237525357709750539565187697510374970888692180205189339507238539205144634197265287286965110862571492198849978748873771345686209167058\",f=\"3.1415926535897932384626433832795028841971693993751058209749445923078164062862089986280348253421170679821480865132823066470938446095505822317253594081284811174502841027019385211055596446229489549303819644288109756659334461284756482337867831652712019091456485669234603486104543266482133936072602491412737245870066063155881748815209209628292540917153643678925903600113305305488204665213841469519415116094330572703657595919530921861173819326117931051185480744623799627495673518857527248912279381830119491298336733624406566430860213949463952247371907021798609437027705392171762931767523846748184676694051320005681271452635608277857713427577896091736371787214684409012249534301465495853710507922796892589235420199561121290219608640344181598136297747713099605187072113499999983729780499510597317328160963185950244594553469083026425223082533446850352619311881710100031378387528865875332083814206171776691473035982534904287554687311595628638823537875937519577818577805321712268066130019278766111959092164201989380952572010654858632789\",a={precision:20,rounding:4,modulo:1,toExpNeg:-7,toExpPos:21,minE:-s,maxE:s,crypto:!1},h=!0,d=\"[DecimalError] \",l=d+\"Invalid argument: \",p=d+\"Precision limit exceeded\",g=d+\"crypto unavailable\",m=Math.floor,w=Math.pow,v=/^0b([01]+(\\.[01]*)?|\\.[01]+)(p[+-]?\\d+)?$/i,N=/^0x([0-9a-f]+(\\.[0-9a-f]*)?|\\.[0-9a-f]+)(p[+-]?\\d+)?$/i,b=/^0o([0-7]+(\\.[0-7]*)?|\\.[0-7]+)(p[+-]?\\d+)?$/i,E=/^(\\d+(\\.\\d*)?|\\.\\d+)(e[+-]?\\d+)?$/i,x=1e7,y=7,M=c.length-1,q=f.length-1,O={name:\"[object Decimal]\"};function D(n){var e,i,t,r=n.length-1,s=\"\",o=n[0];if(r>0){for(s+=o,e=1;e<r;e++)t=n[e]+\"\",(i=y-t.length)&&(s+=k(i)),s+=t;o=n[e],(i=y-(t=o+\"\").length)&&(s+=k(i))}else if(0===o)return\"0\";for(;o%10==0;)o/=10;return s+o}function F(n,e,i){if(n!==~~n||n<e||n>i)throw Error(l+n)}function A(n,e,i,t){var r,s,o,u;for(s=n[0];s>=10;s/=10)--e;return--e<0?(e+=y,r=0):(r=Math.ceil((e+1)/y),e%=y),s=w(10,y-e),u=n[r]%s|0,null==t?e<3?(0==e?u=u/100|0:1==e&&(u=u/10|0),o=i<4&&99999==u||i>3&&49999==u||5e4==u||0==u):o=(i<4&&u+1==s||i>3&&u+1==s/2)&&(n[r+1]/s/100|0)==w(10,e-2)-1||(u==s/2||0==u)&&0==(n[r+1]/s/100|0):e<4?(0==e?u=u/1e3|0:1==e?u=u/100|0:2==e&&(u=u/10|0),o=(t||i<4)&&9999==u||!t&&i>3&&4999==u):o=((t||i<4)&&u+1==s||!t&&i>3&&u+1==s/2)&&(n[r+1]/s/1e3|0)==w(10,e-3)-1,o}function S(n,e,i){for(var t,r,s=[0],o=0,c=n.length;o<c;){for(r=s.length;r--;)s[r]*=e;for(s[0]+=u.indexOf(n.charAt(o++)),t=0;t<s.length;t++)s[t]>i-1&&(void 0===s[t+1]&&(s[t+1]=0),s[t+1]+=s[t]/i|0,s[t]%=i)}return s.reverse()}O.absoluteValue=O.abs=function(){var n=new this.constructor(this);return n.s<0&&(n.s=1),P(n)},O.ceil=function(){return P(new this.constructor(this),this.e+1,2)},O.comparedTo=O.cmp=function(n){var e,i,t,r,s=this,o=s.d,u=(n=new s.constructor(n)).d,c=s.s,f=n.s;if(!o||!u)return c&&f?c!==f?c:o===u?0:!o^c<0?1:-1:NaN;if(!o[0]||!u[0])return o[0]?c:u[0]?-f:0;if(c!==f)return c;if(s.e!==n.e)return s.e>n.e^c<0?1:-1;for(e=0,i=(t=o.length)<(r=u.length)?t:r;e<i;++e)if(o[e]!==u[e])return o[e]>u[e]^c<0?1:-1;return t===r?0:t>r^c<0?1:-1},O.cosine=O.cos=function(){var n,e,i=this,t=i.constructor;return i.d?i.d[0]?(n=t.precision,e=t.rounding,t.precision=n+Math.max(i.e,i.sd())+y,t.rounding=1,i=function(n,e){var i,t,r=e.d.length;r<32?(i=Math.ceil(r/3),t=(1/z(4,i)).toString()):(i=16,t=\"2.3283064365386962890625e-10\");n.precision+=i,e=J(n,1,e.times(t),new n(1));for(var s=i;s--;){var o=e.times(e);e=o.times(o).minus(o).times(8).plus(1)}return n.precision-=i,e}(t,G(t,i)),t.precision=n,t.rounding=e,P(2==r||3==r?i.neg():i,n,e,!0)):new t(1):new t(NaN)},O.cubeRoot=O.cbrt=function(){var n,e,i,t,r,s,o,u,c,f,a=this,d=a.constructor;if(!a.isFinite()||a.isZero())return new d(a);for(h=!1,(s=a.s*w(a.s*a,1/3))&&Math.abs(s)!=1/0?t=new d(s.toString()):(i=D(a.d),(s=((n=a.e)-i.length+1)%3)&&(i+=1==s||-2==s?\"0\":\"00\"),s=w(i,1/3),n=m((n+1)/3)-(n%3==(n<0?-1:2)),(t=new d(i=s==1/0?\"5e\"+n:(i=s.toExponential()).slice(0,i.indexOf(\"e\")+1)+n)).s=a.s),o=(n=d.precision)+3;;)if(f=(c=(u=t).times(u).times(u)).plus(a),t=Z(f.plus(a).times(u),f.plus(c),o+2,1),D(u.d).slice(0,o)===(i=D(t.d)).slice(0,o)){if(\"9999\"!=(i=i.slice(o-3,o+1))&&(r||\"4999\"!=i)){+i&&(+i.slice(1)||\"5\"!=i.charAt(0))||(P(t,n+1,1),e=!t.times(t).times(t).eq(a));break}if(!r&&(P(u,n+1,0),u.times(u).times(u).eq(a))){t=u;break}o+=4,r=1}return h=!0,P(t,n,d.rounding,e)},O.decimalPlaces=O.dp=function(){var n,e=this.d,i=NaN;if(e){if(i=((n=e.length-1)-m(this.e/y))*y,n=e[n])for(;n%10==0;n/=10)i--;i<0&&(i=0)}return i},O.dividedBy=O.div=function(n){return Z(this,new this.constructor(n))},O.dividedToIntegerBy=O.divToInt=function(n){var e=this.constructor;return P(Z(this,new e(n),0,1,1),e.precision,e.rounding)},O.equals=O.eq=function(n){return 0===this.cmp(n)},O.floor=function(){return P(new this.constructor(this),this.e+1,3)},O.greaterThan=O.gt=function(n){return this.cmp(n)>0},O.greaterThanOrEqualTo=O.gte=function(n){var e=this.cmp(n);return 1==e||0===e},O.hyperbolicCosine=O.cosh=function(){var n,e,i,t,r,s=this,o=s.constructor,u=new o(1);if(!s.isFinite())return new o(s.s?1/0:NaN);if(s.isZero())return u;i=o.precision,t=o.rounding,o.precision=i+Math.max(s.e,s.sd())+4,o.rounding=1,(r=s.d.length)<32?e=(1/z(4,n=Math.ceil(r/3))).toString():(n=16,e=\"2.3283064365386962890625e-10\"),s=J(o,1,s.times(e),new o(1),!0);for(var c,f=n,a=new o(8);f--;)c=s.times(s),s=u.minus(c.times(a.minus(c.times(a))));return P(s,o.precision=i,o.rounding=t,!0)},O.hyperbolicSine=O.sinh=function(){var n,e,i,t,r=this,s=r.constructor;if(!r.isFinite()||r.isZero())return new s(r);if(e=s.precision,i=s.rounding,s.precision=e+Math.max(r.e,r.sd())+4,s.rounding=1,(t=r.d.length)<3)r=J(s,2,r,r,!0);else{n=(n=1.4*Math.sqrt(t))>16?16:0|n,r=J(s,2,r=r.times(1/z(5,n)),r,!0);for(var o,u=new s(5),c=new s(16),f=new s(20);n--;)o=r.times(r),r=r.times(u.plus(o.times(c.times(o).plus(f))))}return s.precision=e,s.rounding=i,P(r,e,i,!0)},O.hyperbolicTangent=O.tanh=function(){var n,e,i=this,t=i.constructor;return i.isFinite()?i.isZero()?new t(i):(n=t.precision,e=t.rounding,t.precision=n+7,t.rounding=1,Z(i.sinh(),i.cosh(),t.precision=n,t.rounding=e)):new t(i.s)},O.inverseCosine=O.acos=function(){var n,e=this,i=e.constructor,t=e.abs().cmp(1),r=i.precision,s=i.rounding;return-1!==t?0===t?e.isNeg()?U(i,r,s):new i(0):new i(NaN):e.isZero()?U(i,r+4,s).times(.5):(i.precision=r+6,i.rounding=1,e=e.asin(),n=U(i,r+4,s).times(.5),i.precision=r,i.rounding=s,n.minus(e))},O.inverseHyperbolicCosine=O.acosh=function(){var n,e,i=this,t=i.constructor;return i.lte(1)?new t(i.eq(1)?0:NaN):i.isFinite()?(n=t.precision,e=t.rounding,t.precision=n+Math.max(Math.abs(i.e),i.sd())+4,t.rounding=1,h=!1,i=i.times(i).minus(1).sqrt().plus(i),h=!0,t.precision=n,t.rounding=e,i.ln()):new t(i)},O.inverseHyperbolicSine=O.asinh=function(){var n,e,i=this,t=i.constructor;return!i.isFinite()||i.isZero()?new t(i):(n=t.precision,e=t.rounding,t.precision=n+2*Math.max(Math.abs(i.e),i.sd())+6,t.rounding=1,h=!1,i=i.times(i).plus(1).sqrt().plus(i),h=!0,t.precision=n,t.rounding=e,i.ln())},O.inverseHyperbolicTangent=O.atanh=function(){var n,e,i,t,r=this,s=r.constructor;return r.isFinite()?r.e>=0?new s(r.abs().eq(1)?r.s/0:r.isZero()?r:NaN):(n=s.precision,e=s.rounding,t=r.sd(),Math.max(t,n)<2*-r.e-1?P(new s(r),n,e,!0):(s.precision=i=t-r.e,r=Z(r.plus(1),new s(1).minus(r),i+n,1),s.precision=n+4,s.rounding=1,r=r.ln(),s.precision=n,s.rounding=e,r.times(.5))):new s(NaN)},O.inverseSine=O.asin=function(){var n,e,i,t,r=this,s=r.constructor;return r.isZero()?new s(r):(e=r.abs().cmp(1),i=s.precision,t=s.rounding,-1!==e?0===e?((n=U(s,i+4,t).times(.5)).s=r.s,n):new s(NaN):(s.precision=i+6,s.rounding=1,r=r.div(new s(1).minus(r.times(r)).sqrt().plus(1)).atan(),s.precision=i,s.rounding=t,r.times(2)))},O.inverseTangent=O.atan=function(){var n,e,i,t,r,s,o,u,c,f=this,a=f.constructor,d=a.precision,l=a.rounding;if(f.isFinite()){if(f.isZero())return new a(f);if(f.abs().eq(1)&&d+4<=q)return(o=U(a,d+4,l).times(.25)).s=f.s,o}else{if(!f.s)return new a(NaN);if(d+4<=q)return(o=U(a,d+4,l).times(.5)).s=f.s,o}for(a.precision=u=d+10,a.rounding=1,n=i=Math.min(28,u/y+2|0);n;--n)f=f.div(f.times(f).plus(1).sqrt().plus(1));for(h=!1,e=Math.ceil(u/y),t=1,c=f.times(f),o=new a(f),r=f;-1!==n;)if(r=r.times(c),s=o.minus(r.div(t+=2)),r=r.times(c),void 0!==(o=s.plus(r.div(t+=2))).d[e])for(n=e;o.d[n]===s.d[n]&&n--;);return i&&(o=o.times(2<<i-1)),h=!0,P(o,a.precision=d,a.rounding=l,!0)},O.isFinite=function(){return!!this.d},O.isInteger=O.isInt=function(){return!!this.d&&m(this.e/y)>this.d.length-2},O.isNaN=function(){return!this.s},O.isNegative=O.isNeg=function(){return this.s<0},O.isPositive=O.isPos=function(){return this.s>0},O.isZero=function(){return!!this.d&&0===this.d[0]},O.lessThan=O.lt=function(n){return this.cmp(n)<0},O.lessThanOrEqualTo=O.lte=function(n){return this.cmp(n)<1},O.logarithm=O.log=function(n){var e,i,t,r,s,o,u,c,f=this.constructor,a=f.precision,d=f.rounding;if(null==n)n=new f(10),e=!0;else{if(i=(n=new f(n)).d,n.s<0||!i||!i[0]||n.eq(1))return new f(NaN);e=n.eq(10)}if(i=this.d,this.s<0||!i||!i[0]||this.eq(1))return new f(i&&!i[0]?-1/0:1!=this.s?NaN:i?0:1/0);if(e)if(i.length>1)s=!0;else{for(r=i[0];r%10==0;)r/=10;s=1!==r}if(h=!1,o=V(this,u=a+5),t=e?T(f,u+10):V(n,u),A((c=Z(o,t,u,1)).d,r=a,d))do{if(o=V(this,u+=10),t=e?T(f,u+10):V(n,u),c=Z(o,t,u,1),!s){+D(c.d).slice(r+1,r+15)+1==1e14&&(c=P(c,a+1,0));break}}while(A(c.d,r+=10,d));return h=!0,P(c,a,d)},O.minus=O.sub=function(n){var e,i,t,r,s,o,u,c,f,a,d,l,p=this,g=p.constructor;if(n=new g(n),!p.d||!n.d)return p.s&&n.s?p.d?n.s=-n.s:n=new g(n.d||p.s!==n.s?p:NaN):n=new g(NaN),n;if(p.s!=n.s)return n.s=-n.s,p.plus(n);if(f=p.d,l=n.d,u=g.precision,c=g.rounding,!f[0]||!l[0]){if(l[0])n.s=-n.s;else{if(!f[0])return new g(3===c?-0:0);n=new g(p)}return h?P(n,u,c):n}if(i=m(n.e/y),a=m(p.e/y),f=f.slice(),s=a-i){for((d=s<0)?(e=f,s=-s,o=l.length):(e=l,i=a,o=f.length),s>(t=Math.max(Math.ceil(u/y),o)+2)&&(s=t,e.length=1),e.reverse(),t=s;t--;)e.push(0);e.reverse()}else{for((d=(t=f.length)<(o=l.length))&&(o=t),t=0;t<o;t++)if(f[t]!=l[t]){d=f[t]<l[t];break}s=0}for(d&&(e=f,f=l,l=e,n.s=-n.s),o=f.length,t=l.length-o;t>0;--t)f[o++]=0;for(t=l.length;t>s;){if(f[--t]<l[t]){for(r=t;r&&0===f[--r];)f[r]=x-1;--f[r],f[t]+=x}f[t]-=l[t]}for(;0===f[--o];)f.pop();for(;0===f[0];f.shift())--i;return f[0]?(n.d=f,n.e=L(f,i),h?P(n,u,c):n):new g(3===c?-0:0)},O.modulo=O.mod=function(n){var e,i=this,t=i.constructor;return n=new t(n),!i.d||!n.s||n.d&&!n.d[0]?new t(NaN):!n.d||i.d&&!i.d[0]?P(new t(i),t.precision,t.rounding):(h=!1,9==t.modulo?(e=Z(i,n.abs(),0,3,1)).s*=n.s:e=Z(i,n,0,t.modulo,1),e=e.times(n),h=!0,i.minus(e))},O.naturalExponential=O.exp=function(){return B(this)},O.naturalLogarithm=O.ln=function(){return V(this)},O.negated=O.neg=function(){var n=new this.constructor(this);return n.s=-n.s,P(n)},O.plus=O.add=function(n){var e,i,t,r,s,o,u,c,f,a,d=this,l=d.constructor;if(n=new l(n),!d.d||!n.d)return d.s&&n.s?d.d||(n=new l(n.d||d.s===n.s?d:NaN)):n=new l(NaN),n;if(d.s!=n.s)return n.s=-n.s,d.minus(n);if(f=d.d,a=n.d,u=l.precision,c=l.rounding,!f[0]||!a[0])return a[0]||(n=new l(d)),h?P(n,u,c):n;if(s=m(d.e/y),t=m(n.e/y),f=f.slice(),r=s-t){for(r<0?(i=f,r=-r,o=a.length):(i=a,t=s,o=f.length),r>(o=(s=Math.ceil(u/y))>o?s+1:o+1)&&(r=o,i.length=1),i.reverse();r--;)i.push(0);i.reverse()}for((o=f.length)-(r=a.length)<0&&(r=o,i=a,a=f,f=i),e=0;r;)e=(f[--r]=f[r]+a[r]+e)/x|0,f[r]%=x;for(e&&(f.unshift(e),++t),o=f.length;0==f[--o];)f.pop();return n.d=f,n.e=L(f,t),h?P(n,u,c):n},O.precision=O.sd=function(n){var e,i=this;if(void 0!==n&&n!==!!n&&1!==n&&0!==n)throw Error(l+n);return i.d?(e=_(i.d),n&&i.e+1>e&&(e=i.e+1)):e=NaN,e},O.round=function(){var n=this,e=n.constructor;return P(new e(n),n.e+1,e.rounding)},O.sine=O.sin=function(){var n,e,i=this,t=i.constructor;return i.isFinite()?i.isZero()?new t(i):(n=t.precision,e=t.rounding,t.precision=n+Math.max(i.e,i.sd())+y,t.rounding=1,i=function(n,e){var i,t=e.d.length;if(t<3)return J(n,2,e,e);i=(i=1.4*Math.sqrt(t))>16?16:0|i,e=e.times(1/z(5,i)),e=J(n,2,e,e);for(var r,s=new n(5),o=new n(16),u=new n(20);i--;)r=e.times(e),e=e.times(s.plus(r.times(o.times(r).minus(u))));return e}(t,G(t,i)),t.precision=n,t.rounding=e,P(r>2?i.neg():i,n,e,!0)):new t(NaN)},O.squareRoot=O.sqrt=function(){var n,e,i,t,r,s,o=this,u=o.d,c=o.e,f=o.s,a=o.constructor;if(1!==f||!u||!u[0])return new a(!f||f<0&&(!u||u[0])?NaN:u?o:1/0);for(h=!1,0==(f=Math.sqrt(+o))||f==1/0?(((e=D(u)).length+c)%2==0&&(e+=\"0\"),f=Math.sqrt(e),c=m((c+1)/2)-(c<0||c%2),t=new a(e=f==1/0?\"5e\"+c:(e=f.toExponential()).slice(0,e.indexOf(\"e\")+1)+c)):t=new a(f.toString()),i=(c=a.precision)+3;;)if(t=(s=t).plus(Z(o,s,i+2,1)).times(.5),D(s.d).slice(0,i)===(e=D(t.d)).slice(0,i)){if(\"9999\"!=(e=e.slice(i-3,i+1))&&(r||\"4999\"!=e)){+e&&(+e.slice(1)||\"5\"!=e.charAt(0))||(P(t,c+1,1),n=!t.times(t).eq(o));break}if(!r&&(P(s,c+1,0),s.times(s).eq(o))){t=s;break}i+=4,r=1}return h=!0,P(t,c,a.rounding,n)},O.tangent=O.tan=function(){var n,e,i=this,t=i.constructor;return i.isFinite()?i.isZero()?new t(i):(n=t.precision,e=t.rounding,t.precision=n+10,t.rounding=1,(i=i.sin()).s=1,i=Z(i,new t(1).minus(i.times(i)).sqrt(),n+10,0),t.precision=n,t.rounding=e,P(2==r||4==r?i.neg():i,n,e,!0)):new t(NaN)},O.times=O.mul=function(n){var e,i,t,r,s,o,u,c,f,a=this,d=a.constructor,l=a.d,p=(n=new d(n)).d;if(n.s*=a.s,!(l&&l[0]&&p&&p[0]))return new d(!n.s||l&&!l[0]&&!p||p&&!p[0]&&!l?NaN:l&&p?0*n.s:n.s/0);for(i=m(a.e/y)+m(n.e/y),(c=l.length)<(f=p.length)&&(s=l,l=p,p=s,o=c,c=f,f=o),s=[],t=o=c+f;t--;)s.push(0);for(t=f;--t>=0;){for(e=0,r=c+t;r>t;)u=s[r]+p[t]*l[r-t-1]+e,s[r--]=u%x|0,e=u/x|0;s[r]=(s[r]+e)%x|0}for(;!s[--o];)s.pop();return e?++i:s.shift(),n.d=s,n.e=L(s,i),h?P(n,d.precision,d.rounding):n},O.toBinary=function(n,e){return K(this,2,n,e)},O.toDecimalPlaces=O.toDP=function(n,e){var i=this,t=i.constructor;return i=new t(i),void 0===n?i:(F(n,0,o),void 0===e?e=t.rounding:F(e,0,8),P(i,n+i.e+1,e))},O.toExponential=function(n,e){var i,t=this,r=t.constructor;return void 0===n?i=R(t,!0):(F(n,0,o),void 0===e?e=r.rounding:F(e,0,8),i=R(t=P(new r(t),n+1,e),!0,n+1)),t.isNeg()&&!t.isZero()?\"-\"+i:i},O.toFixed=function(n,e){var i,t,r=this,s=r.constructor;return void 0===n?i=R(r):(F(n,0,o),void 0===e?e=s.rounding:F(e,0,8),i=R(t=P(new s(r),n+r.e+1,e),!1,n+t.e+1)),r.isNeg()&&!r.isZero()?\"-\"+i:i},O.toFraction=function(n){var e,i,t,r,s,o,u,c,f,a,d,p,g=this,m=g.d,v=g.constructor;if(!m)return new v(g);if(f=i=new v(1),t=c=new v(0),o=(s=(e=new v(t)).e=_(m)-g.e-1)%y,e.d[0]=w(10,o<0?y+o:o),null==n)n=s>0?e:f;else{if(!(u=new v(n)).isInt()||u.lt(f))throw Error(l+u);n=u.gt(e)?s>0?e:f:u}for(h=!1,u=new v(D(m)),a=v.precision,v.precision=s=m.length*y*2;d=Z(u,e,0,1,1),1!=(r=i.plus(d.times(t))).cmp(n);)i=t,t=r,r=f,f=c.plus(d.times(r)),c=r,r=e,e=u.minus(d.times(r)),u=r;return r=Z(n.minus(i),t,0,1,1),c=c.plus(r.times(f)),i=i.plus(r.times(t)),c.s=f.s=g.s,p=Z(f,t,s,1).minus(g).abs().cmp(Z(c,i,s,1).minus(g).abs())<1?[f,t]:[c,i],v.precision=a,h=!0,p},O.toHexadecimal=O.toHex=function(n,e){return K(this,16,n,e)},O.toNearest=function(n,e){var i=this,t=i.constructor;if(i=new t(i),null==n){if(!i.d)return i;n=new t(1),e=t.rounding}else{if(n=new t(n),void 0===e?e=t.rounding:F(e,0,8),!i.d)return n.s?i:n;if(!n.d)return n.s&&(n.s=i.s),n}return n.d[0]?(h=!1,i=Z(i,n,0,e,1).times(n),h=!0,P(i)):(n.s=i.s,i=n),i},O.toNumber=function(){return+this},O.toOctal=function(n,e){return K(this,8,n,e)},O.toPower=O.pow=function(n){var e,i,t,r,s,o,u=this,c=u.constructor,f=+(n=new c(n));if(!(u.d&&n.d&&u.d[0]&&n.d[0]))return new c(w(+u,f));if((u=new c(u)).eq(1))return u;if(t=c.precision,s=c.rounding,n.eq(1))return P(u,t,s);if((e=m(n.e/y))>=n.d.length-1&&(i=f<0?-f:f)<=9007199254740991)return r=C(c,u,i,t),n.s<0?new c(1).div(r):P(r,t,s);if((o=u.s)<0){if(e<n.d.length-1)return new c(NaN);if(0==(1&n.d[e])&&(o=1),0==u.e&&1==u.d[0]&&1==u.d.length)return u.s=o,u}return(e=0!=(i=w(+u,f))&&isFinite(i)?new c(i+\"\").e:m(f*(Math.log(\"0.\"+D(u.d))/Math.LN10+u.e+1)))>c.maxE+1||e<c.minE-1?new c(e>0?o/0:0):(h=!1,c.rounding=u.s=1,i=Math.min(12,(e+\"\").length),(r=B(n.times(V(u,t+i)),t)).d&&A((r=P(r,t+5,1)).d,t,s)&&(e=t+10,+D((r=P(B(n.times(V(u,e+i)),e),e+5,1)).d).slice(t+1,t+15)+1==1e14&&(r=P(r,t+1,0))),r.s=o,h=!0,c.rounding=s,P(r,t,s))},O.toPrecision=function(n,e){var i,t=this,r=t.constructor;return void 0===n?i=R(t,t.e<=r.toExpNeg||t.e>=r.toExpPos):(F(n,1,o),void 0===e?e=r.rounding:F(e,0,8),i=R(t=P(new r(t),n,e),n<=t.e||t.e<=r.toExpNeg,n)),t.isNeg()&&!t.isZero()?\"-\"+i:i},O.toSignificantDigits=O.toSD=function(n,e){var i=this.constructor;return void 0===n?(n=i.precision,e=i.rounding):(F(n,1,o),void 0===e?e=i.rounding:F(e,0,8)),P(new i(this),n,e)},O.toString=function(){var n=this,e=n.constructor,i=R(n,n.e<=e.toExpNeg||n.e>=e.toExpPos);return n.isNeg()&&!n.isZero()?\"-\"+i:i},O.truncated=O.trunc=function(){return P(new this.constructor(this),this.e+1,1)},O.valueOf=O.toJSON=function(){var n=this,e=n.constructor,i=R(n,n.e<=e.toExpNeg||n.e>=e.toExpPos);return n.isNeg()?\"-\"+i:i};var Z=function(){function n(n,e,i){var t,r=0,s=n.length;for(n=n.slice();s--;)t=n[s]*e+r,n[s]=t%i|0,r=t/i|0;return r&&n.unshift(r),n}function e(n,e,i,t){var r,s;if(i!=t)s=i>t?1:-1;else for(r=s=0;r<i;r++)if(n[r]!=e[r]){s=n[r]>e[r]?1:-1;break}return s}function t(n,e,i,t){for(var r=0;i--;)n[i]-=r,r=n[i]<e[i]?1:0,n[i]=r*t+n[i]-e[i];for(;!n[0]&&n.length>1;)n.shift()}return function(r,s,o,u,c,f){var a,h,d,l,p,g,w,v,N,b,E,M,q,O,D,F,A,S,Z,R,L=r.constructor,T=r.s==s.s?1:-1,U=r.d,_=s.d;if(!(U&&U[0]&&_&&_[0]))return new L(r.s&&s.s&&(U?!_||U[0]!=_[0]:_)?U&&0==U[0]||!_?0*T:T/0:NaN);for(f?(p=1,h=r.e-s.e):(f=x,p=y,h=m(r.e/p)-m(s.e/p)),Z=_.length,A=U.length,b=(N=new L(T)).d=[],d=0;_[d]==(U[d]||0);d++);if(_[d]>(U[d]||0)&&h--,null==o?(O=o=L.precision,u=L.rounding):O=c?o+(r.e-s.e)+1:o,O<0)b.push(1),g=!0;else{if(O=O/p+2|0,d=0,1==Z){for(l=0,_=_[0],O++;(d<A||l)&&O--;d++)D=l*f+(U[d]||0),b[d]=D/_|0,l=D%_|0;g=l||d<A}else{for((l=f/(_[0]+1)|0)>1&&(_=n(_,l,f),U=n(U,l,f),Z=_.length,A=U.length),F=Z,M=(E=U.slice(0,Z)).length;M<Z;)E[M++]=0;(R=_.slice()).unshift(0),S=_[0],_[1]>=f/2&&++S;do{l=0,(a=e(_,E,Z,M))<0?(q=E[0],Z!=M&&(q=q*f+(E[1]||0)),(l=q/S|0)>1?(l>=f&&(l=f-1),1==(a=e(w=n(_,l,f),E,v=w.length,M=E.length))&&(l--,t(w,Z<v?R:_,v,f))):(0==l&&(a=l=1),w=_.slice()),(v=w.length)<M&&w.unshift(0),t(E,w,M,f),-1==a&&(a=e(_,E,Z,M=E.length))<1&&(l++,t(E,Z<M?R:_,M,f)),M=E.length):0===a&&(l++,E=[0]),b[d++]=l,a&&E[0]?E[M++]=U[F]||0:(E=[U[F]],M=1)}while((F++<A||void 0!==E[0])&&O--);g=void 0!==E[0]}b[0]||b.shift()}if(1==p)N.e=h,i=g;else{for(d=1,l=b[0];l>=10;l/=10)d++;N.e=d+h*p-1,P(N,c?o+N.e+1:o,u,g)}return N}}();function P(n,e,i,t){var r,s,o,u,c,f,a,d,l,p=n.constructor;n:if(null!=e){if(!(d=n.d))return n;for(r=1,u=d[0];u>=10;u/=10)r++;if((s=e-r)<0)s+=y,o=e,c=(a=d[l=0])/w(10,r-o-1)%10|0;else if((l=Math.ceil((s+1)/y))>=(u=d.length)){if(!t)break n;for(;u++<=l;)d.push(0);a=c=0,r=1,o=(s%=y)-y+1}else{for(a=u=d[l],r=1;u>=10;u/=10)r++;c=(o=(s%=y)-y+r)<0?0:a/w(10,r-o-1)%10|0}if(t=t||e<0||void 0!==d[l+1]||(o<0?a:a%w(10,r-o-1)),f=i<4?(c||t)&&(0==i||i==(n.s<0?3:2)):c>5||5==c&&(4==i||t||6==i&&(s>0?o>0?a/w(10,r-o):0:d[l-1])%10&1||i==(n.s<0?8:7)),e<1||!d[0])return d.length=0,f?(e-=n.e+1,d[0]=w(10,(y-e%y)%y),n.e=-e||0):d[0]=n.e=0,n;if(0==s?(d.length=l,u=1,l--):(d.length=l+1,u=w(10,y-s),d[l]=o>0?(a/w(10,r-o)%w(10,o)|0)*u:0),f)for(;;){if(0==l){for(s=1,o=d[0];o>=10;o/=10)s++;for(o=d[0]+=u,u=1;o>=10;o/=10)u++;s!=u&&(n.e++,d[0]==x&&(d[0]=1));break}if(d[l]+=u,d[l]!=x)break;d[l--]=0,u=1}for(s=d.length;0===d[--s];)d.pop()}return h&&(n.e>p.maxE?(n.d=null,n.e=NaN):n.e<p.minE&&(n.e=0,n.d=[0])),n}function R(n,e,i){if(!n.isFinite())return j(n);var t,r=n.e,s=D(n.d),o=s.length;return e?(i&&(t=i-o)>0?s=s.charAt(0)+\".\"+s.slice(1)+k(t):o>1&&(s=s.charAt(0)+\".\"+s.slice(1)),s=s+(n.e<0?\"e\":\"e+\")+n.e):r<0?(s=\"0.\"+k(-r-1)+s,i&&(t=i-o)>0&&(s+=k(t))):r>=o?(s+=k(r+1-o),i&&(t=i-r-1)>0&&(s=s+\".\"+k(t))):((t=r+1)<o&&(s=s.slice(0,t)+\".\"+s.slice(t)),i&&(t=i-o)>0&&(r+1===o&&(s+=\".\"),s+=k(t))),s}function L(n,e){var i=n[0];for(e*=y;i>=10;i/=10)e++;return e}function T(n,e,i){if(e>M)throw h=!0,i&&(n.precision=i),Error(p);return P(new n(c),e,1,!0)}function U(n,e,i){if(e>q)throw Error(p);return P(new n(f),e,i,!0)}function _(n){var e=n.length-1,i=e*y+1;if(e=n[e]){for(;e%10==0;e/=10)i--;for(e=n[0];e>=10;e/=10)i++}return i}function k(n){for(var e=\"\";n--;)e+=\"0\";return e}function C(n,e,i,t){var r,s=new n(1),o=Math.ceil(t/y+4);for(h=!1;;){if(i%2&&Q((s=s.times(e)).d,o)&&(r=!0),0===(i=m(i/2))){i=s.d.length-1,r&&0===s.d[i]&&++s.d[i];break}Q((e=e.times(e)).d,o)}return h=!0,s}function I(n){return 1&n.d[n.d.length-1]}function H(n,e,i){for(var t,r=new n(e[0]),s=0;++s<e.length;){if(!(t=new n(e[s])).s){r=t;break}r[i](t)&&(r=t)}return r}function B(n,e){var i,t,r,s,o,u,c,f=0,a=0,d=0,l=n.constructor,p=l.rounding,g=l.precision;if(!n.d||!n.d[0]||n.e>17)return new l(n.d?n.d[0]?n.s<0?0:1/0:1:n.s?n.s<0?0:n:NaN);for(null==e?(h=!1,c=g):c=e,u=new l(.03125);n.e>-2;)n=n.times(u),d+=5;for(c+=t=Math.log(w(2,d))/Math.LN10*2+5|0,i=s=o=new l(1),l.precision=c;;){if(s=P(s.times(n),c,1),i=i.times(++a),D((u=o.plus(Z(s,i,c,1))).d).slice(0,c)===D(o.d).slice(0,c)){for(r=d;r--;)o=P(o.times(o),c,1);if(null!=e)return l.precision=g,o;if(!(f<3&&A(o.d,c-t,p,f)))return P(o,l.precision=g,p,h=!0);l.precision=c+=10,i=s=u=new l(1),a=0,f++}o=u}}function V(n,e){var i,t,r,s,o,u,c,f,a,d,l,p=1,g=n,m=g.d,w=g.constructor,v=w.rounding,N=w.precision;if(g.s<0||!m||!m[0]||!g.e&&1==m[0]&&1==m.length)return new w(m&&!m[0]?-1/0:1!=g.s?NaN:m?0:g);if(null==e?(h=!1,a=N):a=e,w.precision=a+=10,t=(i=D(m)).charAt(0),!(Math.abs(s=g.e)<15e14))return f=T(w,a+2,N).times(s+\"\"),g=V(new w(t+\".\"+i.slice(1)),a-10).plus(f),w.precision=N,null==e?P(g,N,v,h=!0):g;for(;t<7&&1!=t||1==t&&i.charAt(1)>3;)t=(i=D((g=g.times(n)).d)).charAt(0),p++;for(s=g.e,t>1?(g=new w(\"0.\"+i),s++):g=new w(t+\".\"+i.slice(1)),d=g,c=o=g=Z(g.minus(1),g.plus(1),a,1),l=P(g.times(g),a,1),r=3;;){if(o=P(o.times(l),a,1),D((f=c.plus(Z(o,new w(r),a,1))).d).slice(0,a)===D(c.d).slice(0,a)){if(c=c.times(2),0!==s&&(c=c.plus(T(w,a+2,N).times(s+\"\"))),c=Z(c,new w(p),a,1),null!=e)return w.precision=N,c;if(!A(c.d,a-10,v,u))return P(c,w.precision=N,v,h=!0);w.precision=a+=10,f=o=g=Z(d.minus(1),d.plus(1),a,1),l=P(g.times(g),a,1),r=u=1}c=f,r+=2}}function j(n){return String(n.s*n.s/0)}function $(n,e){var i,t,r;for((i=e.indexOf(\".\"))>-1&&(e=e.replace(\".\",\"\")),(t=e.search(/e/i))>0?(i<0&&(i=t),i+=+e.slice(t+1),e=e.substring(0,t)):i<0&&(i=e.length),t=0;48===e.charCodeAt(t);t++);for(r=e.length;48===e.charCodeAt(r-1);--r);if(e=e.slice(t,r)){if(r-=t,n.e=i=i-t-1,n.d=[],t=(i+1)%y,i<0&&(t+=y),t<r){for(t&&n.d.push(+e.slice(0,t)),r-=y;t<r;)n.d.push(+e.slice(t,t+=y));e=e.slice(t),t=y-e.length}else t-=r;for(;t--;)e+=\"0\";n.d.push(+e),h&&(n.e>n.constructor.maxE?(n.d=null,n.e=NaN):n.e<n.constructor.minE&&(n.e=0,n.d=[0]))}else n.e=0,n.d=[0];return n}function W(n,i){var t,r,s,o,u,c,f,a,d;if(\"Infinity\"===i||\"NaN\"===i)return+i||(n.s=NaN),n.e=NaN,n.d=null,n;if(N.test(i))t=16,i=i.toLowerCase();else if(v.test(i))t=2;else{if(!b.test(i))throw Error(l+i);t=8}for((o=i.search(/p/i))>0?(f=+i.slice(o+1),i=i.substring(2,o)):i=i.slice(2),u=(o=i.indexOf(\".\"))>=0,r=n.constructor,u&&(o=(c=(i=i.replace(\".\",\"\")).length)-o,s=C(r,new r(t),o,2*o)),o=d=(a=S(i,t,x)).length-1;0===a[o];--o)a.pop();return o<0?new r(0*n.s):(n.e=L(a,d),n.d=a,h=!1,u&&(n=Z(n,s,4*c)),f&&(n=n.times(Math.abs(f)<54?w(2,f):e.pow(2,f))),h=!0,n)}function J(n,e,i,t,r){var s,o,u,c,f=n.precision,a=Math.ceil(f/y);for(h=!1,c=i.times(i),u=new n(t);;){if(o=Z(u.times(c),new n(e++*e++),f,1),u=r?t.plus(o):t.minus(o),t=Z(o.times(c),new n(e++*e++),f,1),void 0!==(o=u.plus(t)).d[a]){for(s=a;o.d[s]===u.d[s]&&s--;);if(-1==s)break}s=u,u=t,t=o,o=s,0}return h=!0,o.d.length=a+1,o}function z(n,e){for(var i=n;--e;)i*=n;return i}function G(n,e){var i,t=e.s<0,s=U(n,n.precision,1),o=s.times(.5);if((e=e.abs()).lte(o))return r=t?4:1,e;if((i=e.divToInt(s)).isZero())r=t?3:2;else{if((e=e.minus(i.times(s))).lte(o))return r=I(i)?t?2:3:t?4:1,e;r=I(i)?t?1:4:t?3:2}return e.minus(s).abs()}function K(n,e,t,r){var s,c,f,a,h,d,l,p,g,m=n.constructor,w=void 0!==t;if(w?(F(t,1,o),void 0===r?r=m.rounding:F(r,0,8)):(t=m.precision,r=m.rounding),n.isFinite()){for(w?(s=2,16==e?t=4*t-3:8==e&&(t=3*t-2)):s=e,(f=(l=R(n)).indexOf(\".\"))>=0&&(l=l.replace(\".\",\"\"),(g=new m(1)).e=l.length-f,g.d=S(R(g),10,s),g.e=g.d.length),c=h=(p=S(l,10,s)).length;0==p[--h];)p.pop();if(p[0]){if(f<0?c--:((n=new m(n)).d=p,n.e=c,p=(n=Z(n,g,t,r,0,s)).d,c=n.e,d=i),f=p[t],a=s/2,d=d||void 0!==p[t+1],d=r<4?(void 0!==f||d)&&(0===r||r===(n.s<0?3:2)):f>a||f===a&&(4===r||d||6===r&&1&p[t-1]||r===(n.s<0?8:7)),p.length=t,d)for(;++p[--t]>s-1;)p[t]=0,t||(++c,p.unshift(1));for(h=p.length;!p[h-1];--h);for(f=0,l=\"\";f<h;f++)l+=u.charAt(p[f]);if(w){if(h>1)if(16==e||8==e){for(f=16==e?4:3,--h;h%f;h++)l+=\"0\";for(h=(p=S(l,s,e)).length;!p[h-1];--h);for(f=1,l=\"1.\";f<h;f++)l+=u.charAt(p[f])}else l=l.charAt(0)+\".\"+l.slice(1);l=l+(c<0?\"p\":\"p+\")+c}else if(c<0){for(;++c;)l=\"0\"+l;l=\"0.\"+l}else if(++c>h)for(c-=h;c--;)l+=\"0\";else c<h&&(l=l.slice(0,c)+\".\"+l.slice(c))}else l=w?\"0p+0\":\"0\";l=(16==e?\"0x\":2==e?\"0b\":8==e?\"0o\":\"\")+l}else l=j(n);return n.s<0?\"-\"+l:l}function Q(n,e){if(n.length>e)return n.length=e,!0}function X(n){return new this(n).abs()}function Y(n){return new this(n).acos()}function nn(n){return new this(n).acosh()}function en(n,e){return new this(n).plus(e)}function tn(n){return new this(n).asin()}function rn(n){return new this(n).asinh()}function sn(n){return new this(n).atan()}function on(n){return new this(n).atanh()}function un(n,e){n=new this(n),e=new this(e);var i,t=this.precision,r=this.rounding,s=t+4;return n.s&&e.s?n.d||e.d?!e.d||n.isZero()?(i=e.s<0?U(this,t,r):new this(0)).s=n.s:!n.d||e.isZero()?(i=U(this,s,1).times(.5)).s=n.s:e.s<0?(this.precision=s,this.rounding=1,i=this.atan(Z(n,e,s,1)),e=U(this,s,1),this.precision=t,this.rounding=r,i=n.s<0?i.minus(e):i.plus(e)):i=this.atan(Z(n,e,s,1)):(i=U(this,s,1).times(e.s>0?.25:.75)).s=n.s:i=new this(NaN),i}function cn(n){return new this(n).cbrt()}function fn(n){return P(n=new this(n),n.e+1,2)}function an(n){if(!n||\"object\"!=typeof n)throw Error(d+\"Object expected\");var e,i,t,r=!0===n.defaults,u=[\"precision\",1,o,\"rounding\",0,8,\"toExpNeg\",-s,0,\"toExpPos\",0,s,\"maxE\",0,s,\"minE\",-s,0,\"modulo\",0,9];for(e=0;e<u.length;e+=3)if(i=u[e],r&&(this[i]=a[i]),void 0!==(t=n[i])){if(!(m(t)===t&&t>=u[e+1]&&t<=u[e+2]))throw Error(l+i+\": \"+t);this[i]=t}if(i=\"crypto\",r&&(this[i]=a[i]),void 0!==(t=n[i])){if(!0!==t&&!1!==t&&0!==t&&1!==t)throw Error(l+i+\": \"+t);if(t){if(\"undefined\"==typeof crypto||!crypto||!crypto.getRandomValues&&!crypto.randomBytes)throw Error(g);this[i]=!0}else this[i]=!1}return this}function hn(n){return new this(n).cos()}function dn(n){return new this(n).cosh()}function ln(n,e){return new this(n).div(e)}function pn(n){return new this(n).exp()}function gn(n){return P(n=new this(n),n.e+1,3)}function mn(){var n,e,i=new this(0);for(h=!1,n=0;n<arguments.length;)if((e=new this(arguments[n++])).d)i.d&&(i=i.plus(e.times(e)));else{if(e.s)return h=!0,new this(1/0);i=e}return h=!0,i.sqrt()}function wn(n){return n instanceof e||n&&\"[object Decimal]\"===n.name||!1}function vn(n){return new this(n).ln()}function Nn(n,e){return new this(n).log(e)}function bn(n){return new this(n).log(2)}function En(n){return new this(n).log(10)}function xn(){return H(this,arguments,\"lt\")}function yn(){return H(this,arguments,\"gt\")}function Mn(n,e){return new this(n).mod(e)}function qn(n,e){return new this(n).mul(e)}function On(n,e){return new this(n).pow(e)}function Dn(n){var e,i,t,r,s=0,u=new this(1),c=[];if(void 0===n?n=this.precision:F(n,1,o),t=Math.ceil(n/y),this.crypto)if(crypto.getRandomValues)for(e=crypto.getRandomValues(new Uint32Array(t));s<t;)(r=e[s])>=429e7?e[s]=crypto.getRandomValues(new Uint32Array(1))[0]:c[s++]=r%1e7;else{if(!crypto.randomBytes)throw Error(g);for(e=crypto.randomBytes(t*=4);s<t;)(r=e[s]+(e[s+1]<<8)+(e[s+2]<<16)+((127&e[s+3])<<24))>=214e7?crypto.randomBytes(4).copy(e,s):(c.push(r%1e7),s+=4);s=t/4}else for(;s<t;)c[s++]=1e7*Math.random()|0;for(t=c[--s],n%=y,t&&n&&(r=w(10,y-n),c[s]=(t/r|0)*r);0===c[s];s--)c.pop();if(s<0)i=0,c=[0];else{for(i=-1;0===c[0];i-=y)c.shift();for(t=1,r=c[0];r>=10;r/=10)t++;t<y&&(i-=y-t)}return u.e=i,u.d=c,u}function Fn(n){return P(n=new this(n),n.e+1,this.rounding)}function An(n){return(n=new this(n)).d?n.d[0]?n.s:0*n.s:n.s||NaN}function Sn(n){return new this(n).sin()}function Zn(n){return new this(n).sinh()}function Pn(n){return new this(n).sqrt()}function Rn(n,e){return new this(n).sub(e)}function Ln(n){return new this(n).tan()}function Tn(n){return new this(n).tanh()}function Un(n){return P(n=new this(n),n.e+1,1)}return(e=function n(e){var i,t,r;function s(n){var e,i,t,r=this;if(!(r instanceof s))return new s(n);if(r.constructor=s,n instanceof s)return r.s=n.s,void(h?!n.d||n.e>s.maxE?(r.e=NaN,r.d=null):n.e<s.minE?(r.e=0,r.d=[0]):(r.e=n.e,r.d=n.d.slice()):(r.e=n.e,r.d=n.d?n.d.slice():n.d));if(\"number\"==(t=typeof n)){if(0===n)return r.s=1/n<0?-1:1,r.e=0,void(r.d=[0]);if(n<0?(n=-n,r.s=-1):r.s=1,n===~~n&&n<1e7){for(e=0,i=n;i>=10;i/=10)e++;return void(h?e>s.maxE?(r.e=NaN,r.d=null):e<s.minE?(r.e=0,r.d=[0]):(r.e=e,r.d=[n]):(r.e=e,r.d=[n]))}return 0*n!=0?(n||(r.s=NaN),r.e=NaN,void(r.d=null)):$(r,n.toString())}if(\"string\"!==t)throw Error(l+n);return 45===(i=n.charCodeAt(0))?(n=n.slice(1),r.s=-1):(43===i&&(n=n.slice(1)),r.s=1),E.test(n)?$(r,n):W(r,n)}if(s.prototype=O,s.ROUND_UP=0,s.ROUND_DOWN=1,s.ROUND_CEIL=2,s.ROUND_FLOOR=3,s.ROUND_HALF_UP=4,s.ROUND_HALF_DOWN=5,s.ROUND_HALF_EVEN=6,s.ROUND_HALF_CEIL=7,s.ROUND_HALF_FLOOR=8,s.EUCLID=9,s.config=s.set=an,s.clone=n,s.isDecimal=wn,s.abs=X,s.acos=Y,s.acosh=nn,s.add=en,s.asin=tn,s.asinh=rn,s.atan=sn,s.atanh=on,s.atan2=un,s.cbrt=cn,s.ceil=fn,s.cos=hn,s.cosh=dn,s.div=ln,s.exp=pn,s.floor=gn,s.hypot=mn,s.ln=vn,s.log=Nn,s.log10=En,s.log2=bn,s.max=xn,s.min=yn,s.mod=Mn,s.mul=qn,s.pow=On,s.random=Dn,s.round=Fn,s.sign=An,s.sin=Sn,s.sinh=Zn,s.sqrt=Pn,s.sub=Rn,s.tan=Ln,s.tanh=Tn,s.trunc=Un,void 0===e&&(e={}),e&&!0!==e.defaults)for(r=[\"precision\",\"rounding\",\"toExpNeg\",\"toExpPos\",\"maxE\",\"minE\",\"modulo\",\"crypto\"],i=0;i<r.length;)e.hasOwnProperty(t=r[i++])||(e[t]=this[t]);return s.config(e),s}(a)).default=e.Decimal=e,c=new e(c),f=new e(f),\"function\"==typeof define&&define.amd?define(function(){return e}):\"undefined\"!=typeof module&&module.exports?(\"function\"==typeof Symbol&&\"symbol\"==typeof Symbol.iterator&&(O[Symbol.for(\"nodejs.util.inspect.custom\")]=O.toString,O[Symbol.toStringTag]=\"Decimal\"),module.exports=e):(n||(n=\"undefined\"!=typeof self&&self&&self.self==self?self:window),t=n.Decimal,e.noConflict=function(){return n.Decimal=t,e},n.Decimal=e),e}(this)\r\n//    bigDec: require('decimal.js')\r\n});\r\n\r\nif((typeof module) !== 'undefined') {\r\n    module.exports = nerdamer;\r\n};\r\n\r\n\r\n\r\nvar ans = nerdamer('sqrt(3^x)');\r\nconsole.log(ans.toString())\r\n"]},"metadata":{},"sourceType":"script"}