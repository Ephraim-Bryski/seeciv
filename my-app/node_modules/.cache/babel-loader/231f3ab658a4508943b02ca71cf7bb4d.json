{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\brisk\\\\OneDrive\\\\Documents\\\\GitHub\\\\seeciv\\\\my-app\\\\src\\\\App.js\";\nimport React, { useState } from \"react\";\nimport { addStyles, EditableMathField, StaticMathField } from \"react-mathquill\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\naddStyles();\nconsole.log('hi');\n\nclass Sheet extends React.Component {\n  // constructor has states with sheet info?\n  constructor(props) {\n    super(props);\n    this.state = {\n      SoEs: [{\n        name: \"SoE 1\",\n        eqns: [{\n          eqn: \"x+4=5\",\n          operation: \"solve\",\n          solvefor: \"x\",\n          result: \"\" // this would be computed: x=1\n\n        }, {\n          eqn: \"a+3=b\",\n          operation: \"substitute\",\n          substitutefor: {\n            b: \"x\"\n          },\n          result: \"\" // this would be computed: a+3=x\n\n        }]\n      }, {\n        name: \"SoE 2\",\n        eqns: [{\n          eqn: \"SoE 1\",\n          operation: \"solve\",\n          solvefor: \"a\",\n          result: \"cool result!\" // this would be computed: a=x-3=1-3=-2 (not sure how many steps to show)\n\n        }]\n      }]\n    };\n  }\n\n  inputEqnUpdate(i, j, eqnStruct) {\n    this.state.SoEs[i].eqns[j] = eqnStruct;\n  }\n\n  render() {\n    var sheetElements = [];\n\n    for (let i = 0; i < this.state.SoEs.length; i++) {\n      var SoE = this.state.SoEs[i]; //this.SoEs[i].name=newName\n\n      sheetElements.push( /*#__PURE__*/_jsxDEV(Name, {\n        onEdit: newName => {\n          // updating one part of SoEs state (likely better approach):\n          this.state.SoEs[i].name = newName;\n          this.setState({\n            SoEs: [...this.state.SoEs]\n          });\n        },\n        text: SoE\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 55,\n        columnNumber: 29\n      }, this));\n\n      for (let j = 0; j < SoE.eqns.length; j++) {\n        sheetElements.push( /*#__PURE__*/_jsxDEV(Line, {\n          onEdit: newEqn => {\n            this.state.SoEs[i].eqns[j].eqn = [newEqn, \"hey\"];\n            this.setState({\n              SoEs: [...this.state.SoEs]\n            });\n          },\n          eqnStruct: SoE.eqns[j]\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 70,\n          columnNumber: 32\n        }, this));\n      }\n    }\n\n    return sheetElements;\n  }\n\n}\n\nclass Name extends React.Component {\n  render() {\n    //const name=<tr><td></td></tr>\n    const editField = /*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"text\",\n      value: this.props.text.name,\n      onChange: e => {\n        this.props.onEdit(e.target.value);\n        console.log(e.target.value);\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 93,\n      columnNumber: 22\n    }, this);\n\n    return /*#__PURE__*/_jsxDEV(\"tr\", {\n      children: /*#__PURE__*/_jsxDEV(\"td\", {\n        children: editField\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 105,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 105,\n      columnNumber: 13\n    }, this);\n  }\n\n}\n\nclass Line extends React.Component {\n  render() {\n    const eqnStruct = this.props.eqnStruct;\n\n    const line = /*#__PURE__*/_jsxDEV(\"tr\", {\n      children: [/*#__PURE__*/_jsxDEV(\"td\", {\n        children: /*#__PURE__*/_jsxDEV(EditableMathField, {\n          latex: eqnStruct.eqn,\n          onChange: mathField => {\n            console.log(mathField);\n          } //this.props.onEdit(mathField)\n\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 114,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 113,\n        columnNumber: 10\n      }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n        children: eqnStruct.result\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 121,\n        columnNumber: 10\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 112,\n      columnNumber: 17\n    }, this);\n\n    return line;\n  }\n\n}\n\nexport default Sheet;","map":{"version":3,"sources":["C:/Users/brisk/OneDrive/Documents/GitHub/seeciv/my-app/src/App.js"],"names":["React","useState","addStyles","EditableMathField","StaticMathField","console","log","Sheet","Component","constructor","props","state","SoEs","name","eqns","eqn","operation","solvefor","result","substitutefor","b","inputEqnUpdate","i","j","eqnStruct","render","sheetElements","length","SoE","push","newName","setState","newEqn","Name","editField","text","e","onEdit","target","value","Line","line","mathField"],"mappings":"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","sourcesContent":["import React, { useState } from \"react\";\nimport { addStyles, EditableMathField, StaticMathField } from \"react-mathquill\";\naddStyles();\n\n\n\n console.log('hi')\nclass Sheet extends React.Component {\n  // constructor has states with sheet info?\n constructor(props){\n     super(props)\n     this.state= {\n         SoEs:[\n         {\n             name:\"SoE 1\",\n             eqns: [\n                 {\n                     eqn:\"x+4=5\",\n                     operation: \"solve\",\n                     solvefor: \"x\",\n                     result:\"\", // this would be computed: x=1\n                 },\n                 {\n                     eqn:\"a+3=b\",\n                     operation: \"substitute\",\n                     substitutefor: {b: \"x\"},\n                     result: \"\" // this would be computed: a+3=x\n                 }\n             ]\n         },\n         {\n             name:\"SoE 2\",\n             eqns: [\n                 {\n                     eqn:\"SoE 1\",\n                     operation: \"solve\",\n                     solvefor: \"a\",\n                     result: \"cool result!\", // this would be computed: a=x-3=1-3=-2 (not sure how many steps to show)\n                 },\n             ]\n         }\n     ]\n     }\n }\n\n\n inputEqnUpdate(i,j,eqnStruct){this.state.SoEs[i].eqns[j]=eqnStruct}\n\n render(){\n     var sheetElements=[]\n     for (let i=0;i<this.state.SoEs.length;i++){\n         var SoE=this.state.SoEs[i]\n         //this.SoEs[i].name=newName\n\n         sheetElements.push(<Name \n         \n             onEdit={(newName)=>\n                 {\n                    // updating one part of SoEs state (likely better approach):\n                    this.state.SoEs[i].name=newName\n                    this.setState({SoEs:[...this.state.SoEs]})\n                 }\n             } \n             text={SoE}\n         />)\n\n         \n\n         for (let j=0;j<SoE.eqns.length;j++){\n            sheetElements.push(<Line \n              onEdit={(newEqn)=>\n                {\n                  this.state.SoEs[i].eqns[j].eqn=[newEqn,\"hey\"]\n                  this.setState({SoEs:[...this.state.SoEs]})\n                }\n              }\n              eqnStruct={SoE.eqns[j]}\n              \n            />)\n\n         }\n     }\n     return(\n         sheetElements\n     )\n \n }\n}\n\nclass Name extends React.Component {\n render(){\n     //const name=<tr><td></td></tr>\n     const editField=<input \n         type=\"text\" \n         value={this.props.text.name} \n         onChange={(e)=>{this.props.onEdit( e.target.value)\n             console.log(e.target.value\n             )\n         }\n         \n     }\n     >\n     </input>\n\n     return <tr><td>{editField}</td></tr>\n } \n}\n\nclass Line extends React.Component { \n render() {\n     const eqnStruct=this.props.eqnStruct\n     const line=<tr>\n         <td>\n            <EditableMathField \n              latex={eqnStruct.eqn}\n              onChange={(mathField)=>{console.log(mathField)}}\n              //this.props.onEdit(mathField)\n            />\n             \n         </td>\n         <td>\n             {eqnStruct.result}\n         </td>\n     </tr>\n     return line\n }\n}\n\nexport default Sheet\n\n"]},"metadata":{},"sourceType":"module"}