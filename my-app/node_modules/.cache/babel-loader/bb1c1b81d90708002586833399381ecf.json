{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\brisk\\\\OneDrive\\\\Documents\\\\GitHub\\\\seeciv\\\\my-app\\\\src\\\\App.js\";\nimport React, { useState } from \"react\";\nimport { addStyles, EditableMathField, StaticMathField } from \"react-mathquill\";\nimport nerdamer from \"nerdamer\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\naddStyles();\n\nfunction solveEqns(eqnsIn, solveFor, inTermsOf) {\n  /* additioinal stuff:\n  parse equations (check for one equality, operations, and variables and that's it)\n  check if no contradiction in equations\n  check if infinite solutions (a==a shouldn't return 0)\n  check if solveVars are in equations\n  if solveFor is empty, just use solveEquations\n  deal with multiple solutions when substituting (like quadratics)\n    systems([\"x=4*a+b\",\"b=2*a\"],\"b\",[\"a\",\"x\"]) returns \"b=-4*a+x\" (ignores the next equation)\n  instead it should keep on going and throw error if there's ever too few variables\n  */\n  if (solveFor.length = 0) {\n    var sol = nerdamer.solveEquations(eqnsIn).toString();\n    var splitSol = sol.split(\",\");\n    var eqnSol = [];\n\n    for (let i = 0; i < splitSol / 2; i++) {\n      eqnSol.push(splitSol[i].concat(\"=\").splitSol[i + 1].concat(\",\"));\n    }\n\n    return eqnSol;\n  }\n\n  var eqns = [[]];\n\n  for (let i = 0; i < eqnsIn.length; i++) {\n    eqns[0][i] = nerdamer(eqnsIn[i]);\n  } //var solveFor=\"a\" // for now you must specify what to solve in terms of\n  //var inTermsOf=[\"b\"]\n\n\n  var solveVars = [solveFor, inTermsOf].flat(); // function will return the single equation which will then be solved for\n\n  var nEqns = eqns[0].length;\n\n  for (var i = 0; i < nEqns - 1; i++) {\n    var eqn = eqns[i][i];\n    var eqnVars = eqn.variables();\n    var subVars = excess(eqnVars, solveVars);\n\n    if (subVars === undefined) {\n      // this means there's no additional variables in the equation\n      if (excess(solveVars, eqnVars) === undefined) {\n        // solveVars and eqnVars are equivalent\n        console.log('solved early');\n        var solution = eqn;\n        break;\n      } else {\n        console.log(solveVars);\n        console.log(eqnVars);\n        console.log('error: too many variables to solve in terms of');\n        var solution = [];\n        break;\n      }\n    }\n\n    var subVar = subVars[0];\n    var solvedEqn = eqn.solveFor(subVar);\n    eqns[i + 1] = [];\n\n    for (var j = 0; j < nEqns - i - 1; j++) {\n      eqns[i + 1][i + 1 + j] = eqns[i][i + 1 + j].sub(subVar, solvedEqn);\n    }\n  }\n\n  if (solution === undefined) {\n    // solution hasn't already been found\n    console.log('solving in the end');\n    var finalEqn = eqns[nEqns - 1][nEqns - 1];\n    var solutionVars = finalEqn.variables();\n\n    if (excess(solveVars, solutionVars) !== undefined) {\n      console.log('error: end too many variables to solve in terms of');\n    } else if (excess(solutionVars, solveVars) !== undefined) {\n      console.log('error: end too few variables to solve in terms of');\n    } else {\n      var solution = finalEqn;\n      console.log('solved in the end');\n    }\n  }\n\n  console.log(solution.solveFor(solveFor).toString());\n\n  function excess(A, B) {\n    // if it's one variable, nerdamer doesn't use an array, so this puts it in an array:\n    if (typeof A === \"string\") {\n      A = [A];\n    }\n\n    if (typeof B === \"string\") {\n      B = [B];\n    }\n\n    return A.find(itemTestExtra => B.every(itemCompare => {\n      return itemTestExtra != itemCompare;\n    }));\n  }\n\n  return solveFor.concat(\"=\").concat(solution.solveFor(solveFor).toString());\n}\n\nfunction computeSheet(sheetData) {\n  // do a check for duplicate names\n  // for now system names must be in order ):\n  var newSheetData = sheetData;\n  var hitError = false;\n  var usedNames = [];\n\n  for (let i = 0; i < sheetData.length; i++) {\n    var SoE = sheetData[i];\n    var eqns = SoE.eqns;\n\n    for (let j = 0; j < eqns.length; j++) {\n      var eqn = eqns[j].eqn; // check if reference:\n\n      if (!eqn.includes(\"=\")) {\n        // check if a name on sheet:\n        if (!usedNames.includes(eqn)) {\n          var result = \"error: \".concat(eqn).concat(\" has not defined\");\n          var hitError = true;\n        } else if (usedNames.includes(eqn) && eqns[j].operation == \"solve\") {\n          var names = [];\n\n          for (let i = 0; i < sheetData.length; i++) {\n            names.push(sheetData[i].name);\n          }\n\n          var iRef = names.findIndex(name => name == eqn);\n          var system = [];\n\n          for (let i = 0; i < sheetData[iRef].eqns.length; i++) {\n            system.push(sheetData[iRef].eqns[i].result);\n          }\n\n          var result = solveEqns(system[iRef], [], []);\n        }\n      } else if (eqns[j].operation == \"solve\") {\n        var result = solveEqns(eqns[j], [], []);\n      } else {\n        var result = eqns[j];\n      }\n\n      newSheetData[i].eqns[j].result = result;\n\n      if (hitError) {\n        return newSheetData;\n      }\n\n      usedNames.push(SoE.name);\n    }\n  }\n\n  return newSheetData;\n}\n\nvar answer = computeSheet([{\n  name: \"SoE 1\",\n  eqns: [{\n    eqn: \"x+y=4\",\n    operation: \"\",\n    solvefor: \"x\",\n    result: \"\" // this would be computed: x=1\n\n  }, {\n    eqn: \"x=y\",\n    operation: \"substitute\",\n    substitutefor: {\n      b: \"x\"\n    },\n    result: \"\" // this would be computed: a+3=x\n\n  }]\n}, {\n  name: \"SoE 2\",\n  eqns: [{\n    eqn: \"SoE 1\",\n    operation: \"solve\",\n    solvefor: \"a\",\n    result: \"cool result!\" // this would be computed: a=x-3=1-3=-2 (not sure how many steps to show)\n\n  }]\n}]);\nconsole.log(answer);\n\nclass Sheet extends React.Component {\n  // constructor has states with sheet info?\n  constructor(props) {\n    super(props);\n    this.state = {\n      SoEs: [{\n        name: \"SoE 1\",\n        eqns: [{\n          eqn: \"x+4=5\",\n          operation: \"solve\",\n          solvefor: \"x\",\n          result: \"\" // this would be computed: x=1\n\n        }, {\n          eqn: \"a+3=b\",\n          operation: \"substitute\",\n          substitutefor: {\n            b: \"x\"\n          },\n          result: \"\" // this would be computed: a+3=x\n\n        }]\n      }, {\n        name: \"SoE 2\",\n        eqns: [{\n          eqn: \"SoE 1\",\n          operation: \"solve\",\n          solvefor: \"a\",\n          result: \"cool result!\" // this would be computed: a=x-3=1-3=-2 (not sure how many steps to show)\n\n        }]\n      }]\n    };\n  }\n\n  inputEqnUpdate(i, j, eqnStruct) {\n    this.state.SoEs[i].eqns[j] = eqnStruct;\n  }\n\n  updateSheet() {// no inputs\n    // access this.state.SoEs\n    // \n  }\n\n  render() {\n    var sheetElements = [];\n\n    for (let i = 0; i < this.state.SoEs.length; i++) {\n      var SoE = this.state.SoEs[i]; //this.SoEs[i].name=newName\n\n      sheetElements.push( /*#__PURE__*/_jsxDEV(Name, {\n        onEdit: newName => {\n          // updating one part of SoEs state (likely better approach):\n          this.state.SoEs[i].name = newName;\n          this.setState({\n            SoEs: [...this.state.SoEs]\n          });\n        },\n        text: SoE\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 250,\n        columnNumber: 29\n      }, this));\n\n      for (let j = 0; j < SoE.eqns.length; j++) {\n        sheetElements.push( /*#__PURE__*/_jsxDEV(Line, {\n          onEdit: newEqn => {\n            console.log(this.state.SoEs);\n            this.state.SoEs[i].eqns[j].eqn = newEqn;\n            this.setState({\n              SoEs: [...this.state.SoEs]\n            });\n          },\n          eqnStruct: SoE.eqns[j]\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 265,\n          columnNumber: 32\n        }, this));\n      }\n    }\n\n    return sheetElements;\n  }\n\n}\n\nclass Name extends React.Component {\n  render() {\n    //const name=<tr><td></td></tr>\n    const editField = /*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"text\",\n      value: this.props.text.name,\n      onChange: e => {\n        this.props.onEdit(e.target.value);\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 290,\n      columnNumber: 22\n    }, this);\n\n    return /*#__PURE__*/_jsxDEV(\"tr\", {\n      children: /*#__PURE__*/_jsxDEV(\"td\", {\n        children: editField\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 300,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 300,\n      columnNumber: 13\n    }, this);\n  }\n\n}\n\nclass Line extends React.Component {\n  render() {\n    const eqnStruct = this.props.eqnStruct;\n    console.log(eqnStruct.result);\n\n    const line = /*#__PURE__*/_jsxDEV(\"tr\", {\n      children: [/*#__PURE__*/_jsxDEV(\"td\", {\n        children: /*#__PURE__*/_jsxDEV(EditableMathField, {\n          latex: \"\",\n          onChange: mathField => {\n            this.props.onEdit(mathField.latex());\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 310,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 309,\n        columnNumber: 10\n      }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n        children: /*#__PURE__*/_jsxDEV(StaticMathField, {\n          children: \"\\\\text{\".concat(eqnStruct.result).concat(\"}\")\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 320,\n          columnNumber: 14\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 319,\n        columnNumber: 10\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 308,\n      columnNumber: 17\n    }, this);\n\n    return line;\n  }\n\n}\n\nexport default Sheet;","map":{"version":3,"sources":["C:/Users/brisk/OneDrive/Documents/GitHub/seeciv/my-app/src/App.js"],"names":["React","useState","addStyles","EditableMathField","StaticMathField","nerdamer","solveEqns","eqnsIn","solveFor","inTermsOf","length","sol","solveEquations","toString","splitSol","split","eqnSol","i","push","concat","eqns","solveVars","flat","nEqns","eqn","eqnVars","variables","subVars","excess","undefined","console","log","solution","subVar","solvedEqn","j","sub","finalEqn","solutionVars","A","B","find","itemTestExtra","every","itemCompare","computeSheet","sheetData","newSheetData","hitError","usedNames","SoE","includes","result","operation","names","name","iRef","findIndex","system","answer","solvefor","substitutefor","b","Sheet","Component","constructor","props","state","SoEs","inputEqnUpdate","eqnStruct","updateSheet","render","sheetElements","newName","setState","newEqn","Name","editField","text","e","onEdit","target","value","Line","line","mathField","latex"],"mappings":"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","sourcesContent":["import React, { useState } from \"react\";\nimport { addStyles, EditableMathField, StaticMathField } from \"react-mathquill\";\nimport nerdamer from \"nerdamer\"\naddStyles();\n\nfunction solveEqns(eqnsIn,solveFor,inTermsOf){\n  /* additioinal stuff:\n  parse equations (check for one equality, operations, and variables and that's it)\n  check if no contradiction in equations\n  check if infinite solutions (a==a shouldn't return 0)\n  check if solveVars are in equations\n  if solveFor is empty, just use solveEquations\n  deal with multiple solutions when substituting (like quadratics)\n\n\n  systems([\"x=4*a+b\",\"b=2*a\"],\"b\",[\"a\",\"x\"]) returns \"b=-4*a+x\" (ignores the next equation)\n  instead it should keep on going and throw error if there's ever too few variables\n  */\n\n  if (solveFor.length=0){\n    var sol=nerdamer.solveEquations(eqnsIn).toString()\n    var splitSol=sol.split(\",\")\n    var eqnSol=[]\n    for (let i=0;i<splitSol/2;i++){\n      eqnSol.push(splitSol[i].concat(\"=\").splitSol[i+1].concat(\",\"))\n    }\n    return eqnSol\n  }\n\n\n  \n  var eqns=[[]]\n  for (let i=0;i<eqnsIn.length;i++){\n      eqns[0][i]=nerdamer(eqnsIn[i])\n  }\n\n  //var solveFor=\"a\" // for now you must specify what to solve in terms of\n  //var inTermsOf=[\"b\"]\n  var solveVars=[solveFor,inTermsOf].flat()\n\n\n  // function will return the single equation which will then be solved for\n  var nEqns=eqns[0].length\n\n\n\n\n\n  for (var i=0;i<nEqns-1;i++){\n      var eqn=eqns[i][i]\n      var eqnVars=eqn.variables()\n\n\n\n\n      var subVars=excess(eqnVars,solveVars)\n      if (subVars===undefined){\n          // this means there's no additional variables in the equation\n          if (excess(solveVars,eqnVars)===undefined){\n              // solveVars and eqnVars are equivalent\n              console.log('solved early')\n              var solution=eqn\n              break\n          }else{\n              console.log(solveVars)\n              console.log(eqnVars)\n              console.log('error: too many variables to solve in terms of')\n              var solution=[]\n              break\n          }\n\n      }\n\n      var subVar=subVars[0]\n      var solvedEqn=eqn.solveFor(subVar)\n\n      eqns[i+1]=[]\n      for (var j=0;j<nEqns-i-1;j++){\n          eqns[i+1][i+1+j]=eqns[i][i+1+j].sub(subVar,solvedEqn)\n      } \n  \n  }\n\n  if (solution===undefined){  // solution hasn't already been found\n      console.log('solving in the end')\n      var finalEqn=eqns[nEqns-1][nEqns-1]\n      var solutionVars=finalEqn.variables()\n      if (excess(solveVars,solutionVars)!==undefined){\n          console.log('error: end too many variables to solve in terms of')\n      }else if (excess(solutionVars,solveVars)!==undefined){\n          console.log('error: end too few variables to solve in terms of')\n      }else{\n          var solution=finalEqn\n          console.log('solved in the end')\n      }\n\n  }\n\n  console.log(solution.solveFor(solveFor).toString())\n  \n\n  function excess(A,B){\n      // if it's one variable, nerdamer doesn't use an array, so this puts it in an array:\n      if (typeof(A)===\"string\"){A=[A]}\n      if (typeof(B)===\"string\"){B=[B]}\n  \n      return A.find(\n          itemTestExtra=>B.every(\n          (itemCompare)=>{return itemTestExtra!=itemCompare}\n          )\n      )\n  }\n\n\n  return solveFor.concat(\"=\").concat(solution.solveFor(solveFor).toString())\n}\n\nfunction computeSheet(sheetData){\n  // do a check for duplicate names\n\n  // for now system names must be in order ):\n\n  var newSheetData=sheetData\n  var hitError=false\n  var usedNames=[]\n  for (let i=0;i<sheetData.length;i++){\n    var SoE=sheetData[i]\n    var eqns=SoE.eqns\n    for (let j=0;j<eqns.length;j++){\n      var eqn=eqns[j].eqn\n\n      // check if reference:\n      if (!eqn.includes(\"=\")){\n        // check if a name on sheet:\n        if (!usedNames.includes(eqn)){\n            var result=(\"error: \").concat(eqn).concat(\" has not defined\")\n            var hitError=true\n        }else if (usedNames.includes(eqn) && eqns[j].operation==\"solve\"){\n\n            var names=[]\n            for (let i=0;i<sheetData.length;i++){names.push(sheetData[i].name)}\n            var iRef=names.findIndex((name)=>name==eqn)\n\n            var system=[]\n            for (let i=0;i<sheetData[iRef].eqns.length;i++){system.push(sheetData[iRef].eqns[i].result)}\n            var result=solveEqns(system[iRef],[],[])\n\n        }\n      }else if(eqns[j].operation==\"solve\"){\n        var result=solveEqns(eqns[j],[],[])\n      }else{\n        var result=eqns[j]\n      }\n      newSheetData[i].eqns[j].result=result\n      if (hitError){\n        return newSheetData\n      }\n      usedNames.push(SoE.name)\n    }\n  }\n\n  return newSheetData\n}\n\nvar answer=computeSheet([\n  {\n      name:\"SoE 1\",\n      eqns: [\n          {\n              eqn:\"x+y=4\",\n              operation: \"\",\n              solvefor: \"x\",\n              result:\"\", // this would be computed: x=1\n          },\n          {\n              eqn:\"x=y\",\n              operation: \"substitute\",\n              substitutefor: {b: \"x\"},\n              result: \"\" // this would be computed: a+3=x\n          }\n      ]\n  },\n  {\n      name:\"SoE 2\",\n      eqns: [\n          {\n              eqn:\"SoE 1\",\n              operation: \"solve\",\n              solvefor: \"a\",\n              result: \"cool result!\", // this would be computed: a=x-3=1-3=-2 (not sure how many steps to show)\n          },\n      ]\n  }\n])\nconsole.log(answer)\n\nclass Sheet extends React.Component {\n  // constructor has states with sheet info?\n constructor(props){\n     super(props)\n     this.state= {\n         SoEs:[\n         {\n             name:\"SoE 1\",\n             eqns: [\n                 {\n                     eqn:\"x+4=5\",\n                     operation: \"solve\",\n                     solvefor: \"x\",\n                     result:\"\", // this would be computed: x=1\n                 },\n                 {\n                     eqn:\"a+3=b\",\n                     operation: \"substitute\",\n                     substitutefor: {b: \"x\"},\n                     result: \"\" // this would be computed: a+3=x\n                 }\n             ]\n         },\n         {\n             name:\"SoE 2\",\n             eqns: [\n                 {\n                     eqn:\"SoE 1\",\n                     operation: \"solve\",\n                     solvefor: \"a\",\n                     result: \"cool result!\", // this would be computed: a=x-3=1-3=-2 (not sure how many steps to show)\n                 },\n             ]\n         }\n     ]\n     }\n }\n\n\n inputEqnUpdate(i,j,eqnStruct){this.state.SoEs[i].eqns[j]=eqnStruct}\n\n updateSheet(){\n   // no inputs\n   // access this.state.SoEs\n   // \n }\n\n render(){\n     var sheetElements=[]\n     for (let i=0;i<this.state.SoEs.length;i++){\n         var SoE=this.state.SoEs[i]\n         //this.SoEs[i].name=newName\n\n         sheetElements.push(<Name \n         \n             onEdit={(newName)=>\n                 {\n                    // updating one part of SoEs state (likely better approach):\n                    this.state.SoEs[i].name=newName\n                    this.setState({SoEs:[...this.state.SoEs]})\n                 }\n             } \n             text={SoE}\n         />)\n\n         \n\n         for (let j=0;j<SoE.eqns.length;j++){\n            sheetElements.push(<Line \n              onEdit={(newEqn)=>\n                {\n                  console.log(this.state.SoEs)\n                  this.state.SoEs[i].eqns[j].eqn=newEqn\n                  this.setState({SoEs:[...this.state.SoEs]})\n\n\n                }\n              }\n              eqnStruct={SoE.eqns[j]}\n              \n            />)\n         }\n     }\n     return(\n         sheetElements\n     )\n \n }\n}\n\nclass Name extends React.Component {\n render(){\n     //const name=<tr><td></td></tr>\n     const editField=<input \n         type=\"text\" \n         value={this.props.text.name} \n         onChange={(e)=>{this.props.onEdit(e.target.value)\n         }\n         \n     }\n     >\n     </input>\n\n     return <tr><td>{editField}</td></tr>\n } \n}\n\nclass Line extends React.Component { \n  render() {\n     const eqnStruct=this.props.eqnStruct\n     console.log(eqnStruct.result)\n     const line=<tr> \n         <td>\n            <EditableMathField \n              latex=\"\"  \n              onChange={(mathField)=>{this.props.onEdit(mathField.latex())\n              }       \n              }\n          \n            />\n\n         </td>\n         <td>\n             <StaticMathField>{\"\\\\text{\".concat(eqnStruct.result).concat(\"}\")}</StaticMathField>\n         </td>\n     </tr>\n\n\n      return line\n }\n}\n\nexport default Sheet\n\n"]},"metadata":{},"sourceType":"module"}